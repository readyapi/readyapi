{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadyAPI","text":"<p> ReadyAPI framework, alto rendimiento, f\u00e1cil de aprender, r\u00e1pido de programar, listo para producci\u00f3n </p> <p> </p> <p>Documentaci\u00f3n: https://readyapi.khulnasoft.com</p> <p>C\u00f3digo Fuente: https://github.com/readyapi/readyapi</p> <p>ReadyAPI es un framework web moderno, r\u00e1pido (de alto rendimiento), para construir APIs con Python basado en las anotaciones de tipos est\u00e1ndar de Python.</p> <p>Las caracter\u00edsticas clave son:</p> <ul> <li>R\u00e1pido: Muy alto rendimiento, a la par con NodeJS y Go (gracias a Starlette y Pydantic). Uno de los frameworks Python m\u00e1s r\u00e1pidos disponibles.</li> <li>R\u00e1pido de programar: Aumenta la velocidad para desarrollar funcionalidades en aproximadamente un 200% a 300%. *</li> <li>Menos bugs: Reduce en aproximadamente un 40% los errores inducidos por humanos (desarrolladores). *</li> <li>Intuitivo: Gran soporte para editores. Autocompletado en todas partes. Menos tiempo depurando.</li> <li>F\u00e1cil: Dise\u00f1ado para ser f\u00e1cil de usar y aprender. Menos tiempo leyendo documentaci\u00f3n.</li> <li>Corto: Minimiza la duplicaci\u00f3n de c\u00f3digo. M\u00faltiples funcionalidades desde cada declaraci\u00f3n de par\u00e1metro. Menos bugs.</li> <li>Robusto: Obt\u00e9n c\u00f3digo listo para producci\u00f3n. Con documentaci\u00f3n interactiva autom\u00e1tica.</li> <li>Basado en est\u00e1ndares: Basado (y completamente compatible) con los est\u00e1ndares abiertos para APIs: OpenAPI (anteriormente conocido como Swagger) y JSON Schema.</li> </ul> <p>* estimaci\u00f3n basada en pruebas con un equipo de desarrollo interno, construyendo aplicaciones de producci\u00f3n.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>Otros sponsors</p>"},{"location":"#opiniones","title":"Opiniones","text":"<p>\"[...] Estoy usando ReadyAPI un mont\u00f3n estos d\u00edas. [...] De hecho, estoy planeando usarlo para todos los servicios de ML de mi equipo en Microsoft. Algunos de ellos se est\u00e1n integrando en el n\u00facleo del producto Windows y algunos productos de Office.\"</p> Kabir Khan - Microsoft (ref) <p>\"Adoptamos el paquete ReadyAPI para crear un servidor REST que pueda ser consultado para obtener predicciones. [para Ludwig]\"</p> Piero Molino, Yaroslav Dudin, y Sai Sumanth Miryala - Uber (ref) <p>\"Netflix se complace en anunciar el lanzamiento de c\u00f3digo abierto de nuestro framework de orquestaci\u00f3n de gesti\u00f3n de crisis: Dispatch! [construido con ReadyAPI]\"</p> Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) <p>\"Estoy s\u00faper emocionado con ReadyAPI. \u00a1Es tan divertido!\"</p> Brian Okken - host del podcast Python Bytes (ref) <p>\"Honestamente, lo que has construido parece s\u00faper s\u00f3lido y pulido. En muchos aspectos, es lo que quer\u00eda que Hug fuera; es realmente inspirador ver a alguien construir eso.\"</p> Timothy Crosley - creador de Hug (ref) <p>\"Si est\u00e1s buscando aprender un framework moderno para construir APIs REST, \u00e9chale un vistazo a ReadyAPI [...] Es r\u00e1pido, f\u00e1cil de usar y f\u00e1cil de aprender [...]\"</p> <p>\"Nos hemos cambiado a ReadyAPI para nuestras APIs [...] Creo que te gustar\u00e1 [...]\"</p> Ines Montani - Matthew Honnibal - fundadores de Explosion AI - creadores de spaCy (ref) - (ref) <p>\"Si alguien est\u00e1 buscando construir una API de Python para producci\u00f3n, altamente recomendar\u00eda ReadyAPI. Est\u00e1 hermosamente dise\u00f1ado, es simple de usar y altamente escalable, se ha convertido en un componente clave en nuestra estrategia de desarrollo API primero y est\u00e1 impulsando muchas automatizaciones y servicios como nuestro Ingeniero Virtual TAC.\"</p> Deon Pillsbury - Cisco (ref)"},{"location":"#cligenius-el-readyapi-de-las-clis","title":"Cligenius, el ReadyAPI de las CLIs","text":"<p>Si est\u00e1s construyendo una aplicaci\u00f3n de CLI para ser usada en el terminal en lugar de una API web, revisa Cligenius.</p> <p>Cligenius es el hermano peque\u00f1o de ReadyAPI. Y est\u00e1 destinado a ser el ReadyAPI de las CLIs. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#requisitos","title":"Requisitos","text":"<p>ReadyAPI se apoya en hombros de gigantes:</p> <ul> <li>Starlette para las partes web.</li> <li>Pydantic para las partes de datos.</li> </ul>"},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>Crea y activa un entorno virtual y luego instala ReadyAPI:</p> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Nota: Aseg\u00farate de poner <code>\"readyapi[standard]\"</code> entre comillas para asegurar que funcione en todas las terminales.</p>"},{"location":"#ejemplo","title":"Ejemplo","text":""},{"location":"#crealo","title":"Cr\u00e9alo","text":"<ul> <li>Crea un archivo <code>main.py</code> con:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> O usa <code>async def</code>... <p>Si tu c\u00f3digo usa <code>async</code> / <code>await</code>, usa <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>Nota:</p> <p>Si no lo sabes, revisa la secci\u00f3n \"\u00bfCon prisa?\" sobre <code>async</code> y <code>await</code> en la documentaci\u00f3n.</p>"},{"location":"#correlo","title":"C\u00f3rrelo","text":"<p>Corre el servidor con:</p> <pre><code>$ readyapi dev main.py\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> Acerca del comando <code>readyapi dev main.py</code>... <p>El comando <code>readyapi dev</code> lee tu archivo <code>main.py</code>, detecta la app ReadyAPI en \u00e9l y arranca un servidor usando Uvicorn.</p> <p>Por defecto, <code>readyapi dev</code> comenzar\u00e1 con auto-recarga habilitada para el desarrollo local.</p> <p>Puedes leer m\u00e1s sobre esto en la documentaci\u00f3n del CLI de ReadyAPI.</p>"},{"location":"#revisalo","title":"Rev\u00edsalo","text":"<p>Abre tu navegador en http://127.0.0.1:8000/items/5?q=somequery.</p> <p>Ver\u00e1s el response JSON como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>Ya creaste una API que:</p> <ul> <li>Recibe requests HTTP en los paths <code>/</code> y <code>/items/{item_id}</code>.</li> <li>Ambos paths toman operaciones <code>GET</code> (tambi\u00e9n conocidas como m\u00e9todos HTTP).</li> <li>El path <code>/items/{item_id}</code> tiene un par\u00e1metro de path <code>item_id</code> que debe ser un <code>int</code>.</li> <li>El path <code>/items/{item_id}</code> tiene un par\u00e1metro de query <code>q</code> opcional que es un <code>str</code>.</li> </ul>"},{"location":"#documentacion-interactiva-de-la-api","title":"Documentaci\u00f3n interactiva de la API","text":"<p>Ahora ve a http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s la documentaci\u00f3n interactiva autom\u00e1tica de la API (proporcionada por Swagger UI):</p> <p></p>"},{"location":"#documentacion-de-api-alternativa","title":"Documentaci\u00f3n de API Alternativa","text":"<p>Y ahora, ve a http://127.0.0.1:8000/redoc.</p> <p>Ver\u00e1s la documentaci\u00f3n alternativa autom\u00e1tica (proporcionada por ReDoc):</p> <p></p>"},{"location":"#actualizacion-del-ejemplo","title":"Actualizaci\u00f3n del Ejemplo","text":"<p>Ahora modifica el archivo <code>main.py</code> para recibir un body desde un request <code>PUT</code>.</p> <p>Declara el body usando tipos est\u00e1ndar de Python, gracias a Pydantic.</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>El servidor <code>readyapi dev</code> deber\u00eda recargarse autom\u00e1ticamente.</p>"},{"location":"#actualizacion-de-la-documentacion-interactiva-de-la-api","title":"Actualizaci\u00f3n de la Documentaci\u00f3n Interactiva de la API","text":"<p>Ahora ve a http://127.0.0.1:8000/docs.</p> <ul> <li>La documentaci\u00f3n interactiva de la API se actualizar\u00e1 autom\u00e1ticamente, incluyendo el nuevo body:</li> </ul> <p></p> <ul> <li>Haz clic en el bot\u00f3n \"Try it out\", te permite llenar los par\u00e1metros e interactuar directamente con la API:</li> </ul> <p></p> <ul> <li>Luego haz clic en el bot\u00f3n \"Execute\", la interfaz de usuario se comunicar\u00e1 con tu API, enviar\u00e1 los par\u00e1metros, obtendr\u00e1 los resultados y los mostrar\u00e1 en la pantalla:</li> </ul> <p></p>"},{"location":"#actualizacion-de-la-documentacion-alternativa-de-la-api","title":"Actualizaci\u00f3n de la Documentaci\u00f3n Alternativa de la API","text":"<p>Y ahora, ve a http://127.0.0.1:8000/redoc.</p> <ul> <li>La documentaci\u00f3n alternativa tambi\u00e9n reflejar\u00e1 el nuevo par\u00e1metro de query y body:</li> </ul> <p></p>"},{"location":"#resumen","title":"Resumen","text":"<p>En resumen, declaras una vez los tipos de par\u00e1metros, body, etc. como par\u00e1metros de funci\u00f3n.</p> <p>Lo haces con tipos est\u00e1ndar modernos de Python.</p> <p>No tienes que aprender una nueva sintaxis, los m\u00e9todos o clases de un paquete espec\u00edfico, etc.</p> <p>Solo Python est\u00e1ndar.</p> <p>Por ejemplo, para un <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>o para un modelo <code>Item</code> m\u00e1s complejo:</p> <pre><code>item: Item\n</code></pre> <p>...y con esa \u00fanica declaraci\u00f3n obtienes:</p> <ul> <li>Soporte para editores, incluyendo:<ul> <li>Autocompletado.</li> <li>Chequeo de tipos.</li> </ul> </li> <li>Validaci\u00f3n de datos:<ul> <li>Errores autom\u00e1ticos y claros cuando los datos son inv\u00e1lidos.</li> <li>Validaci\u00f3n incluso para objetos JSON profundamente anidados.</li> </ul> </li> <li>Conversi\u00f3n de datos de entrada: de la red a los datos y tipos de Python. Leyendo desde:<ul> <li>JSON.</li> <li>Par\u00e1metros de path.</li> <li>Par\u00e1metros de query.</li> <li>Cookies.</li> <li>Headers.</li> <li>Forms.</li> <li>Archivos.</li> </ul> </li> <li>Conversi\u00f3n de datos de salida: convirtiendo de datos y tipos de Python a datos de red (como JSON):<ul> <li>Convertir tipos de Python (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, etc).</li> <li>Objetos <code>datetime</code>.</li> <li>Objetos <code>UUID</code>.</li> <li>Modelos de base de datos.</li> <li>...y muchos m\u00e1s.</li> </ul> </li> <li>Documentaci\u00f3n interactiva autom\u00e1tica de la API, incluyendo 2 interfaces de usuario alternativas:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Volviendo al ejemplo de c\u00f3digo anterior, ReadyAPI:</p> <ul> <li>Validar\u00e1 que haya un <code>item_id</code> en el path para requests <code>GET</code> y <code>PUT</code>.</li> <li>Validar\u00e1 que el <code>item_id</code> sea del tipo <code>int</code> para requests <code>GET</code> y <code>PUT</code>.<ul> <li>Si no lo es, el cliente ver\u00e1 un error \u00fatil y claro.</li> </ul> </li> <li>Comprobar\u00e1 si hay un par\u00e1metro de query opcional llamado <code>q</code> (como en <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) para requests <code>GET</code>.<ul> <li>Como el par\u00e1metro <code>q</code> est\u00e1 declarado con <code>= None</code>, es opcional.</li> <li>Sin el <code>None</code> ser\u00eda requerido (como lo es el body en el caso con <code>PUT</code>).</li> </ul> </li> <li>Para requests <code>PUT</code> a <code>/items/{item_id}</code>, leer\u00e1 el body como JSON:<ul> <li>Comprobar\u00e1 que tiene un atributo requerido <code>name</code> que debe ser un <code>str</code>.</li> <li>Comprobar\u00e1 que tiene un atributo requerido <code>price</code> que debe ser un <code>float</code>.</li> <li>Comprobar\u00e1 que tiene un atributo opcional <code>is_offer</code>, que debe ser un <code>bool</code>, si est\u00e1 presente.</li> <li>Todo esto tambi\u00e9n funcionar\u00eda para objetos JSON profundamente anidados.</li> </ul> </li> <li>Convertir\u00e1 de y a JSON autom\u00e1ticamente.</li> <li>Documentar\u00e1 todo con OpenAPI, que puede ser usado por:<ul> <li>Sistemas de documentaci\u00f3n interactiva.</li> <li>Sistemas de generaci\u00f3n autom\u00e1tica de c\u00f3digo cliente, para muchos lenguajes.</li> </ul> </li> <li>Proporcionar\u00e1 2 interfaces web de documentaci\u00f3n interactiva directamente.</li> </ul> <p>Solo tocamos los conceptos b\u00e1sicos, pero ya te haces una idea de c\u00f3mo funciona todo.</p> <p>Intenta cambiar la l\u00ednea con:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...desde:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...a:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...y observa c\u00f3mo tu editor autocompleta los atributos y conoce sus tipos:</p> <p></p> <p>Para un ejemplo m\u00e1s completo incluyendo m\u00e1s funcionalidades, ve al Tutorial - Gu\u00eda del Usuario.</p> <p>Alerta de spoilers: el tutorial - gu\u00eda del usuario incluye:</p> <ul> <li>Declaraci\u00f3n de par\u00e1metros desde otros lugares diferentes como: headers, cookies, campos de formulario y archivos.</li> <li>C\u00f3mo establecer restricciones de validaci\u00f3n como <code>maximum_length</code> o <code>regex</code>.</li> <li>Un sistema de Inyecci\u00f3n de Dependencias muy poderoso y f\u00e1cil de usar.</li> <li>Seguridad y autenticaci\u00f3n, incluyendo soporte para OAuth2 con tokens JWT y autenticaci\u00f3n HTTP Basic.</li> <li>T\u00e9cnicas m\u00e1s avanzadas (pero igualmente f\u00e1ciles) para declarar modelos JSON profundamente anidados (gracias a Pydantic).</li> <li>Integraci\u00f3n con GraphQL usando Strawberry y otros paquetes.</li> <li>Muchas funcionalidades extra (gracias a Starlette) como:<ul> <li>WebSockets</li> <li>pruebas extremadamente f\u00e1ciles basadas en HTTPX y <code>pytest</code></li> <li>CORS</li> <li>Sesiones de Cookies</li> <li>...y m\u00e1s.</li> </ul> </li> </ul>"},{"location":"#rendimiento","title":"Rendimiento","text":"<p>Benchmarks independientes de TechEmpower muestran aplicaciones ReadyAPI ejecut\u00e1ndose bajo Uvicorn como uno de los frameworks Python m\u00e1s r\u00e1pidos disponibles, solo por debajo de Starlette y Uvicorn (usados internamente por ReadyAPI). (*)</p> <p>Para entender m\u00e1s sobre esto, ve la secci\u00f3n Benchmarks.</p>"},{"location":"#dependencias","title":"Dependencias","text":"<p>ReadyAPI depende de Pydantic y Starlette.</p>"},{"location":"#dependencias-standard","title":"Dependencias <code>standard</code>","text":"<p>Cuando instalas ReadyAPI con <code>pip install \"readyapi[standard]\"</code> viene con el grupo <code>standard</code> de dependencias opcionales:</p> <p>Usadas por Pydantic:</p> <ul> <li><code>email-validator</code> - para validaci\u00f3n de correos electr\u00f3nicos.</li> </ul> <p>Usadas por Starlette:</p> <ul> <li><code>httpx</code> - Requerido si deseas usar el <code>TestClient</code>.</li> <li><code>jinja2</code> - Requerido si deseas usar la configuraci\u00f3n de plantilla predeterminada.</li> <li><code>python-multipart</code> - Requerido si deseas soportar \"parsing\" de forms, con <code>request.form()</code>.</li> </ul> <p>Usadas por ReadyAPI / Starlette:</p> <ul> <li><code>uvicorn</code> - para el servidor que carga y sirve tu aplicaci\u00f3n. Esto incluye <code>uvicorn[standard]</code>, que incluye algunas dependencias (por ejemplo, <code>uvloop</code>) necesarias para servir con alto rendimiento.</li> <li><code>readyapi-cli</code> - para proporcionar el comando <code>readyapi</code>.</li> </ul>"},{"location":"#sin-dependencias-standard","title":"Sin Dependencias <code>standard</code>","text":"<p>Si no deseas incluir las dependencias opcionales <code>standard</code>, puedes instalar con <code>pip install readyapi</code> en lugar de <code>pip install \"readyapi[standard]\"</code>.</p>"},{"location":"#dependencias-opcionales-adicionales","title":"Dependencias Opcionales Adicionales","text":"<p>Existen algunas dependencias adicionales que podr\u00edas querer instalar.</p> <p>Dependencias opcionales adicionales de Pydantic:</p> <ul> <li><code>pydantic-settings</code> - para la gesti\u00f3n de configuraciones.</li> <li><code>pydantic-extra-types</code> - para tipos extra para ser usados con Pydantic.</li> </ul> <p>Dependencias opcionales adicionales de ReadyAPI:</p> <ul> <li><code>orjson</code> - Requerido si deseas usar <code>ORJSONResponse</code>.</li> <li><code>ujson</code> - Requerido si deseas usar <code>UJSONResponse</code>.</li> </ul>"},{"location":"#licencia","title":"Licencia","text":"<p>Este proyecto tiene licencia bajo los t\u00e9rminos de la licencia MIT.</p>"},{"location":"alternatives/","title":"Alternativas, Inspiraci\u00f3n y Comparaciones","text":"<p>Lo que inspir\u00f3 a ReadyAPI, c\u00f3mo se compara con las alternativas y lo que aprendi\u00f3 de ellas.</p>"},{"location":"alternatives/#introduccion","title":"Introducci\u00f3n","text":"<p>ReadyAPI no existir\u00eda si no fuera por el trabajo previo de otros.</p> <p>Se han creado muchas herramientas antes que han ayudado a inspirar su creaci\u00f3n.</p> <p>He estado evitando la creaci\u00f3n de un nuevo framework durante varios a\u00f1os. Primero intent\u00e9 resolver todas las funcionalidades cubiertas por ReadyAPI usando muchos frameworks diferentes, plug-ins y herramientas.</p> <p>Pero en alg\u00fan punto, no hubo otra opci\u00f3n que crear algo que proporcionara todas estas funcionalidades, tomando las mejores ideas de herramientas previas y combin\u00e1ndolas de la mejor manera posible, usando funcionalidades del lenguaje que ni siquiera estaban disponibles antes (anotaciones de tipos de Python 3.6+).</p>"},{"location":"alternatives/#herramientas-previas","title":"Herramientas previas","text":""},{"location":"alternatives/#django","title":"Django","text":"<p>Es el framework m\u00e1s popular de Python y es ampliamente confiable. Se utiliza para construir sistemas como Instagram.</p> <p>Est\u00e1 relativamente acoplado con bases de datos relacionales (como MySQL o PostgreSQL), por lo que tener una base de datos NoSQL (como Couchbase, MongoDB, Cassandra, etc) como motor de almacenamiento principal no es muy f\u00e1cil.</p> <p>Fue creado para generar el HTML en el backend, no para crear APIs utilizadas por un frontend moderno (como React, Vue.js y Angular) o por otros sistemas (como dispositivos del IoT) comunic\u00e1ndose con \u00e9l.</p>"},{"location":"alternatives/#django-rest-framework","title":"Django REST Framework","text":"<p>El framework Django REST fue creado para ser un kit de herramientas flexible para construir APIs Web utilizando Django, mejorando sus capacidades API.</p> <p>Es utilizado por muchas empresas, incluidas Mozilla, Red Hat y Eventbrite.</p> <p>Fue uno de los primeros ejemplos de documentaci\u00f3n autom\u00e1tica de APIs, y esto fue espec\u00edficamente una de las primeras ideas que inspiraron \"la b\u00fasqueda de\" ReadyAPI.</p> <p>Nota</p> <p>Django REST Framework fue creado por Tom Christie. El mismo creador de Starlette y Uvicorn, en los cuales ReadyAPI est\u00e1 basado.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Tener una interfaz de usuario web de documentaci\u00f3n autom\u00e1tica de APIs.</p>"},{"location":"alternatives/#flask","title":"Flask","text":"<p>Flask es un \"microframework\", no incluye integraciones de bases de datos ni muchas de las cosas que vienen por defecto en Django.</p> <p>Esta simplicidad y flexibilidad permiten hacer cosas como usar bases de datos NoSQL como el sistema de almacenamiento de datos principal.</p> <p>Como es muy simple, es relativamente intuitivo de aprender, aunque la documentaci\u00f3n se vuelve algo t\u00e9cnica en algunos puntos.</p> <p>Tambi\u00e9n se utiliza com\u00fanmente para otras aplicaciones que no necesariamente necesitan una base de datos, gesti\u00f3n de usuarios, o cualquiera de las muchas funcionalidades que vienen preconstruidas en Django. Aunque muchas de estas funcionalidades se pueden a\u00f1adir con plug-ins.</p> <p>Esta separaci\u00f3n de partes, y ser un \"microframework\" que podr\u00eda extenderse para cubrir exactamente lo que se necesita, fue una funcionalidad clave que quise mantener.</p> <p>Dada la simplicidad de Flask, parec\u00eda una buena opci\u00f3n para construir APIs. Lo siguiente a encontrar era un \"Django REST Framework\" para Flask.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Ser un micro-framework. Haciendo f\u00e1cil mezclar y combinar las herramientas y partes necesarias.</p> <p>Tener un sistema de routing simple y f\u00e1cil de usar.</p>"},{"location":"alternatives/#requests","title":"Requests","text":"<p>ReadyAPI no es en realidad una alternativa a Requests. Su \u00e1mbito es muy diferente.</p> <p>De hecho, ser\u00eda com\u00fan usar Requests dentro de una aplicaci\u00f3n ReadyAPI.</p> <p>Aun as\u00ed, ReadyAPI se inspir\u00f3 bastante en Requests.</p> <p>Requests es un paquete para interactuar con APIs (como cliente), mientras que ReadyAPI es un paquete para construir APIs (como servidor).</p> <p>Est\u00e1n, m\u00e1s o menos, en extremos opuestos, complement\u00e1ndose entre s\u00ed.</p> <p>Requests tiene un dise\u00f1o muy simple e intuitivo, es muy f\u00e1cil de usar, con valores predeterminados sensatos. Pero al mismo tiempo, es muy poderoso y personalizable.</p> <p>Por eso, como se dice en el sitio web oficial:</p> <p>Requests es uno de los paquetes Python m\u00e1s descargados de todos los tiempos</p> <p>La forma en que lo usas es muy sencilla. Por ejemplo, para hacer un <code>GET</code> request, escribir\u00edas:</p> <pre><code>response = requests.get(\"http://example.com/some/url\")\n</code></pre> <p>La operaci\u00f3n de path equivalente en ReadyAPI podr\u00eda verse como:</p> <pre><code>@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Mira las similitudes entre <code>requests.get(...)</code> y <code>@app.get(...)</code>.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <ul> <li>Tener un API simple e intuitivo.</li> <li>Usar nombres de m\u00e9todos HTTP (operaciones) directamente, de una manera sencilla e intuitiva.</li> <li>Tener valores predeterminados sensatos, pero personalizaciones poderosas.</li> </ul>"},{"location":"alternatives/#swagger-openapi","title":"Swagger / OpenAPI","text":"<p>La principal funcionalidad que quer\u00eda de Django REST Framework era la documentaci\u00f3n autom\u00e1tica de la API.</p> <p>Luego descubr\u00ed que hab\u00eda un est\u00e1ndar para documentar APIs, usando JSON (o YAML, una extensi\u00f3n de JSON) llamado Swagger.</p> <p>Y ya exist\u00eda una interfaz de usuario web para las APIs Swagger. Por lo tanto, ser capaz de generar documentaci\u00f3n Swagger para una API permitir\u00eda usar esta interfaz de usuario web autom\u00e1ticamente.</p> <p>En alg\u00fan punto, Swagger fue entregado a la Linux Foundation, para ser renombrado OpenAPI.</p> <p>Es por eso que cuando se habla de la versi\u00f3n 2.0 es com\u00fan decir \"Swagger\", y para la versi\u00f3n 3+ \"OpenAPI\".</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Adoptar y usar un est\u00e1ndar abierto para especificaciones de API, en lugar de usar un esquema personalizado.</p> <p>Y a integrar herramientas de interfaz de usuario basadas en est\u00e1ndares:</p> <ul> <li>Swagger UI</li> <li>ReDoc</li> </ul> <p>Estas dos fueron elegidas por ser bastante populares y estables, pero haciendo una b\u00fasqueda r\u00e1pida, podr\u00edas encontrar docenas de interfaces de usuario alternativas para OpenAPI (que puedes usar con ReadyAPI).</p>"},{"location":"alternatives/#frameworks-rest-para-flask","title":"Frameworks REST para Flask","text":"<p>Existen varios frameworks REST para Flask, pero despu\u00e9s de invertir tiempo y trabajo investig\u00e1ndolos, encontr\u00e9 que muchos son descontinuados o abandonados, con varios problemas existentes que los hac\u00edan inadecuados.</p>"},{"location":"alternatives/#marshmallow","title":"Marshmallow","text":"<p>Una de las principales funcionalidades necesitadas por los sistemas API es la \"serializaci\u00f3n\" de datos, que consiste en tomar datos del c\u00f3digo (Python) y convertirlos en algo que pueda ser enviado a trav\u00e9s de la red. Por ejemplo, convertir un objeto que contiene datos de una base de datos en un objeto JSON. Convertir objetos <code>datetime</code> en strings, etc.</p> <p>Otra gran funcionalidad necesaria por las APIs es la validaci\u00f3n de datos, asegurarse de que los datos sean v\u00e1lidos, dados ciertos par\u00e1metros. Por ejemplo, que alg\u00fan campo sea un <code>int</code>, y no alg\u00fan string aleatorio. Esto es especialmente \u00fatil para los datos entrantes.</p> <p>Sin un sistema de validaci\u00f3n de datos, tendr\u00edas que hacer todas las comprobaciones a mano, en c\u00f3digo.</p> <p>Estas funcionalidades son para lo que fue creado Marshmallow. Es un gran paquete, y lo he usado mucho antes.</p> <p>Pero fue creado antes de que existieran las anotaciones de tipos en Python. As\u00ed que, para definir cada esquema necesitas usar utilidades y clases espec\u00edficas proporcionadas por Marshmallow.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Usar c\u00f3digo para definir \"esquemas\" que proporcionen tipos de datos y validaci\u00f3n autom\u00e1ticamente.</p>"},{"location":"alternatives/#webargs","title":"Webargs","text":"<p>Otra gran funcionalidad requerida por las APIs es el parse de datos de las requests entrantes.</p> <p>Webargs es una herramienta que fue creada para proporcionar esa funcionalidad sobre varios frameworks, incluido Flask.</p> <p>Usa Marshmallow por debajo para hacer la validaci\u00f3n de datos. Y fue creada por los mismos desarrolladores.</p> <p>Es una gran herramienta y la he usado mucho tambi\u00e9n, antes de tener ReadyAPI.</p> <p>Informaci\u00f3n</p> <p>Webargs fue creada por los mismos desarrolladores de Marshmallow.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Tener validaci\u00f3n autom\u00e1tica de datos entrantes en una request.</p>"},{"location":"alternatives/#apispec","title":"APISpec","text":"<p>Marshmallow y Webargs proporcionan validaci\u00f3n, parse y serializaci\u00f3n como plug-ins.</p> <p>Pero la documentaci\u00f3n todav\u00eda falta. Entonces APISpec fue creado.</p> <p>Es un plug-in para muchos frameworks (y hay un plug-in para Starlette tambi\u00e9n).</p> <p>La manera en que funciona es que escribes la definici\u00f3n del esquema usando el formato YAML dentro del docstring de cada funci\u00f3n que maneja una ruta.</p> <p>Y genera esquemas OpenAPI.</p> <p>As\u00ed es como funciona en Flask, Starlette, Responder, etc.</p> <p>Pero luego, tenemos otra vez el problema de tener una micro-sintaxis, dentro de un string de Python (un gran YAML).</p> <p>El editor no puede ayudar mucho con eso. Y si modificamos par\u00e1metros o esquemas de Marshmallow y olvidamos tambi\u00e9n modificar ese docstring YAML, el esquema generado estar\u00eda obsoleto.</p> <p>Informaci\u00f3n</p> <p>APISpec fue creado por los mismos desarrolladores de Marshmallow.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Soportar el est\u00e1ndar abierto para APIs, OpenAPI.</p>"},{"location":"alternatives/#flask-apispec","title":"Flask-apispec","text":"<p>Es un plug-in de Flask, que conecta juntos Webargs, Marshmallow y APISpec.</p> <p>Usa la informaci\u00f3n de Webargs y Marshmallow para generar autom\u00e1ticamente esquemas OpenAPI, usando APISpec.</p> <p>Es una gran herramienta, muy subestimada. Deber\u00eda ser mucho m\u00e1s popular que muchos plug-ins de Flask por ah\u00ed. Puede que se deba a que su documentaci\u00f3n es demasiado concisa y abstracta.</p> <p>Esto resolvi\u00f3 tener que escribir YAML (otra sintaxis) dentro de docstrings de Python.</p> <p>Esta combinaci\u00f3n de Flask, Flask-apispec con Marshmallow y Webargs fue mi stack de backend favorito hasta construir ReadyAPI.</p> <p>Usarlo llev\u00f3 a la creaci\u00f3n de varios generadores de full-stack para Flask. Estos son los principales stacks que yo (y varios equipos externos) hemos estado usando hasta ahora:</p> <ul> <li>https://github.com/khulnasoft/full-stack</li> <li>https://github.com/khulnasoft/full-stack-flask-couchbase</li> <li>https://github.com/khulnasoft/full-stack-flask-couchdb</li> </ul> <p>Y estos mismos generadores de full-stack fueron la base de los Generadores de Proyectos ReadyAPI.</p> <p>Informaci\u00f3n</p> <p>Flask-apispec fue creado por los mismos desarrolladores de Marshmallow.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Generar el esquema OpenAPI autom\u00e1ticamente, desde el mismo c\u00f3digo que define la serializaci\u00f3n y validaci\u00f3n.</p>"},{"location":"alternatives/#nestjs-y-angular","title":"NestJS (y Angular)","text":"<p>Esto ni siquiera es Python, NestJS es un framework de JavaScript (TypeScript) NodeJS inspirado por Angular.</p> <p>Logra algo algo similar a lo que se puede hacer con Flask-apispec.</p> <p>Tiene un sistema de inyecci\u00f3n de dependencias integrado, inspirado por Angular 2. Requiere pre-registrar los \"inyectables\" (como todos los otros sistemas de inyecci\u00f3n de dependencias que conozco), por lo que a\u00f1ade a la verbosidad y repetici\u00f3n de c\u00f3digo.</p> <p>Como los par\u00e1metros se describen con tipos de TypeScript (similar a las anotaciones de tipos en Python), el soporte editorial es bastante bueno.</p> <p>Pero como los datos de TypeScript no se preservan despu\u00e9s de la compilaci\u00f3n a JavaScript, no puede depender de los tipos para definir validaci\u00f3n, serializaci\u00f3n y documentaci\u00f3n al mismo tiempo. Debido a esto y algunas decisiones de dise\u00f1o, para obtener validaci\u00f3n, serializaci\u00f3n y generaci\u00f3n autom\u00e1tica del esquema, es necesario agregar decoradores en muchos lugares. Por lo tanto, se vuelve bastante verboso.</p> <p>No puede manejar muy bien modelos anidados. Entonces, si el cuerpo JSON en la request es un objeto JSON que tiene campos internos que a su vez son objetos JSON anidados, no puede ser documentado y validado apropiadamente.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Usar tipos de Python para tener un gran soporte del editor.</p> <p>Tener un poderoso sistema de inyecci\u00f3n de dependencias. Encontrar una forma de minimizar la repetici\u00f3n de c\u00f3digo.</p>"},{"location":"alternatives/#sanic","title":"Sanic","text":"<p>Fue uno de los primeros frameworks de Python extremadamente r\u00e1pidos basados en <code>asyncio</code>. Fue hecho para ser muy similar a Flask.</p> <p>Detalles T\u00e9cnicos</p> <p>Us\u00f3 <code>uvloop</code> en lugar del loop <code>asyncio</code> por defecto de Python. Eso fue lo que lo hizo tan r\u00e1pido.</p> <p>Claramente inspir\u00f3 a Uvicorn y Starlette, que actualmente son m\u00e1s r\u00e1pidos que Sanic en benchmarks abiertos.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Encontrar una manera de tener un rendimiento impresionante.</p> <p>Por eso ReadyAPI se basa en Starlette, ya que es el framework m\u00e1s r\u00e1pido disponible (probado por benchmarks de terceros).</p>"},{"location":"alternatives/#falcon","title":"Falcon","text":"<p>Falcon es otro framework de Python de alto rendimiento, est\u00e1 dise\u00f1ado para ser minimalista y funcionar como la base de otros frameworks como Hug.</p> <p>Est\u00e1 dise\u00f1ado para tener funciones que reciben dos par\u00e1metros, un \"request\" y un \"response\". Luego \"lees\" partes del request y \"escribes\" partes en el response. Debido a este dise\u00f1o, no es posible declarar par\u00e1metros de request y cuerpos con las anotaciones de tipos est\u00e1ndar de Python como par\u00e1metros de funci\u00f3n.</p> <p>Por lo tanto, la validaci\u00f3n de datos, la serializaci\u00f3n y la documentaci\u00f3n, tienen que hacerse en c\u00f3digo, no autom\u00e1ticamente. O tienen que implementarse como un framework sobre Falcon, como Hug. Esta misma distinci\u00f3n ocurre en otros frameworks que se inspiran en el dise\u00f1o de Falcon, de tener un objeto request y un objeto response como par\u00e1metros.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Buscar maneras de obtener un gran rendimiento.</p> <p>Junto con Hug (ya que Hug se basa en Falcon), inspiraron a ReadyAPI a declarar un par\u00e1metro <code>response</code> en las funciones.</p> <p>Aunque en ReadyAPI es opcional, y se utiliza principalmente para configurar headers, cookies y c\u00f3digos de estado alternativos.</p>"},{"location":"alternatives/#molten","title":"Molten","text":"<p>Descubr\u00ed Molten en las primeras etapas de construcci\u00f3n de ReadyAPI. Y tiene ideas bastante similares:</p> <ul> <li>Basado en las anotaciones de tipos de Python.</li> <li>Validaci\u00f3n y documentaci\u00f3n a partir de estos tipos.</li> <li>Sistema de Inyecci\u00f3n de Dependencias.</li> </ul> <p>No utiliza un paquete de validaci\u00f3n de datos, serializaci\u00f3n y documentaci\u00f3n de terceros como Pydantic, tiene el suyo propio. Por lo tanto, estas definiciones de tipos de datos no ser\u00edan reutilizables tan f\u00e1cilmente.</p> <p>Requiere configuraciones un poquito m\u00e1s verbosas. Y dado que se basa en WSGI (en lugar de ASGI), no est\u00e1 dise\u00f1ado para aprovechar el alto rendimiento proporcionado por herramientas como Uvicorn, Starlette y Sanic.</p> <p>El sistema de inyecci\u00f3n de dependencias requiere pre-registrar las dependencias y las dependencias se resuelven en base a los tipos declarados. Por lo tanto, no es posible declarar m\u00e1s de un \"componente\" que proporcione cierto tipo.</p> <p>Las rutas se declaran en un solo lugar, usando funciones declaradas en otros lugares (en lugar de usar decoradores que pueden colocarse justo encima de la funci\u00f3n que maneja el endpoint). Esto se acerca m\u00e1s a c\u00f3mo lo hace Django que a c\u00f3mo lo hace Flask (y Starlette). Separa en el c\u00f3digo cosas que est\u00e1n relativamente acopladas.</p> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Definir validaciones extra para tipos de datos usando el valor \"default\" de los atributos del modelo. Esto mejora el soporte del editor y no estaba disponible en Pydantic antes.</p> <p>Esto en realidad inspir\u00f3 la actualizaci\u00f3n de partes de Pydantic, para soportar el mismo estilo de declaraci\u00f3n de validaci\u00f3n (toda esta funcionalidad ya est\u00e1 disponible en Pydantic).</p>"},{"location":"alternatives/#hug","title":"Hug","text":"<p>Hug fue uno de los primeros frameworks en implementar la declaraci\u00f3n de tipos de par\u00e1metros API usando las anotaciones de tipos de Python. Esta fue una gran idea que inspir\u00f3 a otras herramientas a hacer lo mismo.</p> <p>Usaba tipos personalizados en sus declaraciones en lugar de tipos est\u00e1ndar de Python, pero a\u00fan as\u00ed fue un gran avance.</p> <p>Tambi\u00e9n fue uno de los primeros frameworks en generar un esquema personalizado declarando toda la API en JSON.</p> <p>No se basaba en un est\u00e1ndar como OpenAPI y JSON Schema. Por lo que no ser\u00eda sencillo integrarlo con otras herramientas, como Swagger UI. Pero, nuevamente, fue una idea muy innovadora.</p> <p>Tiene una funcionalidad interesante e inusual: usando el mismo framework, es posible crear APIs y tambi\u00e9n CLIs.</p> <p>Dado que se basa en el est\u00e1ndar previo para frameworks web Python sincr\u00f3nicos (WSGI), no puede manejar Websockets y otras cosas, aunque a\u00fan as\u00ed tiene un alto rendimiento tambi\u00e9n.</p> <p>Informaci\u00f3n</p> <p>Hug fue creado por Timothy Crosley, el mismo creador de <code>isort</code>, una gran herramienta para ordenar autom\u00e1ticamente imports en archivos Python.</p> <p>Ideas que inspiraron a ReadyAPI</p> <p>Hug inspir\u00f3 partes de APIStar, y fue una de las herramientas que encontr\u00e9 m\u00e1s prometedoras, junto a APIStar.</p> <p>Hug ayud\u00f3 a inspirar a ReadyAPI a usar anotaciones de tipos de Python para declarar par\u00e1metros, y a generar un esquema definiendo la API autom\u00e1ticamente.</p> <p>Hug inspir\u00f3 a ReadyAPI a declarar un par\u00e1metro <code>response</code> en funciones para configurar headers y cookies.</p>"},{"location":"alternatives/#apistar-05","title":"APIStar (&lt;= 0.5)","text":"<p>Justo antes de decidir construir ReadyAPI encontr\u00e9 APIStar server. Ten\u00eda casi todo lo que estaba buscando y ten\u00eda un gran dise\u00f1o.</p> <p>Era una de las primeras implementaciones de un framework utilizando las anotaciones de tipos de Python para declarar par\u00e1metros y requests que jam\u00e1s vi (antes de NestJS y Molten). Lo encontr\u00e9 m\u00e1s o menos al mismo tiempo que Hug. Pero APIStar usaba el est\u00e1ndar OpenAPI.</p> <p>Ten\u00eda validaci\u00f3n de datos autom\u00e1tica, serializaci\u00f3n de datos y generaci\u00f3n del esquema OpenAPI basada en las mismas anotaciones de tipos en varios lugares.</p> <p>Las definiciones de esquema de cuerpo no usaban las mismas anotaciones de tipos de Python como Pydantic, era un poco m\u00e1s similar a Marshmallow, por lo que el soporte del editor no ser\u00eda tan bueno, pero a\u00fan as\u00ed, APIStar era la mejor opci\u00f3n disponible.</p> <p>Ten\u00eda los mejores benchmarks de rendimiento en ese momento (solo superado por Starlette).</p> <p>Al principio, no ten\u00eda una interfaz de usuario web de documentaci\u00f3n de API autom\u00e1tica, pero sab\u00eda que pod\u00eda agregar Swagger UI a \u00e9l.</p> <p>Ten\u00eda un sistema de inyecci\u00f3n de dependencias. Requer\u00eda pre-registrar componentes, como otras herramientas discutidas anteriormente. Pero a\u00fan as\u00ed, era una gran funcionalidad.</p> <p>Nunca pude usarlo en un proyecto completo, ya que no ten\u00eda integraci\u00f3n de seguridad, por lo que no pod\u00eda reemplazar todas las funcionalidades que ten\u00eda con los generadores de full-stack basados en Flask-apispec. Ten\u00eda en mi lista de tareas pendientes de proyectos crear un pull request agregando esa funcionalidad.</p> <p>Pero luego, el enfoque del proyecto cambi\u00f3.</p> <p>Ya no era un framework web API, ya que el creador necesitaba enfocarse en Starlette.</p> <p>Ahora APIStar es un conjunto de herramientas para validar especificaciones OpenAPI, no un framework web.</p> <p>Informaci\u00f3n</p> <p>APIStar fue creado por Tom Christie. El mismo que cre\u00f3:</p> <ul> <li>Django REST Framework</li> <li>Starlette (en la cual ReadyAPI est\u00e1 basado)</li> <li>Uvicorn (usado por Starlette y ReadyAPI)</li> </ul> <p>Inspir\u00f3 a ReadyAPI a</p> <p>Existir.</p> <p>La idea de declarar m\u00faltiples cosas (validaci\u00f3n de datos, serializaci\u00f3n y documentaci\u00f3n) con los mismos tipos de Python, que al mismo tiempo proporcionaban un gran soporte del editor, era algo que consider\u00e9 una idea brillante.</p> <p>Y despu\u00e9s de buscar durante mucho tiempo un framework similar y probar muchas alternativas diferentes, APIStar fue la mejor opci\u00f3n disponible.</p> <p>Luego APIStar dej\u00f3 de existir como servidor y Starlette fue creado, y fue una nueva y mejor base para tal sistema. Esa fue la inspiraci\u00f3n final para construir ReadyAPI.</p> <p>Considero a ReadyAPI un \"sucesor espiritual\" de APIStar, mientras mejora y aumenta las funcionalidades, el sistema de tipos y otras partes, bas\u00e1ndose en los aprendizajes de todas estas herramientas previas.</p>"},{"location":"alternatives/#usado-por-readyapi","title":"Usado por ReadyAPI","text":""},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic es un paquete para definir validaci\u00f3n de datos, serializaci\u00f3n y documentaci\u00f3n (usando JSON Schema) bas\u00e1ndose en las anotaciones de tipos de Python.</p> <p>Eso lo hace extremadamente intuitivo.</p> <p>Es comparable a Marshmallow. Aunque es m\u00e1s r\u00e1pido que Marshmallow en benchmarks. Y como est\u00e1 basado en las mismas anotaciones de tipos de Python, el soporte del editor es estupendo.</p> <p>ReadyAPI lo usa para</p> <p>Manejar toda la validaci\u00f3n de datos, serializaci\u00f3n de datos y documentaci\u00f3n autom\u00e1tica de modelos (basada en JSON Schema).</p> <p>ReadyAPI luego toma esos datos JSON Schema y los coloca en OpenAPI, aparte de todas las otras cosas que hace.</p>"},{"location":"alternatives/#starlette","title":"Starlette","text":"<p>Starlette es un framework/toolkit ASGI liviano, ideal para construir servicios asyncio de alto rendimiento.</p> <p>Es muy simple e intuitivo. Est\u00e1 dise\u00f1ado para ser f\u00e1cilmente extensible y tener componentes modulares.</p> <p>Tiene:</p> <ul> <li>Un rendimiento seriamente impresionante.</li> <li>Soporte para WebSocket.</li> <li>Tareas en segundo plano dentro del proceso.</li> <li>Eventos de inicio y apagado.</li> <li>Cliente de pruebas basado en HTTPX.</li> <li>CORS, GZip, Archivos est\u00e1ticos, Responses en streaming.</li> <li>Soporte para sesiones y cookies.</li> <li>Cobertura de tests del 100%.</li> <li>Base de c\u00f3digo 100% tipada.</li> <li>Pocas dependencias obligatorias.</li> </ul> <p>Starlette es actualmente el framework de Python m\u00e1s r\u00e1pido probado. Solo superado por Uvicorn, que no es un framework, sino un servidor.</p> <p>Starlette proporciona toda la funcionalidad b\u00e1sica de un microframework web.</p> <p>Pero no proporciona validaci\u00f3n de datos autom\u00e1tica, serializaci\u00f3n o documentaci\u00f3n.</p> <p>Esa es una de las principales cosas que ReadyAPI agrega, todo basado en las anotaciones de tipos de Python (usando Pydantic). Eso, adem\u00e1s del sistema de inyecci\u00f3n de dependencias, utilidades de seguridad, generaci\u00f3n de esquemas OpenAPI, etc.</p> <p>Detalles T\u00e9cnicos</p> <p>ASGI es un nuevo \"est\u00e1ndar\" que est\u00e1 siendo desarrollado por miembros del equipo central de Django. Todav\u00eda no es un \"est\u00e1ndar de Python\" (un PEP), aunque est\u00e1n en proceso de hacerlo.</p> <p>No obstante, ya est\u00e1 siendo usado como un \"est\u00e1ndar\" por varias herramientas. Esto mejora enormemente la interoperabilidad, ya que podr\u00edas cambiar Uvicorn por cualquier otro servidor ASGI (como Daphne o Hypercorn), o podr\u00edas a\u00f1adir herramientas compatibles con ASGI, como <code>python-socketio</code>.</p> <p>ReadyAPI lo usa para</p> <p>Manejar todas las partes web centrales. A\u00f1adiendo funcionalidades encima.</p> <p>La clase <code>ReadyAPI</code> en s\u00ed misma hereda directamente de la clase <code>Starlette</code>.</p> <p>Por lo tanto, cualquier cosa que puedas hacer con Starlette, puedes hacerlo directamente con ReadyAPI, ya que es b\u00e1sicamente Starlette potenciado.</p>"},{"location":"alternatives/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn es un servidor ASGI extremadamente r\u00e1pido, construido sobre uvloop y httptools.</p> <p>No es un framework web, sino un servidor. Por ejemplo, no proporciona herramientas para el enrutamiento por paths. Eso es algo que un framework como Starlette (o ReadyAPI) proporcionar\u00eda encima.</p> <p>Es el servidor recomendado para Starlette y ReadyAPI.</p> <p>ReadyAPI lo recomienda como</p> <p>El servidor web principal para ejecutar aplicaciones ReadyAPI.</p> <p>Tambi\u00e9n puedes usar la opci\u00f3n de l\u00ednea de comandos <code>--workers</code> para tener un servidor multiproceso as\u00edncrono.</p> <p>Revisa m\u00e1s detalles en la secci\u00f3n Despliegue.</p>"},{"location":"alternatives/#benchmarks-y-velocidad","title":"Benchmarks y velocidad","text":"<p>Para entender, comparar, y ver la diferencia entre Uvicorn, Starlette y ReadyAPI, revisa la secci\u00f3n sobre Benchmarks.</p>"},{"location":"async/","title":"Concurrencia y async / await","text":"<p>Detalles sobre la sintaxis <code>async def</code> para path operation functions y algunos antecedentes sobre el c\u00f3digo as\u00edncrono, la concurrencia y el paralelismo.</p>"},{"location":"async/#con-prisa","title":"\u00bfCon prisa?","text":"<p>TL;DR:</p> <p>Si est\u00e1s usando paquetes de terceros que te dicen que los llames con <code>await</code>, como:</p> <pre><code>results = await some_library()\n</code></pre> <p>Entonces, declara tus path operation functions con <code>async def</code> as\u00ed:</p> <pre><code>@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n</code></pre> <p>Nota</p> <p>Solo puedes usar <code>await</code> dentro de funciones creadas con <code>async def</code>.</p> <p>Si est\u00e1s usando un paquete de terceros que se comunica con algo (una base de datos, una API, el sistema de archivos, etc.) y no tiene soporte para usar <code>await</code> (este es actualmente el caso para la mayor\u00eda de los paquetes de base de datos), entonces declara tus path operation functions como normalmente, usando simplemente <code>def</code>, as\u00ed:</p> <pre><code>@app.get('/')\ndef results():\n    results = some_library()\n    return results\n</code></pre> <p>Si tu aplicaci\u00f3n (de alguna manera) no tiene que comunicarse con nada m\u00e1s y esperar a que responda, usa <code>async def</code>.</p> <p>Si simplemente no lo sabes, usa <code>def</code> normal.</p> <p>Nota: Puedes mezclar <code>def</code> y <code>async def</code> en tus path operation functions tanto como necesites y definir cada una utilizando la mejor opci\u00f3n para ti. ReadyAPI har\u00e1 lo correcto con ellas.</p> <p>De todos modos, en cualquiera de los casos anteriores, ReadyAPI seguir\u00e1 funcionando de forma as\u00edncrona y ser\u00e1 extremadamente r\u00e1pido.</p> <p>Pero al seguir los pasos anteriores, podr\u00e1 hacer algunas optimizaciones de rendimiento.</p>"},{"location":"async/#detalles-tecnicos","title":"Detalles T\u00e9cnicos","text":"<p>Las versiones modernas de Python tienen soporte para \"c\u00f3digo as\u00edncrono\" utilizando algo llamado \"coroutines\", con la sintaxis <code>async</code> y <code>await</code>.</p> <p>Veamos esa frase por partes en las secciones a continuaci\u00f3n:</p> <ul> <li>C\u00f3digo As\u00edncrono</li> <li><code>async</code> y <code>await</code></li> <li>Coroutines</li> </ul>"},{"location":"async/#codigo-asincrono","title":"C\u00f3digo As\u00edncrono","text":"<p>El c\u00f3digo as\u00edncrono simplemente significa que el lenguaje \ud83d\udcac tiene una forma de decirle a la computadora / programa \ud83e\udd16 que en alg\u00fan momento del c\u00f3digo, tendr\u00e1 que esperar que otra cosa termine en otro lugar. Digamos que esa otra cosa se llama \"archivo-lento\" \ud83d\udcdd.</p> <p>Entonces, durante ese tiempo, la computadora puede ir y hacer alg\u00fan otro trabajo, mientras \"archivo-lento\" \ud83d\udcdd termina.</p> <p>Luego la computadora / programa \ud83e\udd16 volver\u00e1 cada vez que tenga una oportunidad porque est\u00e1 esperando nuevamente, o siempre que \ud83e\udd16 haya terminado todo el trabajo que ten\u00eda en ese punto. Y \ud83e\udd16 comprobar\u00e1 si alguna de las tareas que estaba esperando ya se han completado, haciendo lo que ten\u00eda que hacer.</p> <p>Despu\u00e9s, \ud83e\udd16 toma la primera tarea que termine (digamos, nuestro \"archivo-lento\" \ud83d\udcdd) y contin\u00faa con lo que ten\u00eda que hacer con ella.</p> <p>Ese \"esperar otra cosa\" normalmente se refiere a las operaciones de I/O que son relativamente \"lentas\" (comparadas con la velocidad del procesador y la memoria RAM), como esperar:</p> <ul> <li>que los datos del cliente se env\u00eden a trav\u00e9s de la red</li> <li>que los datos enviados por tu programa sean recibidos por el cliente a trav\u00e9s de la red</li> <li>que el contenido de un archivo en el disco sea le\u00eddo por el sistema y entregado a tu programa</li> <li>que el contenido que tu programa entreg\u00f3 al sistema sea escrito en el disco</li> <li>una operaci\u00f3n de API remota</li> <li>que una operaci\u00f3n de base de datos termine</li> <li>que una query de base de datos devuelva los resultados</li> <li>etc.</li> </ul> <p>Como el tiempo de ejecuci\u00f3n se consume principalmente esperando operaciones de I/O, las llaman operaciones \"I/O bound\".</p> <p>Se llama \"as\u00edncrono\" porque la computadora / programa no tiene que estar \"sincronizado\" con la tarea lenta, esperando el momento exacto en que la tarea termine, sin hacer nada, para poder tomar el resultado de la tarea y continuar el trabajo.</p> <p>En lugar de eso, al ser un sistema \"as\u00edncrono\", una vez terminado, la tarea puede esperar un poco en la cola (algunos microsegundos) para que la computadora / programa termine lo que sali\u00f3 a hacer, y luego regrese para tomar los resultados y continuar trabajando con ellos.</p> <p>Para el \"sincr\u00f3nico\" (contrario al \"as\u00edncrono\") com\u00fanmente tambi\u00e9n usan el t\u00e9rmino \"secuencial\", porque la computadora / programa sigue todos los pasos en secuencia antes de cambiar a una tarea diferente, incluso si esos pasos implican esperar.</p>"},{"location":"async/#concurrencia-y-hamburguesas","title":"Concurrencia y Hamburguesas","text":"<p>Esta idea de c\u00f3digo as\u00edncrono descrita anteriormente a veces tambi\u00e9n se llama \"concurrencia\". Es diferente del \"paralelismo\".</p> <p>Concurrencia y paralelismo ambos se relacionan con \"diferentes cosas sucediendo m\u00e1s o menos al mismo tiempo\".</p> <p>Pero los detalles entre concurrencia y paralelismo son bastante diferentes.</p> <p>Para ver la diferencia, imagina la siguiente historia sobre hamburguesas:</p>"},{"location":"async/#hamburguesas-concurrentes","title":"Hamburguesas Concurrentes","text":"<p>Vas con tu crush a conseguir comida r\u00e1pida, te pones en fila mientras el cajero toma los pedidos de las personas frente a ti. \ud83d\ude0d</p> <p></p> <p>Luego es tu turno, haces tu pedido de 2 hamburguesas muy sofisticadas para tu crush y para ti. \ud83c\udf54\ud83c\udf54</p> <p></p> <p>El cajero dice algo al cocinero en la cocina para que sepan que tienen que preparar tus hamburguesas (aunque actualmente est\u00e1n preparando las de los clientes anteriores).</p> <p></p> <p>Pagas. \ud83d\udcb8</p> <p>El cajero te da el n\u00famero de tu turno.</p> <p></p> <p>Mientras esperas, vas con tu crush y eliges una mesa, te sientas y hablas con tu crush por un largo rato (ya que tus hamburguesas son muy sofisticadas y toman un tiempo en prepararse).</p> <p>Mientras est\u00e1s sentado en la mesa con tu crush, mientras esperas las hamburguesas, puedes pasar ese tiempo admirando lo incre\u00edble, lindo e inteligente que es tu crush \u2728\ud83d\ude0d\u2728.</p> <p></p> <p>Mientras esperas y hablas con tu crush, de vez en cuando revisas el n\u00famero mostrado en el mostrador para ver si ya es tu turno.</p> <p>Luego, en alg\u00fan momento, finalmente es tu turno. Vas al mostrador, obtienes tus hamburguesas y vuelves a la mesa.</p> <p></p> <p>T\u00fa y tu crush comen las hamburguesas y pasan un buen rato. \u2728</p> <p></p> <p>Informaci\u00f3n</p> <p>Hermosas ilustraciones de Ketrina Thompson. \ud83c\udfa8</p> <p>Imagina que eres la computadora / programa \ud83e\udd16 en esa historia.</p> <p>Mientras est\u00e1s en la fila, est\u00e1s inactivo \ud83d\ude34, esperando tu turno, sin hacer nada muy \"productivo\". Pero la fila es r\u00e1pida porque el cajero solo est\u00e1 tomando los pedidos (no prepar\u00e1ndolos), as\u00ed que est\u00e1 bien.</p> <p>Luego, cuando es tu turno, haces un trabajo realmente \"productivo\", procesas el men\u00fa, decides lo que quieres, obtienes la elecci\u00f3n de tu crush, pagas, verificas que das el billete o tarjeta correctos, verificas que te cobren correctamente, verificas que el pedido tenga los art\u00edculos correctos, etc.</p> <p>Pero luego, aunque todav\u00eda no tienes tus hamburguesas, tu trabajo con el cajero est\u00e1 \"en pausa\" \u23f8, porque tienes que esperar \ud83d\udd59 a que tus hamburguesas est\u00e9n listas.</p> <p>Pero como te alejas del mostrador y te sientas en la mesa con un n\u00famero para tu turno, puedes cambiar \ud83d\udd00 tu atenci\u00f3n a tu crush, y \"trabajar\" \u23ef \ud83e\udd13 en eso. Luego, nuevamente est\u00e1s haciendo algo muy \"productivo\" como es coquetear con tu crush \ud83d\ude0d.</p> <p>Luego el cajero \ud83d\udc81 dice \"he terminado de hacer las hamburguesas\" al poner tu n\u00famero en el mostrador, pero no saltas como loco inmediatamente cuando el n\u00famero mostrado cambia a tu n\u00famero de turno. Sabes que nadie robar\u00e1 tus hamburguesas porque tienes el n\u00famero de tu turno, y ellos tienen el suyo.</p> <p>As\u00ed que esperas a que tu crush termine la historia (termine el trabajo \u23ef / tarea actual que se est\u00e1 procesando \ud83e\udd13), sonr\u00edes amablemente y dices que vas por las hamburguesas \u23f8.</p> <p>Luego vas al mostrador \ud83d\udd00, a la tarea inicial que ahora est\u00e1 terminada \u23ef, recoges las hamburguesas, das las gracias y las llevas a la mesa. Eso termina ese paso / tarea de interacci\u00f3n con el mostrador \u23f9. Eso a su vez, crea una nueva tarea, de \"comer hamburguesas\" \ud83d\udd00 \u23ef, pero la anterior de \"obtener hamburguesas\" ha terminado \u23f9.</p>"},{"location":"async/#hamburguesas-paralelas","title":"Hamburguesas Paralelas","text":"<p>Ahora imaginemos que estas no son \"Hamburguesas Concurrentes\", sino \"Hamburguesas Paralelas\".</p> <p>Vas con tu crush a obtener comida r\u00e1pida paralela.</p> <p>Te pones en fila mientras varios (digamos 8) cajeros que al mismo tiempo son cocineros toman los pedidos de las personas frente a ti.</p> <p>Todos antes que t\u00fa est\u00e1n esperando a que sus hamburguesas est\u00e9n listas antes de dejar el mostrador porque cada uno de los 8 cajeros va y prepara la hamburguesa de inmediato antes de obtener el siguiente pedido.</p> <p></p> <p>Luego, finalmente es tu turno, haces tu pedido de 2 hamburguesas muy sofisticadas para tu crush y para ti.</p> <p>Pagas \ud83d\udcb8.</p> <p></p> <p>El cajero va a la cocina.</p> <p>Esperas, de pie frente al mostrador \ud83d\udd59, para que nadie m\u00e1s tome tus hamburguesas antes que t\u00fa, ya que no hay n\u00fameros para los turnos.</p> <p></p> <p>Como t\u00fa y tu crush est\u00e1n ocupados no dejando que nadie se interponga y tome tus hamburguesas cuando lleguen, no puedes prestar atenci\u00f3n a tu crush. \ud83d\ude1e</p> <p>Este es un trabajo \"sincr\u00f3nico\", est\u00e1s \"sincronizado\" con el cajero/cocinero \ud83d\udc68\u200d\ud83c\udf73. Tienes que esperar \ud83d\udd59 y estar all\u00ed en el momento exacto en que el cajero/cocinero \ud83d\udc68\u200d\ud83c\udf73 termine las hamburguesas y te las entregue, o de lo contrario, alguien m\u00e1s podr\u00eda tomarlas.</p> <p></p> <p>Luego tu cajero/cocinero \ud83d\udc68\u200d\ud83c\udf73 finalmente regresa con tus hamburguesas, despu\u00e9s de mucho tiempo esperando \ud83d\udd59 all\u00ed frente al mostrador.</p> <p></p> <p>Tomas tus hamburguesas y vas a la mesa con tu crush.</p> <p>Simplemente las comes, y has terminado. \u23f9</p> <p></p> <p>No hubo mucho hablar o coquetear ya que la mayor parte del tiempo se dedic\u00f3 a esperar \ud83d\udd59 frente al mostrador. \ud83d\ude1e</p> <p>Informaci\u00f3n</p> <p>Hermosas ilustraciones de Ketrina Thompson. \ud83c\udfa8</p> <p>En este escenario de las hamburguesas paralelas, eres una computadora / programa \ud83e\udd16 con dos procesadores (t\u00fa y tu crush), ambos esperando \ud83d\udd59 y dedicando su atenci\u00f3n \u23ef a estar \"esperando en el mostrador\" \ud83d\udd59 por mucho tiempo.</p> <p>La tienda de comida r\u00e1pida tiene 8 procesadores (cajeros/cocineros). Mientras que la tienda de hamburguesas concurrentes podr\u00eda haber tenido solo 2 (un cajero y un cocinero).</p> <p>Pero a\u00fan as\u00ed, la experiencia final no es la mejor. \ud83d\ude1e</p> <p>Esta ser\u00eda la historia equivalente de las hamburguesas paralelas. \ud83c\udf54</p> <p>Para un ejemplo m\u00e1s \"de la vida real\" de esto, imagina un banco.</p> <p>Hasta hace poco, la mayor\u00eda de los bancos ten\u00edan m\u00faltiples cajeros \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc y una gran fila \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59.</p> <p>Todos los cajeros haciendo todo el trabajo con un cliente tras otro \ud83d\udc68\u200d\ud83d\udcbc\u23ef.</p> <p>Y tienes que esperar \ud83d\udd59 en la fila por mucho tiempo o pierdes tu turno.</p> <p>Probablemente no querr\u00edas llevar a tu crush \ud83d\ude0d contigo a hacer tr\u00e1mites en el banco \ud83c\udfe6.</p>"},{"location":"async/#conclusion-de-las-hamburguesas","title":"Conclusi\u00f3n de las Hamburguesas","text":"<p>En este escenario de \"hamburguesas de comida r\u00e1pida con tu crush\", como hay mucha espera \ud83d\udd59, tiene mucho m\u00e1s sentido tener un sistema concurrente \u23f8\ud83d\udd00\u23ef.</p> <p>Este es el caso para la mayor\u00eda de las aplicaciones web.</p> <p>Muchos, muchos usuarios, pero tu servidor est\u00e1 esperando \ud83d\udd59 su conexi\u00f3n no tan buena para enviar sus requests.</p> <p>Y luego esperar \ud83d\udd59 nuevamente a que los responses retornen.</p> <p>Esta \"espera\" \ud83d\udd59 se mide en microsegundos, pero a\u00fan as\u00ed, sum\u00e1ndolo todo, es mucha espera al final.</p> <p>Por eso tiene mucho sentido usar c\u00f3digo as\u00edncrono \u23f8\ud83d\udd00\u23ef para las APIs web.</p> <p>Este tipo de asincron\u00eda es lo que hizo popular a NodeJS (aunque NodeJS no es paralelo) y esa es la fortaleza de Go como lenguaje de programaci\u00f3n.</p> <p>Y ese es el mismo nivel de rendimiento que obtienes con ReadyAPI.</p> <p>Y como puedes tener paralelismo y asincron\u00eda al mismo tiempo, obtienes un mayor rendimiento que la mayor\u00eda de los frameworks de NodeJS probados y a la par con Go, que es un lenguaje compilado m\u00e1s cercano a C (todo gracias a Starlette).</p>"},{"location":"async/#es-la-concurrencia-mejor-que-el-paralelismo","title":"\u00bfEs la concurrencia mejor que el paralelismo?","text":"<p>\u00a1No! Esa no es la moraleja de la historia.</p> <p>La concurrencia es diferente del paralelismo. Y es mejor en escenarios espec\u00edficos que implican mucha espera. Debido a eso, generalmente es mucho mejor que el paralelismo para el desarrollo de aplicaciones web. Pero no para todo.</p> <p>As\u00ed que, para equilibrar eso, imagina la siguiente historia corta:</p> <p>Tienes que limpiar una casa grande y sucia.</p> <p>S\u00ed, esa es toda la historia.</p> <p>No hay esperas \ud83d\udd59 en ninguna parte, solo mucho trabajo por hacer, en m\u00faltiples lugares de la casa.</p> <p>Podr\u00edas tener turnos como en el ejemplo de las hamburguesas, primero la sala de estar, luego la cocina, pero como no est\u00e1s esperando \ud83d\udd59 nada, solo limpiando y limpiando, los turnos no afectar\u00edan nada.</p> <p>Tomar\u00eda la misma cantidad de tiempo terminar con o sin turnos (concurrencia) y habr\u00edas hecho la misma cantidad de trabajo.</p> <p>Pero en este caso, si pudieras traer a los 8 ex-cajeros/cocineros/ahora-limpiadores, y cada uno de ellos (m\u00e1s t\u00fa) pudiera tomar una zona de la casa para limpiarla, podr\u00edas hacer todo el trabajo en paralelo, con la ayuda extra, y terminar mucho antes.</p> <p>En este escenario, cada uno de los limpiadores (incluy\u00e9ndote) ser\u00eda un procesador, haciendo su parte del trabajo.</p> <p>Y como la mayor parte del tiempo de ejecuci\u00f3n se dedica al trabajo real (en lugar de esperar), y el trabajo en una computadora lo realiza una CPU, llaman a estos problemas \"CPU bound\".</p> <p>Ejemplos comunes de operaciones limitadas por la CPU son cosas que requieren procesamiento matem\u00e1tico complejo.</p> <p>Por ejemplo:</p> <ul> <li>Procesamiento de audio o im\u00e1genes.</li> <li>Visi\u00f3n por computadora: una imagen est\u00e1 compuesta de millones de p\u00edxeles, cada p\u00edxel tiene 3 valores / colores, procesar eso normalmente requiere calcular algo en esos p\u00edxeles, todos al mismo tiempo.</li> <li>Machine Learning: normalmente requiere muchas multiplicaciones de \"matrices\" y \"vectores\". Piensa en una enorme hoja de c\u00e1lculo con n\u00fameros y multiplicando todos juntos al mismo tiempo.</li> <li>Deep Learning: este es un subcampo de Machine Learning, por lo tanto, se aplica lo mismo. Es solo que no hay una sola hoja de c\u00e1lculo de n\u00fameros para multiplicar, sino un enorme conjunto de ellas, y en muchos casos, usas un procesador especial para construir y / o usar esos modelos.</li> </ul>"},{"location":"async/#concurrencia-paralelismo-web-machine-learning","title":"Concurrencia + Paralelismo: Web + Machine Learning","text":"<p>Con ReadyAPI puedes aprovechar la concurrencia que es muy com\u00fan para el desarrollo web (la misma atracci\u00f3n principal de NodeJS).</p> <p>Pero tambi\u00e9n puedes explotar los beneficios del paralelismo y la multiprocesamiento (tener m\u00faltiples procesos ejecut\u00e1ndose en paralelo) para cargas de trabajo CPU bound como las de los sistemas de Machine Learning.</p> <p>Eso, m\u00e1s el simple hecho de que Python es el lenguaje principal para Data Science, Machine Learning y especialmente Deep Learning, hacen de ReadyAPI una muy buena opci\u00f3n para APIs web de Data Science / Machine Learning y aplicaciones (entre muchas otras).</p> <p>Para ver c\u00f3mo lograr este paralelismo en producci\u00f3n, consulta la secci\u00f3n sobre Deployment.</p>"},{"location":"async/#async-y-await","title":"<code>async</code> y <code>await</code>","text":"<p>Las versiones modernas de Python tienen una forma muy intuitiva de definir c\u00f3digo as\u00edncrono. Esto hace que se vea igual que el c\u00f3digo \"secuencial\" normal y hace el \"wait\" por ti en los momentos adecuados.</p> <p>Cuando hay una operaci\u00f3n que requerir\u00e1 esperar antes de dar los resultados y tiene soporte para estas nuevas funcionalidades de Python, puedes programarlo as\u00ed:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>La clave aqu\u00ed es el <code>await</code>. Dice a Python que tiene que esperar \u23f8 a que <code>get_burgers(2)</code> termine de hacer su cosa \ud83d\udd59 antes de almacenar los resultados en <code>burgers</code>. Con eso, Python sabr\u00e1 que puede ir y hacer algo m\u00e1s \ud83d\udd00 \u23ef mientras tanto (como recibir otro request).</p> <p>Para que <code>await</code> funcione, tiene que estar dentro de una funci\u00f3n que soporte esta asincron\u00eda. Para hacer eso, solo declara la funci\u00f3n con <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n    # Hacer algunas cosas as\u00edncronas para crear las hamburguesas\n    return burgers\n</code></pre> <p>...en lugar de <code>def</code>:</p> <pre><code># Esto no es as\u00edncrono\ndef get_sequential_burgers(number: int):\n    # Hacer algunas cosas secuenciales para crear las hamburguesas\n    return burgers\n</code></pre> <p>Con <code>async def</code>, Python sabe que, dentro de esa funci\u00f3n, tiene que estar atento a las expresiones <code>await</code>, y que puede \"pausar\" \u23f8 la ejecuci\u00f3n de esa funci\u00f3n e ir a hacer algo m\u00e1s \ud83d\udd00 antes de regresar.</p> <p>Cuando deseas llamar a una funci\u00f3n <code>async def</code>, tienes que \"await\" dicha funci\u00f3n. As\u00ed que, esto no funcionar\u00e1:</p> <pre><code># Esto no funcionar\u00e1, porque get_burgers fue definido con: async def\nburgers = get_burgers(2)\n</code></pre> <p>As\u00ed que, si est\u00e1s usando un paquete que te dice que puedes llamarlo con <code>await</code>, necesitas crear las path operation functions que lo usen con <code>async def</code>, como en:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n</code></pre>"},{"location":"async/#mas-detalles-tecnicos","title":"M\u00e1s detalles t\u00e9cnicos","text":"<p>Podr\u00edas haber notado que <code>await</code> solo se puede usar dentro de funciones definidas con <code>async def</code>.</p> <p>Pero al mismo tiempo, las funciones definidas con <code>async def</code> deben ser \"awaited\". Por lo tanto, las funciones con <code>async def</code> solo se pueden llamar dentro de funciones definidas con <code>async def</code> tambi\u00e9n.</p> <p>Entonces, sobre el huevo y la gallina, \u00bfc\u00f3mo llamas a la primera funci\u00f3n <code>async</code>?</p> <p>Si est\u00e1s trabajando con ReadyAPI no tienes que preocuparte por eso, porque esa \"primera\" funci\u00f3n ser\u00e1 tu path operation function, y ReadyAPI sabr\u00e1 c\u00f3mo hacer lo correcto.</p> <p>Pero si deseas usar <code>async</code> / <code>await</code> sin ReadyAPI, tambi\u00e9n puedes hacerlo.</p>"},{"location":"async/#escribe-tu-propio-codigo-async","title":"Escribe tu propio c\u00f3digo async","text":"<p>Starlette (y ReadyAPI) est\u00e1n basados en AnyIO, lo que lo hace compatible tanto con la librer\u00eda est\u00e1ndar de Python asyncio como con Trio.</p> <p>En particular, puedes usar directamente AnyIO para tus casos de uso avanzados de concurrencia que requieran patrones m\u00e1s avanzados en tu propio c\u00f3digo.</p> <p>E incluso si no estuvieras usando ReadyAPI, tambi\u00e9n podr\u00edas escribir tus propias aplicaciones as\u00edncronas con AnyIO para ser altamente compatibles y obtener sus beneficios (p.ej. concurrencia estructurada).</p> <p>Cre\u00e9 otro paquete sobre AnyIO, como una capa delgada, para mejorar un poco las anotaciones de tipos y obtener mejor autocompletado, errores en l\u00ednea, etc. Tambi\u00e9n tiene una introducci\u00f3n amigable y tutorial para ayudarte a entender y escribir tu propio c\u00f3digo async: Asyncer. Ser\u00eda particularmente \u00fatil si necesitas combinar c\u00f3digo async con regular (bloqueante/sincr\u00f3nico).</p>"},{"location":"async/#otras-formas-de-codigo-asincrono","title":"Otras formas de c\u00f3digo as\u00edncrono","text":"<p>Este estilo de usar <code>async</code> y <code>await</code> es relativamente nuevo en el lenguaje.</p> <p>Pero hace que trabajar con c\u00f3digo as\u00edncrono sea mucho m\u00e1s f\u00e1cil.</p> <p>Esta misma sintaxis (o casi id\u00e9ntica) tambi\u00e9n se incluy\u00f3 recientemente en las versiones modernas de JavaScript (en el Navegador y NodeJS).</p> <p>Pero antes de eso, manejar el c\u00f3digo as\u00edncrono era mucho m\u00e1s complejo y dif\u00edcil.</p> <p>En versiones previas de Python, podr\u00edas haber usado hilos o Gevent. Pero el c\u00f3digo es mucho m\u00e1s complejo de entender, depurar y razonar.</p> <p>En versiones previas de NodeJS / JavaScript en el Navegador, habr\u00edas usado \"callbacks\". Lo que lleva al callback hell.</p>"},{"location":"async/#coroutines","title":"Coroutines","text":"<p>Coroutines es simplemente el t\u00e9rmino muy elegante para la cosa que devuelve una funci\u00f3n <code>async def</code>. Python sabe que es algo parecido a una funci\u00f3n, que puede comenzar y que terminar\u00e1 en alg\u00fan momento, pero que podr\u00eda pausar \u23f8 internamente tambi\u00e9n, siempre que haya un <code>await</code> dentro de \u00e9l.</p> <p>Pero toda esta funcionalidad de usar c\u00f3digo as\u00edncrono con <code>async</code> y <code>await</code> a menudo se resume como utilizar \"coroutines\". Es comparable a la funcionalidad clave principal de Go, las \"Goroutines\".</p>"},{"location":"async/#conclusion","title":"Conclusi\u00f3n","text":"<p>Veamos la misma frase de arriba:</p> <p>Las versiones modernas de Python tienen soporte para \"c\u00f3digo as\u00edncrono\" utilizando algo llamado \"coroutines\", con la sintaxis <code>async</code> y <code>await</code>.</p> <p>Eso deber\u00eda tener m\u00e1s sentido ahora. \u2728</p> <p>Todo eso es lo que impulsa ReadyAPI (a trav\u00e9s de Starlette) y lo que hace que tenga un rendimiento tan impresionante.</p>"},{"location":"async/#detalles-muy-tecnicos","title":"Detalles Muy T\u00e9cnicos","text":"<p>Advertencia</p> <p>Probablemente puedas saltarte esto.</p> <p>Estos son detalles muy t\u00e9cnicos de c\u00f3mo funciona ReadyAPI en su interior.</p> <p>Si tienes bastante conocimiento t\u00e9cnico (coroutines, hilos, bloqueo, etc.) y tienes curiosidad sobre c\u00f3mo ReadyAPI maneja <code>async def</code> vs <code>def</code> normal, adelante.</p>"},{"location":"async/#funciones-de-path-operation","title":"Funciones de path operation","text":"<p>Cuando declaras una path operation function con <code>def</code> normal en lugar de <code>async def</code>, se ejecuta en un threadpool externo que luego es esperado, en lugar de ser llamado directamente (ya que bloquear\u00eda el servidor).</p> <p>Si vienes de otro framework async que no funciona de la manera descrita anteriormente y est\u00e1s acostumbrado a definir funciones de path operation solo de c\u00f3mputo trivial con <code>def</code> normal para una peque\u00f1a ganancia de rendimiento (alrededor de 100 nanosegundos), ten en cuenta que en ReadyAPI el efecto ser\u00eda bastante opuesto. En estos casos, es mejor usar <code>async def</code> a menos que tus path operation functions usen c\u00f3digo que realice I/O de bloqueo.</p> <p>Aun as\u00ed, en ambas situaciones, es probable que ReadyAPI siga siendo m\u00e1s r\u00e1pida que (o al menos comparable a) tu framework anterior.</p>"},{"location":"async/#dependencias","title":"Dependencias","text":"<p>Lo mismo aplica para las dependencias. Si una dependencia es una funci\u00f3n est\u00e1ndar <code>def</code> en lugar de <code>async def</code>, se ejecuta en el threadpool externo.</p>"},{"location":"async/#sub-dependencias","title":"Sub-dependencias","text":"<p>Puedes tener m\u00faltiples dependencias y sub-dependencias requiri\u00e9ndose mutuamente (como par\u00e1metros de las definiciones de funciones), algunas de ellas podr\u00edan ser creadas con <code>async def</code> y algunas con <code>def</code> normal. Aun funcionar\u00e1, y las que fueron creadas con <code>def</code> normal ser\u00edan llamadas en un hilo externo (del threadpool) en lugar de ser \"awaited\".</p>"},{"location":"async/#otras-funciones-de-utilidad","title":"Otras funciones de utilidad","text":"<p>Cualquier otra funci\u00f3n de utilidad que llames directamente puede ser creada con <code>def</code> normal o <code>async def</code> y ReadyAPI no afectar\u00e1 la forma en que la llames.</p> <p>Esto contrasta con las funciones que ReadyAPI llama por ti: path operation functions y dependencias.</p> <p>Si tu funci\u00f3n de utilidad es una funci\u00f3n normal con <code>def</code>, ser\u00e1 llamada directamente (como la escribas en tu c\u00f3digo), no en un threadpool; si la funci\u00f3n es creada con <code>async def</code> entonces deber\u00edas \"await\" por esa funci\u00f3n cuando la llames en tu c\u00f3digo.</p> <p>Nuevamente, estos son detalles muy t\u00e9cnicos que probablemente ser\u00edan \u00fatiles si los buscaste.</p> <p>De lo contrario, deber\u00edas estar bien con las pautas de la secci\u00f3n anterior: \u00bfCon prisa?.</p>"},{"location":"benchmarks/","title":"Benchmarks","text":"<p>Los benchmarks independientes de TechEmpower muestran aplicaciones de ReadyAPI ejecut\u00e1ndose bajo Uvicorn como uno de los frameworks de Python m\u00e1s r\u00e1pidos disponibles, solo por debajo de Starlette y Uvicorn en s\u00ed mismos (utilizados internamente por ReadyAPI).</p> <p>Pero al revisar benchmarks y comparaciones, debes tener en cuenta lo siguiente.</p>"},{"location":"benchmarks/#benchmarks-y-velocidad","title":"Benchmarks y velocidad","text":"<p>Cuando ves los benchmarks, es com\u00fan ver varias herramientas de diferentes tipos comparadas como equivalentes.</p> <p>Espec\u00edficamente, ver Uvicorn, Starlette y ReadyAPI comparados juntos (entre muchas otras herramientas).</p> <p>Cuanto m\u00e1s simple sea el problema resuelto por la herramienta, mejor rendimiento tendr\u00e1. Y la mayor\u00eda de los benchmarks no prueban las funcionalidades adicionales proporcionadas por la herramienta.</p> <p>La jerarqu\u00eda es como:</p> <ul> <li> <p>Uvicorn: un servidor ASGI</p> <ul> <li>Starlette: (usa Uvicorn) un microframework web<ul> <li>ReadyAPI: (usa Starlette) un microframework para APIs con varias funcionalidades adicionales para construir APIs, con validaci\u00f3n de datos, etc.</li> </ul> </li> </ul> </li> <li> <p>Uvicorn:</p> <ul> <li>Tendr\u00e1 el mejor rendimiento, ya que no tiene mucho c\u00f3digo extra aparte del propio servidor.</li> <li>No escribir\u00edas una aplicaci\u00f3n directamente en Uvicorn. Eso significar\u00eda que tu c\u00f3digo tendr\u00eda que incluir, m\u00e1s o menos, al menos, todo el c\u00f3digo proporcionado por Starlette (o ReadyAPI). Y si hicieras eso, tu aplicaci\u00f3n final tendr\u00eda la misma carga que si hubieras usado un framework, minimizando el c\u00f3digo de tu aplicaci\u00f3n y los bugs.</li> <li>Si est\u00e1s comparando Uvicorn, comp\u00e1ralo con Daphne, Hypercorn, uWSGI, etc. Servidores de aplicaciones.</li> </ul> </li> <li>Starlette:<ul> <li>Tendr\u00e1 el siguiente mejor rendimiento, despu\u00e9s de Uvicorn. De hecho, Starlette usa Uvicorn para ejecutarse. As\u00ed que probablemente solo pueda ser \"m\u00e1s lento\" que Uvicorn por tener que ejecutar m\u00e1s c\u00f3digo.</li> <li>Pero te proporciona las herramientas para construir aplicaciones web sencillas, con enrutamiento basado en paths, etc.</li> <li>Si est\u00e1s comparando Starlette, comp\u00e1ralo con Sanic, Flask, Django, etc. Frameworks web (o microframeworks).</li> </ul> </li> <li>ReadyAPI:<ul> <li>De la misma forma en que Starlette usa Uvicorn y no puede ser m\u00e1s r\u00e1pido que \u00e9l, ReadyAPI usa Starlette, por lo que no puede ser m\u00e1s r\u00e1pido que \u00e9l.</li> <li>ReadyAPI ofrece m\u00e1s funcionalidades adem\u00e1s de las de Starlette. Funcionalidades que casi siempre necesitas al construir APIs, como la validaci\u00f3n y serializaci\u00f3n de datos. Y al utilizarlo, obtienes documentaci\u00f3n autom\u00e1tica gratis (la documentaci\u00f3n autom\u00e1tica ni siquiera a\u00f1ade carga a las aplicaciones en ejecuci\u00f3n, se genera al inicio).</li> <li>Si no usabas ReadyAPI y utilizabas Starlette directamente (u otra herramienta, como Sanic, Flask, Responder, etc.) tendr\u00edas que implementar toda la validaci\u00f3n y serializaci\u00f3n de datos por ti mismo. Entonces, tu aplicaci\u00f3n final a\u00fan tendr\u00eda la misma carga que si hubiera sido construida usando ReadyAPI. Y en muchos casos, esta validaci\u00f3n y serializaci\u00f3n de datos es la mayor cantidad de c\u00f3digo escrito en las aplicaciones.</li> <li>Entonces, al usar ReadyAPI est\u00e1s ahorrando tiempo de desarrollo, bugs, l\u00edneas de c\u00f3digo, y probablemente obtendr\u00edas el mismo rendimiento (o mejor) que si no lo usaras (ya que tendr\u00edas que implementarlo todo en tu c\u00f3digo).</li> <li>Si est\u00e1s comparando ReadyAPI, comp\u00e1ralo con un framework de aplicaci\u00f3n web (o conjunto de herramientas) que proporcione validaci\u00f3n de datos, serializaci\u00f3n y documentaci\u00f3n, como Flask-apispec, NestJS, Molten, etc. Frameworks con validaci\u00f3n de datos, serializaci\u00f3n y documentaci\u00f3n autom\u00e1ticas integradas.</li> </ul> </li> </ul>"},{"location":"environment-variables/","title":"Variables de Entorno","text":"<p>Consejo</p> <p>Si ya sabes qu\u00e9 son las \"variables de entorno\" y c\u00f3mo usarlas, si\u00e9ntete libre de saltarte esto.</p> <p>Una variable de entorno (tambi\u00e9n conocida como \"env var\") es una variable que vive fuera del c\u00f3digo de Python, en el sistema operativo, y podr\u00eda ser le\u00edda por tu c\u00f3digo de Python (o por otros programas tambi\u00e9n).</p> <p>Las variables de entorno pueden ser \u00fatiles para manejar configuraciones de aplicaciones, como parte de la instalaci\u00f3n de Python, etc.</p>"},{"location":"environment-variables/#crear-y-usar-variables-de-entorno","title":"Crear y Usar Variables de Entorno","text":"<p>Puedes crear y usar variables de entorno en la shell (terminal), sin necesidad de Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Podr\u00edas crear una env var MY_NAME con\n$ export MY_NAME=\"Wade Wilson\"\n\n// Luego podr\u00edas usarla con otros programas, como\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Crea una env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// \u00dasala con otros programas, como\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#leer-variables-de-entorno-en-python","title":"Leer Variables de Entorno en Python","text":"<p>Tambi\u00e9n podr\u00edas crear variables de entorno fuera de Python, en la terminal (o con cualquier otro m\u00e9todo), y luego leerlas en Python.</p> <p>Por ejemplo, podr\u00edas tener un archivo <code>main.py</code> con:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Consejo</p> <p>El segundo argumento de <code>os.getenv()</code> es el valor por defecto a retornar.</p> <p>Si no se proporciona, es <code>None</code> por defecto; aqu\u00ed proporcionamos <code>\"World\"</code> como el valor por defecto para usar.</p> <p>Luego podr\u00edas llamar a ese programa Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Aqu\u00ed todav\u00eda no configuramos la env var\n$ python main.py\n\n// Como no configuramos la env var, obtenemos el valor por defecto\n\nHello World from Python\n\n// Pero si creamos una variable de entorno primero\n$ export MY_NAME=\"Wade Wilson\"\n\n// Y luego llamamos al programa nuevamente\n$ python main.py\n\n// Ahora puede leer la variable de entorno\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// Aqu\u00ed todav\u00eda no configuramos la env var\n$ python main.py\n\n// Como no configuramos la env var, obtenemos el valor por defecto\n\nHello World from Python\n\n// Pero si creamos una variable de entorno primero\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Y luego llamamos al programa nuevamente\n$ python main.py\n\n// Ahora puede leer la variable de entorno\n\nHello Wade Wilson from Python\n</code></pre> <p>Dado que las variables de entorno pueden configurarse fuera del c\u00f3digo, pero pueden ser le\u00eddas por el c\u00f3digo, y no tienen que ser almacenadas (committed en <code>git</code>) con el resto de los archivos, es com\u00fan usarlas para configuraciones o ajustes.</p> <p>Tambi\u00e9n puedes crear una variable de entorno solo para una invocaci\u00f3n espec\u00edfica de un programa, que est\u00e1 disponible solo para ese programa, y solo durante su duraci\u00f3n.</p> <p>Para hacer eso, cr\u00e9ala justo antes del programa en s\u00ed, en la misma l\u00ednea:</p> <pre><code>// Crea una env var MY_NAME en l\u00ednea para esta llamada del programa\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Ahora puede leer la variable de entorno\n\nHello Wade Wilson from Python\n\n// La env var ya no existe despu\u00e9s\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Consejo</p> <p>Puedes leer m\u00e1s al respecto en The Twelve-Factor App: Config.</p>"},{"location":"environment-variables/#tipos-y-validacion","title":"Tipos y Validaci\u00f3n","text":"<p>Estas variables de entorno solo pueden manejar strings de texto, ya que son externas a Python y deben ser compatibles con otros programas y el resto del sistema (e incluso con diferentes sistemas operativos, como Linux, Windows, macOS).</p> <p>Esto significa que cualquier valor le\u00eddo en Python desde una variable de entorno ser\u00e1 un <code>str</code>, y cualquier conversi\u00f3n a un tipo diferente o cualquier validaci\u00f3n tiene que hacerse en el c\u00f3digo.</p> <p>Aprender\u00e1s m\u00e1s sobre c\u00f3mo usar variables de entorno para manejar configuraciones de aplicaci\u00f3n en la Gu\u00eda del Usuario Avanzado - Ajustes y Variables de Entorno.</p>"},{"location":"environment-variables/#variable-de-entorno-path","title":"Variable de Entorno <code>PATH</code>","text":"<p>Hay una variable de entorno especial llamada <code>PATH</code> que es utilizada por los sistemas operativos (Linux, macOS, Windows) para encontrar programas a ejecutar.</p> <p>El valor de la variable <code>PATH</code> es un string largo que consiste en directorios separados por dos puntos <code>:</code> en Linux y macOS, y por punto y coma <code>;</code> en Windows.</p> <p>Por ejemplo, la variable de entorno <code>PATH</code> podr\u00eda verse as\u00ed:</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Esto significa que el sistema deber\u00eda buscar programas en los directorios:</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>Esto significa que el sistema deber\u00eda buscar programas en los directorios:</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>Cuando escribes un comando en la terminal, el sistema operativo busca el programa en cada uno de esos directorios listados en la variable de entorno <code>PATH</code>.</p> <p>Por ejemplo, cuando escribes <code>python</code> en la terminal, el sistema operativo busca un programa llamado <code>python</code> en el primer directorio de esa lista.</p> <p>Si lo encuentra, entonces lo utilizar\u00e1. De lo contrario, contin\u00faa buscando en los otros directorios.</p>"},{"location":"environment-variables/#instalando-python-y-actualizando-el-path","title":"Instalando Python y Actualizando el <code>PATH</code>","text":"<p>Cuando instalas Python, se te podr\u00eda preguntar si deseas actualizar la variable de entorno <code>PATH</code>.</p> Linux, macOSWindows <p>Digamos que instalas Python y termina en un directorio <code>/opt/custompython/bin</code>.</p> <p>Si dices que s\u00ed para actualizar la variable de entorno <code>PATH</code>, entonces el instalador a\u00f1adir\u00e1 <code>/opt/custompython/bin</code> a la variable de entorno <code>PATH</code>.</p> <p>Podr\u00eda verse as\u00ed:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>De esta manera, cuando escribes <code>python</code> en la terminal, el sistema encontrar\u00e1 el programa Python en <code>/opt/custompython/bin</code> (el \u00faltimo directorio) y usar\u00e1 ese.</p> <p>Digamos que instalas Python y termina en un directorio <code>C:\\opt\\custompython\\bin</code>.</p> <p>Si dices que s\u00ed para actualizar la variable de entorno <code>PATH</code>, entonces el instalador a\u00f1adir\u00e1 <code>C:\\opt\\custompython\\bin</code> a la variable de entorno <code>PATH</code>.</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>De esta manera, cuando escribes <code>python</code> en la terminal, el sistema encontrar\u00e1 el programa Python en <code>C:\\opt\\custompython\\bin</code> (el \u00faltimo directorio) y usar\u00e1 ese.</p> <p>Entonces, si escribes:</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>El sistema encontrar\u00e1 el programa <code>python</code> en <code>/opt/custompython/bin</code> y lo ejecutar\u00e1.</p> <p>Esto ser\u00eda m\u00e1s o menos equivalente a escribir:</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>El sistema encontrar\u00e1 el programa <code>python</code> en <code>C:\\opt\\custompython\\bin\\python</code> y lo ejecutar\u00e1.</p> <p>Esto ser\u00eda m\u00e1s o menos equivalente a escribir:</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>Esta informaci\u00f3n ser\u00e1 \u00fatil al aprender sobre Entornos Virtuales.</p>"},{"location":"environment-variables/#conclusion","title":"Conclusi\u00f3n","text":"<p>Con esto deber\u00edas tener una comprensi\u00f3n b\u00e1sica de qu\u00e9 son las variables de entorno y c\u00f3mo usarlas en Python.</p> <p>Tambi\u00e9n puedes leer m\u00e1s sobre ellas en la Wikipedia para Variable de Entorno.</p> <p>En muchos casos no es muy obvio c\u00f3mo las variables de entorno ser\u00edan \u00fatiles y aplicables de inmediato. Pero siguen apareciendo en muchos escenarios diferentes cuando est\u00e1s desarrollando, as\u00ed que es bueno conocerlas.</p> <p>Por ejemplo, necesitar\u00e1s esta informaci\u00f3n en la siguiente secci\u00f3n, sobre Entornos Virtuales.</p>"},{"location":"features/","title":"Funcionalidades","text":""},{"location":"features/#funcionalidades-de-readyapi","title":"Funcionalidades de ReadyAPI","text":"<p>ReadyAPI te ofrece lo siguiente:</p>"},{"location":"features/#basado-en-estandares-abiertos","title":"Basado en est\u00e1ndares abiertos","text":"<ul> <li>OpenAPI para la creaci\u00f3n de APIs, incluyendo declaraciones de path operations, par\u00e1metros, request bodies, seguridad, etc.</li> <li>Documentaci\u00f3n autom\u00e1tica de modelos de datos con JSON Schema (ya que OpenAPI en s\u00ed mismo est\u00e1 basado en JSON Schema).</li> <li>Dise\u00f1ado alrededor de estos est\u00e1ndares, tras un estudio meticuloso. En lugar de ser una capa adicional.</li> <li>Esto tambi\u00e9n permite el uso de generaci\u00f3n de c\u00f3digo cliente autom\u00e1tica en muchos idiomas.</li> </ul>"},{"location":"features/#documentacion-automatica","title":"Documentaci\u00f3n autom\u00e1tica","text":"<p>Interfaces web de documentaci\u00f3n y exploraci\u00f3n de APIs interactivas. Como el framework est\u00e1 basado en OpenAPI, hay m\u00faltiples opciones, 2 incluidas por defecto.</p> <ul> <li>Swagger UI, con exploraci\u00f3n interactiva, llama y prueba tu API directamente desde el navegador.</li> </ul> <p></p> <ul> <li>Documentaci\u00f3n alternativa de API con ReDoc.</li> </ul> <p></p>"},{"location":"features/#solo-python-moderno","title":"Solo Python moderno","text":"<p>Todo est\u00e1 basado en declaraciones est\u00e1ndar de tipos en Python (gracias a Pydantic). Sin nueva sintaxis que aprender. Solo Python moderno est\u00e1ndar.</p> <p>Si necesitas un repaso de 2 minutos sobre c\u00f3mo usar tipos en Python (aunque no uses ReadyAPI), revisa el tutorial corto: Tipos en Python.</p> <p>Escribes Python est\u00e1ndar con tipos:</p> <pre><code>from datetime import date\n\nfrom pydantic import BaseModel\n\n# Declara una variable como un str\n# y obtiene soporte del editor dentro de la funci\u00f3n\ndef main(user_id: str):\n    return user_id\n\n\n# Un modelo de Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n</code></pre> <p>Que luego puede ser usado como:</p> <pre><code>my_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n</code></pre> <p>Informaci\u00f3n</p> <p><code>**second_user_data</code> significa:</p> <p>Pasa las claves y valores del dict <code>second_user_data</code> directamente como argumentos de clave-valor, equivalente a: <code>User(id=4, name=\"Mary\", joined=\"2018-11-30\")</code></p>"},{"location":"features/#soporte-del-editor","title":"Soporte del editor","text":"<p>Todo el framework fue dise\u00f1ado para ser f\u00e1cil e intuitivo de usar, todas las decisiones fueron probadas en m\u00faltiples editores incluso antes de comenzar el desarrollo, para asegurar la mejor experiencia de desarrollo.</p> <p>En las encuestas a desarrolladores de Python, es claro que una de las funcionalidades m\u00e1s usadas es el \"autocompletado\".</p> <p>Todo el framework ReadyAPI est\u00e1 basado para satisfacer eso. El autocompletado funciona en todas partes.</p> <p>Rara vez necesitar\u00e1s regresar a la documentaci\u00f3n.</p> <p>Aqu\u00ed est\u00e1 c\u00f3mo tu editor podr\u00eda ayudarte:</p> <ul> <li>en Visual Studio Code:</li> </ul> <p></p> <ul> <li>en PyCharm:</li> </ul> <p></p> <p>Obtendr\u00e1s autocompletado en c\u00f3digo que podr\u00edas considerar imposible antes. Por ejemplo, la clave <code>price</code> dentro de un cuerpo JSON (que podr\u00eda haber estado anidado) que proviene de un request.</p> <p>No m\u00e1s escribir nombres de claves incorrectos, yendo de un lado a otro entre la documentaci\u00f3n, o desplaz\u00e1ndote hacia arriba y abajo para encontrar si finalmente usaste <code>username</code> o <code>user_name</code>.</p>"},{"location":"features/#breve","title":"Breve","text":"<p>Tiene valores predeterminados sensatos para todo, con configuraciones opcionales en todas partes. Todos los par\u00e1metros se pueden ajustar finamente para hacer lo que necesitas y para definir el API que necesitas.</p> <p>Pero por defecto, todo \"simplemente funciona\".</p>"},{"location":"features/#validacion","title":"Validaci\u00f3n","text":"<ul> <li> <p>Validaci\u00f3n para la mayor\u00eda (\u00bfo todas?) de los tipos de datos de Python, incluyendo:</p> <ul> <li>Objetos JSON (<code>dict</code>).</li> <li>Array JSON (<code>list</code>) definiendo tipos de elementos.</li> <li>Campos de cadena de caracteres (<code>str</code>), definiendo longitudes m\u00ednimas y m\u00e1ximas.</li> <li>N\u00fameros (<code>int</code>, <code>float</code>) con valores m\u00ednimos y m\u00e1ximos, etc.</li> </ul> </li> <li> <p>Validaci\u00f3n para tipos m\u00e1s ex\u00f3ticos, como:</p> <ul> <li>URL.</li> <li>Email.</li> <li>UUID.</li> <li>...y otros.</li> </ul> </li> </ul> <p>Toda la validaci\u00f3n es manejada por Pydantic, una herramienta bien establecida y robusta.</p>"},{"location":"features/#seguridad-y-autenticacion","title":"Seguridad y autenticaci\u00f3n","text":"<p>Seguridad y autenticaci\u00f3n integradas. Sin ning\u00fan compromiso con bases de datos o modelos de datos.</p> <p>Todos los esquemas de seguridad definidos en OpenAPI, incluyendo:</p> <ul> <li>HTTP B\u00e1sico.</li> <li>OAuth2 (tambi\u00e9n con tokens JWT). Revisa el tutorial sobre OAuth2 con JWT.</li> <li>API keys en:<ul> <li>Headers.</li> <li>Par\u00e1metros de query.</li> <li>Cookies, etc.</li> </ul> </li> </ul> <p>Adem\u00e1s de todas las caracter\u00edsticas de seguridad de Starlette (incluyendo cookies de sesi\u00f3n).</p> <p>Todo construido como herramientas y componentes reutilizables que son f\u00e1ciles de integrar con tus sistemas, almacenes de datos, bases de datos relacionales y NoSQL, etc.</p>"},{"location":"features/#inyeccion-de-dependencias","title":"Inyecci\u00f3n de dependencias","text":"<p>ReadyAPI incluye un sistema de Inyecci\u00f3n de Dependencias extremadamente f\u00e1cil de usar, pero extremadamente potente.</p> <ul> <li>Incluso las dependencias pueden tener dependencias, creando una jerarqu\u00eda o \"gr\u00e1fico de dependencias\".</li> <li>Todo manejado autom\u00e1ticamente por el framework.</li> <li>Todas las dependencias pueden requerir datos de los requests y aumentar las restricciones de la path operation y la documentaci\u00f3n autom\u00e1tica.</li> <li>Validaci\u00f3n autom\u00e1tica incluso para los par\u00e1metros de path operation definidos en las dependencias.</li> <li>Soporte para sistemas de autenticaci\u00f3n de usuario complejos, conexiones a bases de datos, etc.</li> <li>Sin compromisos con bases de datos, frontends, etc. Pero f\u00e1cil integraci\u00f3n con todos ellos.</li> </ul>"},{"location":"features/#plug-ins-ilimitados","title":"\"Plug-ins\" ilimitados","text":"<p>O de otra manera, no hay necesidad de ellos, importa y usa el c\u00f3digo que necesitas.</p> <p>Cualquier integraci\u00f3n est\u00e1 dise\u00f1ada para ser tan simple de usar (con dependencias) que puedes crear un \"plug-in\" para tu aplicaci\u00f3n en 2 l\u00edneas de c\u00f3digo usando la misma estructura y sintaxis utilizada para tus path operations.</p>"},{"location":"features/#probado","title":"Probado","text":"<ul> <li>100% de cobertura de tests.</li> <li>C\u00f3digo completamente anotado con tipos.</li> <li>Usado en aplicaciones en producci\u00f3n.</li> </ul>"},{"location":"features/#funcionalidades-de-starlette","title":"Funcionalidades de Starlette","text":"<p>ReadyAPI es totalmente compatible con (y est\u00e1 basado en) Starlette. As\u00ed que, cualquier c\u00f3digo adicional de Starlette que tengas, tambi\u00e9n funcionar\u00e1.</p> <p><code>ReadyAPI</code> es en realidad una subclase de <code>Starlette</code>. As\u00ed que, si ya conoces o usas Starlette, la mayor\u00eda de las funcionalidades funcionar\u00e1n de la misma manera.</p> <p>Con ReadyAPI obtienes todas las funcionalidades de Starlette (ya que ReadyAPI es simplemente Starlette potenciado):</p> <ul> <li>Rendimiento seriamente impresionante. Es uno de los frameworks de Python m\u00e1s r\u00e1pidos disponibles, a la par de NodeJS y Go.</li> <li>Soporte para WebSocket.</li> <li>Tareas en segundo plano en el mismo proceso.</li> <li>Eventos de inicio y apagado.</li> <li>Cliente de prueba basado en HTTPX.</li> <li>CORS, GZip, archivos est\u00e1ticos, responses en streaming.</li> <li>Soporte para Session y Cookie.</li> <li>Cobertura de tests del 100%.</li> <li>C\u00f3digo completamente anotado con tipos.</li> </ul>"},{"location":"features/#funcionalidades-de-pydantic","title":"Funcionalidades de Pydantic","text":"<p>ReadyAPI es totalmente compatible con (y est\u00e1 basado en) Pydantic. Por lo tanto, cualquier c\u00f3digo adicional de Pydantic que tengas, tambi\u00e9n funcionar\u00e1.</p> <p>Incluyendo paquetes externos tambi\u00e9n basados en Pydantic, como ORMs, ODMs para bases de datos.</p> <p>Esto tambi\u00e9n significa que, en muchos casos, puedes pasar el mismo objeto que obtienes de un request directamente a la base de datos, ya que todo se valida autom\u00e1ticamente.</p> <p>Lo mismo aplica al rev\u00e9s, en muchos casos puedes simplemente pasar el objeto que obtienes de la base de datos directamente al cliente.</p> <p>Con ReadyAPI obtienes todas las funcionalidades de Pydantic (ya que ReadyAPI est\u00e1 basado en Pydantic para todo el manejo de datos):</p> <ul> <li>Sin complicaciones:<ul> <li>Sin micro-lenguaje de definici\u00f3n de esquemas nuevo que aprender.</li> <li>Si conoces los tipos en Python sabes c\u00f3mo usar Pydantic.</li> </ul> </li> <li>Se lleva bien con tu IDE/linter/cerebro:<ul> <li>Porque las estructuras de datos de pydantic son solo instances de clases que defines; autocompletado, linting, mypy y tu intuici\u00f3n deber\u00edan funcionar correctamente con tus datos validados.</li> </ul> </li> <li>Valida estructuras complejas:<ul> <li>Uso de modelos jer\u00e1rquicos de Pydantic, <code>List</code> y <code>Dict</code> de <code>typing</code> de Python, etc.</li> <li>Y los validadores permiten definir, verificar y documentar de manera clara y f\u00e1cil esquemas de datos complejos como JSON Schema.</li> <li>Puedes tener objetos JSON profundamente anidados y validarlos todos y anotarlos.</li> </ul> </li> <li>Extensible:<ul> <li>Pydantic permite definir tipos de datos personalizados o puedes extender la validaci\u00f3n con m\u00e9todos en un modelo decorados con el decorador validator.</li> </ul> </li> <li>Cobertura de tests del 100%.</li> </ul>"},{"location":"help-readyapi/","title":"Ayuda a ReadyAPI - Consigue Ayuda","text":"<p>\u00bfTe gusta ReadyAPI?</p> <p>\u00bfTe gustar\u00eda ayudar a ReadyAPI, a otros usuarios y al autor?</p> <p>\u00bfO te gustar\u00eda conseguir ayuda con ReadyAPI?</p> <p>Hay formas muy sencillas de ayudar (varias implican solo uno o dos clics).</p> <p>Y tambi\u00e9n hay varias formas de conseguir ayuda.</p>"},{"location":"help-readyapi/#suscribete-al-boletin","title":"Suscr\u00edbete al bolet\u00edn","text":"<p>Puedes suscribirte al (espor\u00e1dico) bolet\u00edn ReadyAPI and friends para mantenerte al d\u00eda sobre:</p> <ul> <li>Noticias sobre ReadyAPI y amigos \ud83d\ude80</li> <li>Gu\u00edas \ud83d\udcdd</li> <li>Funcionalidades \u2728</li> <li>Cambios importantes \ud83d\udea8</li> <li>Consejos y trucos \u2705</li> </ul>"},{"location":"help-readyapi/#sigue-a-readyapi-en-twitter","title":"Sigue a ReadyAPI en Twitter","text":"<p>Sigue a @readyapi en Twitter para obtener las \u00faltimas noticias sobre ReadyAPI. \ud83d\udc26</p>"},{"location":"help-readyapi/#dale-una-estrella-a-readyapi-en-github","title":"Dale una estrella a ReadyAPI en GitHub","text":"<p>Puedes \"darle una estrella\" a ReadyAPI en GitHub (haciendo clic en el bot\u00f3n de estrella en la parte superior derecha): https://github.com/readyapi/readyapi. \u2b50\ufe0f</p> <p>Al agregar una estrella, otros usuarios podr\u00e1n encontrarlo m\u00e1s f\u00e1cilmente y ver que ya ha sido \u00fatil para otros.</p>"},{"location":"help-readyapi/#observa-el-repositorio-de-github-para-lanzamientos","title":"Observa el repositorio de GitHub para lanzamientos","text":"<p>Puedes \"observar\" ReadyAPI en GitHub (haciendo clic en el bot\u00f3n \"watch\" en la parte superior derecha): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>All\u00ed puedes seleccionar \"Releases only\".</p> <p>Al hacerlo, recibir\u00e1s notificaciones (en tu email) cada vez que haya un nuevo lanzamiento (una nueva versi\u00f3n) de ReadyAPI con correcciones de bugs y nuevas funcionalidades.</p>"},{"location":"help-readyapi/#conectate-con-el-autor","title":"Con\u00e9ctate con el autor","text":"<p>Puedes conectar conmigo (KhulnaSoft Ltd / <code>khulnasoft</code>), el autor.</p> <p>Puedes:</p> <ul> <li>Seguirme en GitHub.<ul> <li>Ver otros proyectos de C\u00f3digo Abierto que he creado y que podr\u00edan ayudarte.</li> <li>Seguirme para ver cu\u00e1ndo creo un nuevo proyecto de C\u00f3digo Abierto.</li> </ul> </li> <li>Seguirme en Twitter o Mastodon.<ul> <li>Contarme c\u00f3mo usas ReadyAPI (me encanta o\u00edr eso).</li> <li>Enterarte cuando hago anuncios o lanzo nuevas herramientas.</li> <li>Tambi\u00e9n puedes seguir @readyapi en Twitter (una cuenta aparte).</li> </ul> </li> <li>Seguirme en LinkedIn.<ul> <li>Enterarte cuando hago anuncios o lanzo nuevas herramientas (aunque uso Twitter m\u00e1s a menudo \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Leer lo que escribo (o seguirme) en Dev.to o Medium.<ul> <li>Leer otras ideas, art\u00edculos, y leer sobre las herramientas que he creado.</li> <li>Seguirme para leer lo que publico nuevo.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#twittea-sobre-readyapi","title":"Twittea sobre ReadyAPI","text":"<p>Twittea sobre ReadyAPI y dime a m\u00ed y a otros por qu\u00e9 te gusta. \ud83c\udf89</p> <p>Me encanta escuchar c\u00f3mo se est\u00e1 utilizando ReadyAPI, qu\u00e9 te ha gustado, en qu\u00e9 proyecto/empresa lo est\u00e1s usando, etc.</p>"},{"location":"help-readyapi/#vota-por-readyapi","title":"Vota por ReadyAPI","text":"<ul> <li>Vota por ReadyAPI en Slant.</li> <li>Vota por ReadyAPI en AlternativeTo.</li> <li>Di que usas ReadyAPI en StackShare.</li> </ul>"},{"location":"help-readyapi/#ayuda-a-otros-con-preguntas-en-github","title":"Ayuda a otros con preguntas en GitHub","text":"<p>Puedes intentar ayudar a otros con sus preguntas en:</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>En muchos casos, probablemente ya conozcas la respuesta a esas preguntas. \ud83e\udd13</p> <p>Si est\u00e1s ayudando mucho a la gente con sus preguntas, te convertir\u00e1s en un ReadyAPI Expert oficial. \ud83c\udf89</p> <p>Solo recuerda, el punto m\u00e1s importante es: trata de ser amable. La gente llega con sus frustraciones y, en muchos casos, no pregunta de la mejor manera, pero haz todo lo posible por ser amable. \ud83e\udd17</p> <p>La idea es que la comunidad de ReadyAPI sea amable y acogedora. Al mismo tiempo, no aceptes acoso o comportamiento irrespetuoso hacia los dem\u00e1s. Tenemos que cuidarnos unos a otros.</p> <p>Aqu\u00ed te explico c\u00f3mo ayudar a otros con preguntas (en discusiones o issues):</p>"},{"location":"help-readyapi/#entiende-la-pregunta","title":"Entiende la pregunta","text":"<ul> <li> <p>Revisa si puedes entender cu\u00e1l es el prop\u00f3sito y el caso de uso de la persona que pregunta.</p> </li> <li> <p>Luego revisa si la pregunta (la gran mayor\u00eda son preguntas) es clara.</p> </li> <li> <p>En muchos casos, la pregunta planteada es sobre una soluci\u00f3n imaginaria del usuario, pero podr\u00eda haber una mejor. Si puedes entender mejor el problema y el caso de uso, podr\u00edas sugerir una mejor soluci\u00f3n alternativa.</p> </li> <li> <p>Si no puedes entender la pregunta, pide m\u00e1s detalles.</p> </li> </ul>"},{"location":"help-readyapi/#reproduce-el-problema","title":"Reproduce el problema","text":"<p>En la mayor\u00eda de los casos y preguntas hay algo relacionado con el c\u00f3digo original de la persona.</p> <p>En muchos casos solo copiar\u00e1n un fragmento del c\u00f3digo, pero eso no es suficiente para reproducir el problema.</p> <ul> <li> <p>Puedes pedirles que proporcionen un ejemplo m\u00ednimo, reproducible, que puedas copiar-pegar y ejecutar localmente para ver el mismo error o comportamiento que est\u00e1n viendo, o para entender mejor su caso de uso.</p> </li> <li> <p>Si te sientes muy generoso, puedes intentar crear un ejemplo as\u00ed t\u00fa mismo, solo basado en la descripci\u00f3n del problema. Solo ten en cuenta que esto podr\u00eda llevar mucho tiempo y podr\u00eda ser mejor pedirles que aclaren el problema primero.</p> </li> </ul>"},{"location":"help-readyapi/#sugerir-soluciones","title":"Sugerir soluciones","text":"<ul> <li> <p>Despu\u00e9s de poder entender la pregunta, puedes darles un posible respuesta.</p> </li> <li> <p>En muchos casos, es mejor entender su problema subyacente o caso de uso, porque podr\u00eda haber una mejor manera de resolverlo que lo que est\u00e1n intentando hacer.</p> </li> </ul>"},{"location":"help-readyapi/#pide-cerrar","title":"Pide cerrar","text":"<p>Si responden, hay una alta probabilidad de que hayas resuelto su problema, felicidades, \u00a1eres un h\u00e9roe! \ud83e\uddb8</p> <ul> <li> <p>Ahora, si eso resolvi\u00f3 su problema, puedes pedirles que:</p> <ul> <li>En GitHub Discussions: marquen el comentario como la respuesta.</li> <li>En GitHub Issues: cierren el issue.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#observa-el-repositorio-de-github","title":"Observa el repositorio de GitHub","text":"<p>Puedes \"observar\" ReadyAPI en GitHub (haciendo clic en el bot\u00f3n \"watch\" en la parte superior derecha): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>Si seleccionas \"Watching\" en lugar de \"Releases only\", recibir\u00e1s notificaciones cuando alguien cree un nuevo issue o pregunta. Tambi\u00e9n puedes especificar que solo deseas que te notifiquen sobre nuevos issues, discusiones, PRs, etc.</p> <p>Luego puedes intentar ayudarlos a resolver esas preguntas.</p>"},{"location":"help-readyapi/#haz-preguntas","title":"Haz preguntas","text":"<p>Puedes crear una nueva pregunta en el repositorio de GitHub, por ejemplo, para:</p> <ul> <li>Hacer una pregunta o preguntar sobre un problema.</li> <li>Sugerir una nueva funcionalidad.</li> </ul> <p>Nota: si lo haces, entonces te voy a pedir que tambi\u00e9n ayudes a otros. \ud83d\ude09</p>"},{"location":"help-readyapi/#revisa-pull-requests","title":"Revisa Pull Requests","text":"<p>Puedes ayudarme a revisar pull requests de otros.</p> <p>De nuevo, por favor, haz tu mejor esfuerzo por ser amable. \ud83e\udd17</p> <p>Aqu\u00ed est\u00e1 lo que debes tener en cuenta y c\u00f3mo revisar un pull request:</p>"},{"location":"help-readyapi/#entiende-el-problema","title":"Entiende el problema","text":"<ul> <li> <p>Primero, aseg\u00farate de entender el problema que el pull request est\u00e1 intentando resolver. Podr\u00eda tener una discusi\u00f3n m\u00e1s larga en una GitHub Discussion o issue.</p> </li> <li> <p>Tambi\u00e9n hay una buena posibilidad de que el pull request no sea realmente necesario porque el problema se puede resolver de una manera diferente. Entonces puedes sugerir o preguntar sobre eso.</p> </li> </ul>"},{"location":"help-readyapi/#no-te-preocupes-por-el-estilo","title":"No te preocupes por el estilo","text":"<ul> <li> <p>No te preocupes demasiado por cosas como los estilos de los mensajes de commit, yo har\u00e9 squash y merge personalizando el commit manualmente.</p> </li> <li> <p>Tampoco te preocupes por las reglas de estilo, hay herramientas automatizadas verificando eso.</p> </li> </ul> <p>Y si hay alguna otra necesidad de estilo o consistencia, pedir\u00e9 directamente eso, o agregar\u00e9 commits encima con los cambios necesarios.</p>"},{"location":"help-readyapi/#revisa-el-codigo","title":"Revisa el c\u00f3digo","text":"<ul> <li> <p>Revisa y lee el c\u00f3digo, ve si tiene sentido, ejec\u00fatalo localmente y ve si realmente resuelve el problema.</p> </li> <li> <p>Luego comenta diciendo que hiciste eso, as\u00ed sabr\u00e9 que realmente lo revisaste.</p> </li> </ul> <p>Informaci\u00f3n</p> <p>Desafortunadamente, no puedo simplemente confiar en PRs que solo tienen varias aprobaciones.</p> <p>Varias veces ha sucedido que hay PRs con 3, 5 o m\u00e1s aprobaciones, probablemente porque la descripci\u00f3n es atractiva, pero cuando reviso los PRs, en realidad est\u00e1n rotos, tienen un bug, o no resuelven el problema que dicen resolver. \ud83d\ude05</p> <p>As\u00ed que, es realmente importante que realmente leas y ejecutes el c\u00f3digo, y me hagas saber en los comentarios que lo hiciste. \ud83e\udd13</p> <ul> <li>Si el PR se puede simplificar de alguna manera, puedes pedir eso, pero no hay necesidad de ser demasiado exigente, podr\u00eda haber muchos puntos de vista subjetivos (y yo tendr\u00e9 el m\u00edo tambi\u00e9n \ud83d\ude48), as\u00ed que es mejor si puedes centrarte en las cosas fundamentales.</li> </ul>"},{"location":"help-readyapi/#tests","title":"Tests","text":"<ul> <li> <p>Ay\u00fadame a verificar que el PR tenga tests.</p> </li> <li> <p>Verifica que los tests fallen antes del PR. \ud83d\udea8</p> </li> <li> <p>Luego verifica que los tests pasen despu\u00e9s del PR. \u2705</p> </li> <li> <p>Muchos PRs no tienen tests, puedes recordarles que agreguen tests, o incluso puedes sugerir algunos tests t\u00fa mismo. Eso es una de las cosas que consume m\u00e1s tiempo y puedes ayudar mucho con eso.</p> </li> <li> <p>Luego tambi\u00e9n comenta lo que intentaste, de esa manera sabr\u00e9 que lo revisaste. \ud83e\udd13</p> </li> </ul>"},{"location":"help-readyapi/#crea-un-pull-request","title":"Crea un Pull Request","text":"<p>Puedes contribuir al c\u00f3digo fuente con Pull Requests, por ejemplo:</p> <ul> <li>Para corregir un error tipogr\u00e1fico que encontraste en la documentaci\u00f3n.</li> <li>Para compartir un art\u00edculo, video o podcast que creaste o encontraste sobre ReadyAPI editando este archivo.<ul> <li>Aseg\u00farate de agregar tu enlace al inicio de la secci\u00f3n correspondiente.</li> </ul> </li> <li>Para ayudar a traducir la documentaci\u00f3n a tu idioma.<ul> <li>Tambi\u00e9n puedes ayudar a revisar las traducciones creadas por otros.</li> </ul> </li> <li>Para proponer nuevas secciones de documentaci\u00f3n.</li> <li>Para corregir un issue/bug existente.<ul> <li>Aseg\u00farate de agregar tests.</li> </ul> </li> <li>Para agregar una nueva funcionalidad.<ul> <li>Aseg\u00farate de agregar tests.</li> <li>Aseg\u00farate de agregar documentaci\u00f3n si es relevante.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#ayuda-a-mantener-readyapi","title":"Ayuda a Mantener ReadyAPI","text":"<p>\u00a1Ay\u00fadame a mantener ReadyAPI! \ud83e\udd13</p> <p>Hay mucho trabajo por hacer, y para la mayor\u00eda de ello, T\u00da puedes hacerlo.</p> <p>Las tareas principales que puedes hacer ahora son:</p> <ul> <li>Ayudar a otros con preguntas en GitHub (ver la secci\u00f3n arriba).</li> <li>Revisar Pull Requests (ver la secci\u00f3n arriba).</li> </ul> <p>Esas dos tareas son las que consumen m\u00e1s tiempo. Ese es el trabajo principal de mantener ReadyAPI.</p> <p>Si puedes ayudarme con eso, me est\u00e1s ayudando a mantener ReadyAPI y asegurando que siga avanzando m\u00e1s r\u00e1pido y mejor. \ud83d\ude80</p>"},{"location":"help-readyapi/#unete-al-chat","title":"\u00danete al chat","text":"<p>\u00danete al servidor de chat \ud83d\udc65 Discord \ud83d\udc65 y charla con otros en la comunidad de ReadyAPI.</p> <p>Consejo</p> <p>Para preguntas, h\u00e1zlas en GitHub Discussions, hay muchas m\u00e1s probabilidades de que recibas ayuda de parte de los ReadyAPI Experts.</p> <p>Usa el chat solo para otras conversaciones generales.</p>"},{"location":"help-readyapi/#no-uses-el-chat-para-preguntas","title":"No uses el chat para preguntas","text":"<p>Ten en cuenta que dado que los chats permiten una \"conversaci\u00f3n m\u00e1s libre\", es f\u00e1cil hacer preguntas que son demasiado generales y m\u00e1s dif\u00edciles de responder, por lo que es posible que no recibas respuestas.</p> <p>En GitHub, la plantilla te guiar\u00e1 para escribir la pregunta correcta para que puedas obtener m\u00e1s f\u00e1cilmente una buena respuesta, o incluso resolver el problema por ti mismo antes de preguntar. Y en GitHub puedo asegurarme de responder siempre todo, incluso si lleva tiempo. No puedo hacer eso personalmente con los sistemas de chat. \ud83d\ude05</p> <p>Las conversaciones en los sistemas de chat tampoco son tan f\u00e1cilmente buscables como en GitHub, por lo que las preguntas y respuestas podr\u00edan perderse en la conversaci\u00f3n. Y solo las que est\u00e1n en GitHub cuentan para convertirse en un ReadyAPI Expert, por lo que probablemente recibir\u00e1s m\u00e1s atenci\u00f3n en GitHub.</p> <p>Por otro lado, hay miles de usuarios en los sistemas de chat, por lo que hay muchas posibilidades de que encuentres a alguien con quien hablar all\u00ed, casi todo el tiempo. \ud83d\ude04</p>"},{"location":"help-readyapi/#patrocina-al-autor","title":"Patrocina al autor","text":"<p>Tambi\u00e9n puedes apoyar financieramente al autor (a m\u00ed) a trav\u00e9s de GitHub sponsors.</p> <p>All\u00ed podr\u00edas comprarme un caf\u00e9 \u2615\ufe0f para decir gracias. \ud83d\ude04</p> <p>Y tambi\u00e9n puedes convertirte en un sponsor de Plata o de Oro para ReadyAPI. \ud83c\udfc5\ud83c\udf89</p>"},{"location":"help-readyapi/#patrocina-las-herramientas-que-impulsan-readyapi","title":"Patrocina las herramientas que impulsan ReadyAPI","text":"<p>Como habr\u00e1s visto en la documentaci\u00f3n, ReadyAPI se apoya en los hombros de gigantes, Starlette y Pydantic.</p> <p>Tambi\u00e9n puedes patrocinar:</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>Encode (Starlette, Uvicorn)</li> </ul> <p>\u00a1Gracias! \ud83d\ude80</p>"},{"location":"history-design-future/","title":"Historia, Dise\u00f1o y Futuro","text":"<p>Hace alg\u00fan tiempo, un usuario de ReadyAPI pregunt\u00f3:</p> <p>\u00bfCu\u00e1l es la historia de este proyecto? Parece haber surgido de la nada y ser incre\u00edble en pocas semanas [...]</p> <p>Aqu\u00ed hay un poquito de esa historia.</p>"},{"location":"history-design-future/#alternativas","title":"Alternativas","text":"<p>He estado creando APIs con requisitos complejos durante varios a\u00f1os (Machine Learning, sistemas distribuidos, trabajos as\u00edncronos, bases de datos NoSQL, etc.), liderando varios equipos de desarrolladores.</p> <p>Como parte de eso, necesitaba investigar, probar y usar muchas alternativas.</p> <p>La historia de ReadyAPI es en gran parte la historia de sus predecesores.</p> <p>Como se dice en la secci\u00f3n Alternativas:</p> <p>ReadyAPI no existir\u00eda si no fuera por el trabajo previo de otros.</p> <p>Ha habido muchas herramientas creadas antes que han ayudado a inspirar su creaci\u00f3n.</p> <p>He estado evitando la creaci\u00f3n de un nuevo framework durante varios a\u00f1os. Primero trat\u00e9 de resolver todas las funcionalidades cubiertas por ReadyAPI usando varios frameworks, complementos y herramientas diferentes.</p> <p>Pero en alg\u00fan momento, no hab\u00eda otra opci\u00f3n que crear algo que proporcionara todas estas funcionalidades, tomando las mejores ideas de herramientas anteriores y combin\u00e1ndolas de la mejor manera posible, usando funcionalidades del lenguaje que ni siquiera estaban disponibles antes (anotaciones de tipos de Python 3.6+).</p>"},{"location":"history-design-future/#investigacion","title":"Investigaci\u00f3n","text":"<p>Al usar todas las alternativas anteriores, tuve la oportunidad de aprender de todas ellas, tomar ideas y combinarlas de la mejor manera que pude encontrar para m\u00ed y los equipos de desarrolladores con los que he trabajado.</p> <p>Por ejemplo, estaba claro que idealmente deber\u00eda estar basado en las anotaciones de tipos est\u00e1ndar de Python.</p> <p>Tambi\u00e9n, el mejor enfoque era usar est\u00e1ndares ya existentes.</p> <p>Entonces, antes de siquiera empezar a programar ReadyAPI, pas\u00e9 varios meses estudiando las especificaciones de OpenAPI, JSON Schema, OAuth2, etc. Entendiendo su relaci\u00f3n, superposici\u00f3n y diferencias.</p>"},{"location":"history-design-future/#diseno","title":"Dise\u00f1o","text":"<p>Luego pas\u00e9 alg\u00fan tiempo dise\u00f1ando la \"API\" de desarrollador que quer\u00eda tener como usuario (como desarrollador usando ReadyAPI).</p> <p>Prob\u00e9 varias ideas en los editores de Python m\u00e1s populares: PyCharm, VS Code, editores basados en Jedi.</p> <p>Seg\u00fan la \u00faltima Encuesta de Desarrolladores de Python, estos editores cubren alrededor del 80% de los usuarios.</p> <p>Esto significa que ReadyAPI fue espec\u00edficamente probado con los editores usados por el 80% de los desarrolladores de Python. Y como la mayor\u00eda de los otros editores tienden a funcionar de manera similar, todos sus beneficios deber\u00edan funcionar pr\u00e1cticamente para todos los editores.</p> <p>De esa manera, pude encontrar las mejores maneras de reducir la duplicaci\u00f3n de c\u00f3digo tanto como fuera posible, para tener autocompletado en todas partes, chequeos de tipos y errores, etc.</p> <p>Todo de una manera que proporcionara la mejor experiencia de desarrollo para todos los desarrolladores.</p>"},{"location":"history-design-future/#requisitos","title":"Requisitos","text":"<p>Despu\u00e9s de probar varias alternativas, decid\u00ed que iba a usar Pydantic por sus ventajas.</p> <p>Luego contribu\u00ed a este, para hacerlo totalmente compatible con JSON Schema, para soportar diferentes maneras de definir declaraciones de restricciones, y para mejorar el soporte de los editores (chequeo de tipos, autocompletado) basado en las pruebas en varios editores.</p> <p>Durante el desarrollo, tambi\u00e9n contribu\u00ed a Starlette, el otro requisito clave.</p>"},{"location":"history-design-future/#desarrollo","title":"Desarrollo","text":"<p>Para cuando comenc\u00e9 a crear el propio ReadyAPI, la mayor\u00eda de las piezas ya estaban en su lugar, el dise\u00f1o estaba definido, los requisitos y herramientas estaban listos, y el conocimiento sobre los est\u00e1ndares y especificaciones estaba claro y fresco.</p>"},{"location":"history-design-future/#futuro","title":"Futuro","text":"<p>A este punto, ya est\u00e1 claro que ReadyAPI con sus ideas est\u00e1 siendo \u00fatil para muchas personas.</p> <p>Est\u00e1 siendo elegido sobre alternativas anteriores por adaptarse mejor a muchos casos de uso.</p> <p>Muchos desarrolladores y equipos ya dependen de ReadyAPI para sus proyectos (incluy\u00e9ndome a m\u00ed y a mi equipo).</p> <p>Pero a\u00fan as\u00ed, hay muchas mejoras y funcionalidades por venir.</p> <p>ReadyAPI tiene un gran futuro por delante.</p> <p>Y tu ayuda es muy apreciada.</p>"},{"location":"project-generation/","title":"Plantilla Full Stack ReadyAPI","text":"<p>Las plantillas, aunque normalmente vienen con una configuraci\u00f3n espec\u00edfica, est\u00e1n dise\u00f1adas para ser flexibles y personalizables. Esto te permite modificarlas y adaptarlas a los requisitos de tu proyecto, haci\u00e9ndolas un excelente punto de partida. \ud83c\udfc1</p> <p>Puedes usar esta plantilla para comenzar, ya que incluye gran parte de la configuraci\u00f3n inicial, seguridad, base de datos y algunos endpoints de API ya hechos para ti.</p> <p>Repositorio de GitHub: Plantilla Full Stack ReadyAPI</p>"},{"location":"project-generation/#plantilla-full-stack-readyapi-tecnologia-y-funcionalidades","title":"Plantilla Full Stack ReadyAPI - Tecnolog\u00eda y Funcionalidades","text":"<ul> <li>\u26a1 ReadyAPI para la API del backend en Python.<ul> <li>\ud83e\uddf0 SQLDev para las interacciones con bases de datos SQL en Python (ORM).</li> <li>\ud83d\udd0d Pydantic, utilizado por ReadyAPI, para la validaci\u00f3n de datos y gesti\u00f3n de configuraciones.</li> <li>\ud83d\udcbe PostgreSQL como base de datos SQL.</li> </ul> </li> <li>\ud83d\ude80 React para el frontend.<ul> <li>\ud83d\udc83 Usando TypeScript, hooks, Vite, y otras partes de una stack moderna de frontend.</li> <li>\ud83c\udfa8 Chakra UI para los componentes del frontend.</li> <li>\ud83e\udd16 Un cliente de frontend generado autom\u00e1ticamente.</li> <li>\ud83e\uddea Playwright para pruebas End-to-End.</li> <li>\ud83e\udd87 Soporte para modo oscuro.</li> </ul> </li> <li>\ud83d\udc0b Docker Compose para desarrollo y producci\u00f3n.</li> <li>\ud83d\udd12 Hashing seguro de contrase\u00f1as por defecto.</li> <li>\ud83d\udd11 Autenticaci\u00f3n con tokens JWT.</li> <li>\ud83d\udceb Recuperaci\u00f3n de contrase\u00f1as basada en email.</li> <li>\u2705 Pruebas con Pytest.</li> <li>\ud83d\udcde Traefik como proxy inverso / balanceador de carga.</li> <li>\ud83d\udea2 Instrucciones de despliegue usando Docker Compose, incluyendo c\u00f3mo configurar un proxy Traefik frontend para manejar certificados HTTPS autom\u00e1ticos.</li> <li>\ud83c\udfed CI (integraci\u00f3n continua) y CD (despliegue continuo) basados en GitHub Actions.</li> </ul>"},{"location":"python-types/","title":"Introducci\u00f3n a Tipos en Python","text":"<p>Python tiene soporte para \"anotaciones de tipos\" opcionales (tambi\u00e9n llamadas \"type hints\").</p> <p>Estas \"anotaciones de tipos\" o type hints son una sintaxis especial que permite declarar el tipo de una variable.</p> <p>Al declarar tipos para tus variables, los editores y herramientas te pueden proporcionar un mejor soporte.</p> <p>Este es solo un tutorial r\u00e1pido / recordatorio sobre las anotaciones de tipos en Python. Cubre solo lo m\u00ednimo necesario para usarlas con ReadyAPI... que en realidad es muy poco.</p> <p>ReadyAPI se basa completamente en estas anotaciones de tipos, d\u00e1ndole muchas ventajas y beneficios.</p> <p>Pero incluso si nunca usas ReadyAPI, te beneficiar\u00eda aprender un poco sobre ellas.</p> <p>Nota</p> <p>Si eres un experto en Python, y ya sabes todo sobre las anotaciones de tipos, salta al siguiente cap\u00edtulo.</p>"},{"location":"python-types/#motivacion","title":"Motivaci\u00f3n","text":"<p>Comencemos con un ejemplo simple:</p> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Llamar a este programa genera:</p> <pre><code>John Doe\n</code></pre> <p>La funci\u00f3n hace lo siguiente:</p> <ul> <li>Toma un <code>first_name</code> y <code>last_name</code>.</li> <li>Convierte la primera letra de cada uno a may\u00fasculas con <code>title()</code>.</li> <li>Concatena ambos con un espacio en el medio.</li> </ul> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre>"},{"location":"python-types/#editalo","title":"Ed\u00edtalo","text":"<p>Es un programa muy simple.</p> <p>Pero ahora imagina que lo escribieras desde cero.</p> <p>En alg\u00fan momento habr\u00edas empezado la definici\u00f3n de la funci\u00f3n, ten\u00edas los par\u00e1metros listos...</p> <p>Pero luego tienes que llamar \"ese m\u00e9todo que convierte la primera letra a may\u00fascula\".</p> <p>\u00bfEra <code>upper</code>? \u00bfEra <code>uppercase</code>? <code>first_uppercase</code>? <code>capitalize</code>?</p> <p>Entonces, pruebas con el amigo del viejo programador, el autocompletado del editor.</p> <p>Escribes el primer par\u00e1metro de la funci\u00f3n, <code>first_name</code>, luego un punto (<code>.</code>) y luego presionas <code>Ctrl+Espacio</code> para activar el autocompletado.</p> <p>Pero, tristemente, no obtienes nada \u00fatil:</p> <p></p>"},{"location":"python-types/#anadir-tipos","title":"A\u00f1adir tipos","text":"<p>Modifiquemos una sola l\u00ednea de la versi\u00f3n anterior.</p> <p>Cambiaremos exactamente este fragmento, los par\u00e1metros de la funci\u00f3n, de:</p> <pre><code>    first_name, last_name\n</code></pre> <p>a:</p> <pre><code>    first_name: str, last_name: str\n</code></pre> <p>Eso es todo.</p> <p>Esas son las \"anotaciones de tipos\":</p> Python 3.8+ <pre><code>def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Eso no es lo mismo que declarar valores predeterminados como ser\u00eda con:</p> <pre><code>    first_name=\"john\", last_name=\"doe\"\n</code></pre> <p>Es una cosa diferente.</p> <p>Estamos usando dos puntos (<code>:</code>), no igualdades (<code>=</code>).</p> <p>Y agregar anotaciones de tipos normalmente no cambia lo que sucede de lo que ocurrir\u00eda sin ellas.</p> <p>Pero ahora, imagina que nuevamente est\u00e1s en medio de la creaci\u00f3n de esa funci\u00f3n, pero con anotaciones de tipos.</p> <p>En el mismo punto, intentas activar el autocompletado con <code>Ctrl+Espacio</code> y ves:</p> <p></p> <p>Con eso, puedes desplazarte, viendo las opciones, hasta que encuentres la que \"te suene\":</p> <p></p>"},{"location":"python-types/#mas-motivacion","title":"M\u00e1s motivaci\u00f3n","text":"<p>Revisa esta funci\u00f3n, ya tiene anotaciones de tipos:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n</code></pre> <p>Porque el editor conoce los tipos de las variables, no solo obtienes autocompletado, tambi\u00e9n obtienes chequeo de errores:</p> <p></p> <p>Ahora sabes que debes corregirlo, convertir <code>age</code> a un string con <code>str(age)</code>:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n</code></pre>"},{"location":"python-types/#declaracion-de-tipos","title":"Declaraci\u00f3n de tipos","text":"<p>Acabas de ver el lugar principal para declarar anotaciones de tipos. Como par\u00e1metros de funci\u00f3n.</p> <p>Este tambi\u00e9n es el lugar principal donde los utilizar\u00edas con ReadyAPI.</p>"},{"location":"python-types/#tipos-simples","title":"Tipos simples","text":"<p>Puedes declarar todos los tipos est\u00e1ndar de Python, no solo <code>str</code>.</p> <p>Puedes usar, por ejemplo:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> <li><code>bytes</code></li> </ul> Python 3.8+ <pre><code>def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n</code></pre>"},{"location":"python-types/#tipos-genericos-con-parametros-de-tipo","title":"Tipos gen\u00e9ricos con par\u00e1metros de tipo","text":"<p>Hay algunas estructuras de datos que pueden contener otros valores, como <code>dict</code>, <code>list</code>, <code>set</code> y <code>tuple</code>. Y los valores internos tambi\u00e9n pueden tener su propio tipo.</p> <p>Estos tipos que tienen tipos internos se denominan tipos \"gen\u00e9ricos\". Y es posible declararlos, incluso con sus tipos internos.</p> <p>Para declarar esos tipos y los tipos internos, puedes usar el m\u00f3dulo est\u00e1ndar de Python <code>typing</code>. Existe espec\u00edficamente para soportar estas anotaciones de tipos.</p>"},{"location":"python-types/#versiones-mas-recientes-de-python","title":"Versiones m\u00e1s recientes de Python","text":"<p>La sintaxis que utiliza <code>typing</code> es compatible con todas las versiones, desde Python 3.6 hasta las versiones m\u00e1s recientes, incluyendo Python 3.9, Python 3.10, etc.</p> <p>A medida que avanza Python, las versiones m\u00e1s recientes vienen con soporte mejorado para estas anotaciones de tipos y en muchos casos ni siquiera necesitar\u00e1s importar y usar el m\u00f3dulo <code>typing</code> para declarar las anotaciones de tipos.</p> <p>Si puedes elegir una versi\u00f3n m\u00e1s reciente de Python para tu proyecto, podr\u00e1s aprovechar esa simplicidad adicional.</p> <p>En toda la documentaci\u00f3n hay ejemplos compatibles con cada versi\u00f3n de Python (cuando hay una diferencia).</p> <p>Por ejemplo, \"Python 3.6+\" significa que es compatible con Python 3.6 o superior (incluyendo 3.7, 3.8, 3.9, 3.10, etc). Y \"Python 3.9+\" significa que es compatible con Python 3.9 o superior (incluyendo 3.10, etc).</p> <p>Si puedes usar las \u00faltimas versiones de Python, utiliza los ejemplos para la \u00faltima versi\u00f3n, esos tendr\u00e1n la mejor y m\u00e1s simple sintaxis, por ejemplo, \"Python 3.10+\".</p>"},{"location":"python-types/#lista","title":"Lista","text":"<p>Por ejemplo, vamos a definir una variable para ser una <code>list</code> de <code>str</code>.</p> Python 3.9+Python 3.8+ <p>Declara la variable, con la misma sintaxis de dos puntos (<code>:</code>).</p> <p>Como tipo, pon <code>list</code>.</p> <p>Como la lista es un tipo que contiene algunos tipos internos, los pones entre corchetes:</p> <pre><code>def process_items(items: list[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>De <code>typing</code>, importa <code>List</code> (con una <code>L</code> may\u00fascula):</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Declara la variable, con la misma sintaxis de dos puntos (<code>:</code>).</p> <p>Como tipo, pon el <code>List</code> que importaste de <code>typing</code>.</p> <p>Como la lista es un tipo que contiene algunos tipos internos, los pones entre corchetes:</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Informaci\u00f3n</p> <p>Esos tipos internos en los corchetes se denominan \"par\u00e1metros de tipo\".</p> <p>En este caso, <code>str</code> es el par\u00e1metro de tipo pasado a <code>List</code> (o <code>list</code> en Python 3.9 y superior).</p> <p>Eso significa: \"la variable <code>items</code> es una <code>list</code>, y cada uno de los \u00edtems en esta lista es un <code>str</code>\".</p> <p>Consejo</p> <p>Si usas Python 3.9 o superior, no tienes que importar <code>List</code> de <code>typing</code>, puedes usar el mismo tipo <code>list</code> regular en su lugar.</p> <p>Al hacer eso, tu editor puede proporcionar soporte incluso mientras procesa elementos de la lista:</p> <p></p> <p>Sin tipos, eso es casi imposible de lograr.</p> <p>Nota que la variable <code>item</code> es uno de los elementos en la lista <code>items</code>.</p> <p>Y a\u00fan as\u00ed, el editor sabe que es un <code>str</code> y proporciona soporte para eso.</p>"},{"location":"python-types/#tuple-y-set","title":"Tuple y Set","text":"<p>Har\u00edas lo mismo para declarar <code>tuple</code>s y <code>set</code>s:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s\n</code></pre> <pre><code>from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n</code></pre> <p>Esto significa:</p> <ul> <li>La variable <code>items_t</code> es un <code>tuple</code> con 3 \u00edtems, un <code>int</code>, otro <code>int</code>, y un <code>str</code>.</li> <li>La variable <code>items_s</code> es un <code>set</code>, y cada uno de sus \u00edtems es del tipo <code>bytes</code>.</li> </ul>"},{"location":"python-types/#dict","title":"Dict","text":"<p>Para definir un <code>dict</code>, pasas 2 par\u00e1metros de tipo, separados por comas.</p> <p>El primer par\u00e1metro de tipo es para las claves del <code>dict</code>.</p> <p>El segundo par\u00e1metro de tipo es para los valores del <code>dict</code>:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <pre><code>from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <p>Esto significa:</p> <ul> <li>La variable <code>prices</code> es un <code>dict</code>:<ul> <li>Las claves de este <code>dict</code> son del tipo <code>str</code> (digamos, el nombre de cada \u00edtem).</li> <li>Los valores de este <code>dict</code> son del tipo <code>float</code> (digamos, el precio de cada \u00edtem).</li> </ul> </li> </ul>"},{"location":"python-types/#union","title":"Union","text":"<p>Puedes declarar que una variable puede ser cualquier de varios tipos, por ejemplo, un <code>int</code> o un <code>str</code>.</p> <p>En Python 3.6 y posterior (incluyendo Python 3.10) puedes usar el tipo <code>Union</code> de <code>typing</code> y poner dentro de los corchetes los posibles tipos a aceptar.</p> <p>En Python 3.10 tambi\u00e9n hay una nueva sintaxis donde puedes poner los posibles tipos separados por una barra vertical (<code>|</code>).</p> Python 3.10+Python 3.8+ <pre><code>def process_item(item: int | str):\n    print(item)\n</code></pre> <pre><code>from typing import Union\n\n\ndef process_item(item: Union[int, str]):\n    print(item)\n</code></pre> <p>En ambos casos, esto significa que <code>item</code> podr\u00eda ser un <code>int</code> o un <code>str</code>.</p>"},{"location":"python-types/#posiblemente-none","title":"Posiblemente <code>None</code>","text":"<p>Puedes declarar que un valor podr\u00eda tener un tipo, como <code>str</code>, pero que tambi\u00e9n podr\u00eda ser <code>None</code>.</p> <p>En Python 3.6 y posteriores (incluyendo Python 3.10) puedes declararlo importando y usando <code>Optional</code> del m\u00f3dulo <code>typing</code>.</p> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <p>Usar <code>Optional[str]</code> en lugar de solo <code>str</code> te permitir\u00e1 al editor ayudarte a detectar errores donde podr\u00edas estar asumiendo que un valor siempre es un <code>str</code>, cuando en realidad tambi\u00e9n podr\u00eda ser <code>None</code>.</p> <p><code>Optional[Something]</code> es realmente un atajo para <code>Union[Something, None]</code>, son equivalentes.</p> <p>Esto tambi\u00e9n significa que en Python 3.10, puedes usar <code>Something | None</code>:</p> Python 3.10+Python 3.8+Python 3.8+ alternative <pre><code>def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Union\n\n\ndef say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre>"},{"location":"python-types/#uso-de-union-u-optional","title":"Uso de <code>Union</code> u <code>Optional</code>","text":"<p>Si est\u00e1s usando una versi\u00f3n de Python inferior a 3.10, aqu\u00ed tienes un consejo desde mi punto de vista muy subjetivo:</p> <ul> <li>\ud83d\udea8 Evita usar <code>Optional[SomeType]</code></li> <li>En su lugar \u2728 usa <code>Union[SomeType, None]</code> \u2728.</li> </ul> <p>Ambos son equivalentes y debajo son lo mismo, pero recomendar\u00eda <code>Union</code> en lugar de <code>Optional</code> porque la palabra \"opcional\" parecer\u00eda implicar que el valor es opcional, y en realidad significa \"puede ser <code>None</code>\", incluso si no es opcional y a\u00fan es requerido.</p> <p>Creo que <code>Union[SomeType, None]</code> es m\u00e1s expl\u00edcito sobre lo que significa.</p> <p>Se trata solo de las palabras y nombres. Pero esas palabras pueden afectar c\u00f3mo t\u00fa y tus compa\u00f1eros de equipo piensan sobre el c\u00f3digo.</p> <p>Como ejemplo, tomemos esta funci\u00f3n:</p> Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> <p>El par\u00e1metro <code>name</code> est\u00e1 definido como <code>Optional[str]</code>, pero no es opcional, no puedes llamar a la funci\u00f3n sin el par\u00e1metro:</p> <pre><code>say_hi()  # \u00a1Oh, no, esto lanza un error! \ud83d\ude31\n</code></pre> <p>El par\u00e1metro <code>name</code> sigue siendo requerido (no opcional) porque no tiene un valor predeterminado. A\u00fan as\u00ed, <code>name</code> acepta <code>None</code> como valor:</p> <pre><code>say_hi(name=None)  # Esto funciona, None es v\u00e1lido \ud83c\udf89\n</code></pre> <p>La buena noticia es que, una vez que est\u00e9s en Python 3.10, no tendr\u00e1s que preocuparte por eso, ya que podr\u00e1s simplemente usar <code>|</code> para definir uniones de tipos:</p> Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> <p>Y entonces no tendr\u00e1s que preocuparte por nombres como <code>Optional</code> y <code>Union</code>. \ud83d\ude0e</p>"},{"location":"python-types/#tipos-genericos","title":"Tipos gen\u00e9ricos","text":"<p>Estos tipos que toman par\u00e1metros de tipo en corchetes se llaman Tipos Gen\u00e9ricos o Gen\u00e9ricos, por ejemplo:</p> Python 3.10+Python 3.9+Python 3.8+ <p>Puedes usar los mismos tipos integrados como gen\u00e9ricos (con corchetes y tipos dentro):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>Y lo mismo que con Python 3.8, desde el m\u00f3dulo <code>typing</code>:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code> (lo mismo que con Python 3.8)</li> <li>...y otros.</li> </ul> <p>En Python 3.10, como alternativa a usar los gen\u00e9ricos <code>Union</code> y <code>Optional</code>, puedes usar la barra vertical (<code>|</code>) para declarar uniones de tipos, eso es mucho mejor y m\u00e1s simple.</p> <p>Puedes usar los mismos tipos integrados como gen\u00e9ricos (con corchetes y tipos dentro):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>Y lo mismo que con Python 3.8, desde el m\u00f3dulo <code>typing</code>:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...y otros.</li> </ul> <ul> <li><code>List</code></li> <li><code>Tuple</code></li> <li><code>Set</code></li> <li><code>Dict</code></li> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...y otros.</li> </ul>"},{"location":"python-types/#clases-como-tipos","title":"Clases como tipos","text":"<p>Tambi\u00e9n puedes declarar una clase como el tipo de una variable.</p> <p>Digamos que tienes una clase <code>Person</code>, con un nombre:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Luego puedes declarar una variable para que sea de tipo <code>Person</code>:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Y luego, nuevamente, obtienes todo el soporte del editor:</p> <p></p> <p>Nota que esto significa \"<code>one_person</code> es una instance de la clase <code>Person</code>\".</p> <p>No significa \"<code>one_person</code> es la clase llamada <code>Person</code>\".</p>"},{"location":"python-types/#modelos-pydantic","title":"Modelos Pydantic","text":"<p>Pydantic es un paquete de Python para realizar la validaci\u00f3n de datos.</p> <p>Declaras la \"forma\" de los datos como clases con atributos.</p> <p>Y cada atributo tiene un tipo.</p> <p>Entonces creas un instance de esa clase con algunos valores y validar\u00e1 los valores, los convertir\u00e1 al tipo adecuado (si es el caso) y te dar\u00e1 un objeto con todos los datos.</p> <p>Y obtienes todo el soporte del editor con ese objeto resultante.</p> <p>Un ejemplo de la documentaci\u00f3n oficial de Pydantic:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <p>Informaci\u00f3n</p> <p>Para saber m\u00e1s sobre Pydantic, revisa su documentaci\u00f3n.</p> <p>ReadyAPI est\u00e1 completamente basado en Pydantic.</p> <p>Ver\u00e1s mucho m\u00e1s de todo esto en pr\u00e1ctica en el Tutorial - Gu\u00eda del Usuario.</p> <p>Consejo</p> <p>Pydantic tiene un comportamiento especial cuando utilizas <code>Optional</code> o <code>Union[Something, None]</code> sin un valor por defecto, puedes leer m\u00e1s sobre ello en la documentaci\u00f3n de Pydantic sobre Required Optional fields.</p>"},{"location":"python-types/#anotaciones-de-tipos-con-metadata","title":"Anotaciones de tipos con metadata","text":"<p>Python tambi\u00e9n tiene una funcionalidad que permite poner metadata adicional en estas anotaciones de tipos usando <code>Annotated</code>.</p> Python 3.9+Python 3.8+ <p>En Python 3.9, <code>Annotated</code> es parte de la librer\u00eda est\u00e1ndar, as\u00ed que puedes importarlo desde <code>typing</code>.</p> <pre><code>from typing import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>En versiones por debajo de Python 3.9, importas <code>Annotated</code> de <code>typing_extensions</code>.</p> <p>Ya estar\u00e1 instalado con ReadyAPI.</p> <pre><code>from typing_extensions import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>Python en s\u00ed no hace nada con este <code>Annotated</code>. Y para los editores y otras herramientas, el tipo sigue siendo <code>str</code>.</p> <p>Pero puedes usar este espacio en <code>Annotated</code> para proporcionar a ReadyAPI metadata adicional sobre c\u00f3mo quieres que se comporte tu aplicaci\u00f3n.</p> <p>Lo importante a recordar es que el primer par\u00e1metro de tipo que pasas a <code>Annotated</code> es el tipo real. El resto es solo metadata para otras herramientas.</p> <p>Por ahora, solo necesitas saber que <code>Annotated</code> existe, y que es Python est\u00e1ndar. \ud83d\ude0e</p> <p>Luego ver\u00e1s lo poderoso que puede ser.</p> <p>Consejo</p> <p>El hecho de que esto sea Python est\u00e1ndar significa que seguir\u00e1s obteniendo la mejor experiencia de desarrollador posible en tu editor, con las herramientas que usas para analizar y refactorizar tu c\u00f3digo, etc. \u2728</p> <p>Y tambi\u00e9n que tu c\u00f3digo ser\u00e1 muy compatible con muchas otras herramientas y paquetes de Python. \ud83d\ude80</p>"},{"location":"python-types/#anotaciones-de-tipos-en-readyapi","title":"Anotaciones de tipos en ReadyAPI","text":"<p>ReadyAPI aprovecha estas anotaciones de tipos para hacer varias cosas.</p> <p>Con ReadyAPI declaras par\u00e1metros con anotaciones de tipos y obtienes:</p> <ul> <li>Soporte del editor.</li> <li>Chequeo de tipos.</li> </ul> <p>...y ReadyAPI usa las mismas declaraciones para:</p> <ul> <li>Definir requerimientos: de par\u00e1metros de path de la request, par\u00e1metros de query, headers, bodies, dependencias, etc.</li> <li>Convertir datos: de la request al tipo requerido.</li> <li>Validar datos: provenientes de cada request:<ul> <li>Generando errores autom\u00e1ticos devueltos al cliente cuando los datos son inv\u00e1lidos.</li> </ul> </li> <li>Documentar la API usando OpenAPI:<ul> <li>Que luego es usada por las interfaces de documentaci\u00f3n interactiva autom\u00e1tica.</li> </ul> </li> </ul> <p>Todo esto puede sonar abstracto. No te preocupes. Ver\u00e1s todo esto en acci\u00f3n en el Tutorial - Gu\u00eda del Usuario.</p> <p>Lo importante es que al usar tipos est\u00e1ndar de Python, en un solo lugar (en lugar de agregar m\u00e1s clases, decoradores, etc.), ReadyAPI har\u00e1 gran parte del trabajo por ti.</p> <p>Informaci\u00f3n</p> <p>Si ya revisaste todo el tutorial y volviste para ver m\u00e1s sobre tipos, un buen recurso es la \"cheat sheet\" de <code>mypy</code>.</p>"},{"location":"readyapi-cli/","title":"ReadyAPI CLI","text":"<p>ReadyAPI CLI es un programa de l\u00ednea de comandos que puedes usar para servir tu aplicaci\u00f3n ReadyAPI, gestionar tu proyecto ReadyAPI, y m\u00e1s.</p> <p>Cuando instalas ReadyAPI (por ejemplo, con <code>pip install \"readyapi[standard]\"</code>), incluye un paquete llamado <code>readyapi-cli</code>, este paquete proporciona el comando <code>readyapi</code> en la terminal.</p> <p>Para ejecutar tu aplicaci\u00f3n ReadyAPI en modo de desarrollo, puedes usar el comando <code>readyapi dev</code>:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting development server \ud83d\ude80\n\n             Searching for package file structure from directories with\n             &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with the\n             following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; tip &lt;/font&gt;&lt;/span&gt;  Running in development mode, for production use:\n             &lt;b&gt;readyapi run&lt;/b&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Will watch for changes in these directories:\n             &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#4E9A06\"&gt;&amp;apos;/home/user/code/awesomeapp&amp;apos;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C to\n             quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started reloader process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383138&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt; using WatchFiles\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383153&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>El programa de l\u00ednea de comandos llamado <code>readyapi</code> es ReadyAPI CLI.</p> <p>ReadyAPI CLI toma el path de tu programa Python (por ejemplo, <code>main.py</code>), detecta autom\u00e1ticamente la <code>ReadyAPI</code> instance (com\u00fanmente llamada <code>app</code>), determina el proceso de import correcto, y luego la sirve.</p> <p>Para producci\u00f3n usar\u00edas <code>readyapi run</code> en su lugar. \ud83d\ude80</p> <p>Internamente, ReadyAPI CLI usa Uvicorn, un servidor ASGI de alto rendimiento y listo para producci\u00f3n. \ud83d\ude0e</p>"},{"location":"readyapi-cli/#readyapi-dev","title":"<code>readyapi dev</code>","text":"<p>Ejecutar <code>readyapi dev</code> inicia el modo de desarrollo.</p> <p>Por defecto, auto-reload est\u00e1 habilitado, recargando autom\u00e1ticamente el servidor cuando realizas cambios en tu c\u00f3digo. Esto consume muchos recursos y podr\u00eda ser menos estable que cuando est\u00e1 deshabilitado. Deber\u00edas usarlo solo para desarrollo. Tambi\u00e9n escucha en la direcci\u00f3n IP <code>127.0.0.1</code>, que es la IP para que tu m\u00e1quina se comunique solo consigo misma (<code>localhost</code>).</p>"},{"location":"readyapi-cli/#readyapi-run","title":"<code>readyapi run</code>","text":"<p>Ejecutar <code>readyapi run</code> inicia ReadyAPI en modo de producci\u00f3n por defecto.</p> <p>Por defecto, auto-reload est\u00e1 deshabilitado. Tambi\u00e9n escucha en la direcci\u00f3n IP <code>0.0.0.0</code>, lo que significa todas las direcciones IP disponibles, de esta manera ser\u00e1 accesible p\u00fablicamente por cualquiera que pueda comunicarse con la m\u00e1quina. Esta es la manera en la que normalmente lo ejecutar\u00edas en producci\u00f3n, por ejemplo, en un contenedor.</p> <p>En la mayor\u00eda de los casos tendr\u00edas (y deber\u00edas) tener un \"proxy de terminaci\u00f3n\" manejando HTTPS por ti, esto depender\u00e1 de c\u00f3mo despliegues tu aplicaci\u00f3n, tu proveedor podr\u00eda hacer esto por ti, o podr\u00edas necesitar configurarlo t\u00fa mismo.</p> <p>Consejo</p> <p>Puedes aprender m\u00e1s al respecto en la documentaci\u00f3n de despliegue.</p>"},{"location":"virtual-environments/","title":"Entornos Virtuales","text":"<p>Cuando trabajas en proyectos de Python probablemente deber\u00edas usar un entorno virtual (o un mecanismo similar) para aislar los paquetes que instalas para cada proyecto.</p> <p>Informaci\u00f3n</p> <p>Si ya sabes sobre entornos virtuales, c\u00f3mo crearlos y usarlos, podr\u00edas querer saltar esta secci\u00f3n. \ud83e\udd13</p> <p>Consejo</p> <p>Un entorno virtual es diferente de una variable de entorno.</p> <p>Una variable de entorno es una variable en el sistema que puede ser usada por programas.</p> <p>Un entorno virtual es un directorio con algunos archivos en \u00e9l.</p> <p>Informaci\u00f3n</p> <p>Esta p\u00e1gina te ense\u00f1ar\u00e1 c\u00f3mo usar entornos virtuales y c\u00f3mo funcionan.</p> <p>Si est\u00e1s listo para adoptar una herramienta que gestiona todo por ti (incluyendo la instalaci\u00f3n de Python), prueba uv.</p>"},{"location":"virtual-environments/#crea-un-proyecto","title":"Crea un Proyecto","text":"<p>Primero, crea un directorio para tu proyecto.</p> <p>Lo que normalmente hago es crear un directorio llamado <code>code</code> dentro de mi directorio de usuario.</p> <p>Y dentro de eso creo un directorio por proyecto.</p> <pre><code>// Ve al directorio principal\n$ cd\n// Crea un directorio para todos tus proyectos de c\u00f3digo\n$ mkdir code\n// Entra en ese directorio de c\u00f3digo\n$ cd code\n// Crea un directorio para este proyecto\n$ mkdir awesome-project\n// Entra en ese directorio del proyecto\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#crea-un-entorno-virtual","title":"Crea un Entorno Virtual","text":"<p>Cuando empiezas a trabajar en un proyecto de Python por primera vez, crea un entorno virtual dentro de tu proyecto.</p> <p>Consejo</p> <p>Solo necesitas hacer esto una vez por proyecto, no cada vez que trabajas.</p> <code>venv</code><code>uv</code> <p>Para crear un entorno virtual, puedes usar el m\u00f3dulo <code>venv</code> que viene con Python.</p> <pre><code>$ python -m venv .venv\n</code></pre> Qu\u00e9 significa ese comando <ul> <li><code>python</code>: usa el programa llamado <code>python</code></li> <li><code>-m</code>: llama a un m\u00f3dulo como un script, indicaremos cu\u00e1l m\u00f3dulo a continuaci\u00f3n</li> <li><code>venv</code>: usa el m\u00f3dulo llamado <code>venv</code> que normalmente viene instalado con Python</li> <li><code>.venv</code>: crea el entorno virtual en el nuevo directorio <code>.venv</code></li> </ul> <p>Si tienes instalado <code>uv</code>, puedes usarlo para crear un entorno virtual.</p> <pre><code>$ uv venv\n</code></pre> <p>Consejo</p> <p>Por defecto, <code>uv</code> crear\u00e1 un entorno virtual en un directorio llamado <code>.venv</code>.</p> <p>Pero podr\u00edas personalizarlo pasando un argumento adicional con el nombre del directorio.</p> <p>Ese comando crea un nuevo entorno virtual en un directorio llamado <code>.venv</code>.</p> <code>.venv</code> u otro nombre <p>Podr\u00edas crear el entorno virtual en un directorio diferente, pero hay una convenci\u00f3n de llamarlo <code>.venv</code>.</p>"},{"location":"virtual-environments/#activa-el-entorno-virtual","title":"Activa el Entorno Virtual","text":"<p>Activa el nuevo entorno virtual para que cualquier comando de Python que ejecutes o paquete que instales lo utilicen.</p> <p>Consejo</p> <p>Haz esto cada vez que inicies una nueva sesi\u00f3n de terminal para trabajar en el proyecto.</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>O si usas Bash para Windows (por ejemplo, Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Consejo</p> <p>Cada vez que instales un nuevo paquete en ese entorno, activa el entorno de nuevo.</p> <p>Esto asegura que si usas un programa de terminal (CLI) instalado por ese paquete, uses el de tu entorno virtual y no cualquier otro que podr\u00eda estar instalado globalmente, probablemente con una versi\u00f3n diferente a la que necesitas.</p>"},{"location":"virtual-environments/#verifica-que-el-entorno-virtual-este-activo","title":"Verifica que el Entorno Virtual est\u00e9 Activo","text":"<p>Verifica que el entorno virtual est\u00e9 activo (el comando anterior funcion\u00f3).</p> <p>Consejo</p> <p>Esto es opcional, pero es una buena forma de revisar que todo est\u00e1 funcionando como se esperaba y est\u00e1s usando el entorno virtual que pretendes.</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>Si muestra el binario de <code>python</code> en <code>.venv/bin/python</code>, dentro de tu proyecto (en este caso <code>awesome-project</code>), entonces funcion\u00f3. \ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>Si muestra el binario de <code>python</code> en <code>.venv\\Scripts\\python</code>, dentro de tu proyecto (en este caso <code>awesome-project</code>), entonces funcion\u00f3. \ud83c\udf89</p>"},{"location":"virtual-environments/#actualiza-pip","title":"Actualiza <code>pip</code>","text":"<p>Consejo</p> <p>Si usas <code>uv</code> usar\u00edas eso para instalar cosas en lugar de <code>pip</code>, por lo que no necesitas actualizar <code>pip</code>. \ud83d\ude0e</p> <p>Si est\u00e1s usando <code>pip</code> para instalar paquetes (viene por defecto con Python), deber\u00edas actualizarlo a la \u00faltima versi\u00f3n.</p> <p>Muchos errores ex\u00f3ticos al instalar un paquete se resuelven simplemente actualizando <code>pip</code> primero.</p> <p>Consejo</p> <p>Normalmente har\u00edas esto una vez, justo despu\u00e9s de crear el entorno virtual.</p> <p>Aseg\u00farate de que el entorno virtual est\u00e9 activo (con el comando anterior) y luego ejecuta:</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#anade-gitignore","title":"A\u00f1ade <code>.gitignore</code>","text":"<p>Si est\u00e1s usando Git (deber\u00edas), a\u00f1ade un archivo <code>.gitignore</code> para excluir todo en tu <code>.venv</code> de Git.</p> <p>Consejo</p> <p>Si usaste <code>uv</code> para crear el entorno virtual, ya lo hizo por ti, puedes saltarte este paso. \ud83d\ude0e</p> <p>Consejo</p> <p>Haz esto una vez, justo despu\u00e9s de crear el entorno virtual.</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> Qu\u00e9 significa ese comando <ul> <li><code>echo \"*\"</code>: \"imprimir\u00e1\" el texto <code>*</code> en el terminal (la siguiente parte cambia eso un poco)</li> <li><code>&gt;</code>: cualquier cosa impresa en el terminal por el comando a la izquierda de <code>&gt;</code> no deber\u00eda imprimirse, sino escribirse en el archivo que va a la derecha de <code>&gt;</code></li> <li><code>.gitignore</code>: el nombre del archivo donde deber\u00eda escribirse el texto</li> </ul> <p>Y <code>*</code> para Git significa \"todo\". As\u00ed que, ignorar\u00e1 todo en el directorio <code>.venv</code>.</p> <p>Ese comando crear\u00e1 un archivo <code>.gitignore</code> con el contenido:</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#instala-paquetes","title":"Instala Paquetes","text":"<p>Despu\u00e9s de activar el entorno, puedes instalar paquetes en \u00e9l.</p> <p>Consejo</p> <p>Haz esto una vez al instalar o actualizar los paquetes que necesita tu proyecto.</p> <p>Si necesitas actualizar una versi\u00f3n o agregar un nuevo paquete, har\u00edas esto de nuevo.</p>"},{"location":"virtual-environments/#instala-paquetes-directamente","title":"Instala Paquetes Directamente","text":"<p>Si tienes prisa y no quieres usar un archivo para declarar los requisitos de paquetes de tu proyecto, puedes instalarlos directamente.</p> <p>Consejo</p> <p>Es una (muy) buena idea poner los paquetes y las versiones que necesita tu programa en un archivo (por ejemplo, <code>requirements.txt</code> o <code>pyproject.toml</code>).</p> <code>pip</code><code>uv</code> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Si tienes <code>uv</code>:</p> <pre><code>$ uv pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#instala-desde-requirementstxt","title":"Instala desde <code>requirements.txt</code>","text":"<p>Si tienes un <code>requirements.txt</code>, ahora puedes usarlo para instalar sus paquetes.</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>Si tienes <code>uv</code>:</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>Un <code>requirements.txt</code> con algunos paquetes podr\u00eda verse as\u00ed:</p> <pre><code>readyapi[standard]==0.113.0\npydantic==2.8.0\n</code></pre>"},{"location":"virtual-environments/#ejecuta-tu-programa","title":"Ejecuta Tu Programa","text":"<p>Despu\u00e9s de activar el entorno virtual, puedes ejecutar tu programa, y usar\u00e1 el Python dentro de tu entorno virtual con los paquetes que instalaste all\u00ed.</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#configura-tu-editor","title":"Configura Tu Editor","text":"<p>Probablemente usar\u00edas un editor, aseg\u00farate de configurarlo para que use el mismo entorno virtual que creaste (probablemente lo autodetectar\u00e1) para que puedas obtener autocompletado y errores en l\u00ednea.</p> <p>Por ejemplo:</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Consejo</p> <p>Normalmente solo tendr\u00edas que hacer esto una vez, cuando crees el entorno virtual.</p>"},{"location":"virtual-environments/#desactiva-el-entorno-virtual","title":"Desactiva el Entorno Virtual","text":"<p>Una vez que hayas terminado de trabajar en tu proyecto, puedes desactivar el entorno virtual.</p> <pre><code>$ deactivate\n</code></pre> <p>De esta manera, cuando ejecutes <code>python</code> no intentar\u00e1 ejecutarse desde ese entorno virtual con los paquetes instalados all\u00ed.</p>"},{"location":"virtual-environments/#listo-para-trabajar","title":"Listo para Trabajar","text":"<p>Ahora est\u00e1s listo para empezar a trabajar en tu proyecto.</p> <p>Consejo</p> <p>\u00bfQuieres entender todo lo anterior?</p> <p>Contin\u00faa leyendo. \ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#por-que-entornos-virtuales","title":"Por qu\u00e9 Entornos Virtuales","text":"<p>Para trabajar con ReadyAPI necesitas instalar Python.</p> <p>Despu\u00e9s de eso, necesitar\u00edas instalar ReadyAPI y cualquier otro paquete que desees usar.</p> <p>Para instalar paquetes normalmente usar\u00edas el comando <code>pip</code> que viene con Python (o alternativas similares).</p> <p>Sin embargo, si solo usas <code>pip</code> directamente, los paquetes se instalar\u00edan en tu entorno global de Python (la instalaci\u00f3n global de Python).</p>"},{"location":"virtual-environments/#el-problema","title":"El Problema","text":"<p>Entonces, \u00bfcu\u00e1l es el problema de instalar paquetes en el entorno global de Python?</p> <p>En alg\u00fan momento, probablemente terminar\u00e1s escribiendo muchos programas diferentes que dependen de diferentes paquetes. Y algunos de estos proyectos en los que trabajas depender\u00e1n de diferentes versiones del mismo paquete. \ud83d\ude31</p> <p>Por ejemplo, podr\u00edas crear un proyecto llamado <code>philosophers-stone</code>, este programa depende de otro paquete llamado <code>harry</code>, usando la versi\u00f3n <code>1</code>. As\u00ed que, necesitas instalar <code>harry</code>.</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>Luego, en alg\u00fan momento despu\u00e9s, creas otro proyecto llamado <code>prisoner-of-azkaban</code>, y este proyecto tambi\u00e9n depende de <code>harry</code>, pero este proyecto necesita <code>harry</code> versi\u00f3n <code>3</code>.</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>Pero ahora el problema es, si instalas los paquetes globalmente (en el entorno global) en lugar de en un entorno virtual local, tendr\u00e1s que elegir qu\u00e9 versi\u00f3n de <code>harry</code> instalar.</p> <p>Si deseas ejecutar <code>philosophers-stone</code> necesitar\u00e1s primero instalar <code>harry</code> versi\u00f3n <code>1</code>, por ejemplo con:</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>Y entonces terminar\u00edas con <code>harry</code> versi\u00f3n <code>1</code> instalada en tu entorno global de Python.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>Pero luego si deseas ejecutar <code>prisoner-of-azkaban</code>, necesitar\u00e1s desinstalar <code>harry</code> versi\u00f3n <code>1</code> e instalar <code>harry</code> versi\u00f3n <code>3</code> (o simplemente instalar la versi\u00f3n <code>3</code> autom\u00e1ticamente desinstalar\u00eda la versi\u00f3n <code>1</code>).</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>Y entonces terminar\u00edas con <code>harry</code> versi\u00f3n <code>3</code> instalada en tu entorno global de Python.</p> <p>Y si intentas ejecutar <code>philosophers-stone</code> de nuevo, hay una posibilidad de que no funcione porque necesita <code>harry</code> versi\u00f3n <code>1</code>.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Consejo</p> <p>Es muy com\u00fan en los paquetes de Python intentar lo mejor para evitar romper cambios en nuevas versiones, pero es mejor estar seguro e instalar nuevas versiones intencionalmente y cuando puedas ejecutar las pruebas para verificar que todo est\u00e1 funcionando correctamente.</p> <p>Ahora, imagina eso con muchos otros paquetes de los que dependen todos tus proyectos. Eso es muy dif\u00edcil de manejar. Y probablemente terminar\u00edas ejecutando algunos proyectos con algunas versiones incompatibles de los paquetes, y sin saber por qu\u00e9 algo no est\u00e1 funcionando.</p> <p>Adem\u00e1s, dependiendo de tu sistema operativo (por ejemplo, Linux, Windows, macOS), podr\u00eda haber venido con Python ya instalado. Y en ese caso probablemente ten\u00eda algunos paquetes preinstalados con algunas versiones espec\u00edficas necesitadas por tu sistema. Si instalas paquetes en el entorno global de Python, podr\u00edas terminar rompiendo algunos de los programas que vinieron con tu sistema operativo.</p>"},{"location":"virtual-environments/#donde-se-instalan-los-paquetes","title":"D\u00f3nde se Instalan los Paquetes","text":"<p>Cuando instalas Python, crea algunos directorios con algunos archivos en tu computadora.</p> <p>Algunos de estos directorios son los encargados de tener todos los paquetes que instalas.</p> <p>Cuando ejecutas:</p> <pre><code>// No ejecutes esto ahora, solo es un ejemplo \ud83e\udd13\n$ pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre> <p>Eso descargar\u00e1 un archivo comprimido con el c\u00f3digo de ReadyAPI, normalmente desde PyPI.</p> <p>Tambi\u00e9n descargar\u00e1 archivos para otros paquetes de los que depende ReadyAPI.</p> <p>Luego, extraer\u00e1 todos esos archivos y los pondr\u00e1 en un directorio en tu computadora.</p> <p>Por defecto, pondr\u00e1 esos archivos descargados y extra\u00eddos en el directorio que viene con tu instalaci\u00f3n de Python, eso es el entorno global.</p>"},{"location":"virtual-environments/#que-son-los-entornos-virtuales","title":"Qu\u00e9 son los Entornos Virtuales","text":"<p>La soluci\u00f3n a los problemas de tener todos los paquetes en el entorno global es usar un entorno virtual para cada proyecto en el que trabajas.</p> <p>Un entorno virtual es un directorio, muy similar al global, donde puedes instalar los paquetes para un proyecto.</p> <p>De esta manera, cada proyecto tendr\u00e1 su propio entorno virtual (directorio <code>.venv</code>) con sus propios paquetes.</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#que-significa-activar-un-entorno-virtual","title":"Qu\u00e9 Significa Activar un Entorno Virtual","text":"<p>Cuando activas un entorno virtual, por ejemplo con:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>O si usas Bash para Windows (por ejemplo, Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Ese comando crear\u00e1 o modificar\u00e1 algunas variables de entorno que estar\u00e1n disponibles para los siguientes comandos.</p> <p>Una de esas variables es la variable <code>PATH</code>.</p> <p>Consejo</p> <p>Puedes aprender m\u00e1s sobre la variable de entorno <code>PATH</code> en la secci\u00f3n Variables de Entorno.</p> <p>Activar un entorno virtual agrega su path <code>.venv/bin</code> (en Linux y macOS) o <code>.venv\\Scripts</code> (en Windows) a la variable de entorno <code>PATH</code>.</p> <p>Digamos que antes de activar el entorno, la variable <code>PATH</code> se ve\u00eda as\u00ed:</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Eso significa que el sistema buscar\u00eda programas en:</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>Eso significa que el sistema buscar\u00eda programas en:</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>Despu\u00e9s de activar el entorno virtual, la variable <code>PATH</code> se ver\u00eda algo as\u00ed:</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Eso significa que el sistema ahora comenzar\u00e1 a buscar primero los programas en:</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>antes de buscar en los otros directorios.</p> <p>As\u00ed que, cuando escribas <code>python</code> en el terminal, el sistema encontrar\u00e1 el programa Python en</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>y utilizar\u00e1 ese.</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>Eso significa que el sistema ahora comenzar\u00e1 a buscar primero los programas en:</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>antes de buscar en los otros directorios.</p> <p>As\u00ed que, cuando escribas <code>python</code> en el terminal, el sistema encontrar\u00e1 el programa Python en</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>y utilizar\u00e1 ese.</p> <p>Un detalle importante es que pondr\u00e1 el path del entorno virtual al comienzo de la variable <code>PATH</code>. El sistema lo encontrar\u00e1 antes que cualquier otro Python disponible. De esta manera, cuando ejecutes <code>python</code>, utilizar\u00e1 el Python del entorno virtual en lugar de cualquier otro <code>python</code> (por ejemplo, un <code>python</code> de un entorno global).</p> <p>Activar un entorno virtual tambi\u00e9n cambia un par de otras cosas, pero esta es una de las cosas m\u00e1s importantes que hace.</p>"},{"location":"virtual-environments/#verificando-un-entorno-virtual","title":"Verificando un Entorno Virtual","text":"<p>Cuando revisas si un entorno virtual est\u00e1 activo, por ejemplo con:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>Eso significa que el programa <code>python</code> que se utilizar\u00e1 es el que est\u00e1 en el entorno virtual.</p> <p>Usas <code>which</code> en Linux y macOS y <code>Get-Command</code> en Windows PowerShell.</p> <p>La forma en que funciona ese comando es que ir\u00e1 y revisar\u00e1 la variable de entorno <code>PATH</code>, pasando por cada path en orden, buscando el programa llamado <code>python</code>. Una vez que lo encuentre, te mostrar\u00e1 el path a ese programa.</p> <p>La parte m\u00e1s importante es que cuando llamas a <code>python</code>, ese es el exacto \"<code>python</code>\" que ser\u00e1 ejecutado.</p> <p>As\u00ed que, puedes confirmar si est\u00e1s en el entorno virtual correcto.</p> <p>Consejo</p> <p>Es f\u00e1cil activar un entorno virtual, obtener un Python, y luego ir a otro proyecto.</p> <p>Y el segundo proyecto no funcionar\u00eda porque est\u00e1s usando el Python incorrecto, de un entorno virtual para otro proyecto.</p> <p>Es \u00fatil poder revisar qu\u00e9 <code>python</code> se est\u00e1 usando. \ud83e\udd13</p>"},{"location":"virtual-environments/#por-que-desactivar-un-entorno-virtual","title":"Por qu\u00e9 Desactivar un Entorno Virtual","text":"<p>Por ejemplo, podr\u00edas estar trabajando en un proyecto <code>philosophers-stone</code>, activar ese entorno virtual, instalar paquetes y trabajar con ese entorno.</p> <p>Y luego quieres trabajar en otro proyecto <code>prisoner-of-azkaban</code>.</p> <p>Vas a ese proyecto:</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>Si no desactivas el entorno virtual para <code>philosophers-stone</code>, cuando ejecutes <code>python</code> en el terminal, intentar\u00e1 usar el Python de <code>philosophers-stone</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importando sirius, no est\u00e1 instalado \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>Pero si desactivas el entorno virtual y activas el nuevo para <code>prisoner-of-askaban</code> entonces cuando ejecutes <code>python</code> utilizar\u00e1 el Python del entorno virtual en <code>prisoner-of-azkaban</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// No necesitas estar en el directorio antiguo para desactivar, puedes hacerlo donde sea que est\u00e9s, incluso despu\u00e9s de ir al otro proyecto \ud83d\ude0e\n$ deactivate\n\n// Activa el entorno virtual en prisoner-of-azkaban/.venv \ud83d\ude80\n$ source .venv/bin/activate\n\n// Ahora cuando ejecutes python, encontrar\u00e1 el paquete sirius instalado en este entorno virtual \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#alternativas","title":"Alternativas","text":"<p>Esta es una gu\u00eda simple para comenzar y ense\u00f1arte c\u00f3mo funciona todo por debajo.</p> <p>Hay muchas alternativas para gestionar entornos virtuales, dependencias de paquetes (requisitos), proyectos.</p> <p>Una vez que est\u00e9s listo y quieras usar una herramienta para gestionar todo el proyecto, dependencias de paquetes, entornos virtuales, etc. Te sugerir\u00eda probar uv.</p> <p><code>uv</code> puede hacer muchas cosas, puede:</p> <ul> <li>Instalar Python por ti, incluyendo diferentes versiones</li> <li>Gestionar el entorno virtual para tus proyectos</li> <li>Instalar paquetes</li> <li>Gestionar dependencias y versiones de paquetes para tu proyecto</li> <li>Asegurarse de que tengas un conjunto exacto de paquetes y versiones para instalar, incluidas sus dependencias, para que puedas estar seguro de que puedes ejecutar tu proyecto en producci\u00f3n exactamente igual que en tu computadora mientras desarrollas, esto se llama locking</li> <li>Y muchas otras cosas</li> </ul>"},{"location":"virtual-environments/#conclusion","title":"Conclusi\u00f3n","text":"<p>Si le\u00edste y comprendiste todo esto, ahora sabes mucho m\u00e1s sobre entornos virtuales que muchos desarrolladores por ah\u00ed. \ud83e\udd13</p> <p>Conocer estos detalles probablemente te ser\u00e1 \u00fatil en el futuro cuando est\u00e9s depurando algo que parece complejo, pero sabr\u00e1s c\u00f3mo funciona todo por debajo. \ud83d\ude0e</p>"},{"location":"about/","title":"Acerca de","text":"<p>Acerca de ReadyAPI, su dise\u00f1o, inspiraci\u00f3n y m\u00e1s. \ud83e\udd13</p>"},{"location":"advanced/","title":"Gu\u00eda avanzada del usuario","text":""},{"location":"advanced/#funcionalidades-adicionales","title":"Funcionalidades adicionales","text":"<p>El Tutorial - Gu\u00eda del usuario principal deber\u00eda ser suficiente para darte un recorrido por todas las funcionalidades principales de ReadyAPI.</p> <p>En las siguientes secciones ver\u00e1s otras opciones, configuraciones y funcionalidades adicionales.</p> <p>Consejo</p> <p>Las siguientes secciones no son necesariamente \"avanzadas\".</p> <p>Y es posible que para tu caso de uso, la soluci\u00f3n est\u00e9 en una de ellas.</p>"},{"location":"advanced/#lee-primero-el-tutorial","title":"Lee primero el Tutorial","text":"<p>A\u00fan podr\u00edas usar la mayor\u00eda de las funcionalidades en ReadyAPI con el conocimiento del Tutorial - Gu\u00eda del usuario principal.</p> <p>Y las siguientes secciones asumen que ya lo le\u00edste y que conoces esas ideas principales.</p>"},{"location":"advanced/#cursos-externos","title":"Cursos externos","text":"<p>Aunque el Tutorial - Gu\u00eda del usuario y esta Gu\u00eda avanzada del usuario est\u00e1n escritos como un tutorial guiado (como un libro) y deber\u00edan ser suficientes para que aprendas ReadyAPI, podr\u00edas querer complementarlo con cursos adicionales.</p> <p>O podr\u00eda ser que simplemente prefieras tomar otros cursos porque se adaptan mejor a tu estilo de aprendizaje.</p> <p>Algunos proveedores de cursos \u2728 sponsorean ReadyAPI \u2728, esto asegura el desarrollo continuo y saludable de ReadyAPI y su ecosistema.</p> <p>Y muestra su verdadero compromiso con ReadyAPI y su comunidad (t\u00fa), ya que no solo quieren brindarte una buena experiencia de aprendizaje sino que tambi\u00e9n quieren asegurarse de que tengas un buen y saludable framework, ReadyAPI. \ud83d\ude47</p> <p>Podr\u00edas querer probar sus cursos:</p> <ul> <li>Talk Python Training</li> <li>Desarrollo guiado por pruebas</li> </ul>"},{"location":"advanced/additional-responses/","title":"Responses Adicionales en OpenAPI","text":"<p>Advertencia</p> <p>Este es un tema bastante avanzado.</p> <p>Si est\u00e1s comenzando con ReadyAPI, puede que no lo necesites.</p> <p>Puedes declarar responses adicionales, con c\u00f3digos de estado adicionales, media types, descripciones, etc.</p> <p>Esos responses adicionales se incluir\u00e1n en el esquema de OpenAPI, por lo que tambi\u00e9n aparecer\u00e1n en la documentaci\u00f3n de la API.</p> <p>Pero para esos responses adicionales tienes que asegurarte de devolver un <code>Response</code> como <code>JSONResponse</code> directamente, con tu c\u00f3digo de estado y contenido.</p>"},{"location":"advanced/additional-responses/#response-adicional-con-model","title":"Response Adicional con <code>model</code>","text":"<p>Puedes pasar a tus decoradores de path operation un par\u00e1metro <code>responses</code>.</p> <p>Recibe un <code>dict</code>: las claves son los c\u00f3digos de estado para cada response (como <code>200</code>), y los valores son otros <code>dict</code>s con la informaci\u00f3n para cada uno de ellos.</p> <p>Cada uno de esos <code>dict</code>s de response puede tener una clave <code>model</code>, conteniendo un modelo de Pydantic, as\u00ed como <code>response_model</code>.</p> <p>ReadyAPI tomar\u00e1 ese modelo, generar\u00e1 su JSON Schema y lo incluir\u00e1 en el lugar correcto en OpenAPI.</p> <p>Por ejemplo, para declarar otro response con un c\u00f3digo de estado <code>404</code> y un modelo Pydantic <code>Message</code>, puedes escribir:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Nota</p> <p>Ten en cuenta que debes devolver el <code>JSONResponse</code> directamente.</p> <p>Informaci\u00f3n</p> <p>La clave <code>model</code> no es parte de OpenAPI.</p> <p>ReadyAPI tomar\u00e1 el modelo de Pydantic de all\u00ed, generar\u00e1 el JSON Schema y lo colocar\u00e1 en el lugar correcto.</p> <p>El lugar correcto es:</p> <ul> <li>En la clave <code>content</code>, que tiene como valor otro objeto JSON (<code>dict</code>) que contiene:</li> <li>Una clave con el media type, por ejemplo, <code>application/json</code>, que contiene como valor otro objeto JSON, que contiene:<ul> <li>Una clave <code>schema</code>, que tiene como valor el JSON Schema del modelo, aqu\u00ed es el lugar correcto.<ul> <li>ReadyAPI agrega una referencia aqu\u00ed a los JSON Schemas globales en otro lugar de tu OpenAPI en lugar de incluirlo directamente. De este modo, otras aplicaciones y clientes pueden usar esos JSON Schemas directamente, proporcionar mejores herramientas de generaci\u00f3n de c\u00f3digo, etc.</li> </ul> </li> </ul> </li> </ul> <p>Los responses generadas en el OpenAPI para esta path operation ser\u00e1n:</p> <pre><code>{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Los esquemas se referencian a otro lugar dentro del esquema de OpenAPI:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/additional-responses/#media-types-adicionales-para-el-response-principal","title":"Media types adicionales para el response principal","text":"<p>Puedes usar este mismo par\u00e1metro <code>responses</code> para agregar diferentes media type para el mismo response principal.</p> <p>Por ejemplo, puedes agregar un media type adicional de <code>image/png</code>, declarando que tu path operation puede devolver un objeto JSON (con media type <code>application/json</code>) o una imagen PNG:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre> <p>Nota</p> <p>Nota que debes devolver la imagen usando un <code>FileResponse</code> directamente.</p> <p>Informaci\u00f3n</p> <p>A menos que especifiques un media type diferente expl\u00edcitamente en tu par\u00e1metro <code>responses</code>, ReadyAPI asumir\u00e1 que el response tiene el mismo media type que la clase de response principal (por defecto <code>application/json</code>).</p> <p>Pero si has especificado una clase de response personalizada con <code>None</code> como su media type, ReadyAPI usar\u00e1 <code>application/json</code> para cualquier response adicional que tenga un modelo asociado.</p>"},{"location":"advanced/additional-responses/#combinando-informacion","title":"Combinando informaci\u00f3n","text":"<p>Tambi\u00e9n puedes combinar informaci\u00f3n de response de m\u00faltiples lugares, incluyendo los par\u00e1metros <code>response_model</code>, <code>status_code</code>, y <code>responses</code>.</p> <p>Puedes declarar un <code>response_model</code>, usando el c\u00f3digo de estado predeterminado <code>200</code> (o uno personalizado si lo necesitas), y luego declarar informaci\u00f3n adicional para ese mismo response en <code>responses</code>, directamente en el esquema de OpenAPI.</p> <p>ReadyAPI manter\u00e1 la informaci\u00f3n adicional de <code>responses</code> y la combinar\u00e1 con el JSON Schema de tu modelo.</p> <p>Por ejemplo, puedes declarar un response con un c\u00f3digo de estado <code>404</code> que usa un modelo Pydantic y tiene una <code>description</code> personalizada.</p> <p>Y un response con un c\u00f3digo de estado <code>200</code> que usa tu <code>response_model</code>, pero incluye un <code>example</code> personalizado:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Todo se combinar\u00e1 e incluir\u00e1 en tu OpenAPI, y se mostrar\u00e1 en la documentaci\u00f3n de la API:</p> <p></p>"},{"location":"advanced/additional-responses/#combina-responses-predefinidos-y-personalizados","title":"Combina responses predefinidos y personalizados","text":"<p>Es posible que desees tener algunos responses predefinidos que se apliquen a muchas path operations, pero que quieras combinarlos con responses personalizados necesarios por cada path operation.</p> <p>Para esos casos, puedes usar la t\u00e9cnica de Python de \"desempaquetar\" un <code>dict</code> con <code>**dict_to_unpack</code>:</p> <pre><code>old_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n</code></pre> <p>Aqu\u00ed, <code>new_dict</code> contendr\u00e1 todos los pares clave-valor de <code>old_dict</code> m\u00e1s el nuevo par clave-valor:</p> <pre><code>{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n</code></pre> <p>Puedes usar esa t\u00e9cnica para reutilizar algunos responses predefinidos en tus path operations y combinarlos con otros personalizados adicionales.</p> <p>Por ejemplo:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre>"},{"location":"advanced/additional-responses/#mas-informacion-sobre-responses-openapi","title":"M\u00e1s informaci\u00f3n sobre responses OpenAPI","text":"<p>Para ver exactamente qu\u00e9 puedes incluir en los responses, puedes revisar estas secciones en la especificaci\u00f3n OpenAPI:</p> <ul> <li>Objeto de Responses de OpenAPI, incluye el <code>Response Object</code>.</li> <li>Objeto de Response de OpenAPI, puedes incluir cualquier cosa de esto directamente en cada response dentro de tu par\u00e1metro <code>responses</code>. Incluyendo <code>description</code>, <code>headers</code>, <code>content</code> (dentro de este es que declaras diferentes media types y JSON Schemas), y <code>links</code>.</li> </ul>"},{"location":"advanced/additional-status-codes/","title":"C\u00f3digos de Estado Adicionales","text":"<p>Por defecto, ReadyAPI devolver\u00e1 los responses usando un <code>JSONResponse</code>, colocando el contenido que devuelves desde tu path operation dentro de ese <code>JSONResponse</code>.</p> <p>Usar\u00e1 el c\u00f3digo de estado por defecto o el que configures en tu path operation.</p>"},{"location":"advanced/additional-status-codes/#codigos-de-estado-adicionales_1","title":"C\u00f3digos de estado adicionales","text":"<p>Si quieres devolver c\u00f3digos de estado adicionales aparte del principal, puedes hacerlo devolviendo un <code>Response</code> directamente, como un <code>JSONResponse</code>, y configurando el c\u00f3digo de estado adicional directamente.</p> <p>Por ejemplo, supongamos que quieres tener una path operation que permita actualizar elementos, y devuelva c\u00f3digos de estado HTTP de 200 \"OK\" cuando sea exitoso.</p> <p>Pero tambi\u00e9n quieres que acepte nuevos elementos. Y cuando los elementos no exist\u00edan antes, los crea y devuelve un c\u00f3digo de estado HTTP de 201 \"Created\".</p> <p>Para lograr eso, importa <code>JSONResponse</code>, y devuelve tu contenido all\u00ed directamente, configurando el <code>status_code</code> que deseas:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Advertencia</p> <p>Cuando devuelves un <code>Response</code> directamente, como en el ejemplo anterior, se devuelve directamente.</p> <p>No se serializar\u00e1 con un modelo, etc.</p> <p>Aseg\u00farate de que tenga los datos que deseas que tenga y que los valores sean JSON v\u00e1lidos (si est\u00e1s usando <code>JSONResponse</code>).</p> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI proporciona los mismos <code>starlette.responses</code> que <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles provienen directamente de Starlette. Lo mismo con <code>status</code>.</p>"},{"location":"advanced/additional-status-codes/#openapi-y-documentacion-de-api","title":"OpenAPI y documentaci\u00f3n de API","text":"<p>Si devuelves c\u00f3digos de estado adicionales y responses directamente, no se incluir\u00e1n en el esquema de OpenAPI (la documentaci\u00f3n de la API), porque ReadyAPI no tiene una forma de saber de antemano qu\u00e9 vas a devolver.</p> <p>Pero puedes documentarlo en tu c\u00f3digo, usando: Responses Adicionales.</p>"},{"location":"advanced/advanced-dependencies/","title":"Dependencias Avanzadas","text":""},{"location":"advanced/advanced-dependencies/#dependencias-con-parametros","title":"Dependencias con par\u00e1metros","text":"<p>Todas las dependencias que hemos visto son una funci\u00f3n o clase fija.</p> <p>Pero podr\u00eda haber casos en los que quieras poder establecer par\u00e1metros en la dependencia, sin tener que declarar muchas funciones o clases diferentes.</p> <p>Imaginemos que queremos tener una dependencia que revise si el par\u00e1metro de query <code>q</code> contiene alg\u00fan contenido fijo.</p> <p>Pero queremos poder parametrizar ese contenido fijo.</p>"},{"location":"advanced/advanced-dependencies/#una-instance-callable","title":"Una instance \"callable\"","text":"<p>En Python hay una forma de hacer que una instance de una clase sea un \"callable\".</p> <p>No la clase en s\u00ed (que ya es un callable), sino una instance de esa clase.</p> <p>Para hacer eso, declaramos un m\u00e9todo <code>__call__</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>En este caso, este <code>__call__</code> es lo que ReadyAPI usar\u00e1 para comprobar par\u00e1metros adicionales y sub-dependencias, y es lo que llamar\u00e1 para pasar un valor al par\u00e1metro en tu path operation function m\u00e1s adelante.</p>"},{"location":"advanced/advanced-dependencies/#parametrizar-la-instance","title":"Parametrizar la instance","text":"<p>Y ahora, podemos usar <code>__init__</code> para declarar los par\u00e1metros de la instance que podemos usar para \"parametrizar\" la dependencia:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>En este caso, ReadyAPI nunca tocar\u00e1 ni se preocupar\u00e1 por <code>__init__</code>, lo usaremos directamente en nuestro c\u00f3digo.</p>"},{"location":"advanced/advanced-dependencies/#crear-una-instance","title":"Crear una instance","text":"<p>Podr\u00edamos crear una instance de esta clase con:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Y de esa manera podemos \"parametrizar\" nuestra dependencia, que ahora tiene <code>\"bar\"</code> dentro de ella, como el atributo <code>checker.fixed_content</code>.</p>"},{"location":"advanced/advanced-dependencies/#usar-la-instance-como-una-dependencia","title":"Usar la instance como una dependencia","text":"<p>Luego, podr\u00edamos usar este <code>checker</code> en un <code>Depends(checker)</code>, en lugar de <code>Depends(FixedContentQueryChecker)</code>, porque la dependencia es la instance, <code>checker</code>, no la clase en s\u00ed.</p> <p>Y al resolver la dependencia, ReadyAPI llamar\u00e1 a este <code>checker</code> as\u00ed:</p> <pre><code>checker(q=\"somequery\")\n</code></pre> <p>...y pasar\u00e1 lo que eso retorne como el valor de la dependencia en nuestra path operation function como el par\u00e1metro <code>fixed_content_included</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Consejo</p> <p>Todo esto podr\u00eda parecer complicado. Y puede que no est\u00e9 muy claro c\u00f3mo es \u00fatil a\u00fan.</p> <p>Estos ejemplos son intencionalmente simples, pero muestran c\u00f3mo funciona todo.</p> <p>En los cap\u00edtulos sobre seguridad, hay funciones utilitarias que se implementan de esta misma manera.</p> <p>Si entendiste todo esto, ya sabes c\u00f3mo funcionan por debajo esas herramientas de utilidad para seguridad.</p>"},{"location":"advanced/async-tests/","title":"Tests As\u00edncronos","text":"<p>Ya has visto c\u00f3mo probar tus aplicaciones de ReadyAPI usando el <code>TestClient</code> proporcionado. Hasta ahora, solo has visto c\u00f3mo escribir tests sincr\u00f3nicos, sin usar funciones <code>async</code>.</p> <p>Poder usar funciones as\u00edncronas en tus tests puede ser \u00fatil, por ejemplo, cuando consultas tu base de datos de forma as\u00edncrona. Imagina que quieres probar el env\u00edo de requests a tu aplicaci\u00f3n ReadyAPI y luego verificar que tu backend escribi\u00f3 exitosamente los datos correctos en la base de datos, mientras usas un paquete de base de datos as\u00edncrono.</p> <p>Veamos c\u00f3mo podemos hacer que esto funcione.</p>"},{"location":"advanced/async-tests/#pytestmarkanyio","title":"pytest.mark.anyio","text":"<p>Si queremos llamar funciones as\u00edncronas en nuestros tests, nuestras funciones de test tienen que ser as\u00edncronas. AnyIO proporciona un plugin \u00fatil para esto, que nos permite especificar que algunas funciones de test deben ser llamadas de manera as\u00edncrona.</p>"},{"location":"advanced/async-tests/#httpx","title":"HTTPX","text":"<p>Incluso si tu aplicaci\u00f3n de ReadyAPI usa funciones <code>def</code> normales en lugar de <code>async def</code>, sigue siendo una aplicaci\u00f3n <code>async</code> por debajo.</p> <p>El <code>TestClient</code> hace algo de magia interna para llamar a la aplicaci\u00f3n ReadyAPI as\u00edncrona en tus funciones de test <code>def</code> normales, usando pytest est\u00e1ndar. Pero esa magia ya no funciona cuando lo usamos dentro de funciones as\u00edncronas. Al ejecutar nuestros tests de manera as\u00edncrona, ya no podemos usar el <code>TestClient</code> dentro de nuestras funciones de test.</p> <p>El <code>TestClient</code> est\u00e1 basado en HTTPX, y afortunadamente, podemos usarlo directamente para probar la API.</p>"},{"location":"advanced/async-tests/#ejemplo","title":"Ejemplo","text":"<p>Para un ejemplo simple, consideremos una estructura de archivos similar a la descrita en Aplicaciones M\u00e1s Grandes y Testing:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>El archivo <code>main.py</code> tendr\u00eda:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n</code></pre> <p>El archivo <code>test_main.py</code> tendr\u00eda los tests para <code>main.py</code>, podr\u00eda verse as\u00ed ahora:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre>"},{"location":"advanced/async-tests/#ejecutalo","title":"Ejec\u00fatalo","text":"<p>Puedes ejecutar tus tests como de costumbre v\u00eda:</p> <pre><code>$ pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/async-tests/#en-detalle","title":"En Detalle","text":"<p>El marcador <code>@pytest.mark.anyio</code> le dice a pytest que esta funci\u00f3n de test debe ser llamada as\u00edncronamente:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Consejo</p> <p>Note que la funci\u00f3n de test ahora es <code>async def</code> en lugar de solo <code>def</code> como antes al usar el <code>TestClient</code>.</p> <p>Luego podemos crear un <code>AsyncClient</code> con la app y enviar requests as\u00edncronos a ella, usando <code>await</code>.</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Esto es equivalente a:</p> <pre><code>response = client.get('/')\n</code></pre> <p>...que us\u00e1bamos para hacer nuestros requests con el <code>TestClient</code>.</p> <p>Consejo</p> <p>Nota que estamos usando async/await con el nuevo <code>AsyncClient</code>: el request es as\u00edncrono.</p> <p>Advertencia</p> <p>Si tu aplicaci\u00f3n depende de eventos de lifespan, el <code>AsyncClient</code> no activar\u00e1 estos eventos. Para asegurarte de que se activen, usa <code>LifespanManager</code> de florimondmanca/asgi-lifespan.</p>"},{"location":"advanced/async-tests/#otras-llamadas-a-funciones-asincronas","title":"Otras Llamadas a Funciones As\u00edncronas","text":"<p>Al ser la funci\u00f3n de test as\u00edncrona, ahora tambi\u00e9n puedes llamar (y <code>await</code>) otras funciones <code>async</code> adem\u00e1s de enviar requests a tu aplicaci\u00f3n ReadyAPI en tus tests, exactamente como las llamar\u00edas en cualquier otro lugar de tu c\u00f3digo.</p> <p>Consejo</p> <p>Si encuentras un <code>RuntimeError: Task attached to a different loop</code> al integrar llamadas a funciones as\u00edncronas en tus tests (por ejemplo, cuando usas MotorClient de MongoDB), recuerda crear instances de objetos que necesiten un loop de eventos solo dentro de funciones async, por ejemplo, en un callback <code>'@app.on_event(\"startup\")</code>.</p>"},{"location":"advanced/behind-a-proxy/","title":"Detr\u00e1s de un Proxy","text":"<p>En algunas situaciones, podr\u00edas necesitar usar un proxy como Traefik o Nginx con una configuraci\u00f3n que a\u00f1ade un prefijo de path extra que no es visto por tu aplicaci\u00f3n.</p> <p>En estos casos, puedes usar <code>root_path</code> para configurar tu aplicaci\u00f3n.</p> <p>El <code>root_path</code> es un mecanismo proporcionado por la especificaci\u00f3n ASGI (en la que est\u00e1 construido ReadyAPI, a trav\u00e9s de Starlette).</p> <p>El <code>root_path</code> se usa para manejar estos casos espec\u00edficos.</p> <p>Y tambi\u00e9n se usa internamente al montar subaplicaciones.</p>"},{"location":"advanced/behind-a-proxy/#proxy-con-un-prefijo-de-path-eliminado","title":"Proxy con un prefijo de path eliminado","text":"<p>Tener un proxy con un prefijo de path eliminado, en este caso, significa que podr\u00edas declarar un path en <code>/app</code> en tu c\u00f3digo, pero luego a\u00f1ades una capa encima (el proxy) que situar\u00eda tu aplicaci\u00f3n ReadyAPI bajo un path como <code>/api/v1</code>.</p> <p>En este caso, el path original <code>/app</code> realmente ser\u00eda servido en <code>/api/v1/app</code>.</p> <p>Aunque todo tu c\u00f3digo est\u00e9 escrito asumiendo que solo existe <code>/app</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Y el proxy estar\u00eda \"eliminando\" el prefijo del path sobre la marcha antes de transmitir el request al servidor de aplicaciones (probablemente Uvicorn a trav\u00e9s de ReadyAPI CLI), manteniendo a tu aplicaci\u00f3n convencida de que est\u00e1 siendo servida en <code>/app</code>, as\u00ed que no tienes que actualizar todo tu c\u00f3digo para incluir el prefijo <code>/api/v1</code>.</p> <p>Hasta aqu\u00ed, todo funcionar\u00eda normalmente.</p> <p>Pero luego, cuando abres la UI integrada de los docs (el frontend), esperar\u00eda obtener el esquema de OpenAPI en <code>/openapi.json</code>, en lugar de <code>/api/v1/openapi.json</code>.</p> <p>Entonces, el frontend (que se ejecuta en el navegador) tratar\u00eda de alcanzar <code>/openapi.json</code> y no podr\u00eda obtener el esquema de OpenAPI.</p> <p>Porque tenemos un proxy con un prefijo de path de <code>/api/v1</code> para nuestra aplicaci\u00f3n, el frontend necesita obtener el esquema de OpenAPI en <code>/api/v1/openapi.json</code>.</p> <pre><code>graph LR\n\nbrowser(\"Navegador\")\nproxy[\"Proxy en http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Servidor en http://127.0.0.1:8000/app\"]\n\nbrowser --&gt; proxy\nproxy --&gt; server</code></pre> <p>Consejo</p> <p>La IP <code>0.0.0.0</code> se usa com\u00fanmente para indicar que el programa escucha en todas las IPs disponibles en esa m\u00e1quina/servidor.</p> <p>La UI de los docs tambi\u00e9n necesitar\u00eda el esquema de OpenAPI para declarar que este API <code>servidor</code> se encuentra en <code>/api/v1</code> (detr\u00e1s del proxy). Por ejemplo:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // M\u00e1s cosas aqu\u00ed\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // M\u00e1s cosas aqu\u00ed\n    }\n}\n</code></pre> <p>En este ejemplo, el \"Proxy\" podr\u00eda ser algo como Traefik. Y el servidor ser\u00eda algo como ReadyAPI CLI con Uvicorn, ejecutando tu aplicaci\u00f3n de ReadyAPI.</p>"},{"location":"advanced/behind-a-proxy/#proporcionando-el-root_path","title":"Proporcionando el <code>root_path</code>","text":"<p>Para lograr esto, puedes usar la opci\u00f3n de l\u00ednea de comandos <code>--root-path</code> como:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Si usas Hypercorn, tambi\u00e9n tiene la opci\u00f3n <code>--root-path</code>.</p> <p>Detalles T\u00e9cnicos</p> <p>La especificaci\u00f3n ASGI define un <code>root_path</code> para este caso de uso.</p> <p>Y la opci\u00f3n de l\u00ednea de comandos <code>--root-path</code> proporciona ese <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#revisar-el-root_path-actual","title":"Revisar el <code>root_path</code> actual","text":"<p>Puedes obtener el <code>root_path</code> actual utilizado por tu aplicaci\u00f3n para cada request, es parte del diccionario <code>scope</code> (que es parte de la especificaci\u00f3n ASGI).</p> <p>Aqu\u00ed lo estamos incluyendo en el mensaje solo con fines de demostraci\u00f3n.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Luego, si inicias Uvicorn con:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>El response ser\u00eda algo como:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre>"},{"location":"advanced/behind-a-proxy/#configurar-el-root_path-en-la-app-de-readyapi","title":"Configurar el <code>root_path</code> en la app de ReadyAPI","text":"<p>Alternativamente, si no tienes una forma de proporcionar una opci\u00f3n de l\u00ednea de comandos como <code>--root-path</code> o su equivalente, puedes configurar el par\u00e1metro <code>root_path</code> al crear tu app de ReadyAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Pasar el <code>root_path</code> a <code>ReadyAPI</code> ser\u00eda el equivalente a pasar la opci\u00f3n de l\u00ednea de comandos <code>--root-path</code> a Uvicorn o Hypercorn.</p>"},{"location":"advanced/behind-a-proxy/#acerca-de-root_path","title":"Acerca de <code>root_path</code>","text":"<p>Ten en cuenta que el servidor (Uvicorn) no usar\u00e1 ese <code>root_path</code> para nada, a excepci\u00f3n de pas\u00e1rselo a la app.</p> <p>Pero si vas con tu navegador a http://127.0.0.1:8000/app ver\u00e1s el response normal:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>As\u00ed que no se esperar\u00e1 que sea accedido en <code>http://127.0.0.1:8000/api/v1/app</code>.</p> <p>Uvicorn esperar\u00e1 que el proxy acceda a Uvicorn en <code>http://127.0.0.1:8000/app</code>, y luego ser\u00e1 responsabilidad del proxy a\u00f1adir el prefijo extra <code>/api/v1</code> encima.</p>"},{"location":"advanced/behind-a-proxy/#sobre-proxies-con-un-prefijo-de-path-eliminado","title":"Sobre proxies con un prefijo de path eliminado","text":"<p>Ten en cuenta que un proxy con prefijo de path eliminado es solo una de las formas de configurarlo.</p> <p>Probablemente en muchos casos, el valor predeterminado ser\u00e1 que el proxy no tenga un prefijo de path eliminado.</p> <p>En un caso as\u00ed (sin un prefijo de path eliminado), el proxy escuchar\u00eda algo como <code>https://myawesomeapp.com</code>, y luego si el navegador va a <code>https://myawesomeapp.com/api/v1/app</code> y tu servidor (por ejemplo, Uvicorn) escucha en <code>http://127.0.0.1:8000</code>, el proxy (sin un prefijo de path eliminado) acceder\u00eda a Uvicorn en el mismo path: <code>http://127.0.0.1:8000/api/v1/app</code>.</p>"},{"location":"advanced/behind-a-proxy/#probando-localmente-con-traefik","title":"Probando localmente con Traefik","text":"<p>Puedes ejecutar f\u00e1cilmente el experimento localmente con un prefijo de path eliminado usando Traefik.</p> <p>Descarga Traefik, es un archivo binario \u00fanico, puedes extraer el archivo comprimido y ejecutarlo directamente desde la terminal.</p> <p>Luego crea un archivo <code>traefik.toml</code> con:</p> <pre><code>[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n</code></pre> <p>Esto le dice a Traefik que escuche en el puerto 9999 y que use otro archivo <code>routes.toml</code>.</p> <p>Consejo</p> <p>Estamos utilizando el puerto 9999 en lugar del puerto HTTP est\u00e1ndar 80 para que no tengas que ejecutarlo con privilegios de administrador (<code>sudo</code>).</p> <p>Ahora crea ese otro archivo <code>routes.toml</code>:</p> <pre><code>[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n</code></pre> <p>Este archivo configura Traefik para usar el prefijo de path <code>/api/v1</code>.</p> <p>Y luego Traefik redireccionar\u00e1 sus requests a tu Uvicorn ejecut\u00e1ndose en <code>http://127.0.0.1:8000</code>.</p> <p>Ahora inicia Traefik:</p> <pre><code>$ ./traefik --configFile=traefik.toml\n\nINFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml\n</code></pre> <p>Y ahora inicia tu app, utilizando la opci\u00f3n <code>--root-path</code>:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"advanced/behind-a-proxy/#revisa-los-responses","title":"Revisa los responses","text":"<p>Ahora, si vas a la URL con el puerto para Uvicorn: http://127.0.0.1:8000/app, ver\u00e1s el response normal:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Consejo</p> <p>Nota que incluso aunque est\u00e9s accediendo en <code>http://127.0.0.1:8000/app</code>, muestra el <code>root_path</code> de <code>/api/v1</code>, tomado de la opci\u00f3n <code>--root-path</code>.</p> <p>Y ahora abre la URL con el puerto para Traefik, incluyendo el prefijo de path: http://127.0.0.1:9999/api/v1/app.</p> <p>Obtenemos el mismo response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>pero esta vez en la URL con el prefijo de path proporcionado por el proxy: <code>/api/v1</code>.</p> <p>Por supuesto, la idea aqu\u00ed es que todos accedan a la app a trav\u00e9s del proxy, as\u00ed que la versi\u00f3n con el prefijo de path <code>/api/v1</code> es la \"correcta\".</p> <p>Y la versi\u00f3n sin el prefijo de path (<code>http://127.0.0.1:8000/app</code>), proporcionada directamente por Uvicorn, ser\u00eda exclusivamente para que el proxy (Traefik) la acceda.</p> <p>Eso demuestra c\u00f3mo el Proxy (Traefik) usa el prefijo de path y c\u00f3mo el servidor (Uvicorn) usa el <code>root_path</code> de la opci\u00f3n <code>--root-path</code>.</p>"},{"location":"advanced/behind-a-proxy/#revisa-la-ui-de-los-docs","title":"Revisa la UI de los docs","text":"<p>Pero aqu\u00ed est\u00e1 la parte divertida. \u2728</p> <p>La forma \"oficial\" de acceder a la app ser\u00eda a trav\u00e9s del proxy con el prefijo de path que definimos. As\u00ed que, como esperar\u00edamos, si intentas usar la UI de los docs servida por Uvicorn directamente, sin el prefijo de path en la URL, no funcionar\u00e1, porque espera ser accedida a trav\u00e9s del proxy.</p> <p>Puedes verificarlo en http://127.0.0.1:8000/docs:</p> <p></p> <p>Pero si accedemos a la UI de los docs en la URL \"oficial\" usando el proxy con puerto <code>9999</code>, en <code>/api/v1/docs</code>, \u00a1funciona correctamente! \ud83c\udf89</p> <p>Puedes verificarlo en http://127.0.0.1:9999/api/v1/docs:</p> <p></p> <p>Justo como quer\u00edamos. \u2714\ufe0f</p> <p>Esto es porque ReadyAPI usa este <code>root_path</code> para crear el <code>server</code> por defecto en OpenAPI con la URL proporcionada por <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#servidores-adicionales","title":"Servidores adicionales","text":"<p>Advertencia</p> <p>Este es un caso de uso m\u00e1s avanzado. Si\u00e9ntete libre de omitirlo.</p> <p>Por defecto, ReadyAPI crear\u00e1 un <code>server</code> en el esquema de OpenAPI con la URL para el <code>root_path</code>.</p> <p>Pero tambi\u00e9n puedes proporcionar otros <code>servers</code> alternativos, por ejemplo, si deseas que la misma UI de los docs interact\u00fae con un entorno de pruebas y de producci\u00f3n.</p> <p>Si pasas una lista personalizada de <code>servers</code> y hay un <code>root_path</code> (porque tu API existe detr\u00e1s de un proxy), ReadyAPI insertar\u00e1 un \"server\" con este <code>root_path</code> al comienzo de la lista.</p> <p>Por ejemplo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Generar\u00e1 un esquema de OpenAPI como:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // M\u00e1s cosas aqu\u00ed\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Entorno de pruebas\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Entorno de producci\u00f3n\"\n        }\n    ],\n    \"paths\": {\n            // M\u00e1s cosas aqu\u00ed\n    }\n}\n</code></pre> <p>Consejo</p> <p>Observa el server auto-generado con un valor <code>url</code> de <code>/api/v1</code>, tomado del <code>root_path</code>.</p> <p>En la UI de los docs en http://127.0.0.1:9999/api/v1/docs se ver\u00eda como:</p> <p></p> <p>Consejo</p> <p>La UI de los docs interactuar\u00e1 con el server que selecciones.</p>"},{"location":"advanced/behind-a-proxy/#desactivar-el-server-automatico-de-root_path","title":"Desactivar el server autom\u00e1tico de <code>root_path</code>","text":"<p>Si no quieres que ReadyAPI incluya un server autom\u00e1tico usando el <code>root_path</code>, puedes usar el par\u00e1metro <code>root_path_in_servers=False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>y entonces no lo incluir\u00e1 en el esquema de OpenAPI.</p>"},{"location":"advanced/behind-a-proxy/#montando-una-sub-aplicacion","title":"Montando una sub-aplicaci\u00f3n","text":"<p>Si necesitas montar una sub-aplicaci\u00f3n (como se describe en Aplicaciones secundarias - Monturas) mientras usas un proxy con <code>root_path</code>, puedes hacerlo normalmente, como esperar\u00edas.</p> <p>ReadyAPI usar\u00e1 internamente el <code>root_path</code> de manera inteligente, as\u00ed que simplemente funcionar\u00e1. \u2728</p>"},{"location":"advanced/custom-response/","title":"Response Personalizado - HTML, Stream, Archivo, otros","text":"<p>Por defecto, ReadyAPI devolver\u00e1 los responses usando <code>JSONResponse</code>.</p> <p>Puedes sobrescribirlo devolviendo un <code>Response</code> directamente como se ve en Devolver una Response directamente.</p> <p>Pero si devuelves un <code>Response</code> directamente (o cualquier subclase, como <code>JSONResponse</code>), los datos no se convertir\u00e1n autom\u00e1ticamente (incluso si declaras un <code>response_model</code>), y la documentaci\u00f3n no se generar\u00e1 autom\u00e1ticamente (por ejemplo, incluyendo el \"media type\" espec\u00edfico, en el HTTP header <code>Content-Type</code> como parte del OpenAPI generado).</p> <p>Pero tambi\u00e9n puedes declarar el <code>Response</code> que quieres usar (por ejemplo, cualquier subclase de <code>Response</code>), en el path operation decorator usando el par\u00e1metro <code>response_class</code>.</p> <p>Los contenidos que devuelvas desde tu path operation function se colocar\u00e1n dentro de esa <code>Response</code>.</p> <p>Y si ese <code>Response</code> tiene un media type JSON (<code>application/json</code>), como es el caso con <code>JSONResponse</code> y <code>UJSONResponse</code>, los datos que devuelvas se convertir\u00e1n autom\u00e1ticamente (y ser\u00e1n filtrados) con cualquier <code>response_model</code> de Pydantic que hayas declarado en el path operation decorator.</p> <p>Nota</p> <p>Si usas una clase de response sin media type, ReadyAPI esperar\u00e1 que tu response no tenga contenido, por lo que no documentar\u00e1 el formato del response en su OpenAPI generado.</p>"},{"location":"advanced/custom-response/#usa-orjsonresponse","title":"Usa <code>ORJSONResponse</code>","text":"<p>Por ejemplo, si est\u00e1s exprimendo el rendimiento, puedes instalar y usar <code>orjson</code> y establecer el response como <code>ORJSONResponse</code>.</p> <p>Importa la clase <code>Response</code> (sub-clase) que quieras usar y decl\u00e1rala en el path operation decorator.</p> <p>Para responses grandes, devolver una <code>Response</code> directamente es mucho m\u00e1s r\u00e1pido que devolver un diccionario.</p> <p>Esto se debe a que, por defecto, ReadyAPI inspeccionar\u00e1 cada elemento dentro y se asegurar\u00e1 de que sea serializable como JSON, usando el mismo Codificador Compatible con JSON explicado en el tutorial. Esto es lo que te permite devolver objetos arbitrarios, por ejemplo, modelos de bases de datos.</p> <p>Pero si est\u00e1s seguro de que el contenido que est\u00e1s devolviendo es serializable con JSON, puedes pasarlo directamente a la clase de response y evitar la sobrecarga extra que ReadyAPI tendr\u00eda al pasar tu contenido de retorno a trav\u00e9s de <code>jsonable_encoder</code> antes de pasarlo a la clase de response.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n</code></pre> <p>Informaci\u00f3n</p> <p>El par\u00e1metro <code>response_class</code> tambi\u00e9n se utilizar\u00e1 para definir el \"media type\" del response.</p> <p>En este caso, el HTTP header <code>Content-Type</code> se establecer\u00e1 en <code>application/json</code>.</p> <p>Y se documentar\u00e1 as\u00ed en OpenAPI.</p> <p>Consejo</p> <p>El <code>ORJSONResponse</code> solo est\u00e1 disponible en ReadyAPI, no en Starlette.</p>"},{"location":"advanced/custom-response/#response-html","title":"Response HTML","text":"<p>Para devolver un response con HTML directamente desde ReadyAPI, usa <code>HTMLResponse</code>.</p> <ul> <li>Importa <code>HTMLResponse</code>.</li> <li>Pasa <code>HTMLResponse</code> como par\u00e1metro <code>response_class</code> de tu path operation decorator.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre> <p>Informaci\u00f3n</p> <p>El par\u00e1metro <code>response_class</code> tambi\u00e9n se utilizar\u00e1 para definir el \"media type\" del response.</p> <p>En este caso, el HTTP header <code>Content-Type</code> se establecer\u00e1 en <code>text/html</code>.</p> <p>Y se documentar\u00e1 as\u00ed en OpenAPI.</p>"},{"location":"advanced/custom-response/#devuelve-una-response","title":"Devuelve una <code>Response</code>","text":"<p>Como se ve en Devolver una Response directamente, tambi\u00e9n puedes sobrescribir el response directamente en tu path operation, devolvi\u00e9ndolo.</p> <p>El mismo ejemplo de arriba, devolviendo una <code>HTMLResponse</code>, podr\u00eda verse as\u00ed:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Advertencia</p> <p>Una <code>Response</code> devuelta directamente por tu path operation function no se documentar\u00e1 en OpenAPI (por ejemplo, el <code>Content-Type</code> no se documentar\u00e1) y no ser\u00e1 visible en la documentaci\u00f3n interactiva autom\u00e1tica.</p> <p>Informaci\u00f3n</p> <p>Por supuesto, el <code>Content-Type</code> header real, el c\u00f3digo de estado, etc., provendr\u00e1n del objeto <code>Response</code> que devolviste.</p>"},{"location":"advanced/custom-response/#documenta-en-openapi-y-sobrescribe-response","title":"Documenta en OpenAPI y sobrescribe <code>Response</code>","text":"<p>Si quieres sobrescribir el response desde dentro de la funci\u00f3n pero al mismo tiempo documentar el \"media type\" en OpenAPI, puedes usar el par\u00e1metro <code>response_class</code> Y devolver un objeto <code>Response</code>.</p> <p>El <code>response_class</code> solo se usar\u00e1 para documentar el OpenAPI path operation, pero tu <code>Response</code> se usar\u00e1 tal cual.</p>"},{"location":"advanced/custom-response/#devuelve-un-htmlresponse-directamente","title":"Devuelve un <code>HTMLResponse</code> directamente","text":"<p>Por ejemplo, podr\u00eda ser algo as\u00ed:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n</code></pre> <p>En este ejemplo, la funci\u00f3n <code>generate_html_response()</code> ya genera y devuelve una <code>Response</code> en lugar de devolver el HTML en un <code>str</code>.</p> <p>Al devolver el resultado de llamar a <code>generate_html_response()</code>, ya est\u00e1s devolviendo una <code>Response</code> que sobrescribir\u00e1 el comportamiento predeterminado de ReadyAPI.</p> <p>Pero como pasaste <code>HTMLResponse</code> en el <code>response_class</code> tambi\u00e9n, ReadyAPI sabr\u00e1 c\u00f3mo documentarlo en OpenAPI y la documentaci\u00f3n interactiva como HTML con <code>text/html</code>:</p> <p></p>"},{"location":"advanced/custom-response/#responses-disponibles","title":"Responses disponibles","text":"<p>Aqu\u00ed hay algunos de los responses disponibles.</p> <p>Ten en cuenta que puedes usar <code>Response</code> para devolver cualquier otra cosa, o incluso crear una sub-clase personalizada.</p> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI proporciona los mismos <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette.</p>"},{"location":"advanced/custom-response/#response","title":"<code>Response</code>","text":"<p>La clase principal <code>Response</code>, todos los otros responses heredan de ella.</p> <p>Puedes devolverla directamente.</p> <p>Acepta los siguientes par\u00e1metros:</p> <ul> <li><code>content</code> - Un <code>str</code> o <code>bytes</code>.</li> <li><code>status_code</code> - Un c\u00f3digo de estado HTTP <code>int</code>.</li> <li><code>headers</code> - Un <code>dict</code> de strings.</li> <li><code>media_type</code> - Un <code>str</code> que da el media type. Por ejemplo, <code>\"text/html\"</code>.</li> </ul> <p>ReadyAPI (de hecho Starlette) incluir\u00e1 autom\u00e1ticamente un header Content-Length. Tambi\u00e9n incluir\u00e1 un header Content-Type, basado en el <code>media_type</code> y a\u00f1adiendo un conjunto de caracteres para tipos de texto.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/custom-response/#htmlresponse","title":"<code>HTMLResponse</code>","text":"<p>Toma alg\u00fan texto o bytes y devuelve un response HTML, como le\u00edste arriba.</p>"},{"location":"advanced/custom-response/#plaintextresponse","title":"<code>PlainTextResponse</code>","text":"<p>Toma alg\u00fan texto o bytes y devuelve un response de texto plano.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import PlainTextResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n</code></pre>"},{"location":"advanced/custom-response/#jsonresponse","title":"<code>JSONResponse</code>","text":"<p>Toma algunos datos y devuelve un response codificado como <code>application/json</code>.</p> <p>Este es el response predeterminado usado en ReadyAPI, como le\u00edste arriba.</p>"},{"location":"advanced/custom-response/#orjsonresponse","title":"<code>ORJSONResponse</code>","text":"<p>Un response JSON r\u00e1pido alternativo usando <code>orjson</code>, como le\u00edste arriba.</p> <p>Informaci\u00f3n</p> <p>Esto requiere instalar <code>orjson</code>, por ejemplo, con <code>pip install orjson</code>.</p>"},{"location":"advanced/custom-response/#ujsonresponse","title":"<code>UJSONResponse</code>","text":"<p>Un response JSON alternativo usando <code>ujson</code>.</p> <p>Informaci\u00f3n</p> <p>Esto requiere instalar <code>ujson</code>, por ejemplo, con <code>pip install ujson</code>.</p> <p>Advertencia</p> <p><code>ujson</code> es menos cuidadoso que la implementaci\u00f3n integrada de Python en c\u00f3mo maneja algunos casos extremos.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import UJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Consejo</p> <p>Es posible que <code>ORJSONResponse</code> sea una alternativa m\u00e1s r\u00e1pida.</p>"},{"location":"advanced/custom-response/#redirectresponse","title":"<code>RedirectResponse</code>","text":"<p>Devuelve una redirecci\u00f3n HTTP. Usa un c\u00f3digo de estado 307 (Redirecci\u00f3n Temporal) por defecto.</p> <p>Puedes devolver un <code>RedirectResponse</code> directamente:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/cligenius\")\nasync def redirect_cligenius():\n    return RedirectResponse(\"https://cligenius.khulnasoft.com\")\n</code></pre> <p>O puedes usarlo en el par\u00e1metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/readyapi\", response_class=RedirectResponse)\nasync def redirect_readyapi():\n    return \"https://readyapi.khulnasoft.com\"\n</code></pre> <p>Si haces eso, entonces puedes devolver la URL directamente desde tu path operation function.</p> <p>En este caso, el <code>status_code</code> utilizado ser\u00e1 el predeterminado para <code>RedirectResponse</code>, que es <code>307</code>.</p> <p>Tambi\u00e9n puedes usar el par\u00e1metro <code>status_code</code> combinado con el par\u00e1metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse","title":"<code>StreamingResponse</code>","text":"<p>Toma un generador <code>async</code> o un generador/iterador normal y transmite el cuerpo del response.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\napp = ReadyAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n</code></pre>"},{"location":"advanced/custom-response/#usando-streamingresponse-con-objetos-similares-a-archivos","title":"Usando <code>StreamingResponse</code> con objetos similares a archivos","text":"<p>Si tienes un objeto similar a un archivo (por ejemplo, el objeto devuelto por <code>open()</code>), puedes crear una funci\u00f3n generadora para iterar sobre ese objeto similar a un archivo.</p> <p>De esa manera, no tienes que leerlo todo primero en memoria, y puedes pasar esa funci\u00f3n generadora al <code>StreamingResponse</code>, y devolverlo.</p> <p>Esto incluye muchos paquetes para interactuar con almacenamiento en la nube, procesamiento de video y otros.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n</code></pre> <ol> <li>Esta es la funci\u00f3n generadora. Es una \"funci\u00f3n generadora\" porque contiene declaraciones <code>yield</code> dentro.</li> <li>Al usar un bloque <code>with</code>, nos aseguramos de que el objeto similar a un archivo se cierre despu\u00e9s de que la funci\u00f3n generadora termine. As\u00ed, despu\u00e9s de que termina de enviar el response.</li> <li> <p>Este <code>yield from</code> le dice a la funci\u00f3n que itere sobre esa cosa llamada <code>file_like</code>. Y luego, para cada parte iterada, yield esa parte como proveniente de esta funci\u00f3n generadora (<code>iterfile</code>).</p> <p>Entonces, es una funci\u00f3n generadora que transfiere el trabajo de \"generar\" a algo m\u00e1s internamente.</p> <p>Al hacerlo de esta manera, podemos ponerlo en un bloque <code>with</code>, y de esa manera, asegurarnos de que el objeto similar a un archivo se cierre despu\u00e9s de finalizar.</p> </li> </ol> <p>Consejo</p> <p>Nota que aqu\u00ed como estamos usando <code>open()</code> est\u00e1ndar que no admite <code>async</code> y <code>await</code>, declaramos el path operation con <code>def</code> normal.</p>"},{"location":"advanced/custom-response/#fileresponse","title":"<code>FileResponse</code>","text":"<p>Transmite un archivo asincr\u00f3nicamente como response.</p> <p>Toma un conjunto diferente de argumentos para crear un instance que los otros tipos de response:</p> <ul> <li><code>path</code> - La path del archivo para el archivo a transmitir.</li> <li><code>headers</code> - Cualquier header personalizado para incluir, como un diccionario.</li> <li><code>media_type</code> - Un string que da el media type. Si no se establece, se usar\u00e1 el nombre de archivo o la path para inferir un media type.</li> <li><code>filename</code> - Si se establece, se incluir\u00e1 en el response <code>Content-Disposition</code>.</li> </ul> <p>Los responses de archivos incluir\u00e1n los headers apropiados <code>Content-Length</code>, <code>Last-Modified</code> y <code>ETag</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n</code></pre> <p>Tambi\u00e9n puedes usar el par\u00e1metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n</code></pre> <p>En este caso, puedes devolver la path del archivo directamente desde tu path operation function.</p>"},{"location":"advanced/custom-response/#clase-de-response-personalizada","title":"Clase de response personalizada","text":"<p>Puedes crear tu propia clase de response personalizada, heredando de <code>Response</code> y us\u00e1ndola.</p> <p>Por ejemplo, digamos que quieres usar <code>orjson</code>, pero con algunas configuraciones personalizadas no utilizadas en la clase <code>ORJSONResponse</code> incluida.</p> <p>Digamos que quieres que devuelva JSON con sangr\u00eda y formato, por lo que quieres usar la opci\u00f3n de orjson <code>orjson.OPT_INDENT_2</code>.</p> <p>Podr\u00edas crear un <code>CustomORJSONResponse</code>. Lo principal que tienes que hacer es crear un m\u00e9todo <code>Response.render(content)</code> que devuelva el contenido como <code>bytes</code>:</p> Python 3.8+ <pre><code>from typing import Any\n\nimport orjson\nfrom readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Ahora en lugar de devolver:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>...este response devolver\u00e1:</p> <pre><code>{\n  \"message\": \"Hello World\"\n}\n</code></pre> <p>Por supuesto, probablemente encontrar\u00e1s formas mucho mejores de aprovechar esto que formatear JSON. \ud83d\ude09</p>"},{"location":"advanced/custom-response/#clase-de-response-predeterminada","title":"Clase de response predeterminada","text":"<p>Al crear una instance de la clase ReadyAPI o un <code>APIRouter</code>, puedes especificar qu\u00e9 clase de response usar por defecto.</p> <p>El par\u00e1metro que define esto es <code>default_response_class</code>.</p> <p>En el ejemplo a continuaci\u00f3n, ReadyAPI usar\u00e1 <code>ORJSONResponse</code> por defecto, en todas las path operations, en lugar de <code>JSONResponse</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Consejo</p> <p>Todav\u00eda puedes sobrescribir <code>response_class</code> en path operations como antes.</p>"},{"location":"advanced/custom-response/#documentacion-adicional","title":"Documentaci\u00f3n adicional","text":"<p>Tambi\u00e9n puedes declarar el media type y muchos otros detalles en OpenAPI usando <code>responses</code>: Responses Adicionales en OpenAPI.</p>"},{"location":"advanced/dataclasses/","title":"Usando Dataclasses","text":"<p>ReadyAPI est\u00e1 construido sobre Pydantic, y te he estado mostrando c\u00f3mo usar modelos de Pydantic para declarar requests y responses.</p> <p>Pero ReadyAPI tambi\u00e9n soporta el uso de <code>dataclasses</code> de la misma manera:</p> Python 3.8+ <pre><code>from dataclasses import dataclass\nfrom typing import Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Esto sigue siendo soportado gracias a Pydantic, ya que tiene soporte interno para <code>dataclasses</code>.</p> <p>As\u00ed que, incluso con el c\u00f3digo anterior que no usa Pydantic expl\u00edcitamente, ReadyAPI est\u00e1 usando Pydantic para convertir esos dataclasses est\u00e1ndar en su propia versi\u00f3n de dataclasses de Pydantic.</p> <p>Y por supuesto, soporta lo mismo:</p> <ul> <li>validaci\u00f3n de datos</li> <li>serializaci\u00f3n de datos</li> <li>documentaci\u00f3n de datos, etc.</li> </ul> <p>Esto funciona de la misma manera que con los modelos de Pydantic. Y en realidad se logra de la misma manera internamente, utilizando Pydantic.</p> <p>Informaci\u00f3n</p> <p>Ten en cuenta que los dataclasses no pueden hacer todo lo que los modelos de Pydantic pueden hacer.</p> <p>As\u00ed que, podr\u00edas necesitar seguir usando modelos de Pydantic.</p> <p>Pero si tienes un mont\u00f3n de dataclasses por ah\u00ed, este es un buen truco para usarlos para potenciar una API web usando ReadyAPI. \ud83e\udd13</p>"},{"location":"advanced/dataclasses/#dataclasses-en-response_model","title":"Dataclasses en <code>response_model</code>","text":"<p>Tambi\u00e9n puedes usar <code>dataclasses</code> en el par\u00e1metro <code>response_model</code>:</p> Python 3.8+ <pre><code>from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n</code></pre> <p>El dataclass ser\u00e1 autom\u00e1ticamente convertido a un dataclass de Pydantic.</p> <p>De esta manera, su esquema aparecer\u00e1 en la interfaz de usuario de la documentaci\u00f3n de la API:</p> <p></p>"},{"location":"advanced/dataclasses/#dataclasses-en-estructuras-de-datos-anidadas","title":"Dataclasses en Estructuras de Datos Anidadas","text":"<p>Tambi\u00e9n puedes combinar <code>dataclasses</code> con otras anotaciones de tipos para crear estructuras de datos anidadas.</p> <p>En algunos casos, todav\u00eda podr\u00edas tener que usar la versi\u00f3n de <code>dataclasses</code> de Pydantic. Por ejemplo, si tienes errores con la documentaci\u00f3n de la API generada autom\u00e1ticamente.</p> <p>En ese caso, simplemente puedes intercambiar los <code>dataclasses</code> est\u00e1ndar con <code>pydantic.dataclasses</code>, que es un reemplazo directo:</p> Python 3.8+ <pre><code>from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n</code></pre> <ol> <li> <p>Todav\u00eda importamos <code>field</code> de los <code>dataclasses</code> est\u00e1ndar.</p> </li> <li> <p><code>pydantic.dataclasses</code> es un reemplazo directo para <code>dataclasses</code>.</p> </li> <li> <p>El dataclass <code>Author</code> incluye una lista de dataclasses <code>Item</code>.</p> </li> <li> <p>El dataclass <code>Author</code> se usa como el par\u00e1metro <code>response_model</code>.</p> </li> <li> <p>Puedes usar otras anotaciones de tipos est\u00e1ndar con dataclasses como el request body.</p> <p>En este caso, es una lista de dataclasses <code>Item</code>.</p> </li> <li> <p>Aqu\u00ed estamos regresando un diccionario que contiene <code>items</code>, que es una lista de dataclasses.</p> <p>ReadyAPI todav\u00eda es capaz de serializar los datos a JSON.</p> </li> <li> <p>Aqu\u00ed el <code>response_model</code> est\u00e1 usando una anotaci\u00f3n de tipo de una lista de dataclasses <code>Author</code>.</p> <p>Nuevamente, puedes combinar <code>dataclasses</code> con anotaciones de tipos est\u00e1ndar.</p> </li> <li> <p>Nota que esta path operation function usa <code>def</code> regular en lugar de <code>async def</code>.</p> <p>Como siempre, en ReadyAPI puedes combinar <code>def</code> y <code>async def</code> seg\u00fan sea necesario.</p> <p>Si necesitas un repaso sobre cu\u00e1ndo usar cu\u00e1l, revisa la secci\u00f3n \"\u00bfCon prisa?\" en la documentaci\u00f3n sobre <code>async</code> y <code>await</code>.</p> </li> <li> <p>Esta path operation function no est\u00e1 devolviendo dataclasses (aunque podr\u00eda), sino una lista de diccionarios con datos internos.</p> <p>ReadyAPI usar\u00e1 el par\u00e1metro <code>response_model</code> (que incluye dataclasses) para convertir el response.</p> </li> </ol> <p>Puedes combinar <code>dataclasses</code> con otras anotaciones de tipos en muchas combinaciones diferentes para formar estructuras de datos complejas.</p> <p>Revisa las anotaciones en el c\u00f3digo arriba para ver m\u00e1s detalles espec\u00edficos.</p>"},{"location":"advanced/dataclasses/#aprende-mas","title":"Aprende M\u00e1s","text":"<p>Tambi\u00e9n puedes combinar <code>dataclasses</code> con otros modelos de Pydantic, heredar de ellos, incluirlos en tus propios modelos, etc.</p> <p>Para saber m\u00e1s, revisa la documentaci\u00f3n de Pydantic sobre dataclasses.</p>"},{"location":"advanced/dataclasses/#version","title":"Versi\u00f3n","text":"<p>Esto est\u00e1 disponible desde la versi\u00f3n <code>0.67.0</code> de ReadyAPI. \ud83d\udd16</p>"},{"location":"advanced/events/","title":"Eventos de Lifespan","text":"<p>Puedes definir l\u00f3gica (c\u00f3digo) que deber\u00eda ser ejecutada antes de que la aplicaci\u00f3n inicie. Esto significa que este c\u00f3digo ser\u00e1 ejecutado una vez, antes de que la aplicaci\u00f3n comience a recibir requests.</p> <p>De la misma manera, puedes definir l\u00f3gica (c\u00f3digo) que deber\u00eda ser ejecutada cuando la aplicaci\u00f3n est\u00e9 cerr\u00e1ndose. En este caso, este c\u00f3digo ser\u00e1 ejecutado una vez, despu\u00e9s de haber manejado posiblemente muchos requests.</p> <p>Debido a que este c\u00f3digo se ejecuta antes de que la aplicaci\u00f3n comience a tomar requests, y justo despu\u00e9s de que termine de manejarlos, cubre todo el lifespan de la aplicaci\u00f3n (la palabra \"lifespan\" ser\u00e1 importante en un momento \ud83d\ude09).</p> <p>Esto puede ser muy \u00fatil para configurar recursos que necesitas usar para toda la app, y que son compartidos entre requests, y/o que necesitas limpiar despu\u00e9s. Por ejemplo, un pool de conexiones a una base de datos, o cargando un modelo de machine learning compartido.</p>"},{"location":"advanced/events/#caso-de-uso","title":"Caso de Uso","text":"<p>Empecemos con un ejemplo de caso de uso y luego veamos c\u00f3mo resolverlo con esto.</p> <p>Imaginemos que tienes algunos modelos de machine learning que quieres usar para manejar requests. \ud83e\udd16</p> <p>Los mismos modelos son compartidos entre requests, por lo que no es un modelo por request, o uno por usuario o algo similar.</p> <p>Imaginemos que cargar el modelo puede tomar bastante tiempo, porque tiene que leer muchos datos del disco. Entonces no quieres hacerlo para cada request.</p> <p>Podr\u00edas cargarlo en el nivel superior del m\u00f3dulo/archivo, pero eso tambi\u00e9n significar\u00eda que cargar\u00eda el modelo incluso si solo est\u00e1s ejecutando una simple prueba automatizada, entonces esa prueba ser\u00eda lenta porque tendr\u00eda que esperar a que el modelo se cargue antes de poder ejecutar una parte independiente del c\u00f3digo.</p> <p>Eso es lo que resolveremos, vamos a cargar el modelo antes de que los requests sean manejados, pero solo justo antes de que la aplicaci\u00f3n comience a recibir requests, no mientras el c\u00f3digo se est\u00e1 cargando.</p>"},{"location":"advanced/events/#lifespan","title":"Lifespan","text":"<p>Puedes definir esta l\u00f3gica de startup y shutdown usando el par\u00e1metro <code>lifespan</code> de la app de <code>ReadyAPI</code>, y un \"context manager\" (te mostrar\u00e9 lo que es en un momento).</p> <p>Comencemos con un ejemplo y luego ve\u00e1moslo en detalle.</p> <p>Creamos una funci\u00f3n as\u00edncrona <code>lifespan()</code> con <code>yield</code> as\u00ed:</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Aqu\u00ed estamos simulando la operaci\u00f3n costosa de startup de cargar el modelo poniendo la funci\u00f3n del (falso) modelo en el diccionario con modelos de machine learning antes del <code>yield</code>. Este c\u00f3digo ser\u00e1 ejecutado antes de que la aplicaci\u00f3n comience a tomar requests, durante el startup.</p> <p>Y luego, justo despu\u00e9s del <code>yield</code>, quitaremos el modelo de memoria. Este c\u00f3digo ser\u00e1 ejecutado despu\u00e9s de que la aplicaci\u00f3n termine de manejar requests, justo antes del shutdown. Esto podr\u00eda, por ejemplo, liberar recursos como la memoria o una GPU.</p> <p>Consejo</p> <p>El <code>shutdown</code> ocurrir\u00eda cuando est\u00e1s deteniendo la aplicaci\u00f3n.</p> <p>Quiz\u00e1s necesites iniciar una nueva versi\u00f3n, o simplemente te cansaste de ejecutarla. \ud83e\udd37</p>"},{"location":"advanced/events/#funcion-de-lifespan","title":"Funci\u00f3n de Lifespan","text":"<p>Lo primero que hay que notar es que estamos definiendo una funci\u00f3n as\u00edncrona con <code>yield</code>. Esto es muy similar a las Dependencias con <code>yield</code>.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>La primera parte de la funci\u00f3n, antes del <code>yield</code>, ser\u00e1 ejecutada antes de que la aplicaci\u00f3n comience.</p> <p>Y la parte despu\u00e9s del <code>yield</code> ser\u00e1 ejecutada despu\u00e9s de que la aplicaci\u00f3n haya terminado.</p>"},{"location":"advanced/events/#async-context-manager","title":"Async Context Manager","text":"<p>Si revisas, la funci\u00f3n est\u00e1 decorada con un <code>@asynccontextmanager</code>.</p> <p>Eso convierte a la funci\u00f3n en algo llamado un \"async context manager\".</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Un context manager en Python es algo que puedes usar en una declaraci\u00f3n <code>with</code>, por ejemplo, <code>open()</code> puede ser usado como un context manager:</p> <pre><code>with open(\"file.txt\") as file:\n    file.read()\n</code></pre> <p>En versiones recientes de Python, tambi\u00e9n hay un async context manager. Lo usar\u00edas con <code>async with</code>:</p> <pre><code>async with lifespan(app):\n    await do_stuff()\n</code></pre> <p>Cuando creas un context manager o un async context manager como arriba, lo que hace es que, antes de entrar al bloque <code>with</code>, ejecutar\u00e1 el c\u00f3digo antes del <code>yield</code>, y al salir del bloque <code>with</code>, ejecutar\u00e1 el c\u00f3digo despu\u00e9s del <code>yield</code>.</p> <p>En nuestro ejemplo de c\u00f3digo arriba, no lo usamos directamente, pero se lo pasamos a ReadyAPI para que lo use.</p> <p>El par\u00e1metro <code>lifespan</code> de la app de <code>ReadyAPI</code> toma un async context manager, por lo que podemos pasar nuestro nuevo <code>lifespan</code> async context manager a \u00e9l.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"advanced/events/#eventos-alternativos-obsoleto","title":"Eventos Alternativos (obsoleto)","text":"<p>Advertencia</p> <p>La forma recomendada de manejar el startup y el shutdown es usando el par\u00e1metro <code>lifespan</code> de la app de <code>ReadyAPI</code> como se describi\u00f3 arriba. Si proporcionas un par\u00e1metro <code>lifespan</code>, los manejadores de eventos <code>startup</code> y <code>shutdown</code> ya no ser\u00e1n llamados. Es solo <code>lifespan</code> o solo los eventos, no ambos.</p> <p>Probablemente puedas saltarte esta parte.</p> <p>Hay una forma alternativa de definir esta l\u00f3gica para ser ejecutada durante el startup y durante el shutdown.</p> <p>Puedes definir manejadores de eventos (funciones) que necesitan ser ejecutadas antes de que la aplicaci\u00f3n se inicie, o cuando la aplicaci\u00f3n se est\u00e1 cerrando.</p> <p>Estas funciones pueden ser declaradas con <code>async def</code> o <code>def</code> normal.</p>"},{"location":"advanced/events/#evento-startup","title":"Evento <code>startup</code>","text":"<p>Para a\u00f1adir una funci\u00f3n que deber\u00eda ejecutarse antes de que la aplicaci\u00f3n inicie, decl\u00e1rala con el evento <code>\"startup\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n</code></pre> <p>En este caso, la funci\u00f3n manejadora del evento <code>startup</code> inicializar\u00e1 los \u00edtems de la \"base de datos\" (solo un <code>dict</code>) con algunos valores.</p> <p>Puedes a\u00f1adir m\u00e1s de un manejador de eventos.</p> <p>Y tu aplicaci\u00f3n no comenzar\u00e1 a recibir requests hasta que todos los manejadores de eventos <code>startup</code> hayan completado.</p>"},{"location":"advanced/events/#evento-shutdown","title":"Evento <code>shutdown</code>","text":"<p>Para a\u00f1adir una funci\u00f3n que deber\u00eda ejecutarse cuando la aplicaci\u00f3n se est\u00e9 cerrando, decl\u00e1rala con el evento <code>\"shutdown\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Aqu\u00ed, la funci\u00f3n manejadora del evento <code>shutdown</code> escribir\u00e1 una l\u00ednea de texto <code>\"Application shutdown\"</code> a un archivo <code>log.txt</code>.</p> <p>Informaci\u00f3n</p> <p>En la funci\u00f3n <code>open()</code>, el <code>mode=\"a\"</code> significa \"a\u00f1adir\", por lo tanto, la l\u00ednea ser\u00e1 a\u00f1adida despu\u00e9s de lo que sea que est\u00e9 en ese archivo, sin sobrescribir el contenido anterior.</p> <p>Consejo</p> <p>Nota que en este caso estamos usando una funci\u00f3n est\u00e1ndar de Python <code>open()</code> que interact\u00faa con un archivo.</p> <p>Entonces, involucra I/O (entrada/salida), que requiere \"esperar\" para que las cosas se escriban en el disco.</p> <p>Pero <code>open()</code> no usa <code>async</code> y <code>await</code>.</p> <p>Por eso, declaramos la funci\u00f3n manejadora del evento con <code>def</code> est\u00e1ndar en vez de <code>async def</code>.</p>"},{"location":"advanced/events/#startup-y-shutdown-juntos","title":"<code>startup</code> y <code>shutdown</code> juntos","text":"<p>Hay una gran posibilidad de que la l\u00f3gica para tu startup y shutdown est\u00e9 conectada, podr\u00edas querer iniciar algo y luego finalizarlo, adquirir un recurso y luego liberarlo, etc.</p> <p>Hacer eso en funciones separadas que no comparten l\u00f3gica o variables juntas es m\u00e1s dif\u00edcil ya que necesitar\u00edas almacenar valores en variables globales o trucos similares.</p> <p>Debido a eso, ahora se recomienda en su lugar usar el <code>lifespan</code> como se explic\u00f3 arriba.</p>"},{"location":"advanced/events/#detalles-tecnicos","title":"Detalles T\u00e9cnicos","text":"<p>Solo un detalle t\u00e9cnico para los nerds curiosos. \ud83e\udd13</p> <p>Por debajo, en la especificaci\u00f3n t\u00e9cnica ASGI, esto es parte del Protocolo de Lifespan, y define eventos llamados <code>startup</code> y <code>shutdown</code>.</p> <p>Informaci\u00f3n</p> <p>Puedes leer m\u00e1s sobre los manejadores <code>lifespan</code> de Starlette en la documentaci\u00f3n de <code>Lifespan</code> de Starlette.</p> <p>Incluyendo c\u00f3mo manejar el estado de lifespan que puede ser usado en otras \u00e1reas de tu c\u00f3digo.</p>"},{"location":"advanced/events/#sub-aplicaciones","title":"Sub Aplicaciones","text":"<p>\ud83d\udea8 Ten en cuenta que estos eventos de lifespan (startup y shutdown) solo ser\u00e1n ejecutados para la aplicaci\u00f3n principal, no para Sub Aplicaciones - Mounts.</p>"},{"location":"advanced/generate-clients/","title":"Genera Clientes","text":"<p>Como ReadyAPI est\u00e1 basado en la especificaci\u00f3n OpenAPI, obtienes compatibilidad autom\u00e1tica con muchas herramientas, incluyendo la documentaci\u00f3n autom\u00e1tica de la API (proporcionada por Swagger UI).</p> <p>Una ventaja particular que no es necesariamente obvia es que puedes generar clientes (a veces llamados SDKs ) para tu API, para muchos lenguajes de programaci\u00f3n diferentes.</p>"},{"location":"advanced/generate-clients/#generadores-de-clientes-openapi","title":"Generadores de Clientes OpenAPI","text":"<p>Hay muchas herramientas para generar clientes desde OpenAPI.</p> <p>Una herramienta com\u00fan es OpenAPI Generator.</p> <p>Si est\u00e1s construyendo un frontend, una alternativa muy interesante es openapi-ts.</p>"},{"location":"advanced/generate-clients/#generadores-de-clientes-y-sdks-sponsor","title":"Generadores de Clientes y SDKs - Sponsor","text":"<p>Tambi\u00e9n hay algunos generadores de Clientes y SDKs respaldados por empresas basados en OpenAPI (ReadyAPI), en algunos casos pueden ofrecerte funcionalidades adicionales adem\u00e1s de SDKs/clientes generados de alta calidad.</p> <p>Algunos de ellos tambi\u00e9n \u2728 sponsorean ReadyAPI \u2728, esto asegura el desarrollo continuo y saludable de ReadyAPI y su ecosistema.</p> <p>Y muestra su verdadero compromiso con ReadyAPI y su comunidad (t\u00fa), ya que no solo quieren proporcionarte un buen servicio sino tambi\u00e9n asegurarse de que tengas un buen y saludable framework, ReadyAPI. \ud83d\ude47</p> <p>Por ejemplo, podr\u00edas querer probar:</p> <ul> <li>Speakeasy</li> <li>Stainless</li> <li>liblab</li> </ul> <p>Tambi\u00e9n hay varias otras empresas que ofrecen servicios similares que puedes buscar y encontrar en l\u00ednea. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#genera-un-cliente-frontend-en-typescript","title":"Genera un Cliente Frontend en TypeScript","text":"<p>Empecemos con una aplicaci\u00f3n simple de ReadyAPI:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <p>Nota que las path operations definen los modelos que usan para el payload de la petici\u00f3n y el payload del response, usando los modelos <code>Item</code> y <code>ResponseMessage</code>.</p>"},{"location":"advanced/generate-clients/#documentacion-de-la-api","title":"Documentaci\u00f3n de la API","text":"<p>Si vas a la documentaci\u00f3n de la API, ver\u00e1s que tiene los esquemas para los datos que se enviar\u00e1n en las peticiones y se recibir\u00e1n en los responses:</p> <p></p> <p>Puedes ver esos esquemas porque fueron declarados con los modelos en la aplicaci\u00f3n.</p> <p>Esa informaci\u00f3n est\u00e1 disponible en el JSON Schema de OpenAPI de la aplicaci\u00f3n, y luego se muestra en la documentaci\u00f3n de la API (por Swagger UI).</p> <p>Y esa misma informaci\u00f3n de los modelos que est\u00e1 incluida en OpenAPI es lo que puede usarse para generar el c\u00f3digo del cliente.</p>"},{"location":"advanced/generate-clients/#genera-un-cliente-en-typescript","title":"Genera un Cliente en TypeScript","text":"<p>Ahora que tenemos la aplicaci\u00f3n con los modelos, podemos generar el c\u00f3digo del cliente para el frontend.</p>"},{"location":"advanced/generate-clients/#instalar-openapi-ts","title":"Instalar <code>openapi-ts</code>","text":"<p>Puedes instalar <code>openapi-ts</code> en tu c\u00f3digo de frontend con:</p> <pre><code>$ npm install @hey-api/openapi-ts --save-dev\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/generate-clients/#generar-el-codigo-del-cliente","title":"Generar el C\u00f3digo del Cliente","text":"<p>Para generar el c\u00f3digo del cliente puedes usar la aplicaci\u00f3n de l\u00ednea de comandos <code>openapi-ts</code> que ahora estar\u00eda instalada.</p> <p>Como est\u00e1 instalada en el proyecto local, probablemente no podr\u00edas llamar a ese comando directamente, pero podr\u00edas ponerlo en tu archivo <code>package.json</code>.</p> <p>Podr\u00eda verse como esto:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Despu\u00e9s de tener ese script de NPM <code>generate-client</code> all\u00ed, puedes ejecutarlo con:</p> <pre><code>$ npm run generate-client\n\nfrontend-app@1.0.0 generate-client /home/user/code/frontend-app\n&gt; openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n</code></pre> <p>Ese comando generar\u00e1 c\u00f3digo en <code>./src/client</code> y usar\u00e1 <code>axios</code> (el paquete HTTP de frontend) internamente.</p>"},{"location":"advanced/generate-clients/#prueba-el-codigo-del-cliente","title":"Prueba el C\u00f3digo del Cliente","text":"<p>Ahora puedes importar y usar el c\u00f3digo del cliente, podr\u00eda verse as\u00ed, nota que tienes autocompletado para los m\u00e9todos:</p> <p></p> <p>Tambi\u00e9n obtendr\u00e1s autocompletado para el payload a enviar:</p> <p></p> <p>Consejo</p> <p>Nota el autocompletado para <code>name</code> y <code>price</code>, que fue definido en la aplicaci\u00f3n de ReadyAPI, en el modelo <code>Item</code>.</p> <p>Tendr\u00e1s errores en l\u00ednea para los datos que env\u00edes:</p> <p></p> <p>El objeto de response tambi\u00e9n tendr\u00e1 autocompletado:</p> <p></p>"},{"location":"advanced/generate-clients/#app-de-readyapi-con-tags","title":"App de ReadyAPI con Tags","text":"<p>En muchos casos tu aplicaci\u00f3n de ReadyAPI ser\u00e1 m\u00e1s grande, y probablemente usar\u00e1s tags para separar diferentes grupos de path operations.</p> <p>Por ejemplo, podr\u00edas tener una secci\u00f3n para items y otra secci\u00f3n para usuarios, y podr\u00edan estar separadas por tags:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#genera-un-cliente-typescript-con-tags","title":"Genera un Cliente TypeScript con Tags","text":"<p>Si generas un cliente para una aplicaci\u00f3n de ReadyAPI usando tags, normalmente tambi\u00e9n separar\u00e1 el c\u00f3digo del cliente bas\u00e1ndose en los tags.</p> <p>De esta manera podr\u00e1s tener las cosas ordenadas y agrupadas correctamente para el c\u00f3digo del cliente:</p> <p></p> <p>En este caso tienes:</p> <ul> <li><code>ItemsService</code></li> <li><code>UsersService</code></li> </ul>"},{"location":"advanced/generate-clients/#nombres-de-los-metodos-del-cliente","title":"Nombres de los M\u00e9todos del Cliente","text":"<p>Ahora mismo los nombres de los m\u00e9todos generados como <code>createItemItemsPost</code> no se ven muy limpios:</p> <pre><code>ItemsService.createItemItemsPost({name: \"Plumbus\", price: 5})\n</code></pre> <p>...eso es porque el generador del cliente usa el operation ID interno de OpenAPI para cada path operation.</p> <p>OpenAPI requiere que cada operation ID sea \u00fanico a trav\u00e9s de todas las path operations, por lo que ReadyAPI usa el nombre de la funci\u00f3n, el path, y el m\u00e9todo/operaci\u00f3n HTTP para generar ese operation ID, porque de esa manera puede asegurarse de que los operation IDs sean \u00fanicos.</p> <p>Pero te mostrar\u00e9 c\u00f3mo mejorar eso a continuaci\u00f3n. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#operation-ids-personalizados-y-mejores-nombres-de-metodos","title":"Operation IDs Personalizados y Mejores Nombres de M\u00e9todos","text":"<p>Puedes modificar la forma en que estos operation IDs son generados para hacerlos m\u00e1s simples y tener nombres de m\u00e9todos m\u00e1s simples en los clientes.</p> <p>En este caso tendr\u00e1s que asegurarte de que cada operation ID sea \u00fanico de alguna otra manera.</p> <p>Por ejemplo, podr\u00edas asegurarte de que cada path operation tenga un tag, y luego generar el operation ID basado en el tag y el nombre de la path operation name (el nombre de la funci\u00f3n).</p>"},{"location":"advanced/generate-clients/#funcion-personalizada-para-generar-id-unico","title":"Funci\u00f3n Personalizada para Generar ID \u00danico","text":"<p>ReadyAPI usa un ID \u00fanico para cada path operation, se usa para el operation ID y tambi\u00e9n para los nombres de cualquier modelo personalizado necesario, para requests o responses.</p> <p>Puedes personalizar esa funci\u00f3n. Toma un <code>APIRoute</code> y retorna un string.</p> <p>Por ejemplo, aqu\u00ed est\u00e1 usando el primer tag (probablemente tendr\u00e1s solo un tag) y el nombre de la path operation (el nombre de la funci\u00f3n).</p> <p>Puedes entonces pasar esa funci\u00f3n personalizada a ReadyAPI como el par\u00e1metro <code>generate_unique_id_function</code>:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#generar-un-cliente-typescript-con-operation-ids-personalizados","title":"Generar un Cliente TypeScript con Operation IDs Personalizados","text":"<p>Ahora si generas el cliente de nuevo, ver\u00e1s que tiene los nombres de m\u00e9todos mejorados:</p> <p></p> <p>Como ves, los nombres de m\u00e9todos ahora tienen el tag y luego el nombre de la funci\u00f3n, ahora no incluyen informaci\u00f3n del path de la URL y la operaci\u00f3n HTTP.</p>"},{"location":"advanced/generate-clients/#preprocesa-la-especificacion-openapi-para-el-generador-de-clientes","title":"Preprocesa la Especificaci\u00f3n OpenAPI para el Generador de Clientes","text":"<p>El c\u00f3digo generado a\u00fan tiene algo de informaci\u00f3n duplicada.</p> <p>Ya sabemos que este m\u00e9todo est\u00e1 relacionado con los items porque esa palabra est\u00e1 en el <code>ItemsService</code> (tomado del tag), pero a\u00fan tenemos el nombre del tag prefijado en el nombre del m\u00e9todo tambi\u00e9n. \ud83d\ude15</p> <p>Probablemente a\u00fan querremos mantenerlo para OpenAPI en general, ya que eso asegurar\u00e1 que los operation IDs sean \u00fanicos.</p> <p>Pero para el cliente generado podr\u00edamos modificar los operation IDs de OpenAPI justo antes de generar los clientes, solo para hacer esos nombres de m\u00e9todos m\u00e1s bonitos y limpios.</p> <p>Podr\u00edamos descargar el JSON de OpenAPI a un archivo <code>openapi.json</code> y luego podr\u00edamos remover ese tag prefijado con un script como este:</p> Python 3.8+Node.js <pre><code>import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n</code></pre> <pre><code>import * as fs from 'fs'\n\nasync function modifyOpenAPIFile(filePath) {\n  try {\n    const data = await fs.promises.readFile(filePath)\n    const openapiContent = JSON.parse(data)\n\n    const paths = openapiContent.paths\n    for (const pathKey of Object.keys(paths)) {\n      const pathData = paths[pathKey]\n      for (const method of Object.keys(pathData)) {\n        const operation = pathData[method]\n        if (operation.tags &amp;&amp; operation.tags.length &gt; 0) {\n          const tag = operation.tags[0]\n          const operationId = operation.operationId\n          const toRemove = `${tag}-`\n          if (operationId.startsWith(toRemove)) {\n            const newOperationId = operationId.substring(toRemove.length)\n            operation.operationId = newOperationId\n          }\n        }\n      }\n    }\n\n    await fs.promises.writeFile(\n      filePath,\n      JSON.stringify(openapiContent, null, 2),\n    )\n    console.log('File successfully modified')\n  } catch (err) {\n    console.error('Error:', err)\n  }\n}\n\nconst filePath = './openapi.json'\nmodifyOpenAPIFile(filePath)\n</code></pre> <p>Con eso, los operation IDs ser\u00edan renombrados de cosas como <code>items-get_items</code> a solo <code>get_items</code>, de esa manera el generador del cliente puede generar nombres de m\u00e9todos m\u00e1s simples.</p>"},{"location":"advanced/generate-clients/#generar-un-cliente-typescript-con-el-openapi-preprocesado","title":"Generar un Cliente TypeScript con el OpenAPI Preprocesado","text":"<p>Ahora como el resultado final est\u00e1 en un archivo <code>openapi.json</code>, modificar\u00edas el <code>package.json</code> para usar ese archivo local, por ejemplo:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Despu\u00e9s de generar el nuevo cliente, ahora tendr\u00edas nombres de m\u00e9todos limpios, con todo el autocompletado, errores en l\u00ednea, etc:</p> <p></p>"},{"location":"advanced/generate-clients/#beneficios","title":"Beneficios","text":"<p>Cuando usas los clientes generados autom\u00e1ticamente obtendr\u00e1s autocompletado para:</p> <ul> <li>M\u00e9todos.</li> <li>Payloads de peticiones en el cuerpo, par\u00e1metros de query, etc.</li> <li>Payloads de responses.</li> </ul> <p>Tambi\u00e9n tendr\u00e1s errores en l\u00ednea para todo.</p> <p>Y cada vez que actualices el c\u00f3digo del backend, y regeneres el frontend, tendr\u00e1s las nuevas path operations disponibles como m\u00e9todos, las antiguas eliminadas, y cualquier otro cambio se reflejar\u00e1 en el c\u00f3digo generado. \ud83e\udd13</p> <p>Esto tambi\u00e9n significa que si algo cambi\u00f3 ser\u00e1 reflejado autom\u00e1ticamente en el c\u00f3digo del cliente. Y si haces build del cliente, te dar\u00e1 error si tienes alg\u00fan desajuste en los datos utilizados.</p> <p>As\u00ed que, detectar\u00e1s muchos errores muy temprano en el ciclo de desarrollo en lugar de tener que esperar a que los errores se muestren a tus usuarios finales en producci\u00f3n para luego intentar depurar d\u00f3nde est\u00e1 el problema. \u2728</p>"},{"location":"advanced/middleware/","title":"Middleware Avanzado","text":"<p>En el tutorial principal le\u00edste c\u00f3mo agregar Middleware Personalizado a tu aplicaci\u00f3n.</p> <p>Y luego tambi\u00e9n le\u00edste c\u00f3mo manejar CORS con el <code>CORSMiddleware</code>.</p> <p>En esta secci\u00f3n veremos c\u00f3mo usar otros middlewares.</p>"},{"location":"advanced/middleware/#agregando-middlewares-asgi","title":"Agregando middlewares ASGI","text":"<p>Como ReadyAPI est\u00e1 basado en Starlette e implementa la especificaci\u00f3n ASGI, puedes usar cualquier middleware ASGI.</p> <p>Un middleware no tiene que estar hecho para ReadyAPI o Starlette para funcionar, siempre que siga la especificaci\u00f3n ASGI.</p> <p>En general, los middlewares ASGI son clases que esperan recibir una aplicaci\u00f3n ASGI como primer argumento.</p> <p>Entonces, en la documentaci\u00f3n de middlewares ASGI de terceros probablemente te indicar\u00e1n que hagas algo como:</p> <pre><code>from unicorn import UnicornMiddleware\n\napp = SomeASGIApp()\n\nnew_app = UnicornMiddleware(app, some_config=\"rainbow\")\n</code></pre> <p>Pero ReadyAPI (en realidad Starlette) proporciona una forma m\u00e1s simple de hacerlo que asegura que los middlewares internos manejen errores del servidor y los controladores de excepciones personalizadas funcionen correctamente.</p> <p>Para eso, usas <code>app.add_middleware()</code> (como en el ejemplo para CORS).</p> <pre><code>from readyapi import ReadyAPI\nfrom unicorn import UnicornMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n</code></pre> <p><code>app.add_middleware()</code> recibe una clase de middleware como primer argumento y cualquier argumento adicional que se le quiera pasar al middleware.</p>"},{"location":"advanced/middleware/#middlewares-integrados","title":"Middlewares integrados","text":"<p>ReadyAPI incluye varios middlewares para casos de uso com\u00fan, veremos a continuaci\u00f3n c\u00f3mo usarlos.</p> <p>Detalles T\u00e9cnicos</p> <p>Para los pr\u00f3ximos ejemplos, tambi\u00e9n podr\u00edas usar <code>from starlette.middleware.something import SomethingMiddleware</code>.</p> <p>ReadyAPI proporciona varios middlewares en <code>readyapi.middleware</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los middlewares disponibles provienen directamente de Starlette.</p>"},{"location":"advanced/middleware/#httpsredirectmiddleware","title":"<code>HTTPSRedirectMiddleware</code>","text":"<p>Impone que todas las requests entrantes deben ser <code>https</code> o <code>wss</code>.</p> <p>Cualquier request entrante a <code>http</code> o <code>ws</code> ser\u00e1 redirigida al esquema seguro.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"advanced/middleware/#trustedhostmiddleware","title":"<code>TrustedHostMiddleware</code>","text":"<p>Impone que todas las requests entrantes tengan correctamente configurado el header <code>Host</code>, para proteger contra ataques de HTTP Host Header.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Se soportan los siguientes argumentos:</p> <ul> <li><code>allowed_hosts</code> - Una list de nombres de dominio que deber\u00edan ser permitidos como nombres de host. Se soportan dominios comod\u00edn como <code>*.example.com</code> para hacer coincidir subdominios. Para permitir cualquier nombre de host, usa <code>allowed_hosts=[\"*\"]</code> u omite el middleware.</li> </ul> <p>Si una request entrante no se valida correctamente, se enviar\u00e1 un response <code>400</code>.</p>"},{"location":"advanced/middleware/#gzipmiddleware","title":"<code>GZipMiddleware</code>","text":"<p>Maneja responses GZip para cualquier request que incluya <code>\"gzip\"</code> en el header <code>Accept-Encoding</code>.</p> <p>El middleware manejar\u00e1 tanto responses est\u00e1ndar como en streaming.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.gzip import GZipMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n</code></pre> <p>Se soportan los siguientes argumentos:</p> <ul> <li><code>minimum_size</code> - No comprimir con GZip responses que sean m\u00e1s peque\u00f1as que este tama\u00f1o m\u00ednimo en bytes. Por defecto es <code>500</code>.</li> <li><code>compresslevel</code> - Usado durante la compresi\u00f3n GZip. Es un entero que var\u00eda de 1 a 9. Por defecto es <code>9</code>. Un valor m\u00e1s bajo resulta en una compresi\u00f3n m\u00e1s r\u00e1pida pero archivos m\u00e1s grandes, mientras que un valor m\u00e1s alto resulta en una compresi\u00f3n m\u00e1s lenta pero archivos m\u00e1s peque\u00f1os.</li> </ul>"},{"location":"advanced/middleware/#otros-middlewares","title":"Otros middlewares","text":"<p>Hay muchos otros middlewares ASGI.</p> <p>Por ejemplo:</p> <ul> <li><code>ProxyHeadersMiddleware</code> de Uvicorn</li> <li>MessagePack</li> </ul> <p>Para ver otros middlewares disponibles, revisa la documentaci\u00f3n de Middleware de Starlette y la Lista ASGI Awesome.</p>"},{"location":"advanced/openapi-callbacks/","title":"OpenAPI Callbacks","text":"<p>Podr\u00edas crear una API con una path operation que podr\u00eda desencadenar un request a una API externa creada por alguien m\u00e1s (probablemente el mismo desarrollador que estar\u00eda usando tu API).</p> <p>El proceso que ocurre cuando tu aplicaci\u00f3n API llama a la API externa se llama un \"callback\". Porque el software que escribi\u00f3 el desarrollador externo env\u00eda un request a tu API y luego tu API responde, enviando un request a una API externa (que probablemente fue creada por el mismo desarrollador).</p> <p>En este caso, podr\u00edas querer documentar c\u00f3mo esa API externa deber\u00eda verse. Qu\u00e9 path operation deber\u00eda tener, qu\u00e9 cuerpo deber\u00eda esperar, qu\u00e9 response deber\u00eda devolver, etc.</p>"},{"location":"advanced/openapi-callbacks/#una-aplicacion-con-callbacks","title":"Una aplicaci\u00f3n con callbacks","text":"<p>Veamos todo esto con un ejemplo.</p> <p>Imagina que desarrollas una aplicaci\u00f3n que permite crear facturas.</p> <p>Estas facturas tendr\u00e1n un <code>id</code>, <code>title</code> (opcional), <code>customer</code>, y <code>total</code>.</p> <p>El usuario de tu API (un desarrollador externo) crear\u00e1 una factura en tu API con un request POST.</p> <p>Luego tu API (imaginemos):</p> <ul> <li>Enviar\u00e1 la factura a alg\u00fan cliente del desarrollador externo.</li> <li>Recoger\u00e1 el dinero.</li> <li>Enviar\u00e1 una notificaci\u00f3n de vuelta al usuario de la API (el desarrollador externo).<ul> <li>Esto se har\u00e1 enviando un request POST (desde tu API) a alguna API externa proporcionada por ese desarrollador externo (este es el \"callback\").</li> </ul> </li> </ul>"},{"location":"advanced/openapi-callbacks/#la-aplicacion-normal-de-readyapi","title":"La aplicaci\u00f3n normal de ReadyAPI","text":"<p>Primero veamos c\u00f3mo ser\u00eda la aplicaci\u00f3n API normal antes de agregar el callback.</p> <p>Tendr\u00e1 una path operation que recibir\u00e1 un cuerpo <code>Invoice</code>, y un par\u00e1metro de query <code>callback_url</code> que contendr\u00e1 la URL para el callback.</p> <p>Esta parte es bastante normal, probablemente ya est\u00e9s familiarizado con la mayor parte del c\u00f3digo:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Consejo</p> <p>El par\u00e1metro de query <code>callback_url</code> utiliza un tipo Url de Pydantic.</p> <p>Lo \u00fanico nuevo es el <code>callbacks=invoices_callback_router.routes</code> como un argumento para el decorador de path operation. Veremos qu\u00e9 es eso a continuaci\u00f3n.</p>"},{"location":"advanced/openapi-callbacks/#documentar-el-callback","title":"Documentar el callback","text":"<p>El c\u00f3digo real del callback depender\u00e1 mucho de tu propia aplicaci\u00f3n API.</p> <p>Y probablemente variar\u00e1 mucho de una aplicaci\u00f3n a otra.</p> <p>Podr\u00eda ser solo una o dos l\u00edneas de c\u00f3digo, como:</p> <pre><code>callback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n</code></pre> <p>Pero posiblemente la parte m\u00e1s importante del callback es asegurarse de que el usuario de tu API (el desarrollador externo) implemente la API externa correctamente, de acuerdo con los datos que tu API va a enviar en el request body del callback, etc.</p> <p>Entonces, lo que haremos a continuaci\u00f3n es agregar el c\u00f3digo para documentar c\u00f3mo deber\u00eda verse esa API externa para recibir el callback de tu API.</p> <p>Esa documentaci\u00f3n aparecer\u00e1 en la Swagger UI en <code>/docs</code> en tu API, y permitir\u00e1 a los desarrolladores externos saber c\u00f3mo construir la API externa.</p> <p>Este ejemplo no implementa el callback en s\u00ed (eso podr\u00eda ser solo una l\u00ednea de c\u00f3digo), solo la parte de documentaci\u00f3n.</p> <p>Consejo</p> <p>El callback real es solo un request HTTP.</p> <p>Cuando implementes el callback t\u00fa mismo, podr\u00edas usar algo como HTTPX o Requests.</p>"},{"location":"advanced/openapi-callbacks/#escribir-el-codigo-de-documentacion-del-callback","title":"Escribir el c\u00f3digo de documentaci\u00f3n del callback","text":"<p>Este c\u00f3digo no se ejecutar\u00e1 en tu aplicaci\u00f3n, solo lo necesitamos para documentar c\u00f3mo deber\u00eda verse esa API externa.</p> <p>Pero, ya sabes c\u00f3mo crear f\u00e1cilmente documentaci\u00f3n autom\u00e1tica para una API con ReadyAPI.</p> <p>As\u00ed que vamos a usar ese mismo conocimiento para documentar c\u00f3mo deber\u00eda verse la API externa... creando la(s) path operation(s) que la API externa deber\u00eda implementar (las que tu API va a llamar).</p> <p>Consejo</p> <p>Cuando escribas el c\u00f3digo para documentar un callback, podr\u00eda ser \u00fatil imaginar que eres ese desarrollador externo. Y que actualmente est\u00e1s implementando la API externa, no tu API.</p> <p>Adoptar temporalmente este punto de vista (del desarrollador externo) puede ayudarte a sentir que es m\u00e1s obvio d\u00f3nde poner los par\u00e1metros, el modelo de Pydantic para el body, para el response, etc. para esa API externa.</p>"},{"location":"advanced/openapi-callbacks/#crear-un-apirouter-de-callback","title":"Crear un <code>APIRouter</code> de callback","text":"<p>Primero crea un nuevo <code>APIRouter</code> que contendr\u00e1 uno o m\u00e1s callbacks.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre>"},{"location":"advanced/openapi-callbacks/#crear-la-path-operation-del-callback","title":"Crear la path operation del callback","text":"<p>Para crear la path operation del callback utiliza el mismo <code>APIRouter</code> que creaste anteriormente.</p> <p>Deber\u00eda verse como una path operation normal de ReadyAPI:</p> <ul> <li>Probablemente deber\u00eda tener una declaraci\u00f3n del body que deber\u00eda recibir, por ejemplo <code>body: InvoiceEvent</code>.</li> <li>Y tambi\u00e9n podr\u00eda tener una declaraci\u00f3n del response que deber\u00eda devolver, por ejemplo <code>response_model=InvoiceEventReceived</code>.</li> </ul> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Hay 2 diferencias principales respecto a una path operation normal:</p> <ul> <li>No necesita tener ning\u00fan c\u00f3digo real, porque tu aplicaci\u00f3n nunca llamar\u00e1 a este c\u00f3digo. Solo se usa para documentar la API externa. As\u00ed que, la funci\u00f3n podr\u00eda simplemente tener <code>pass</code>.</li> <li>El path puede contener una expresi\u00f3n OpenAPI 3 (ver m\u00e1s abajo) donde puede usar variables con par\u00e1metros y partes del request original enviado a tu API.</li> </ul>"},{"location":"advanced/openapi-callbacks/#la-expresion-del-path-del-callback","title":"La expresi\u00f3n del path del callback","text":"<p>El path del callback puede tener una expresi\u00f3n OpenAPI 3 que puede contener partes del request original enviado a tu API.</p> <p>En este caso, es el <code>str</code>:</p> <pre><code>\"{$callback_url}/invoices/{$request.body.id}\"\n</code></pre> <p>Entonces, si el usuario de tu API (el desarrollador externo) env\u00eda un request a tu API a:</p> <pre><code>https://yourapi.com/invoices/?callback_url=https://www.external.org/events\n</code></pre> <p>con un JSON body de:</p> <pre><code>{\n    \"id\": \"2expen51ve\",\n    \"customer\": \"Mr. Richie Rich\",\n    \"total\": \"9999\"\n}\n</code></pre> <p>luego tu API procesar\u00e1 la factura, y en alg\u00fan momento despu\u00e9s, enviar\u00e1 un request de callback al <code>callback_url</code> (la API externa):</p> <pre><code>https://www.external.org/events/invoices/2expen51ve\n</code></pre> <p>con un JSON body que contiene algo como:</p> <pre><code>{\n    \"description\": \"Payment celebration\",\n    \"paid\": true\n}\n</code></pre> <p>y esperar\u00eda un response de esa API externa con un JSON body como:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre> <p>Consejo</p> <p>Observa c\u00f3mo la URL del callback utilizada contiene la URL recibida como par\u00e1metro de query en <code>callback_url</code> (<code>https://www.external.org/events</code>) y tambi\u00e9n el <code>id</code> de la factura desde dentro del JSON body (<code>2expen51ve</code>).</p>"},{"location":"advanced/openapi-callbacks/#agregar-el-router-de-callback","title":"Agregar el router de callback","text":"<p>En este punto tienes las path operation(s) del callback necesarias (las que el desarrollador externo deber\u00eda implementar en la API externa) en el router de callback que creaste antes.</p> <p>Ahora usa el par\u00e1metro <code>callbacks</code> en el decorador de path operation de tu API para pasar el atributo <code>.routes</code> (que en realidad es solo un <code>list</code> de rutas/path operations) de ese router de callback:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Consejo</p> <p>Observa que no est\u00e1s pasando el router en s\u00ed (<code>invoices_callback_router</code>) a <code>callback=</code>, sino el atributo <code>.routes</code>, como en <code>invoices_callback_router.routes</code>.</p>"},{"location":"advanced/openapi-callbacks/#revisa-la-documentacion","title":"Revisa la documentaci\u00f3n","text":"<p>Ahora puedes iniciar tu aplicaci\u00f3n e ir a http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s tu documentaci\u00f3n incluyendo una secci\u00f3n de \"Callbacks\" para tu path operation que muestra c\u00f3mo deber\u00eda verse la API externa:</p> <p></p>"},{"location":"advanced/openapi-webhooks/","title":"Webhooks de OpenAPI","text":"<p>Hay casos donde quieres decirle a los usuarios de tu API que tu aplicaci\u00f3n podr\u00eda llamar a su aplicaci\u00f3n (enviando una request) con algunos datos, normalmente para notificar de alg\u00fan tipo de evento.</p> <p>Esto significa que en lugar del proceso normal de tus usuarios enviando requests a tu API, es tu API (o tu aplicaci\u00f3n) la que podr\u00eda enviar requests a su sistema (a su API, su aplicaci\u00f3n).</p> <p>Esto normalmente se llama un webhook.</p>"},{"location":"advanced/openapi-webhooks/#pasos-de-los-webhooks","title":"Pasos de los webhooks","text":"<p>El proceso normalmente es que t\u00fa defines en tu c\u00f3digo cu\u00e1l es el mensaje que enviar\u00e1s, el body de la request.</p> <p>Tambi\u00e9n defines de alguna manera en qu\u00e9 momentos tu aplicaci\u00f3n enviar\u00e1 esas requests o eventos.</p> <p>Y tus usuarios definen de alguna manera (por ejemplo en un panel web en alg\u00fan lugar) el URL donde tu aplicaci\u00f3n deber\u00eda enviar esas requests.</p> <p>Toda la l\u00f3gica sobre c\u00f3mo registrar los URLs para webhooks y el c\u00f3digo para realmente enviar esas requests depende de ti. Lo escribes como quieras en tu propio c\u00f3digo.</p>"},{"location":"advanced/openapi-webhooks/#documentando-webhooks-con-readyapi-y-openapi","title":"Documentando webhooks con ReadyAPI y OpenAPI","text":"<p>Con ReadyAPI, usando OpenAPI, puedes definir los nombres de estos webhooks, los tipos de operaciones HTTP que tu aplicaci\u00f3n puede enviar (por ejemplo, <code>POST</code>, <code>PUT</code>, etc.) y los bodies de las requests que tu aplicaci\u00f3n enviar\u00eda.</p> <p>Esto puede hacer mucho m\u00e1s f\u00e1cil para tus usuarios implementar sus APIs para recibir tus requests de webhook, incluso podr\u00edan ser capaces de autogenerar algo de su propio c\u00f3digo de API.</p> <p>Informaci\u00f3n</p> <p>Los webhooks est\u00e1n disponibles en OpenAPI 3.1.0 y superiores, soportados por ReadyAPI <code>0.99.0</code> y superiores.</p>"},{"location":"advanced/openapi-webhooks/#una-aplicacion-con-webhooks","title":"Una aplicaci\u00f3n con webhooks","text":"<p>Cuando creas una aplicaci\u00f3n de ReadyAPI, hay un atributo <code>webhooks</code> que puedes usar para definir webhooks, de la misma manera que definir\u00edas path operations, por ejemplo con <code>@app.webhooks.post()</code>.</p> Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre> <p>Los webhooks que defines terminar\u00e1n en el esquema de OpenAPI y en la interfaz autom\u00e1tica de documentaci\u00f3n.</p> <p>Informaci\u00f3n</p> <p>El objeto <code>app.webhooks</code> es en realidad solo un <code>APIRouter</code>, el mismo tipo que usar\u00edas al estructurar tu aplicaci\u00f3n con m\u00faltiples archivos.</p> <p>Nota que con los webhooks en realidad no est\u00e1s declarando un path (como <code>/items/</code>), el texto que pasas all\u00ed es solo un identificador del webhook (el nombre del evento), por ejemplo en <code>@app.webhooks.post(\"new-subscription\")</code>, el nombre del webhook es <code>new-subscription</code>.</p> <p>Esto es porque se espera que tus usuarios definan el actual URL path donde quieren recibir la request del webhook de alguna otra manera (por ejemplo, un panel web).</p>"},{"location":"advanced/openapi-webhooks/#revisa-la-documentacion","title":"Revisa la documentaci\u00f3n","text":"<p>Ahora puedes iniciar tu app e ir a http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s que tu documentaci\u00f3n tiene las path operations normales y ahora tambi\u00e9n algunos webhooks:</p> <p></p>"},{"location":"advanced/path-operation-advanced-configuration/","title":"Configuraci\u00f3n Avanzada de Path Operation","text":""},{"location":"advanced/path-operation-advanced-configuration/#operationid-de-openapi","title":"operationId de OpenAPI","text":"<p>Advertencia</p> <p>Si no eres un \"experto\" en OpenAPI, probablemente no necesites esto.</p> <p>Puedes establecer el <code>operationId</code> de OpenAPI para ser usado en tu path operation con el par\u00e1metro <code>operation_id</code>.</p> <p>Tienes que asegurarte de que sea \u00fanico para cada operaci\u00f3n.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#usar-el-nombre-de-la-funcion-de-path-operation-como-el-operationid","title":"Usar el nombre de la funci\u00f3n de path operation como el operationId","text":"<p>Si quieres usar los nombres de las funciones de tus APIs como <code>operationId</code>s, puedes iterar sobre todas ellas y sobrescribir el <code>operation_id</code> de cada path operation usando su <code>APIRoute.name</code>.</p> <p>Deber\u00edas hacerlo despu\u00e9s de agregar todas tus path operations.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: ReadyAPI) -&gt; None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n</code></pre> <p>Consejo</p> <p>Si llamas manualmente a <code>app.openapi()</code>, deber\u00edas actualizar los <code>operationId</code>s antes de eso.</p> <p>Advertencia</p> <p>Si haces esto, tienes que asegurarte de que cada una de tus funciones de path operation tenga un nombre \u00fanico.</p> <p>Incluso si est\u00e1n en diferentes m\u00f3dulos (archivos de Python).</p>"},{"location":"advanced/path-operation-advanced-configuration/#excluir-de-openapi","title":"Excluir de OpenAPI","text":"<p>Para excluir una path operation del esquema OpenAPI generado (y por lo tanto, de los sistemas de documentaci\u00f3n autom\u00e1tica), utiliza el par\u00e1metro <code>include_in_schema</code> y config\u00faralo en <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#descripcion-avanzada-desde-el-docstring","title":"Descripci\u00f3n avanzada desde el docstring","text":"<p>Puedes limitar las l\u00edneas usadas del docstring de una funci\u00f3n de path operation para OpenAPI.</p> <p>A\u00f1adir un <code>\\f</code> (un car\u00e1cter de separaci\u00f3n de p\u00e1gina escapado) hace que ReadyAPI trunque la salida usada para OpenAPI en este punto.</p> <p>No aparecer\u00e1 en la documentaci\u00f3n, pero otras herramientas (como Sphinx) podr\u00e1n usar el resto.</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#responses-adicionales","title":"Responses Adicionales","text":"<p>Probablemente has visto c\u00f3mo declarar el <code>response_model</code> y el <code>status_code</code> para una path operation.</p> <p>Eso define los metadatos sobre el response principal de una path operation.</p> <p>Tambi\u00e9n puedes declarar responses adicionales con sus modelos, c\u00f3digos de estado, etc.</p> <p>Hay un cap\u00edtulo entero en la documentaci\u00f3n sobre ello, puedes leerlo en Responses Adicionales en OpenAPI.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extra","title":"OpenAPI Extra","text":"<p>Cuando declaras una path operation en tu aplicaci\u00f3n, ReadyAPI genera autom\u00e1ticamente los metadatos relevantes sobre esa path operation para incluirlos en el esquema de OpenAPI.</p> <p>Nota</p> <p>En la especificaci\u00f3n de OpenAPI se llama el Objeto de Operaci\u00f3n.</p> <p>Tiene toda la informaci\u00f3n sobre la path operation y se usa para generar la documentaci\u00f3n autom\u00e1tica.</p> <p>Incluye los <code>tags</code>, <code>parameters</code>, <code>requestBody</code>, <code>responses</code>, etc.</p> <p>Este esquema de OpenAPI espec\u00edfico de path operation normalmente se genera autom\u00e1ticamente por ReadyAPI, pero tambi\u00e9n puedes extenderlo.</p> <p>Consejo</p> <p>Este es un punto de extensi\u00f3n de bajo nivel.</p> <p>Si solo necesitas declarar responses adicionales, una forma m\u00e1s conveniente de hacerlo es con Responses Adicionales en OpenAPI.</p> <p>Puedes extender el esquema de OpenAPI para una path operation usando el par\u00e1metro <code>openapi_extra</code>.</p>"},{"location":"advanced/path-operation-advanced-configuration/#extensiones-de-openapi","title":"Extensiones de OpenAPI","text":"<p>Este <code>openapi_extra</code> puede ser \u00fatil, por ejemplo, para declarar Extensiones de OpenAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n</code></pre> <p>Si abres la documentaci\u00f3n autom\u00e1tica de la API, tu extensi\u00f3n aparecer\u00e1 en la parte inferior de la path operation espec\u00edfica.</p> <p></p> <p>Y si ves el OpenAPI resultante (en <code>/openapi.json</code> en tu API), ver\u00e1s tu extensi\u00f3n como parte de la path operation espec\u00edfica tambi\u00e9n:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"summary\": \"Read Items\",\n                \"operationId\": \"read_items_items__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                },\n                \"x-aperture-labs-portal\": \"blue\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#esquema-de-path-operation-personalizada-de-openapi","title":"Esquema de path operation personalizada de OpenAPI","text":"<p>El diccionario en <code>openapi_extra</code> se combinar\u00e1 profundamente con el esquema de OpenAPI generado autom\u00e1ticamente para la path operation.</p> <p>Por lo tanto, podr\u00edas a\u00f1adir datos adicionales al esquema generado autom\u00e1ticamente.</p> <p>Por ejemplo, podr\u00edas decidir leer y validar el request con tu propio c\u00f3digo, sin usar las funcionalidades autom\u00e1ticas de ReadyAPI con Pydantic, pero a\u00fan podr\u00edas querer definir el request en el esquema de OpenAPI.</p> <p>Podr\u00edas hacer eso con <code>openapi_extra</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n</code></pre> <p>En este ejemplo, no declaramos ning\u00fan modelo Pydantic. De hecho, el cuerpo del request ni siquiera se parse como JSON, se lee directamente como <code>bytes</code>, y la funci\u00f3n <code>magic_data_reader()</code> ser\u00eda la encargada de parsearlo de alguna manera.</p> <p>Sin embargo, podemos declarar el esquema esperado para el cuerpo del request.</p>"},{"location":"advanced/path-operation-advanced-configuration/#tipo-de-contenido-personalizado-de-openapi","title":"Tipo de contenido personalizado de OpenAPI","text":"<p>Usando este mismo truco, podr\u00edas usar un modelo Pydantic para definir el esquema JSON que luego se incluye en la secci\u00f3n personalizada del esquema OpenAPI para la path operation.</p> <p>Y podr\u00edas hacer esto incluso si el tipo de datos en el request no es JSON.</p> <p>Por ejemplo, en esta aplicaci\u00f3n no usamos la funcionalidad integrada de ReadyAPI para extraer el esquema JSON de los modelos Pydantic ni la validaci\u00f3n autom\u00e1tica para JSON. De hecho, estamos declarando el tipo de contenido del request como YAML, no JSON:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Informaci\u00f3n</p> <p>En la versi\u00f3n 1 de Pydantic el m\u00e9todo para obtener el esquema JSON para un modelo se llamaba <code>Item.schema()</code>, en la versi\u00f3n 2 de Pydantic, el m\u00e9todo se llama <code>Item.model_json_schema()</code>.</p> <p>Sin embargo, aunque no estamos usando la funcionalidad integrada por defecto, a\u00fan estamos usando un modelo Pydantic para generar manualmente el esquema JSON para los datos que queremos recibir en YAML.</p> <p>Luego usamos el request directamente, y extraemos el cuerpo como <code>bytes</code>. Esto significa que ReadyAPI ni siquiera intentar\u00e1 parsear la carga \u00fatil del request como JSON.</p> <p>Y luego en nuestro c\u00f3digo, parseamos ese contenido YAML directamente, y nuevamente estamos usando el mismo modelo Pydantic para validar el contenido YAML:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Informaci\u00f3n</p> <p>En la versi\u00f3n 1 de Pydantic el m\u00e9todo para parsear y validar un objeto era <code>Item.parse_obj()</code>, en la versi\u00f3n 2 de Pydantic, el m\u00e9todo se llama <code>Item.model_validate()</code>.</p> <p>Consejo</p> <p>Aqu\u00ed reutilizamos el mismo modelo Pydantic.</p> <p>Pero de la misma manera, podr\u00edamos haberlo validado de alguna otra forma.</p>"},{"location":"advanced/response-change-status-code/","title":"Response - Cambiar C\u00f3digo de Estado","text":"<p>Probablemente le\u00edste antes que puedes establecer un C\u00f3digo de Estado de Response por defecto.</p> <p>Pero en algunos casos necesitas devolver un c\u00f3digo de estado diferente al predeterminado.</p>"},{"location":"advanced/response-change-status-code/#caso-de-uso","title":"Caso de uso","text":"<p>Por ejemplo, imagina que quieres devolver un c\u00f3digo de estado HTTP de \"OK\" <code>200</code> por defecto.</p> <p>Pero si los datos no existieran, quieres crearlos y devolver un c\u00f3digo de estado HTTP de \"CREATED\" <code>201</code>.</p> <p>Pero todav\u00eda quieres poder filtrar y convertir los datos que devuelves con un <code>response_model</code>.</p> <p>Para esos casos, puedes usar un par\u00e1metro <code>Response</code>.</p>"},{"location":"advanced/response-change-status-code/#usa-un-parametro-response","title":"Usa un par\u00e1metro <code>Response</code>","text":"<p>Puedes declarar un par\u00e1metro de tipo <code>Response</code> en tu funci\u00f3n de path operation (como puedes hacer para cookies y headers).</p> <p>Y luego puedes establecer el <code>status_code</code> en ese objeto de response temporal.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response, status\n\napp = ReadyAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n</code></pre> <p>Y luego puedes devolver cualquier objeto que necesites, como lo har\u00edas normalmente (un <code>dict</code>, un modelo de base de datos, etc.).</p> <p>Y si declaraste un <code>response_model</code>, todav\u00eda se utilizar\u00e1 para filtrar y convertir el objeto que devolviste.</p> <p>ReadyAPI usar\u00e1 ese response temporal para extraer el c\u00f3digo de estado (tambi\u00e9n cookies y headers), y los pondr\u00e1 en el response final que contiene el valor que devolviste, filtrado por cualquier <code>response_model</code>.</p> <p>Tambi\u00e9n puedes declarar el par\u00e1metro <code>Response</code> en dependencias y establecer el c\u00f3digo de estado en ellas. Pero ten en cuenta que el \u00faltimo establecido prevalecer\u00e1.</p>"},{"location":"advanced/response-cookies/","title":"Cookies de Response","text":""},{"location":"advanced/response-cookies/#usar-un-parametro-response","title":"Usar un par\u00e1metro <code>Response</code>","text":"<p>Puedes declarar un par\u00e1metro de tipo <code>Response</code> en tu path operation function.</p> <p>Y luego puedes establecer cookies en ese objeto de response temporal.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n</code></pre> <p>Y entonces puedes devolver cualquier objeto que necesites, como normalmente lo har\u00edas (un <code>dict</code>, un modelo de base de datos, etc).</p> <p>Y si declaraste un <code>response_model</code>, todav\u00eda se utilizar\u00e1 para filtrar y convertir el objeto que devolviste.</p> <p>ReadyAPI utilizar\u00e1 ese response temporal para extraer las cookies (tambi\u00e9n los headers y el c\u00f3digo de estado), y las pondr\u00e1 en el response final que contiene el valor que devolviste, filtrado por cualquier <code>response_model</code>.</p> <p>Tambi\u00e9n puedes declarar el par\u00e1metro <code>Response</code> en las dependencias, y establecer cookies (y headers) en ellas.</p>"},{"location":"advanced/response-cookies/#devolver-una-response-directamente","title":"Devolver una <code>Response</code> directamente","text":"<p>Tambi\u00e9n puedes crear cookies al devolver una <code>Response</code> directamente en tu c\u00f3digo.</p> <p>Para hacer eso, puedes crear un response como se describe en Devolver un Response Directamente.</p> <p>Luego establece Cookies en ella, y luego devu\u00e9lvela:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n</code></pre> <p>Consejo</p> <p>Ten en cuenta que si devuelves un response directamente en lugar de usar el par\u00e1metro <code>Response</code>, ReadyAPI lo devolver\u00e1 directamente.</p> <p>As\u00ed que tendr\u00e1s que asegurarte de que tus datos son del tipo correcto. Por ejemplo, que sea compatible con JSON, si est\u00e1s devolviendo un <code>JSONResponse</code>.</p> <p>Y tambi\u00e9n que no est\u00e9s enviando ning\u00fan dato que deber\u00eda haber sido filtrado por un <code>response_model</code>.</p>"},{"location":"advanced/response-cookies/#mas-informacion","title":"M\u00e1s informaci\u00f3n","text":"<p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import Response</code> o <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI proporciona los mismos <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette.</p> <p>Y como el <code>Response</code> se puede usar frecuentemente para establecer headers y cookies, ReadyAPI tambi\u00e9n lo proporciona en <code>readyapi.Response</code>.</p> <p>Para ver todos los par\u00e1metros y opciones disponibles, revisa la documentaci\u00f3n en Starlette.</p>"},{"location":"advanced/response-directly/","title":"Devolver una Response Directamente","text":"<p>Cuando creas una path operation en ReadyAPI, normalmente puedes devolver cualquier dato desde ella: un <code>dict</code>, una <code>list</code>, un modelo de Pydantic, un modelo de base de datos, etc.</p> <p>Por defecto, ReadyAPI convertir\u00eda autom\u00e1ticamente ese valor de retorno a JSON usando el <code>jsonable_encoder</code> explicado en JSON Compatible Encoder.</p> <p>Luego, detr\u00e1s de escena, pondr\u00eda esos datos compatibles con JSON (por ejemplo, un <code>dict</code>) dentro de un <code>JSONResponse</code> que se usar\u00eda para enviar el response al cliente.</p> <p>Pero puedes devolver un <code>JSONResponse</code> directamente desde tus path operations.</p> <p>Esto podr\u00eda ser \u00fatil, por ejemplo, para devolver headers o cookies personalizados.</p>"},{"location":"advanced/response-directly/#devolver-una-response","title":"Devolver una <code>Response</code>","text":"<p>De hecho, puedes devolver cualquier <code>Response</code> o cualquier subclase de ella.</p> <p>Consejo</p> <p><code>JSONResponse</code> en s\u00ed misma es una subclase de <code>Response</code>.</p> <p>Y cuando devuelves una <code>Response</code>, ReadyAPI la pasar\u00e1 directamente.</p> <p>No har\u00e1 ninguna conversi\u00f3n de datos con los modelos de Pydantic, no convertir\u00e1 los contenidos a ning\u00fan tipo, etc.</p> <p>Esto te da mucha flexibilidad. Puedes devolver cualquier tipo de datos, sobrescribir cualquier declaraci\u00f3n o validaci\u00f3n de datos, etc.</p>"},{"location":"advanced/response-directly/#usar-el-jsonable_encoder-en-una-response","title":"Usar el <code>jsonable_encoder</code> en una <code>Response</code>","text":"<p>Como ReadyAPI no realiza cambios en una <code>Response</code> que devuelves, tienes que asegurarte de que sus contenidos est\u00e9n listos para ello.</p> <p>Por ejemplo, no puedes poner un modelo de Pydantic en un <code>JSONResponse</code> sin primero convertirlo a un <code>dict</code> con todos los tipos de datos (como <code>datetime</code>, <code>UUID</code>, etc.) convertidos a tipos compatibles con JSON.</p> <p>Para esos casos, puedes usar el <code>jsonable_encoder</code> para convertir tus datos antes de pasarlos a un response:</p> Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n</code></pre> <p>Nota</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI proporciona los mismos <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette.</p>"},{"location":"advanced/response-directly/#devolver-una-response-personalizada","title":"Devolver una <code>Response</code> personalizada","text":"<p>El ejemplo anterior muestra todas las partes que necesitas, pero a\u00fan no es muy \u00fatil, ya que podr\u00edas haber devuelto el <code>item</code> directamente, y ReadyAPI lo colocar\u00eda en un <code>JSONResponse</code> por ti, convirti\u00e9ndolo a un <code>dict</code>, etc. Todo eso por defecto.</p> <p>Ahora, veamos c\u00f3mo podr\u00edas usar eso para devolver un response personalizado.</p> <p>Digamos que quieres devolver un response en XML.</p> <p>Podr\u00edas poner tu contenido XML en un string, poner eso en un <code>Response</code>, y devolverlo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/response-directly/#notas","title":"Notas","text":"<p>Cuando devuelves una <code>Response</code> directamente, sus datos no son validados, convertidos (serializados), ni documentados autom\u00e1ticamente.</p> <p>Pero a\u00fan puedes documentarlo como se describe en Additional Responses in OpenAPI.</p> <p>Puedes ver en secciones posteriores c\u00f3mo usar/declarar estas <code>Response</code>s personalizadas mientras todav\u00eda tienes conversi\u00f3n autom\u00e1tica de datos, documentaci\u00f3n, etc.</p>"},{"location":"advanced/response-headers/","title":"Response Headers","text":""},{"location":"advanced/response-headers/#usa-un-parametro-response","title":"Usa un par\u00e1metro <code>Response</code>","text":"<p>Puedes declarar un par\u00e1metro de tipo <code>Response</code> en tu funci\u00f3n de path operation (como puedes hacer para cookies).</p> <p>Y luego puedes establecer headers en ese objeto de response temporal.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Y luego puedes devolver cualquier objeto que necesites, como har\u00edas normalmente (un <code>dict</code>, un modelo de base de datos, etc).</p> <p>Y si declaraste un <code>response_model</code>, a\u00fan se usar\u00e1 para filtrar y convertir el objeto que devolviste.</p> <p>ReadyAPI usar\u00e1 ese response temporal para extraer los headers (tambi\u00e9n cookies y el c\u00f3digo de estado), y los pondr\u00e1 en el response final que contiene el valor que devolviste, filtrado por cualquier <code>response_model</code>.</p> <p>Tambi\u00e9n puedes declarar el par\u00e1metro <code>Response</code> en dependencias y establecer headers (y cookies) en ellas.</p>"},{"location":"advanced/response-headers/#retorna-una-response-directamente","title":"Retorna una <code>Response</code> directamente","text":"<p>Tambi\u00e9n puedes agregar headers cuando devuelves un <code>Response</code> directamente.</p> <p>Crea un response como se describe en Retorna un Response Directamente y pasa los headers como un par\u00e1metro adicional:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n</code></pre> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import Response</code> o <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI proporciona las mismas <code>starlette.responses</code> como <code>readyapi.responses</code> solo por conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles provienen directamente de Starlette.</p> <p>Y como el <code>Response</code> se puede usar frecuentemente para establecer headers y cookies, ReadyAPI tambi\u00e9n lo proporciona en <code>readyapi.Response</code>.</p>"},{"location":"advanced/response-headers/#headers-personalizados","title":"Headers Personalizados","text":"<p>Ten en cuenta que los headers propietarios personalizados se pueden agregar usando el prefijo 'X-'.</p> <p>Pero si tienes headers personalizados que quieres que un cliente en un navegador pueda ver, necesitas agregarlos a tus configuraciones de CORS (leer m\u00e1s en CORS (Cross-Origin Resource Sharing)), usando el par\u00e1metro <code>expose_headers</code> documentado en la documentaci\u00f3n CORS de Starlette.</p>"},{"location":"advanced/settings/","title":"Configuraciones y Variables de Entorno","text":"<p>En muchos casos, tu aplicaci\u00f3n podr\u00eda necesitar algunas configuraciones o ajustes externos, por ejemplo, claves secretas, credenciales de base de datos, credenciales para servicios de correo electr\u00f3nico, etc.</p> <p>La mayor\u00eda de estas configuraciones son variables (pueden cambiar), como las URLs de bases de datos. Y muchas podr\u00edan ser sensibles, como los secretos.</p> <p>Por esta raz\u00f3n, es com\u00fan proporcionarlas en variables de entorno que son le\u00eddas por la aplicaci\u00f3n.</p> <p>Consejo</p> <p>Para entender las variables de entorno, puedes leer Variables de Entorno.</p>"},{"location":"advanced/settings/#tipos-y-validacion","title":"Tipos y validaci\u00f3n","text":"<p>Estas variables de entorno solo pueden manejar strings de texto, ya que son externas a Python y tienen que ser compatibles con otros programas y el resto del sistema (e incluso con diferentes sistemas operativos, como Linux, Windows, macOS).</p> <p>Eso significa que cualquier valor le\u00eddo en Python desde una variable de entorno ser\u00e1 un <code>str</code>, y cualquier conversi\u00f3n a un tipo diferente o cualquier validaci\u00f3n tiene que hacerse en c\u00f3digo.</p>"},{"location":"advanced/settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>Afortunadamente, Pydantic proporciona una gran utilidad para manejar estas configuraciones provenientes de variables de entorno con Pydantic: Settings management.</p>"},{"location":"advanced/settings/#instalar-pydantic-settings","title":"Instalar <code>pydantic-settings</code>","text":"<p>Primero, aseg\u00farate de crear tu entorno virtual, act\u00edvalo y luego instala el paquete <code>pydantic-settings</code>:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>Tambi\u00e9n viene incluido cuando instalas los extras <code>all</code> con:</p> <pre><code>$ pip install \"readyapi[all]\"\n---&gt; 100%\n</code></pre> <p>Informaci\u00f3n</p> <p>En Pydantic v1 ven\u00eda incluido con el paquete principal. Ahora se distribuye como este paquete independiente para que puedas elegir si instalarlo o no si no necesitas esa funcionalidad.</p>"},{"location":"advanced/settings/#crear-el-objeto-settings","title":"Crear el objeto <code>Settings</code>","text":"<p>Importa <code>BaseSettings</code> de Pydantic y crea una sub-clase, muy similar a un modelo de Pydantic.</p> <p>De la misma forma que con los modelos de Pydantic, declaras atributos de clase con anotaciones de tipos, y posiblemente, valores por defecto.</p> <p>Puedes usar todas las mismas funcionalidades de validaci\u00f3n y herramientas que usas para los modelos de Pydantic, como diferentes tipos de datos y validaciones adicionales con <code>Field()</code>.</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Informaci\u00f3n</p> <p>En Pydantic v1 importar\u00edas <code>BaseSettings</code> directamente desde <code>pydantic</code> en lugar de desde <code>pydantic_settings</code>.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Consejo</p> <p>Si quieres algo r\u00e1pido para copiar y pegar, no uses este ejemplo, usa el \u00faltimo m\u00e1s abajo.</p> <p>Luego, cuando creas una instance de esa clase <code>Settings</code> (en este caso, en el objeto <code>settings</code>), Pydantic leer\u00e1 las variables de entorno de una manera indiferente a may\u00fasculas y min\u00fasculas, por lo que una variable en may\u00fasculas <code>APP_NAME</code> a\u00fan ser\u00e1 le\u00edda para el atributo <code>app_name</code>.</p> <p>Luego convertir\u00e1 y validar\u00e1 los datos. As\u00ed que, cuando uses ese objeto <code>settings</code>, tendr\u00e1s datos de los tipos que declaraste (por ejemplo, <code>items_per_user</code> ser\u00e1 un <code>int</code>).</p>"},{"location":"advanced/settings/#usar-el-settings","title":"Usar el <code>settings</code>","text":"<p>Luego puedes usar el nuevo objeto <code>settings</code> en tu aplicaci\u00f3n:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#ejecutar-el-servidor","title":"Ejecutar el servidor","text":"<p>Luego, ejecutar\u00edas el servidor pasando las configuraciones como variables de entorno, por ejemplo, podr\u00edas establecer un <code>ADMIN_EMAIL</code> y <code>APP_NAME</code> con:</p> <pre><code>$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" readyapi run main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Consejo</p> <p>Para establecer m\u00faltiples variables de entorno para un solo comando, simplemente sep\u00e1ralas con un espacio y ponlas todas antes del comando.</p> <p>Y luego la configuraci\u00f3n <code>admin_email</code> se establecer\u00eda en <code>\"deadpool@example.com\"</code>.</p> <p>El <code>app_name</code> ser\u00eda <code>\"ChimichangApp\"</code>.</p> <p>Y el <code>items_per_user</code> mantendr\u00eda su valor por defecto de <code>50</code>.</p>"},{"location":"advanced/settings/#configuraciones-en-otro-modulo","title":"Configuraciones en otro m\u00f3dulo","text":"<p>Podr\u00edas poner esas configuraciones en otro archivo de m\u00f3dulo como viste en Aplicaciones M\u00e1s Grandes - M\u00faltiples Archivos.</p> <p>Por ejemplo, podr\u00edas tener un archivo <code>config.py</code> con:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n</code></pre> <p>Y luego usarlo en un archivo <code>main.py</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nfrom .config import settings\n\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Consejo</p> <p>Tambi\u00e9n necesitar\u00edas un archivo <code>__init__.py</code> como viste en Aplicaciones M\u00e1s Grandes - M\u00faltiples Archivos.</p>"},{"location":"advanced/settings/#configuraciones-en-una-dependencia","title":"Configuraciones en una dependencia","text":"<p>En algunas ocasiones podr\u00eda ser \u00fatil proporcionar las configuraciones desde una dependencia, en lugar de tener un objeto global con <code>settings</code> que se use en todas partes.</p> <p>Esto podr\u00eda ser especialmente \u00fatil durante las pruebas, ya que es muy f\u00e1cil sobrescribir una dependencia con tus propias configuraciones personalizadas.</p>"},{"location":"advanced/settings/#el-archivo-de-configuracion","title":"El archivo de configuraci\u00f3n","text":"<p>Proveniente del ejemplo anterior, tu archivo <code>config.py</code> podr\u00eda verse como:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n</code></pre> <p>Nota que ahora no creamos una instance por defecto <code>settings = Settings()</code>.</p>"},{"location":"advanced/settings/#el-archivo-principal-de-la-app","title":"El archivo principal de la app","text":"<p>Ahora creamos una dependencia que devuelve un nuevo <code>config.Settings()</code>.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Consejo</p> <p>Hablaremos del <code>@lru_cache</code> en un momento.</p> <p>Por ahora puedes asumir que <code>get_settings()</code> es una funci\u00f3n normal.</p> <p>Y luego podemos requerirlo desde la path operation function como una dependencia y usarlo donde lo necesitemos.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#configuraciones-y-pruebas","title":"Configuraciones y pruebas","text":"<p>Luego ser\u00eda muy f\u00e1cil proporcionar un objeto de configuraciones diferente durante las pruebas al sobrescribir una dependencia para <code>get_settings</code>:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n</code></pre> <p>En la dependencia sobreescrita establecemos un nuevo valor para el <code>admin_email</code> al crear el nuevo objeto <code>Settings</code>, y luego devolvemos ese nuevo objeto.</p> <p>Luego podemos probar que se est\u00e1 usando.</p>"},{"location":"advanced/settings/#leer-un-archivo-env","title":"Leer un archivo <code>.env</code>","text":"<p>Si tienes muchas configuraciones que posiblemente cambien mucho, tal vez en diferentes entornos, podr\u00eda ser \u00fatil ponerlos en un archivo y luego leerlos desde all\u00ed como si fueran variables de entorno.</p> <p>Esta pr\u00e1ctica es lo suficientemente com\u00fan que tiene un nombre, estas variables de entorno generalmente se colocan en un archivo <code>.env</code>, y el archivo se llama un \"dotenv\".</p> <p>Consejo</p> <p>Un archivo que comienza con un punto (<code>.</code>) es un archivo oculto en sistemas tipo Unix, como Linux y macOS.</p> <p>Pero un archivo dotenv realmente no tiene que tener ese nombre exacto.</p> <p>Pydantic tiene soporte para leer desde estos tipos de archivos usando un paquete externo. Puedes leer m\u00e1s en Pydantic Settings: Dotenv (.env) support.</p> <p>Consejo</p> <p>Para que esto funcione, necesitas <code>pip install python-dotenv</code>.</p>"},{"location":"advanced/settings/#el-archivo-env","title":"El archivo <code>.env</code>","text":"<p>Podr\u00edas tener un archivo <code>.env</code> con:</p> <pre><code>ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n</code></pre>"},{"location":"advanced/settings/#leer-configuraciones-desde-env","title":"Leer configuraciones desde <code>.env</code>","text":"<p>Y luego actualizar tu <code>config.py</code> con:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n</code></pre> <p>Consejo</p> <p>El atributo <code>model_config</code> se usa solo para configuraci\u00f3n de Pydantic. Puedes leer m\u00e1s en Pydantic: Concepts: Configuration.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n</code></pre> <p>Consejo</p> <p>La clase <code>Config</code> se usa solo para configuraci\u00f3n de Pydantic. Puedes leer m\u00e1s en Pydantic Model Config.</p> <p>Informaci\u00f3n</p> <p>En la versi\u00f3n 1 de Pydantic la configuraci\u00f3n se hac\u00eda en una clase interna <code>Config</code>, en la versi\u00f3n 2 de Pydantic se hace en un atributo <code>model_config</code>. Este atributo toma un <code>dict</code>, y para obtener autocompletado y errores en l\u00ednea, puedes importar y usar <code>SettingsConfigDict</code> para definir ese <code>dict</code>.</p> <p>Aqu\u00ed definimos la configuraci\u00f3n <code>env_file</code> dentro de tu clase Pydantic <code>Settings</code>, y establecemos el valor en el nombre del archivo con el archivo dotenv que queremos usar.</p>"},{"location":"advanced/settings/#creando-el-settings-solo-una-vez-con-lru_cache","title":"Creando el <code>Settings</code> solo una vez con <code>lru_cache</code>","text":"<p>Leer un archivo desde el disco es normalmente una operaci\u00f3n costosa (lenta), por lo que probablemente quieras hacerlo solo una vez y luego reutilizar el mismo objeto de configuraciones, en lugar de leerlo para cada request.</p> <p>Pero cada vez que hacemos:</p> <pre><code>Settings()\n</code></pre> <p>se crear\u00eda un nuevo objeto <code>Settings</code>, y al crearse leer\u00eda el archivo <code>.env</code> nuevamente.</p> <p>Si la funci\u00f3n de dependencia fuera simplemente as\u00ed:</p> <pre><code>def get_settings():\n    return Settings()\n</code></pre> <p>crear\u00edamos ese objeto para cada request, y estar\u00edamos leyendo el archivo <code>.env</code> para cada request. \u26a0\ufe0f</p> <p>Pero como estamos usando el decorador <code>@lru_cache</code> encima, el objeto <code>Settings</code> se crear\u00e1 solo una vez, la primera vez que se llame. \u2714\ufe0f</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Entonces, para cualquier llamada subsiguiente de <code>get_settings()</code> en las dependencias de los pr\u00f3ximos requests, en lugar de ejecutar el c\u00f3digo interno de <code>get_settings()</code> y crear un nuevo objeto <code>Settings</code>, devolver\u00e1 el mismo objeto que fue devuelto en la primera llamada, una y otra vez.</p>"},{"location":"advanced/settings/#detalles-tecnicos-de-lru_cache","title":"Detalles T\u00e9cnicos de <code>lru_cache</code>","text":"<p><code>@lru_cache</code> modifica la funci\u00f3n que decora para devolver el mismo valor que se devolvi\u00f3 la primera vez, en lugar de calcularlo nuevamente, ejecutando el c\u00f3digo de la funci\u00f3n cada vez.</p> <p>As\u00ed que la funci\u00f3n debajo se ejecutar\u00e1 una vez por cada combinaci\u00f3n de argumentos. Y luego, los valores devueltos por cada una de esas combinaciones de argumentos se utilizar\u00e1n una y otra vez cada vez que la funci\u00f3n sea llamada con exactamente la misma combinaci\u00f3n de argumentos.</p> <p>Por ejemplo, si tienes una funci\u00f3n:</p> <pre><code>@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n</code></pre> <p>tu programa podr\u00eda ejecutarse as\u00ed:</p> <pre><code>sequenceDiagram\n\nparticipant code as C\u00f3digo\nparticipant function as say_hi()\nparticipant execute as Ejecutar funci\u00f3n\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; execute: ejecutar c\u00f3digo de la funci\u00f3n\n        execute -&gt;&gt; code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: devolver resultado almacenado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; execute: ejecutar c\u00f3digo de la funci\u00f3n\n        execute -&gt;&gt; code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function -&gt;&gt; execute: ejecutar c\u00f3digo de la funci\u00f3n\n        execute -&gt;&gt; code: devolver el resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; code: devolver resultado almacenado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: devolver resultado almacenado\n    end</code></pre> <p>En el caso de nuestra dependencia <code>get_settings()</code>, la funci\u00f3n ni siquiera toma argumentos, por lo que siempre devolver\u00e1 el mismo valor.</p> <p>De esa manera, se comporta casi como si fuera solo una variable global. Pero como usa una funci\u00f3n de dependencia, entonces podemos sobrescribirla f\u00e1cilmente para las pruebas.</p> <p><code>@lru_cache</code> es parte de <code>functools</code>, que es parte del library est\u00e1ndar de Python, puedes leer m\u00e1s sobre \u00e9l en las docs de Python para <code>@lru_cache</code>.</p>"},{"location":"advanced/settings/#resumen","title":"Resumen","text":"<p>Puedes usar Pydantic Settings para manejar las configuraciones o ajustes de tu aplicaci\u00f3n, con todo el poder de los modelos de Pydantic.</p> <ul> <li>Al usar una dependencia, puedes simplificar las pruebas.</li> <li>Puedes usar archivos <code>.env</code> con \u00e9l.</li> <li>Usar <code>@lru_cache</code> te permite evitar leer el archivo dotenv una y otra vez para cada request, mientras te permite sobrescribirlo durante las pruebas.</li> </ul>"},{"location":"advanced/sub-applications/","title":"Sub Aplicaciones - Mounts","text":"<p>Si necesitas tener dos aplicaciones de ReadyAPI independientes, cada una con su propio OpenAPI independiente y su propia interfaz de docs, puedes tener una aplicaci\u00f3n principal y \"montar\" una (o m\u00e1s) sub-aplicaci\u00f3n(es).</p>"},{"location":"advanced/sub-applications/#montar-una-aplicacion-readyapi","title":"Montar una aplicaci\u00f3n ReadyAPI","text":"<p>\"Montar\" significa a\u00f1adir una aplicaci\u00f3n completamente \"independiente\" en un path espec\u00edfico, que luego se encarga de manejar todo bajo ese path, con las path operations declaradas en esa sub-aplicaci\u00f3n.</p>"},{"location":"advanced/sub-applications/#aplicacion-de-nivel-superior","title":"Aplicaci\u00f3n de nivel superior","text":"<p>Primero, crea la aplicaci\u00f3n principal de nivel superior de ReadyAPI, y sus path operations:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#sub-aplicacion","title":"Sub-aplicaci\u00f3n","text":"<p>Luego, crea tu sub-aplicaci\u00f3n, y sus path operations.</p> <p>Esta sub-aplicaci\u00f3n es solo otra aplicaci\u00f3n est\u00e1ndar de ReadyAPI, pero es la que se \"montar\u00e1\":</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#montar-la-sub-aplicacion","title":"Montar la sub-aplicaci\u00f3n","text":"<p>En tu aplicaci\u00f3n de nivel superior, <code>app</code>, monta la sub-aplicaci\u00f3n, <code>subapi</code>.</p> <p>En este caso, se montar\u00e1 en el path <code>/subapi</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#revisa-la-documentacion-automatica-de-la-api","title":"Revisa la documentaci\u00f3n autom\u00e1tica de la API","text":"<p>Ahora, ejecuta el comando <code>readyapi</code> con tu archivo:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Y abre la documentaci\u00f3n en http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s la documentaci\u00f3n autom\u00e1tica de la API para la aplicaci\u00f3n principal, incluyendo solo sus propias path operations:</p> <p></p> <p>Y luego, abre la documentaci\u00f3n para la sub-aplicaci\u00f3n, en http://127.0.0.1:8000/subapi/docs.</p> <p>Ver\u00e1s la documentaci\u00f3n autom\u00e1tica de la API para la sub-aplicaci\u00f3n, incluyendo solo sus propias path operations, todas bajo el prefijo correcto del sub-path <code>/subapi</code>:</p> <p></p> <p>Si intentas interactuar con cualquiera de las dos interfaces de usuario, funcionar\u00e1n correctamente, porque el navegador podr\u00e1 comunicarse con cada aplicaci\u00f3n o sub-aplicaci\u00f3n espec\u00edfica.</p>"},{"location":"advanced/sub-applications/#detalles-tecnicos-root_path","title":"Detalles T\u00e9cnicos: <code>root_path</code>","text":"<p>Cuando montas una sub-aplicaci\u00f3n como se describe arriba, ReadyAPI se encargar\u00e1 de comunicar el path de montaje para la sub-aplicaci\u00f3n usando un mecanismo de la especificaci\u00f3n ASGI llamado <code>root_path</code>.</p> <p>De esa manera, la sub-aplicaci\u00f3n sabr\u00e1 usar ese prefijo de path para la interfaz de documentaci\u00f3n.</p> <p>Y la sub-aplicaci\u00f3n tambi\u00e9n podr\u00eda tener sus propias sub-aplicaciones montadas y todo funcionar\u00eda correctamente, porque ReadyAPI maneja todos estos <code>root_path</code>s autom\u00e1ticamente.</p> <p>Aprender\u00e1s m\u00e1s sobre el <code>root_path</code> y c\u00f3mo usarlo expl\u00edcitamente en la secci\u00f3n sobre Detr\u00e1s de un Proxy.</p>"},{"location":"advanced/templates/","title":"Plantillas","text":"<p>Puedes usar cualquier motor de plantillas que desees con ReadyAPI.</p> <p>Una elecci\u00f3n com\u00fan es Jinja2, el mismo que usa Flask y otras herramientas.</p> <p>Hay utilidades para configurarlo f\u00e1cilmente que puedes usar directamente en tu aplicaci\u00f3n de ReadyAPI (proporcionadas por Starlette).</p>"},{"location":"advanced/templates/#instalar-dependencias","title":"Instalar dependencias","text":"<p>Aseg\u00farate de crear un entorno virtual, activarlo e instalar <code>jinja2</code>:</p> <pre><code>$ pip install jinja2\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/templates/#usando-jinja2templates","title":"Usando <code>Jinja2Templates</code>","text":"<ul> <li>Importa <code>Jinja2Templates</code>.</li> <li>Crea un objeto <code>templates</code> que puedas reutilizar m\u00e1s tarde.</li> <li>Declara un par\u00e1metro <code>Request</code> en la path operation que devolver\u00e1 una plantilla.</li> <li>Usa los <code>templates</code> que creaste para renderizar y devolver un <code>TemplateResponse</code>, pasa el nombre de la plantilla, el objeto de request, y un diccionario \"context\" con pares clave-valor que se usar\u00e1n dentro de la plantilla Jinja2.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import HTMLResponse\nfrom readyapi.staticfiles import StaticFiles\nfrom readyapi.templating import Jinja2Templates\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n</code></pre> <p>Nota</p> <p>Antes de ReadyAPI 0.108.0, Starlette 0.29.0, el <code>name</code> era el primer par\u00e1metro.</p> <p>Adem\u00e1s, antes de eso, en versiones anteriores, el objeto <code>request</code> se pasaba como parte de los pares clave-valor en el contexto para Jinja2.</p> <p>Consejo</p> <p>Al declarar <code>response_class=HTMLResponse</code>, la interfaz de usuario de la documentaci\u00f3n podr\u00e1 saber que el response ser\u00e1 HTML.</p> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.templating import Jinja2Templates</code>.</p> <p>ReadyAPI proporciona el mismo <code>starlette.templating</code> como <code>readyapi.templating</code>, solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette. Lo mismo con <code>Request</code> y <code>StaticFiles</code>.</p>"},{"location":"advanced/templates/#escribiendo-plantillas","title":"Escribiendo plantillas","text":"<p>Luego puedes escribir una plantilla en <code>templates/item.html</code> con, por ejemplo:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced/templates/#valores-de-contexto-de-la-plantilla","title":"Valores de Contexto de la Plantilla","text":"<p>En el HTML que contiene:</p> <pre><code>Item ID: {{ id }}\n</code></pre> <p>...mostrar\u00e1 el <code>id</code> tomado del <code>dict</code> de \"contexto\" que pasaste:</p> <pre><code>{\"id\": id}\n</code></pre> <p>Por ejemplo, con un ID de <code>42</code>, esto se renderizar\u00eda como:</p> <pre><code>Item ID: 42\n</code></pre>"},{"location":"advanced/templates/#argumentos-de-la-plantilla-url_for","title":"Argumentos de la Plantilla <code>url_for</code>","text":"<p>Tambi\u00e9n puedes usar <code>url_for()</code> dentro de la plantilla, toma como argumentos los mismos que usar\u00eda tu path operation function.</p> <p>Entonces, la secci\u00f3n con:</p> <pre><code>&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;\n</code></pre> <p>...generar\u00e1 un enlace hacia la misma URL que manejar\u00eda la path operation function <code>read_item(id=id)</code>.</p> <p>Por ejemplo, con un ID de <code>42</code>, esto se renderizar\u00eda como:</p> <pre><code>&lt;a href=\"/items/42\"&gt;\n</code></pre>"},{"location":"advanced/templates/#plantillas-y-archivos-estaticos","title":"Plantillas y archivos est\u00e1ticos","text":"<p>Tambi\u00e9n puedes usar <code>url_for()</code> dentro de la plantilla, y usarlo, por ejemplo, con los <code>StaticFiles</code> que montaste con el <code>name=\"static\"</code>.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, enlazar\u00eda a un archivo CSS en <code>static/styles.css</code> con:</p> <pre><code>h1 {\n    color: green;\n}\n</code></pre> <p>Y porque est\u00e1s usando <code>StaticFiles</code>, ese archivo CSS ser\u00eda servido autom\u00e1ticamente por tu aplicaci\u00f3n de ReadyAPI en la URL <code>/static/styles.css</code>.</p>"},{"location":"advanced/templates/#mas-detalles","title":"M\u00e1s detalles","text":"<p>Para m\u00e1s detalles, incluyendo c\u00f3mo testear plantillas, revisa la documentaci\u00f3n de Starlette sobre plantillas.</p>"},{"location":"advanced/testing-dependencies/","title":"Probando Dependencias con Overrides","text":""},{"location":"advanced/testing-dependencies/#sobrescribir-dependencias-durante-las-pruebas","title":"Sobrescribir dependencias durante las pruebas","text":"<p>Hay algunos escenarios donde podr\u00edas querer sobrescribir una dependencia durante las pruebas.</p> <p>No quieres que la dependencia original se ejecute (ni ninguna de las sub-dependencias que pueda tener).</p> <p>En cambio, quieres proporcionar una dependencia diferente que se usar\u00e1 solo durante las pruebas (posiblemente solo algunas pruebas espec\u00edficas), y que proporcionar\u00e1 un valor que pueda ser usado donde se us\u00f3 el valor de la dependencia original.</p>"},{"location":"advanced/testing-dependencies/#casos-de-uso-servicio-externo","title":"Casos de uso: servicio externo","text":"<p>Un ejemplo podr\u00eda ser que tienes un proveedor de autenticaci\u00f3n externo al que necesitas llamar.</p> <p>Le env\u00edas un token y te devuelve un usuario autenticado.</p> <p>Este proveedor podr\u00eda estar cobr\u00e1ndote por cada request, y llamarlo podr\u00eda tomar m\u00e1s tiempo adicional que si tuvieras un usuario de prueba fijo para los tests.</p> <p>Probablemente quieras probar el proveedor externo una vez, pero no necesariamente llamarlo para cada test que se realice.</p> <p>En este caso, puedes sobrescribir la dependencia que llama a ese proveedor y usar una dependencia personalizada que devuelva un usuario de prueba, solo para tus tests.</p>"},{"location":"advanced/testing-dependencies/#usa-el-atributo-appdependency_overrides","title":"Usa el atributo <code>app.dependency_overrides</code>","text":"<p>Para estos casos, tu aplicaci\u00f3n ReadyAPI tiene un atributo <code>app.dependency_overrides</code>, es un simple <code>dict</code>.</p> <p>Para sobrescribir una dependencia para las pruebas, colocas como clave la dependencia original (una funci\u00f3n), y como valor, tu dependencia para sobreescribir (otra funci\u00f3n).</p> <p>Y entonces ReadyAPI llamar\u00e1 a esa dependencia para sobreescribir en lugar de la dependencia original.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Consejo</p> <p>Puedes sobreescribir una dependencia utilizada en cualquier lugar de tu aplicaci\u00f3n ReadyAPI.</p> <p>La dependencia original podr\u00eda ser utilizada en una path operation function, un path operation decorator (cuando no usas el valor de retorno), una llamada a <code>.include_router()</code>, etc.</p> <p>ReadyAPI todav\u00eda podr\u00e1 sobrescribirla.</p> <p>Entonces puedes restablecer las dependencias sobreescritas configurando <code>app.dependency_overrides</code> para que sea un <code>dict</code> vac\u00edo:</p> <pre><code>app.dependency_overrides = {}\n</code></pre> <p>Consejo</p> <p>Si quieres sobrescribir una dependencia solo durante algunos tests, puedes establecer la sobrescritura al inicio del test (dentro de la funci\u00f3n del test) y restablecerla al final (al final de la funci\u00f3n del test).</p>"},{"location":"advanced/testing-events/","title":"Testing Events: startup - shutdown","text":"<p>Cuando necesitas que tus manejadores de eventos (<code>startup</code> y <code>shutdown</code>) se ejecuten en tus tests, puedes usar el <code>TestClient</code> con un statement <code>with</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n</code></pre>"},{"location":"advanced/testing-websockets/","title":"Probando WebSockets","text":"<p>Puedes usar el mismo <code>TestClient</code> para probar WebSockets.</p> <p>Para esto, usas el <code>TestClient</code> en un statement <code>with</code>, conect\u00e1ndote al WebSocket:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom readyapi.websockets import WebSocket\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n</code></pre> <p>Nota</p> <p>Para m\u00e1s detalles, revisa la documentaci\u00f3n de Starlette sobre probando sesiones WebSocket.</p>"},{"location":"advanced/using-request-directly/","title":"Usar el Request Directamente","text":"<p>Hasta ahora, has estado declarando las partes del request que necesitas con sus tipos.</p> <p>Tomando datos de:</p> <ul> <li>El path como par\u00e1metros.</li> <li>Headers.</li> <li>Cookies.</li> <li>etc.</li> </ul> <p>Y al hacerlo, ReadyAPI est\u00e1 validando esos datos, convirti\u00e9ndolos y generando documentaci\u00f3n para tu API autom\u00e1ticamente.</p> <p>Pero hay situaciones donde podr\u00edas necesitar acceder al objeto <code>Request</code> directamente.</p>"},{"location":"advanced/using-request-directly/#detalles-sobre-el-objeto-request","title":"Detalles sobre el objeto <code>Request</code>","text":"<p>Como ReadyAPI es en realidad Starlette por debajo, con una capa de varias herramientas encima, puedes usar el objeto <code>Request</code> de Starlette directamente cuando lo necesites.</p> <p>Tambi\u00e9n significa que si obtienes datos del objeto <code>Request</code> directamente (por ejemplo, leyendo el cuerpo) no ser\u00e1n validados, convertidos o documentados (con OpenAPI, para la interfaz autom\u00e1tica de usuario de la API) por ReadyAPI.</p> <p>Aunque cualquier otro par\u00e1metro declarado normalmente (por ejemplo, el cuerpo con un modelo de Pydantic) seguir\u00eda siendo validado, convertido, anotado, etc.</p> <p>Pero hay casos espec\u00edficos donde es \u00fatil obtener el objeto <code>Request</code>.</p>"},{"location":"advanced/using-request-directly/#usa-el-objeto-request-directamente","title":"Usa el objeto <code>Request</code> directamente","text":"<p>Imaginemos que quieres obtener la direcci\u00f3n IP/host del cliente dentro de tu path operation function.</p> <p>Para eso necesitas acceder al request directamente.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n</code></pre> <p>Al declarar un par\u00e1metro de path operation function con el tipo siendo <code>Request</code>, ReadyAPI sabr\u00e1 pasar el <code>Request</code> en ese par\u00e1metro.</p> <p>Consejo</p> <p>Nota que en este caso, estamos declarando un par\u00e1metro de path adem\u00e1s del par\u00e1metro del request.</p> <p>As\u00ed que, el par\u00e1metro de path ser\u00e1 extra\u00eddo, validado, convertido al tipo especificado y anotado con OpenAPI.</p> <p>De la misma manera, puedes declarar cualquier otro par\u00e1metro como normalmente, y adicionalmente, obtener tambi\u00e9n el <code>Request</code>.</p>"},{"location":"advanced/using-request-directly/#documentacion-de-request","title":"Documentaci\u00f3n de <code>Request</code>","text":"<p>Puedes leer m\u00e1s detalles sobre el objeto <code>Request</code> en el sitio de documentaci\u00f3n oficial de Starlette.</p> <p>Detalles T\u00e9cnicos</p> <p>Podr\u00edas tambi\u00e9n usar <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI lo proporciona directamente solo como conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.</p>"},{"location":"advanced/websockets/","title":"WebSockets","text":"<p>Puedes usar WebSockets con ReadyAPI.</p>"},{"location":"advanced/websockets/#instalar-websockets","title":"Instalar <code>WebSockets</code>","text":"<p>Aseg\u00farate de crear un entorno virtual, activarlo e instalar <code>websockets</code>:</p> <pre><code>$ pip install websockets\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/websockets/#cliente-websockets","title":"Cliente WebSockets","text":""},{"location":"advanced/websockets/#en-produccion","title":"En producci\u00f3n","text":"<p>En tu sistema de producci\u00f3n, probablemente tengas un frontend creado con un framework moderno como React, Vue.js o Angular.</p> <p>Y para comunicarte usando WebSockets con tu backend probablemente usar\u00edas las utilidades de tu frontend.</p> <p>O podr\u00edas tener una aplicaci\u00f3n m\u00f3vil nativa que se comunica con tu backend de WebSocket directamente, en c\u00f3digo nativo.</p> <p>O podr\u00edas tener alguna otra forma de comunicarte con el endpoint de WebSocket.</p> <p>Pero para este ejemplo, usaremos un documento HTML muy simple con algo de JavaScript, todo dentro de un string largo.</p> <p>Esto, por supuesto, no es lo ideal y no lo usar\u00edas para producci\u00f3n.</p> <p>En producci\u00f3n tendr\u00edas una de las opciones anteriores.</p> <p>Pero es la forma m\u00e1s sencilla de enfocarse en el lado del servidor de WebSockets y tener un ejemplo funcional:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre>"},{"location":"advanced/websockets/#crear-un-websocket","title":"Crear un <code>websocket</code>","text":"<p>En tu aplicaci\u00f3n de ReadyAPI, crea un <code>websocket</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.websockets import WebSocket</code>.</p> <p>ReadyAPI proporciona el mismo <code>WebSocket</code> directamente solo como una conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.</p>"},{"location":"advanced/websockets/#esperar-mensajes-y-enviar-mensajes","title":"Esperar mensajes y enviar mensajes","text":"<p>En tu ruta de WebSocket puedes <code>await</code> para recibir mensajes y enviar mensajes.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Puedes recibir y enviar datos binarios, de texto y JSON.</p>"},{"location":"advanced/websockets/#pruebalo","title":"Pru\u00e9balo","text":"<p>Si tu archivo se llama <code>main.py</code>, ejecuta tu aplicaci\u00f3n con:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Abre tu navegador en http://127.0.0.1:8000.</p> <p>Ver\u00e1s una p\u00e1gina simple como:</p> <p></p> <p>Puedes escribir mensajes en el cuadro de entrada y enviarlos:</p> <p></p> <p>Y tu aplicaci\u00f3n ReadyAPI con WebSockets responder\u00e1 de vuelta:</p> <p></p> <p>Puedes enviar (y recibir) muchos mensajes:</p> <p></p> <p>Y todos usar\u00e1n la misma conexi\u00f3n WebSocket.</p>"},{"location":"advanced/websockets/#usando-depends-y-otros","title":"Usando <code>Depends</code> y otros","text":"<p>En endpoints de WebSocket puedes importar desde <code>readyapi</code> y usar:</p> <ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> </ul> <p>Funcionan de la misma manera que para otros endpoints de ReadyAPI/path operations:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Informaci\u00f3n</p> <p>Como esto es un WebSocket no tiene mucho sentido lanzar un <code>HTTPException</code>, en su lugar lanzamos un <code>WebSocketException</code>.</p> <p>Puedes usar un c\u00f3digo de cierre de los c\u00f3digos v\u00e1lidos definidos en la especificaci\u00f3n.</p>"},{"location":"advanced/websockets/#prueba-los-websockets-con-dependencias","title":"Prueba los WebSockets con dependencias","text":"<p>Si tu archivo se llama <code>main.py</code>, ejecuta tu aplicaci\u00f3n con:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Abre tu navegador en http://127.0.0.1:8000.</p> <p>Ah\u00ed puedes establecer:</p> <ul> <li>El \"ID del \u00cdtem\", usado en el path.</li> <li>El \"Token\" usado como un par\u00e1metro query.</li> </ul> <p>Consejo</p> <p>Nota que el query <code>token</code> ser\u00e1 manejado por una dependencia.</p> <p>Con eso puedes conectar el WebSocket y luego enviar y recibir mensajes:</p> <p></p>"},{"location":"advanced/websockets/#manejar-desconexiones-y-multiples-clientes","title":"Manejar desconexiones y m\u00faltiples clientes","text":"<p>Cuando una conexi\u00f3n de WebSocket se cierra, el <code>await websocket.receive_text()</code> lanzar\u00e1 una excepci\u00f3n <code>WebSocketDisconnect</code>, que puedes capturar y manejar como en este ejemplo.</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <p>Para probarlo:</p> <ul> <li>Abre la aplicaci\u00f3n con varias pesta\u00f1as del navegador.</li> <li>Escribe mensajes desde ellas.</li> <li>Luego cierra una de las pesta\u00f1as.</li> </ul> <p>Eso lanzar\u00e1 la excepci\u00f3n <code>WebSocketDisconnect</code>, y todos los otros clientes recibir\u00e1n un mensaje como:</p> <pre><code>Client #1596980209979 left the chat\n</code></pre> <p>Consejo</p> <p>La aplicaci\u00f3n anterior es un ejemplo m\u00ednimo y simple para demostrar c\u00f3mo manejar y transmitir mensajes a varias conexiones WebSocket.</p> <p>Pero ten en cuenta que, como todo se maneja en memoria, en una sola lista, solo funcionar\u00e1 mientras el proceso est\u00e9 en ejecuci\u00f3n, y solo funcionar\u00e1 con un solo proceso.</p> <p>Si necesitas algo f\u00e1cil de integrar con ReadyAPI pero que sea m\u00e1s robusto, soportado por Redis, PostgreSQL u otros, revisa encode/broadcaster.</p>"},{"location":"advanced/websockets/#mas-informacion","title":"M\u00e1s informaci\u00f3n","text":"<p>Para aprender m\u00e1s sobre las opciones, revisa la documentaci\u00f3n de Starlette para:</p> <ul> <li>La clase <code>WebSocket</code>.</li> <li>Manejo de WebSocket basado en clases.</li> </ul>"},{"location":"advanced/wsgi/","title":"Incluyendo WSGI - Flask, Django, otros","text":"<p>Puedes montar aplicaciones WSGI como viste con Sub Aplicaciones - Mounts, Detr\u00e1s de un Proxy.</p> <p>Para eso, puedes usar <code>WSGIMiddleware</code> y usarlo para envolver tu aplicaci\u00f3n WSGI, por ejemplo, Flask, Django, etc.</p>"},{"location":"advanced/wsgi/#usando-wsgimiddleware","title":"Usando <code>WSGIMiddleware</code>","text":"<p>Necesitas importar <code>WSGIMiddleware</code>.</p> <p>Luego envuelve la aplicaci\u00f3n WSGI (p. ej., Flask) con el middleware.</p> <p>Y luego m\u00f3ntala bajo un path.</p> Python 3.8+ <pre><code>from flask import Flask, request\nfrom markupsafe import escape\nfrom readyapi import ReadyAPI\nfrom readyapi.middleware.wsgi import WSGIMiddleware\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n</code></pre>"},{"location":"advanced/wsgi/#revisa","title":"Revisa","text":"<p>Ahora, cada request bajo el path <code>/v1/</code> ser\u00e1 manejado por la aplicaci\u00f3n Flask.</p> <p>Y el resto ser\u00e1 manejado por ReadyAPI.</p> <p>Si lo ejecutas y vas a http://localhost:8000/v1/ ver\u00e1s el response de Flask:</p> <pre><code>Hello, World from Flask!\n</code></pre> <p>Y si vas a http://localhost:8000/v2 ver\u00e1s el response de ReadyAPI:</p> <pre><code>{\n    \"message\": \"Hello World\"\n}\n</code></pre>"},{"location":"advanced/security/","title":"Seguridad Avanzada","text":""},{"location":"advanced/security/#funcionalidades-adicionales","title":"Funcionalidades Adicionales","text":"<p>Hay algunas funcionalidades extra para manejar la seguridad aparte de las cubiertas en el Tutorial - Gu\u00eda del Usuario: Seguridad.</p> <p>Consejo</p> <p>Las siguientes secciones no son necesariamente \"avanzadas\".</p> <p>Y es posible que para tu caso de uso, la soluci\u00f3n est\u00e9 en una de ellas.</p>"},{"location":"advanced/security/#lee-primero-el-tutorial","title":"Lee primero el Tutorial","text":"<p>Las siguientes secciones asumen que ya le\u00edste el Tutorial - Gu\u00eda del Usuario: Seguridad.</p> <p>Todas est\u00e1n basadas en los mismos conceptos, pero permiten algunas funcionalidades adicionales.</p>"},{"location":"advanced/security/http-basic-auth/","title":"HTTP Basic Auth","text":"<p>Para los casos m\u00e1s simples, puedes usar HTTP Basic Auth.</p> <p>En HTTP Basic Auth, la aplicaci\u00f3n espera un header que contiene un nombre de usuario y una contrase\u00f1a.</p> <p>Si no lo recibe, devuelve un error HTTP 401 \"Unauthorized\".</p> <p>Y devuelve un header <code>WWW-Authenticate</code> con un valor de <code>Basic</code>, y un par\u00e1metro <code>realm</code> opcional.</p> <p>Eso le dice al navegador que muestre el prompt integrado para un nombre de usuario y contrase\u00f1a.</p> <p>Luego, cuando escribes ese nombre de usuario y contrase\u00f1a, el navegador los env\u00eda autom\u00e1ticamente en el header.</p>"},{"location":"advanced/security/http-basic-auth/#simple-http-basic-auth","title":"Simple HTTP Basic Auth","text":"<ul> <li>Importa <code>HTTPBasic</code> y <code>HTTPBasicCredentials</code>.</li> <li>Crea un \"esquema de <code>security</code>\" usando <code>HTTPBasic</code>.</li> <li>Usa ese <code>security</code> con una dependencia en tu path operation.</li> <li>Devuelve un objeto de tipo <code>HTTPBasicCredentials</code>:</li> <li>Contiene el <code>username</code> y <code>password</code> enviados.</li> </ul> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Cuando intentas abrir la URL por primera vez (o haces clic en el bot\u00f3n \"Execute\" en la documentaci\u00f3n) el navegador te pedir\u00e1 tu nombre de usuario y contrase\u00f1a:</p> <p></p>"},{"location":"advanced/security/http-basic-auth/#revisa-el-nombre-de-usuario","title":"Revisa el nombre de usuario","text":"<p>Aqu\u00ed hay un ejemplo m\u00e1s completo.</p> <p>Usa una dependencia para comprobar si el nombre de usuario y la contrase\u00f1a son correctos.</p> <p>Para esto, usa el m\u00f3dulo est\u00e1ndar de Python <code>secrets</code> para verificar el nombre de usuario y la contrase\u00f1a.</p> <p><code>secrets.compare_digest()</code> necesita tomar <code>bytes</code> o un <code>str</code> que solo contenga caracteres ASCII (los car\u00e1cteres en ingl\u00e9s), esto significa que no funcionar\u00eda con caracteres como <code>\u00e1</code>, como en <code>KhulnaSoft</code>.</p> <p>Para manejar eso, primero convertimos el <code>username</code> y <code>password</code> a <code>bytes</code> codific\u00e1ndolos con UTF-8.</p> <p>Luego podemos usar <code>secrets.compare_digest()</code> para asegurar que <code>credentials.username</code> es <code>\"stanleyjobson\"</code>, y que <code>credentials.password</code> es <code>\"swordfish\"</code>.</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> <p>Esto ser\u00eda similar a:</p> <pre><code>if not (credentials.username == \"stanleyjobson\") or not (credentials.password == \"swordfish\"):\n    # Return some error\n    ...\n</code></pre> <p>Pero al usar <code>secrets.compare_digest()</code> ser\u00e1 seguro contra un tipo de ataques llamados \"timing attacks\".</p>"},{"location":"advanced/security/http-basic-auth/#timing-attacks","title":"Timing Attacks","text":"<p>\u00bfPero qu\u00e9 es un \"timing attack\"?</p> <p>Imaginemos que algunos atacantes est\u00e1n tratando de adivinar el nombre de usuario y la contrase\u00f1a.</p> <p>Y env\u00edan un request con un nombre de usuario <code>johndoe</code> y una contrase\u00f1a <code>love123</code>.</p> <p>Entonces el c\u00f3digo de Python en tu aplicaci\u00f3n equivaldr\u00eda a algo como:</p> <pre><code>if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Pero justo en el momento en que Python compara la primera <code>j</code> en <code>johndoe</code> con la primera <code>s</code> en <code>stanleyjobson</code>, devolver\u00e1 <code>False</code>, porque ya sabe que esas dos strings no son iguales, pensando que \"no hay necesidad de gastar m\u00e1s computaci\u00f3n comparando el resto de las letras\". Y tu aplicaci\u00f3n dir\u00e1 \"Nombre de usuario o contrase\u00f1a incorrectos\".</p> <p>Pero luego los atacantes prueban con el nombre de usuario <code>stanleyjobsox</code> y contrase\u00f1a <code>love123</code>.</p> <p>Y el c\u00f3digo de tu aplicaci\u00f3n hace algo as\u00ed como:</p> <pre><code>if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Python tendr\u00e1 que comparar todo <code>stanleyjobso</code> en ambos <code>stanleyjobsox</code> y <code>stanleyjobson</code> antes de darse cuenta de que ambas strings no son las mismas. As\u00ed que tomar\u00e1 algunos microsegundos extra para responder \"Nombre de usuario o contrase\u00f1a incorrectos\".</p>"},{"location":"advanced/security/http-basic-auth/#el-tiempo-de-respuesta-ayuda-a-los-atacantes","title":"El tiempo de respuesta ayuda a los atacantes","text":"<p>En ese punto, al notar que el servidor tard\u00f3 algunos microsegundos m\u00e1s en enviar el response \"Nombre de usuario o contrase\u00f1a incorrectos\", los atacantes sabr\u00e1n que acertaron en algo, algunas de las letras iniciales eran correctas.</p> <p>Y luego pueden intentar de nuevo sabiendo que probablemente es algo m\u00e1s similar a <code>stanleyjobsox</code> que a <code>johndoe</code>.</p>"},{"location":"advanced/security/http-basic-auth/#un-ataque-profesional","title":"Un ataque \"profesional\"","text":"<p>Por supuesto, los atacantes no intentar\u00edan todo esto a mano, escribir\u00edan un programa para hacerlo, posiblemente con miles o millones de pruebas por segundo. Y obtendr\u00edan solo una letra correcta adicional a la vez.</p> <p>Pero haciendo eso, en algunos minutos u horas, los atacantes habr\u00edan adivinado el nombre de usuario y la contrase\u00f1a correctos, con la \"ayuda\" de nuestra aplicaci\u00f3n, solo usando el tiempo tomado para responder.</p>"},{"location":"advanced/security/http-basic-auth/#arreglalo-con-secretscompare_digest","title":"Arr\u00e9glalo con <code>secrets.compare_digest()</code>","text":"<p>Pero en nuestro c\u00f3digo estamos usando realmente <code>secrets.compare_digest()</code>.</p> <p>En resumen, tomar\u00e1 el mismo tiempo comparar <code>stanleyjobsox</code> con <code>stanleyjobson</code> que comparar <code>johndoe</code> con <code>stanleyjobson</code>. Y lo mismo para la contrase\u00f1a.</p> <p>De esa manera, usando <code>secrets.compare_digest()</code> en el c\u00f3digo de tu aplicaci\u00f3n, ser\u00e1 seguro contra todo este rango de ataques de seguridad.</p>"},{"location":"advanced/security/http-basic-auth/#devuelve-el-error","title":"Devuelve el error","text":"<p>Despu\u00e9s de detectar que las credenciales son incorrectas, regresa un <code>HTTPException</code> con un c\u00f3digo de estado 401 (el mismo que se devuelve cuando no se proporcionan credenciales) y agrega el header <code>WWW-Authenticate</code> para que el navegador muestre el prompt de inicio de sesi\u00f3n nuevamente:</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/","title":"Scopes de OAuth2","text":"<p>Puedes usar scopes de OAuth2 directamente con ReadyAPI, est\u00e1n integrados para funcionar de manera fluida.</p> <p>Esto te permitir\u00eda tener un sistema de permisos m\u00e1s detallado, siguiendo el est\u00e1ndar de OAuth2, integrado en tu aplicaci\u00f3n OpenAPI (y la documentaci\u00f3n de la API).</p> <p>OAuth2 con scopes es el mecanismo usado por muchos grandes proveedores de autenticaci\u00f3n, como Facebook, Google, GitHub, Microsoft, Twitter, etc. Lo usan para proporcionar permisos espec\u00edficos a usuarios y aplicaciones.</p> <p>Cada vez que te \"logueas con\" Facebook, Google, GitHub, Microsoft, Twitter, esa aplicaci\u00f3n est\u00e1 usando OAuth2 con scopes.</p> <p>En esta secci\u00f3n ver\u00e1s c\u00f3mo manejar autenticaci\u00f3n y autorizaci\u00f3n con el mismo OAuth2 con scopes en tu aplicaci\u00f3n de ReadyAPI.</p> <p>Advertencia</p> <p>Esta es una secci\u00f3n m\u00e1s o menos avanzada. Si est\u00e1s comenzando, puedes saltarla.</p> <p>No necesariamente necesitas scopes de OAuth2, y puedes manejar autenticaci\u00f3n y autorizaci\u00f3n como quieras.</p> <p>Pero OAuth2 con scopes se puede integrar muy bien en tu API (con OpenAPI) y en la documentaci\u00f3n de tu API.</p> <p>No obstante, t\u00fa a\u00fan impones esos scopes, o cualquier otro requisito de seguridad/autorizaci\u00f3n, como necesites, en tu c\u00f3digo.</p> <p>En muchos casos, OAuth2 con scopes puede ser un exceso.</p> <p>Pero si sabes que lo necesitas, o tienes curiosidad, sigue leyendo.</p>"},{"location":"advanced/security/oauth2-scopes/#scopes-de-oauth2-y-openapi","title":"Scopes de OAuth2 y OpenAPI","text":"<p>La especificaci\u00f3n de OAuth2 define \"scopes\" como una lista de strings separados por espacios.</p> <p>El contenido de cada uno de estos strings puede tener cualquier formato, pero no debe contener espacios.</p> <p>Estos scopes representan \"permisos\".</p> <p>En OpenAPI (por ejemplo, en la documentaci\u00f3n de la API), puedes definir \"esquemas de seguridad\".</p> <p>Cuando uno de estos esquemas de seguridad usa OAuth2, tambi\u00e9n puedes declarar y usar scopes.</p> <p>Cada \"scope\" es solo un string (sin espacios).</p> <p>Normalmente se utilizan para declarar permisos de seguridad espec\u00edficos, por ejemplo:</p> <ul> <li><code>users:read</code> o <code>users:write</code> son ejemplos comunes.</li> <li><code>instagram_basic</code> es usado por Facebook / Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> es usado por Google.</li> </ul> <p>Informaci\u00f3n</p> <p>En OAuth2 un \"scope\" es solo un string que declara un permiso espec\u00edfico requerido.</p> <p>No importa si tiene otros caracteres como <code>:</code> o si es una URL.</p> <p>Esos detalles son espec\u00edficos de la implementaci\u00f3n.</p> <p>Para OAuth2 son solo strings.</p>"},{"location":"advanced/security/oauth2-scopes/#vista-global","title":"Vista global","text":"<p>Primero, echemos un vistazo r\u00e1pido a las partes que cambian desde los ejemplos en el Tutorial - User Guide principal para OAuth2 con Password (y hashing), Bearer con tokens JWT. Ahora usando scopes de OAuth2:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Ahora revisemos esos cambios paso a paso.</p>"},{"location":"advanced/security/oauth2-scopes/#esquema-de-seguridad-oauth2","title":"Esquema de seguridad OAuth2","text":"<p>El primer cambio es que ahora estamos declarando el esquema de seguridad OAuth2 con dos scopes disponibles, <code>me</code> y <code>items</code>.</p> <p>El par\u00e1metro <code>scopes</code> recibe un <code>dict</code> con cada scope como clave y la descripci\u00f3n como valor:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Como ahora estamos declarando esos scopes, aparecer\u00e1n en la documentaci\u00f3n de la API cuando inicies sesi\u00f3n/autorices.</p> <p>Y podr\u00e1s seleccionar cu\u00e1les scopes quieres dar de acceso: <code>me</code> y <code>items</code>.</p> <p>Este es el mismo mecanismo utilizado cuando das permisos al iniciar sesi\u00f3n con Facebook, Google, GitHub, etc:</p> <p></p>"},{"location":"advanced/security/oauth2-scopes/#token-jwt-con-scopes","title":"Token JWT con scopes","text":"<p>Ahora, modifica la path operation del token para devolver los scopes solicitados.</p> <p>Todav\u00eda estamos usando el mismo <code>OAuth2PasswordRequestForm</code>. Incluye una propiedad <code>scopes</code> con una <code>list</code> de <code>str</code>, con cada scope que recibi\u00f3 en el request.</p> <p>Y devolvemos los scopes como parte del token JWT.</p> <p>Peligro</p> <p>Para simplificar, aqu\u00ed solo estamos a\u00f1adiendo los scopes recibidos directamente al token.</p> <p>Pero en tu aplicaci\u00f3n, por seguridad, deber\u00edas asegurarte de a\u00f1adir solo los scopes que el usuario realmente puede tener, o los que has predefinido.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#declarar-scopes-en-path-operations-y-dependencias","title":"Declarar scopes en path operations y dependencias","text":"<p>Ahora declaramos que la path operation para <code>/users/me/items/</code> requiere el scope <code>items</code>.</p> <p>Para esto, importamos y usamos <code>Security</code> de <code>readyapi</code>.</p> <p>Puedes usar <code>Security</code> para declarar dependencias (igual que <code>Depends</code>), pero <code>Security</code> tambi\u00e9n recibe un par\u00e1metro <code>scopes</code> con una lista de scopes (strings).</p> <p>En este caso, pasamos una funci\u00f3n de dependencia <code>get_current_active_user</code> a <code>Security</code> (de la misma manera que har\u00edamos con <code>Depends</code>).</p> <p>Pero tambi\u00e9n pasamos una <code>list</code> de scopes, en este caso con solo un scope: <code>items</code> (podr\u00eda tener m\u00e1s).</p> <p>Y la funci\u00f3n de dependencia <code>get_current_active_user</code> tambi\u00e9n puede declarar sub-dependencias, no solo con <code>Depends</code> sino tambi\u00e9n con <code>Security</code>. Declarando su propia funci\u00f3n de sub-dependencia (<code>get_current_user</code>), y m\u00e1s requisitos de scope.</p> <p>En este caso, requiere el scope <code>me</code> (podr\u00eda requerir m\u00e1s de un scope).</p> <p>Nota</p> <p>No necesariamente necesitas a\u00f1adir diferentes scopes en diferentes lugares.</p> <p>Lo estamos haciendo aqu\u00ed para demostrar c\u00f3mo ReadyAPI maneja scopes declarados en diferentes niveles.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Informaci\u00f3n T\u00e9cnica</p> <p><code>Security</code> es en realidad una subclase de <code>Depends</code>, y tiene solo un par\u00e1metro extra que veremos m\u00e1s adelante.</p> <p>Pero al usar <code>Security</code> en lugar de <code>Depends</code>, ReadyAPI sabr\u00e1 que puede declarar scopes de seguridad, usarlos internamente y documentar la API con OpenAPI.</p> <p>Pero cuando importas <code>Query</code>, <code>Path</code>, <code>Depends</code>, <code>Security</code> y otros de <code>readyapi</code>, en realidad son funciones que devuelven clases especiales.</p>"},{"location":"advanced/security/oauth2-scopes/#usar-securityscopes","title":"Usar <code>SecurityScopes</code>","text":"<p>Ahora actualiza la dependencia <code>get_current_user</code>.</p> <p>Esta es la que usan las dependencias anteriores.</p> <p>Aqu\u00ed es donde estamos usando el mismo esquema de OAuth2 que creamos antes, declar\u00e1ndolo como una dependencia: <code>oauth2_scheme</code>.</p> <p>Porque esta funci\u00f3n de dependencia no tiene ning\u00fan requisito de scope en s\u00ed, podemos usar <code>Depends</code> con <code>oauth2_scheme</code>, no tenemos que usar <code>Security</code> cuando no necesitamos especificar scopes de seguridad.</p> <p>Tambi\u00e9n declaramos un par\u00e1metro especial de tipo <code>SecurityScopes</code>, importado de <code>readyapi.security</code>.</p> <p>Esta clase <code>SecurityScopes</code> es similar a <code>Request</code> (<code>Request</code> se us\u00f3 para obtener el objeto request directamente).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#usar-los-scopes","title":"Usar los <code>scopes</code>","text":"<p>El par\u00e1metro <code>security_scopes</code> ser\u00e1 del tipo <code>SecurityScopes</code>.</p> <p>Tendr\u00e1 una propiedad <code>scopes</code> con una lista que contiene todos los scopes requeridos por s\u00ed mismo y por todas las dependencias que lo usan como sub-dependencia. Eso significa, todos los \"dependientes\"... esto podr\u00eda sonar confuso, se explica de nuevo m\u00e1s abajo.</p> <p>El objeto <code>security_scopes</code> (de la clase <code>SecurityScopes</code>) tambi\u00e9n proporciona un atributo <code>scope_str</code> con un \u00fanico string, que contiene esos scopes separados por espacios (lo vamos a usar).</p> <p>Creamos una <code>HTTPException</code> que podemos reutilizar (<code>raise</code>) m\u00e1s tarde en varios puntos.</p> <p>En esta excepci\u00f3n, incluimos los scopes requeridos (si los hay) como un string separado por espacios (usando <code>scope_str</code>). Ponemos ese string que contiene los scopes en el header <code>WWW-Authenticate</code> (esto es parte de la especificaci\u00f3n).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verificar-el-username-y-la-forma-de-los-datos","title":"Verificar el <code>username</code> y la forma de los datos","text":"<p>Verificamos que obtenemos un <code>username</code>, y extraemos los scopes.</p> <p>Y luego validamos esos datos con el modelo de Pydantic (capturando la excepci\u00f3n <code>ValidationError</code>), y si obtenemos un error leyendo el token JWT o validando los datos con Pydantic, lanzamos la <code>HTTPException</code> que creamos antes.</p> <p>Para eso, actualizamos el modelo de Pydantic <code>TokenData</code> con una nueva propiedad <code>scopes</code>.</p> <p>Al validar los datos con Pydantic podemos asegurarnos de que tenemos, por ejemplo, exactamente una <code>list</code> de <code>str</code> con los scopes y un <code>str</code> con el <code>username</code>.</p> <p>En lugar de, por ejemplo, un <code>dict</code>, o algo m\u00e1s, ya que podr\u00eda romper la aplicaci\u00f3n en alg\u00fan punto posterior, haci\u00e9ndolo un riesgo de seguridad.</p> <p>Tambi\u00e9n verificamos que tenemos un usuario con ese username, y si no, lanzamos esa misma excepci\u00f3n que creamos antes.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verificar-los-scopes","title":"Verificar los <code>scopes</code>","text":"<p>Ahora verificamos que todos los scopes requeridos, por esta dependencia y todos los dependientes (incluyendo path operations), est\u00e9n incluidos en los scopes proporcionados en el token recibido, de lo contrario, lanzamos una <code>HTTPException</code>.</p> <p>Para esto, usamos <code>security_scopes.scopes</code>, que contiene una <code>list</code> con todos estos scopes como <code>str</code>.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#arbol-de-dependencias-y-scopes","title":"\u00c1rbol de dependencias y scopes","text":"<p>Revisemos de nuevo este \u00e1rbol de dependencias y los scopes.</p> <p>Como la dependencia <code>get_current_active_user</code> tiene como sub-dependencia a <code>get_current_user</code>, el scope <code>\"me\"</code> declarado en <code>get_current_active_user</code> se incluir\u00e1 en la lista de scopes requeridos en el <code>security_scopes.scopes</code> pasado a <code>get_current_user</code>.</p> <p>La path operation en s\u00ed tambi\u00e9n declara un scope, <code>\"items\"</code>, por lo que esto tambi\u00e9n estar\u00e1 en la lista de <code>security_scopes.scopes</code> pasado a <code>get_current_user</code>.</p> <p>As\u00ed es como se ve la jerarqu\u00eda de dependencias y scopes:</p> <ul> <li>La path operation <code>read_own_items</code> tiene:<ul> <li>Scopes requeridos <code>[\"items\"]</code> con la dependencia:</li> <li><code>get_current_active_user</code>:<ul> <li>La funci\u00f3n de dependencia <code>get_current_active_user</code> tiene:<ul> <li>Scopes requeridos <code>[\"me\"]</code> con la dependencia:</li> <li><code>get_current_user</code>:<ul> <li>La funci\u00f3n de dependencia <code>get_current_user</code> tiene:<ul> <li>No requiere scopes por s\u00ed misma.</li> <li>Una dependencia usando <code>oauth2_scheme</code>.</li> <li>Un par\u00e1metro <code>security_scopes</code> de tipo <code>SecurityScopes</code>:<ul> <li>Este par\u00e1metro <code>security_scopes</code> tiene una propiedad <code>scopes</code> con una <code>list</code> que contiene todos estos scopes declarados arriba, por lo que:<ul> <li><code>security_scopes.scopes</code> contendr\u00e1 <code>[\"me\", \"items\"]</code> para la path operation <code>read_own_items</code>.</li> <li><code>security_scopes.scopes</code> contendr\u00e1 <code>[\"me\"]</code> para la path operation <code>read_users_me</code>, porque est\u00e1 declarado en la dependencia <code>get_current_active_user</code>.</li> <li><code>security_scopes.scopes</code> contendr\u00e1 <code>[]</code> (nada) para la path operation <code>read_system_status</code>, porque no declar\u00f3 ning\u00fan <code>Security</code> con <code>scopes</code>, y su dependencia, <code>get_current_user</code>, tampoco declara ning\u00fan <code>scopes</code>.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Consejo</p> <p>Lo importante y \"m\u00e1gico\" aqu\u00ed es que <code>get_current_user</code> tendr\u00e1 una lista diferente de <code>scopes</code> para verificar para cada path operation.</p> <p>Todo depende de los <code>scopes</code> declarados en cada path operation y cada dependencia en el \u00e1rbol de dependencias para esa path operation espec\u00edfica.</p>"},{"location":"advanced/security/oauth2-scopes/#mas-detalles-sobre-securityscopes","title":"M\u00e1s detalles sobre <code>SecurityScopes</code>","text":"<p>Puedes usar <code>SecurityScopes</code> en cualquier punto, y en m\u00faltiples lugares, no tiene que ser en la dependencia \"ra\u00edz\".</p> <p>Siempre tendr\u00e1 los scopes de seguridad declarados en las dependencias <code>Security</code> actuales y todos los dependientes para esa espec\u00edfica path operation y ese espec\u00edfico \u00e1rbol de dependencias.</p> <p>Debido a que <code>SecurityScopes</code> tendr\u00e1 todos los scopes declarados por dependientes, puedes usarlo para verificar que un token tiene los scopes requeridos en una funci\u00f3n de dependencia central, y luego declarar diferentes requisitos de scope en diferentes path operations.</p> <p>Ser\u00e1n verificados independientemente para cada path operation.</p>"},{"location":"advanced/security/oauth2-scopes/#revisa","title":"Revisa","text":"<p>Si abres la documentaci\u00f3n de la API, puedes autenticarte y especificar qu\u00e9 scopes deseas autorizar.</p> <p></p> <p>Si no seleccionas ning\u00fan scope, estar\u00e1s \"autenticado\", pero cuando intentes acceder a <code>/users/me/</code> o <code>/users/me/items/</code> obtendr\u00e1s un error diciendo que no tienes suficientes permisos. A\u00fan podr\u00e1s acceder a <code>/status/</code>.</p> <p>Y si seleccionas el scope <code>me</code> pero no el scope <code>items</code>, podr\u00e1s acceder a <code>/users/me/</code> pero no a <code>/users/me/items/</code>.</p> <p>Eso es lo que pasar\u00eda a una aplicaci\u00f3n de terceros que intentara acceder a una de estas path operations con un token proporcionado por un usuario, dependiendo de cu\u00e1ntos permisos el usuario otorg\u00f3 a la aplicaci\u00f3n.</p>"},{"location":"advanced/security/oauth2-scopes/#acerca-de-las-integraciones-de-terceros","title":"Acerca de las integraciones de terceros","text":"<p>En este ejemplo estamos usando el flujo de OAuth2 \"password\".</p> <p>Esto es apropiado cuando estamos iniciando sesi\u00f3n en nuestra propia aplicaci\u00f3n, probablemente con nuestro propio frontend.</p> <p>Porque podemos confiar en ella para recibir el <code>username</code> y <code>password</code>, ya que la controlamos.</p> <p>Pero si est\u00e1s construyendo una aplicaci\u00f3n OAuth2 a la que otros se conectar\u00edan (es decir, si est\u00e1s construyendo un proveedor de autenticaci\u00f3n equivalente a Facebook, Google, GitHub, etc.) deber\u00edas usar uno de los otros flujos.</p> <p>El m\u00e1s com\u00fan es el flujo impl\u00edcito.</p> <p>El m\u00e1s seguro es el flujo de c\u00f3digo, pero es m\u00e1s complejo de implementar ya que requiere m\u00e1s pasos. Como es m\u00e1s complejo, muchos proveedores terminan sugiriendo el flujo impl\u00edcito.</p> <p>Nota</p> <p>Es com\u00fan que cada proveedor de autenticaci\u00f3n nombre sus flujos de una manera diferente, para hacerlos parte de su marca.</p> <p>Pero al final, est\u00e1n implementando el mismo est\u00e1ndar OAuth2.</p> <p>ReadyAPI incluye utilidades para todos estos flujos de autenticaci\u00f3n OAuth2 en <code>readyapi.security.oauth2</code>.</p>"},{"location":"advanced/security/oauth2-scopes/#security-en-dependencies-del-decorador","title":"<code>Security</code> en <code>dependencies</code> del decorador","text":"<p>De la misma manera que puedes definir una <code>list</code> de <code>Depends</code> en el par\u00e1metro <code>dependencies</code> del decorador (como se explica en Dependencias en decoradores de path operation), tambi\u00e9n podr\u00edas usar <code>Security</code> con <code>scopes</code> all\u00ed.</p>"},{"location":"deployment/","title":"Despliegue","text":"<p>Desplegar una aplicaci\u00f3n ReadyAPI es relativamente f\u00e1cil.</p>"},{"location":"deployment/#que-significa-despliegue","title":"Qu\u00e9 Significa Despliegue","text":"<p>Desplegar una aplicaci\u00f3n significa realizar los pasos necesarios para hacerla disponible para los usuarios.</p> <p>Para una API web, normalmente implica ponerla en una m\u00e1quina remota, con un programa de servidor que proporcione buen rendimiento, estabilidad, etc., para que tus usuarios puedan acceder a la aplicaci\u00f3n de manera eficiente y sin interrupciones o problemas.</p> <p>Esto contrasta con las etapas de desarrollo, donde est\u00e1s constantemente cambiando el c\u00f3digo, rompi\u00e9ndolo y arregl\u00e1ndolo, deteniendo y reiniciando el servidor de desarrollo, etc.</p>"},{"location":"deployment/#estrategias-de-despliegue","title":"Estrategias de Despliegue","text":"<p>Hay varias maneras de hacerlo dependiendo de tu caso de uso espec\u00edfico y las herramientas que utilices.</p> <p>Podr\u00edas desplegar un servidor t\u00fa mismo utilizando una combinaci\u00f3n de herramientas, podr\u00edas usar un servicio en la nube que hace parte del trabajo por ti, u otras opciones posibles.</p> <p>Te mostrar\u00e9 algunos de los conceptos principales que probablemente deber\u00edas tener en cuenta al desplegar una aplicaci\u00f3n ReadyAPI (aunque la mayor\u00eda se aplica a cualquier otro tipo de aplicaci\u00f3n web).</p> <p>Ver\u00e1s m\u00e1s detalles a tener en cuenta y algunas de las t\u00e9cnicas para hacerlo en las siguientes secciones. \u2728</p>"},{"location":"deployment/cloud/","title":"Despliega ReadyAPI en Proveedores de Nube","text":"<p>Puedes usar pr\u00e1cticamente cualquier proveedor de nube para desplegar tu aplicaci\u00f3n ReadyAPI.</p> <p>En la mayor\u00eda de los casos, los principales proveedores de nube tienen gu\u00edas para desplegar ReadyAPI con ellos.</p>"},{"location":"deployment/cloud/#proveedores-de-nube-sponsors","title":"Proveedores de Nube - Sponsors","text":"<p>Algunos proveedores de nube \u2728 son sponsors de ReadyAPI \u2728, esto asegura el desarrollo continuado y saludable de ReadyAPI y su ecosistema.</p> <p>Y muestra su verdadero compromiso con ReadyAPI y su comunidad (t\u00fa), ya que no solo quieren proporcionarte un buen servicio, sino tambi\u00e9n asegurarse de que tengas un framework bueno y saludable, ReadyAPI. \ud83d\ude47</p> <p>Podr\u00edas querer probar sus servicios y seguir sus gu\u00edas:</p> <ul> <li>Platform.sh</li> <li>Porter</li> <li>Coherence</li> <li>Render</li> </ul>"},{"location":"deployment/concepts/","title":"Conceptos de Implementaci\u00f3n","text":"<p>Cuando implementas una aplicaci\u00f3n ReadyAPI, o en realidad, cualquier tipo de API web, hay varios conceptos que probablemente te importen, y al entenderlos, puedes encontrar la forma m\u00e1s adecuada de implementar tu aplicaci\u00f3n.</p> <p>Algunos de los conceptos importantes son:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecuci\u00f3n al iniciar</li> <li>Reinicios</li> <li>Replicaci\u00f3n (la cantidad de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de iniciar</li> </ul> <p>Veremos c\u00f3mo afectan estas implementaciones.</p> <p>Al final, el objetivo principal es poder servir a tus clientes de API de una manera que sea segura, para evitar interrupciones, y usar los recursos de c\u00f3mputo (por ejemplo, servidores remotos/m\u00e1quinas virtuales) de la manera m\u00e1s eficiente posible. \ud83d\ude80</p> <p>Te contar\u00e9 un poquito m\u00e1s sobre estos conceptos aqu\u00ed, y eso, con suerte, te dar\u00e1 la intuici\u00f3n que necesitar\u00edas para decidir c\u00f3mo implementar tu API en diferentes entornos, posiblemente incluso en aquellos futuros que a\u00fan no existen.</p> <p>Al considerar estos conceptos, podr\u00e1s evaluar y dise\u00f1ar la mejor manera de implementar tus propias APIs.</p> <p>En los pr\u00f3ximos cap\u00edtulos, te dar\u00e9 m\u00e1s recetas concretas para implementar aplicaciones de ReadyAPI.</p> <p>Pero por ahora, revisemos estas importantes ideas conceptuales. Estos conceptos tambi\u00e9n se aplican a cualquier otro tipo de API web. \ud83d\udca1</p>"},{"location":"deployment/concepts/#seguridad-https","title":"Seguridad - HTTPS","text":"<p>En el cap\u00edtulo anterior sobre HTTPS aprendimos sobre c\u00f3mo HTTPS proporciona cifrado para tu API.</p> <p>Tambi\u00e9n vimos que HTTPS es normalmente proporcionado por un componente externo a tu servidor de aplicaciones, un Proxy de Terminaci\u00f3n TLS.</p> <p>Y debe haber algo encargado de renovar los certificados HTTPS, podr\u00eda ser el mismo componente o algo diferente.</p>"},{"location":"deployment/concepts/#herramientas-de-ejemplo-para-https","title":"Herramientas de Ejemplo para HTTPS","text":"<p>Algunas de las herramientas que podr\u00edas usar como Proxy de Terminaci\u00f3n TLS son:</p> <ul> <li>Traefik<ul> <li>Maneja autom\u00e1ticamente las renovaciones de certificados \u2728</li> </ul> </li> <li>Caddy<ul> <li>Maneja autom\u00e1ticamente las renovaciones de certificados \u2728</li> </ul> </li> <li>Nginx<ul> <li>Con un componente externo como Certbot para las renovaciones de certificados</li> </ul> </li> <li>HAProxy<ul> <li>Con un componente externo como Certbot para las renovaciones de certificados</li> </ul> </li> <li>Kubernetes con un Controlador de Ingress como Nginx<ul> <li>Con un componente externo como cert-manager para las renovaciones de certificados</li> </ul> </li> <li>Manejado internamente por un proveedor de nube como parte de sus servicios (lee abajo \ud83d\udc47)</li> </ul> <p>Otra opci\u00f3n es que podr\u00edas usar un servicio de nube que haga m\u00e1s del trabajo, incluyendo configurar HTTPS. Podr\u00eda tener algunas restricciones o cobrarte m\u00e1s, etc. Pero en ese caso, no tendr\u00edas que configurar un Proxy de Terminaci\u00f3n TLS t\u00fa mismo.</p> <p>Te mostrar\u00e9 algunos ejemplos concretos en los pr\u00f3ximos cap\u00edtulos.</p> <p>Luego, los siguientes conceptos a considerar son todos acerca del programa que ejecuta tu API real (por ejemplo, Uvicorn).</p>"},{"location":"deployment/concepts/#programa-y-proceso","title":"Programa y Proceso","text":"<p>Hablaremos mucho sobre el \"proceso\" en ejecuci\u00f3n, as\u00ed que es \u00fatil tener claridad sobre lo que significa y cu\u00e1l es la diferencia con la palabra \"programa\".</p>"},{"location":"deployment/concepts/#que-es-un-programa","title":"Qu\u00e9 es un Programa","text":"<p>La palabra programa se usa com\u00fanmente para describir muchas cosas:</p> <ul> <li>El c\u00f3digo que escribes, los archivos Python.</li> <li>El archivo que puede ser ejecutado por el sistema operativo, por ejemplo: <code>python</code>, <code>python.exe</code> o <code>uvicorn</code>.</li> <li>Un programa espec\u00edfico mientras est\u00e1 siendo ejecutado en el sistema operativo, usando la CPU y almacenando cosas en la memoria. Esto tambi\u00e9n se llama proceso.</li> </ul>"},{"location":"deployment/concepts/#que-es-un-proceso","title":"Qu\u00e9 es un Proceso","text":"<p>La palabra proceso se usa normalmente de una manera m\u00e1s espec\u00edfica, refiri\u00e9ndose solo a lo que est\u00e1 ejecut\u00e1ndose en el sistema operativo (como en el \u00faltimo punto anterior):</p> <ul> <li>Un programa espec\u00edfico mientras est\u00e1 siendo ejecutado en el sistema operativo.<ul> <li>Esto no se refiere al archivo, ni al c\u00f3digo, se refiere espec\u00edficamente a lo que est\u00e1 siendo ejecutado y gestionado por el sistema operativo.</li> </ul> </li> <li>Cualquier programa, cualquier c\u00f3digo, solo puede hacer cosas cuando est\u00e1 siendo ejecutado. As\u00ed que, cuando hay un proceso en ejecuci\u00f3n.</li> <li>El proceso puede ser terminado (o \"matado\") por ti, o por el sistema operativo. En ese punto, deja de ejecutarse/ser ejecutado, y ya no puede hacer cosas.</li> <li>Cada aplicaci\u00f3n que tienes en ejecuci\u00f3n en tu computadora tiene alg\u00fan proceso detr\u00e1s, cada programa en ejecuci\u00f3n, cada ventana, etc. Y normalmente hay muchos procesos ejecut\u00e1ndose al mismo tiempo mientras una computadora est\u00e1 encendida.</li> <li>Puede haber m\u00faltiples procesos del mismo programa ejecut\u00e1ndose al mismo tiempo.</li> </ul> <p>Si revisas el \"administrador de tareas\" o \"monitor del sistema\" (o herramientas similares) en tu sistema operativo, podr\u00e1s ver muchos de esos procesos en ejecuci\u00f3n.</p> <p>Y, por ejemplo, probablemente ver\u00e1s que hay m\u00faltiples procesos ejecutando el mismo programa del navegador (Firefox, Chrome, Edge, etc.). Normalmente ejecutan un proceso por pesta\u00f1a, adem\u00e1s de algunos otros procesos extra.</p> <p></p> <p>Ahora que conocemos la diferencia entre los t\u00e9rminos proceso y programa, sigamos hablando sobre implementaciones.</p>"},{"location":"deployment/concepts/#ejecucion-al-iniciar","title":"Ejecuci\u00f3n al Iniciar","text":"<p>En la mayor\u00eda de los casos, cuando creas una API web, quieres que est\u00e9 siempre en ejecuci\u00f3n, ininterrumpida, para que tus clientes puedan acceder a ella en cualquier momento. Esto, por supuesto, a menos que tengas una raz\u00f3n espec\u00edfica para que se ejecute solo en ciertas situaciones, pero la mayor\u00eda de las veces quieres que est\u00e9 constantemente en ejecuci\u00f3n y disponible.</p>"},{"location":"deployment/concepts/#en-un-servidor-remoto","title":"En un Servidor Remoto","text":"<p>Cuando configuras un servidor remoto (un servidor en la nube, una m\u00e1quina virtual, etc.) lo m\u00e1s sencillo que puedes hacer es usar <code>readyapi run</code> (que utiliza Uvicorn) o algo similar, manualmente, de la misma manera que lo haces al desarrollar localmente.</p> <p>Y funcionar\u00e1 y ser\u00e1 \u00fatil durante el desarrollo.</p> <p>Pero si pierdes la conexi\u00f3n con el servidor, el proceso en ejecuci\u00f3n probablemente morir\u00e1.</p> <p>Y si el servidor se reinicia (por ejemplo, despu\u00e9s de actualizaciones o migraciones del proveedor de la nube) probablemente no lo notar\u00e1s. Y debido a eso, ni siquiera sabr\u00e1s que tienes que reiniciar el proceso manualmente. As\u00ed, tu API simplemente quedar\u00e1 muerta. \ud83d\ude31</p>"},{"location":"deployment/concepts/#ejecutar-automaticamente-al-iniciar","title":"Ejecutar Autom\u00e1ticamente al Iniciar","text":"<p>En general, probablemente querr\u00e1s que el programa del servidor (por ejemplo, Uvicorn) se inicie autom\u00e1ticamente al arrancar el servidor, y sin necesidad de ninguna intervenci\u00f3n humana, para tener siempre un proceso en ejecuci\u00f3n con tu API (por ejemplo, Uvicorn ejecutando tu aplicaci\u00f3n ReadyAPI).</p>"},{"location":"deployment/concepts/#programa-separado","title":"Programa Separado","text":"<p>Para lograr esto, normalmente tendr\u00e1s un programa separado que se asegurar\u00e1 de que tu aplicaci\u00f3n se ejecute al iniciarse. Y en muchos casos, tambi\u00e9n se asegurar\u00e1 de que otros componentes o aplicaciones se ejecuten, por ejemplo, una base de datos.</p>"},{"location":"deployment/concepts/#herramientas-de-ejemplo-para-ejecutar-al-iniciar","title":"Herramientas de Ejemplo para Ejecutar al Iniciar","text":"<p>Algunos ejemplos de las herramientas que pueden hacer este trabajo son:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker en Modo Swarm</li> <li>Systemd</li> <li>Supervisor</li> <li>Manejado internamente por un proveedor de nube como parte de sus servicios</li> <li>Otros...</li> </ul> <p>Te dar\u00e9 m\u00e1s ejemplos concretos en los pr\u00f3ximos cap\u00edtulos.</p>"},{"location":"deployment/concepts/#reinicios","title":"Reinicios","text":"<p>De manera similar a asegurarte de que tu aplicaci\u00f3n se ejecute al iniciar, probablemente tambi\u00e9n quieras asegurarte de que se reinicie despu\u00e9s de fallos.</p>"},{"location":"deployment/concepts/#cometemos-errores","title":"Cometemos Errores","text":"<p>Nosotros, como humanos, cometemos errores, todo el tiempo. El software casi siempre tiene bugs ocultos en diferentes lugares. \ud83d\udc1b</p> <p>Y nosotros, como desarrolladores, seguimos mejorando el c\u00f3digo a medida que encontramos esos bugs y a medida que implementamos nuevas funcionalidades (posiblemente agregando nuevos bugs tambi\u00e9n \ud83d\ude05).</p>"},{"location":"deployment/concepts/#errores-pequenos-manejados-automaticamente","title":"Errores Peque\u00f1os Manejados Autom\u00e1ticamente","text":"<p>Al construir APIs web con ReadyAPI, si hay un error en nuestro c\u00f3digo, ReadyAPI normalmente lo contiene a la solicitud \u00fanica que desencaden\u00f3 el error. \ud83d\udee1</p> <p>El cliente obtendr\u00e1 un 500 Internal Server Error para esa solicitud, pero la aplicaci\u00f3n continuar\u00e1 funcionando para las siguientes solicitudes en lugar de simplemente colapsar por completo.</p>"},{"location":"deployment/concepts/#errores-mayores-colapsos","title":"Errores Mayores - Colapsos","text":"<p>Sin embargo, puede haber casos en los que escribamos alg\u00fan c\u00f3digo que colapse toda la aplicaci\u00f3n haciendo que Uvicorn y Python colapsen. \ud83d\udca5</p> <p>Y a\u00fan as\u00ed, probablemente no querr\u00edas que la aplicaci\u00f3n quede muerta porque hubo un error en un lugar, probablemente querr\u00e1s que siga ejecut\u00e1ndose al menos para las path operations que no est\u00e9n rotas.</p>"},{"location":"deployment/concepts/#reiniciar-despues-del-colapso","title":"Reiniciar Despu\u00e9s del Colapso","text":"<p>Pero en esos casos con errores realmente malos que colapsan el proceso en ejecuci\u00f3n, querr\u00edas un componente externo encargado de reiniciar el proceso, al menos un par de veces...</p> <p>Consejo</p> <p>...Aunque si la aplicaci\u00f3n completa colapsa inmediatamente, probablemente no tenga sentido seguir reinici\u00e1ndola eternamente. Pero en esos casos, probablemente lo notar\u00e1s durante el desarrollo, o al menos justo despu\u00e9s de la implementaci\u00f3n.</p> <p>As\u00ed que enfoqu\u00e9monos en los casos principales, donde podr\u00eda colapsar por completo en algunos casos particulares en el futuro, y a\u00fan as\u00ed tenga sentido reiniciarla.</p> <p>Probablemente querr\u00edas que la cosa encargada de reiniciar tu aplicaci\u00f3n sea un componente externo, porque para ese punto, la misma aplicaci\u00f3n con Uvicorn y Python ya colaps\u00f3, as\u00ed que no hay nada en el mismo c\u00f3digo de la misma aplicaci\u00f3n que pueda hacer algo al respecto.</p>"},{"location":"deployment/concepts/#herramientas-de-ejemplo-para-reiniciar-automaticamente","title":"Herramientas de Ejemplo para Reiniciar Autom\u00e1ticamente","text":"<p>En la mayor\u00eda de los casos, la misma herramienta que se utiliza para ejecutar el programa al iniciar tambi\u00e9n se utiliza para manejar reinicios autom\u00e1ticos.</p> <p>Por ejemplo, esto podr\u00eda ser manejado por:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker en Modo Swarm</li> <li>Systemd</li> <li>Supervisor</li> <li>Manejado internamente por un proveedor de nube como parte de sus servicios</li> <li>Otros...</li> </ul>"},{"location":"deployment/concepts/#replicacion-procesos-y-memoria","title":"Replicaci\u00f3n - Procesos y Memoria","text":"<p>Con una aplicaci\u00f3n ReadyAPI, usando un programa servidor como el comando <code>readyapi</code> que ejecuta Uvicorn, ejecutarlo una vez en un proceso puede servir a m\u00faltiples clientes concurrentemente.</p> <p>Pero en muchos casos, querr\u00e1s ejecutar varios worker processes al mismo tiempo.</p>"},{"location":"deployment/concepts/#multiples-procesos-workers","title":"M\u00faltiples Procesos - Workers","text":"<p>Si tienes m\u00e1s clientes de los que un solo proceso puede manejar (por ejemplo, si la m\u00e1quina virtual no es muy grande) y tienes m\u00faltiples n\u00facleos en la CPU del servidor, entonces podr\u00edas tener m\u00faltiples procesos ejecutando la misma aplicaci\u00f3n al mismo tiempo, y distribuir todas las requests entre ellos.</p> <p>Cuando ejecutas m\u00faltiples procesos del mismo programa de API, com\u00fanmente se les llama workers.</p>"},{"location":"deployment/concepts/#worker-processes-y-puertos","title":"Worker Processes y Puertos","text":"<p>Recuerda de la documentaci\u00f3n Sobre HTTPS que solo un proceso puede estar escuchando en una combinaci\u00f3n de puerto y direcci\u00f3n IP en un servidor.</p> <p>Esto sigue siendo cierto.</p> <p>As\u00ed que, para poder tener m\u00faltiples procesos al mismo tiempo, tiene que haber un solo proceso escuchando en un puerto que luego transmita la comunicaci\u00f3n a cada worker process de alguna forma.</p>"},{"location":"deployment/concepts/#memoria-por-proceso","title":"Memoria por Proceso","text":"<p>Ahora, cuando el programa carga cosas en memoria, por ejemplo, un modelo de machine learning en una variable, o el contenido de un archivo grande en una variable, todo eso consume un poco de la memoria (RAM) del servidor.</p> <p>Y m\u00faltiples procesos normalmente no comparten ninguna memoria. Esto significa que cada proceso en ejecuci\u00f3n tiene sus propias cosas, variables y memoria. Y si est\u00e1s consumiendo una gran cantidad de memoria en tu c\u00f3digo, cada proceso consumir\u00e1 una cantidad equivalente de memoria.</p>"},{"location":"deployment/concepts/#memoria-del-servidor","title":"Memoria del Servidor","text":"<p>Por ejemplo, si tu c\u00f3digo carga un modelo de Machine Learning con 1 GB de tama\u00f1o, cuando ejecutas un proceso con tu API, consumir\u00e1 al menos 1 GB de RAM. Y si inicias 4 procesos (4 workers), cada uno consumir\u00e1 1 GB de RAM. As\u00ed que, en total, tu API consumir\u00e1 4 GB de RAM.</p> <p>Y si tu servidor remoto o m\u00e1quina virtual solo tiene 3 GB de RAM, intentar cargar m\u00e1s de 4 GB de RAM causar\u00e1 problemas. \ud83d\udea8</p>"},{"location":"deployment/concepts/#multiples-procesos-un-ejemplo","title":"M\u00faltiples Procesos - Un Ejemplo","text":"<p>En este ejemplo, hay un Proceso Administrador que inicia y controla dos Worker Processes.</p> <p>Este Proceso Administrador probablemente ser\u00eda el que escuche en el puerto en la IP. Y transmitir\u00e1 toda la comunicaci\u00f3n a los worker processes.</p> <p>Esos worker processes ser\u00edan los que ejecutan tu aplicaci\u00f3n, realizar\u00edan los c\u00e1lculos principales para recibir un request y devolver un response, y cargar\u00edan cualquier cosa que pongas en variables en RAM.</p> <p></p> <p>Y por supuesto, la misma m\u00e1quina probablemente tendr\u00eda otros procesos ejecut\u00e1ndose tambi\u00e9n, aparte de tu aplicaci\u00f3n.</p> <p>Un detalle interesante es que el porcentaje de CPU utilizado por cada proceso puede variar mucho con el tiempo, pero la memoria (RAM) normalmente permanece m\u00e1s o menos estable.</p> <p>Si tienes una API que hace una cantidad comparable de c\u00e1lculos cada vez y tienes muchos clientes, entonces la utilizaci\u00f3n de CPU probablemente tambi\u00e9n sea estable (en lugar de constantemente subir y bajar r\u00e1pidamente).</p>"},{"location":"deployment/concepts/#ejemplos-de-herramientas-y-estrategias-de-replicacion","title":"Ejemplos de Herramientas y Estrategias de Replicaci\u00f3n","text":"<p>Puede haber varios enfoques para lograr esto, y te contar\u00e9 m\u00e1s sobre estrategias espec\u00edficas en los pr\u00f3ximos cap\u00edtulos, por ejemplo, al hablar sobre Docker y contenedores.</p> <p>La principal restricci\u00f3n a considerar es que tiene que haber un componente \u00fanico manejando el puerto en la IP p\u00fablica. Y luego debe tener una forma de transmitir la comunicaci\u00f3n a los procesos/workers replicados.</p> <p>Aqu\u00ed hay algunas combinaciones y estrategias posibles:</p> <ul> <li>Uvicorn con <code>--workers</code><ul> <li>Un administrador de procesos de Uvicorn escuchar\u00eda en la IP y puerto, y iniciar\u00eda m\u00faltiples worker processes de Uvicorn.</li> </ul> </li> <li>Kubernetes y otros sistemas de contenedor distribuidos<ul> <li>Algo en la capa de Kubernetes escuchar\u00eda en la IP y puerto. La replicaci\u00f3n ser\u00eda al tener m\u00faltiples contenedores, cada uno con un proceso de Uvicorn ejecut\u00e1ndose.</li> </ul> </li> <li>Servicios en la Nube que manejan esto por ti<ul> <li>El servicio en la nube probablemente manejar\u00e1 la replicaci\u00f3n por ti. Posiblemente te permitir\u00eda definir un proceso para ejecutar, o una imagen de contenedor para usar, en cualquier caso, lo m\u00e1s probable es que ser\u00eda un solo proceso de Uvicorn, y el servicio en la nube se encargar\u00eda de replicarlo.</li> </ul> </li> </ul> <p>Consejo</p> <p>No te preocupes si algunos de estos elementos sobre contenedores, Docker, o Kubernetes no tienen mucho sentido todav\u00eda.</p> <p>Te contar\u00e9 m\u00e1s sobre im\u00e1genes de contenedores, Docker, Kubernetes, etc. en un cap\u00edtulo futuro: ReadyAPI en Contenedores - Docker.</p>"},{"location":"deployment/concepts/#pasos-previos-antes-de-iniciar","title":"Pasos Previos Antes de Iniciar","text":"<p>Hay muchos casos en los que quieres realizar algunos pasos antes de iniciar tu aplicaci\u00f3n.</p> <p>Por ejemplo, podr\u00edas querer ejecutar migraciones de base de datos.</p> <p>Pero en la mayor\u00eda de los casos, querr\u00e1s realizar estos pasos solo una vez.</p> <p>As\u00ed que, querr\u00e1s tener un \u00fanico proceso para realizar esos pasos previos, antes de iniciar la aplicaci\u00f3n.</p> <p>Y tendr\u00e1s que asegurarte de que sea un \u00fanico proceso ejecutando esos pasos previos incluso si despu\u00e9s, inicias m\u00faltiples procesos (m\u00faltiples workers) para la propia aplicaci\u00f3n. Si esos pasos fueran ejecutados por m\u00faltiples procesos, duplicar\u00edan el trabajo al ejecutarlo en paralelo, y si los pasos fueran algo delicado como una migraci\u00f3n de base de datos, podr\u00edan causar conflictos entre s\u00ed.</p> <p>Por supuesto, hay algunos casos en los que no hay problema en ejecutar los pasos previos m\u00faltiples veces, en ese caso, es mucho m\u00e1s f\u00e1cil de manejar.</p> <p>Consejo</p> <p>Tambi\u00e9n, ten en cuenta que dependiendo de tu configuraci\u00f3n, en algunos casos quiz\u00e1s ni siquiera necesites realizar pasos previos antes de iniciar tu aplicaci\u00f3n.</p> <p>En ese caso, no tendr\u00edas que preocuparte por nada de esto. \ud83e\udd37</p>"},{"location":"deployment/concepts/#ejemplos-de-estrategias-para-pasos-previos","title":"Ejemplos de Estrategias para Pasos Previos","text":"<p>Esto depender\u00e1 mucho de la forma en que implementar\u00e1s tu sistema, y probablemente estar\u00e1 conectado con la forma en que inicias programas, manejas reinicios, etc.</p> <p>Aqu\u00ed hay algunas ideas posibles:</p> <ul> <li>Un \"Contenedor de Inicio\" en Kubernetes que se ejecuta antes de tu contenedor de aplicaci\u00f3n</li> <li>Un script de bash que ejecuta los pasos previos y luego inicia tu aplicaci\u00f3n<ul> <li>A\u00fan necesitar\u00edas una forma de iniciar/reiniciar ese script de bash, detectar errores, etc.</li> </ul> </li> </ul> <p>Consejo</p> <p>Te dar\u00e9 m\u00e1s ejemplos concretos para hacer esto con contenedores en un cap\u00edtulo futuro: ReadyAPI en Contenedores - Docker.</p>"},{"location":"deployment/concepts/#utilizacion-de-recursos","title":"Utilizaci\u00f3n de Recursos","text":"<p>Tu(s) servidor(es) es(son) un recurso que puedes consumir o utilizar, con tus programas, el tiempo de c\u00f3mputo en las CPUs y la memoria RAM disponible.</p> <p>\u00bfCu\u00e1nto de los recursos del sistema quieres consumir/utilizar? Podr\u00eda ser f\u00e1cil pensar \"no mucho\", pero en realidad, probablemente querr\u00e1s consumir lo m\u00e1s posible sin colapsar.</p> <p>Si est\u00e1s pagando por 3 servidores pero solo est\u00e1s usando un poquito de su RAM y CPU, probablemente est\u00e9s desperdiciando dinero \ud83d\udcb8, y probablemente desperdiciando la energ\u00eda el\u00e9ctrica del servidor \ud83c\udf0e, etc.</p> <p>En ese caso, podr\u00eda ser mejor tener solo 2 servidores y usar un mayor porcentaje de sus recursos (CPU, memoria, disco, ancho de banda de red, etc.).</p> <p>Por otro lado, si tienes 2 servidores y est\u00e1s usando 100% de su CPU y RAM, en alg\u00fan momento un proceso pedir\u00e1 m\u00e1s memoria y el servidor tendr\u00e1 que usar el disco como \"memoria\" (lo cual puede ser miles de veces m\u00e1s lento), o incluso colapsar. O un proceso podr\u00eda necesitar hacer alg\u00fan c\u00e1lculo y tendr\u00eda que esperar hasta que la CPU est\u00e9 libre de nuevo.</p> <p>En este caso, ser\u00eda mejor obtener un servidor extra y ejecutar algunos procesos en \u00e9l para que todos tengan suficiente RAM y tiempo de CPU.</p> <p>Tambi\u00e9n existe la posibilidad de que, por alguna raz\u00f3n, tengas un pico de uso de tu API. Tal vez se volvi\u00f3 viral, o tal vez otros servicios o bots comienzan a usarla. Y podr\u00edas querer tener recursos extra para estar a salvo en esos casos.</p> <p>Podr\u00edas establecer un n\u00famero arbitrario para alcanzar, por ejemplo, algo entre 50% a 90% de utilizaci\u00f3n de recursos. El punto es que esas son probablemente las principales cosas que querr\u00e1s medir y usar para ajustar tus implementaciones.</p> <p>Puedes usar herramientas simples como <code>htop</code> para ver la CPU y RAM utilizadas en tu servidor o la cantidad utilizada por cada proceso. O puedes usar herramientas de monitoreo m\u00e1s complejas, que pueden estar distribuidas a trav\u00e9s de servidores, etc.</p>"},{"location":"deployment/concepts/#resumen","title":"Resumen","text":"<p>Has estado leyendo aqu\u00ed algunos de los conceptos principales que probablemente necesitar\u00e1s tener en mente al decidir c\u00f3mo implementar tu aplicaci\u00f3n:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecuci\u00f3n al iniciar</li> <li>Reinicios</li> <li>Replicaci\u00f3n (la cantidad de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de iniciar</li> </ul> <p>Comprender estas ideas y c\u00f3mo aplicarlas deber\u00eda darte la intuici\u00f3n necesaria para tomar decisiones al configurar y ajustar tus implementaciones. \ud83e\udd13</p> <p>En las pr\u00f3ximas secciones, te dar\u00e9 ejemplos m\u00e1s concretos de posibles estrategias que puedes seguir. \ud83d\ude80</p>"},{"location":"deployment/docker/","title":"ReadyAPI en Contenedores - Docker","text":"<p>Al desplegar aplicaciones de ReadyAPI, un enfoque com\u00fan es construir una imagen de contenedor de Linux. Normalmente se realiza usando Docker. Luego puedes desplegar esa imagen de contenedor de varias formas.</p> <p>Usar contenedores de Linux tiene varias ventajas, incluyendo seguridad, replicabilidad, simplicidad, y otras.</p> <p>Consejo</p> <p>\u00bfTienes prisa y ya conoces esto? Salta al <code>Dockerfile</code> m\u00e1s abajo \ud83d\udc47.</p> Vista previa del Dockerfile \ud83d\udc40 <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"readyapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n\n# Si est\u00e1s detr\u00e1s de un proxy como Nginx o Traefik a\u00f1ade --proxy-headers\n# CMD [\"readyapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--proxy-headers\"]\n</code></pre>"},{"location":"deployment/docker/#que-es-un-contenedor","title":"Qu\u00e9 es un Contenedor","text":"<p>Los contenedores (principalmente contenedores de Linux) son una forma muy ligera de empaquetar aplicaciones incluyendo todas sus dependencias y archivos necesarios, manteni\u00e9ndolos aislados de otros contenedores (otras aplicaciones o componentes) en el mismo sistema.</p> <p>Los contenedores de Linux se ejecutan utilizando el mismo n\u00facleo de Linux del host (m\u00e1quina, m\u00e1quina virtual, servidor en la nube, etc.). Esto significa que son muy ligeros (en comparaci\u00f3n con las m\u00e1quinas virtuales completas que emulan un sistema operativo completo).</p> <p>De esta forma, los contenedores consumen pocos recursos, una cantidad comparable a ejecutar los procesos directamente (una m\u00e1quina virtual consumir\u00eda mucho m\u00e1s).</p> <p>Los contenedores tambi\u00e9n tienen sus propios procesos de ejecuci\u00f3n aislados (normalmente solo un proceso), sistema de archivos y red, simplificando el despliegue, la seguridad, el desarrollo, etc.</p>"},{"location":"deployment/docker/#que-es-una-imagen-de-contenedor","title":"Qu\u00e9 es una Imagen de Contenedor","text":"<p>Un contenedor se ejecuta desde una imagen de contenedor.</p> <p>Una imagen de contenedor es una versi\u00f3n est\u00e1tica de todos los archivos, variables de entorno y el comando/programa por defecto que deber\u00eda estar presente en un contenedor. Est\u00e1tico aqu\u00ed significa que la imagen de contenedor no se est\u00e1 ejecutando, no est\u00e1 siendo ejecutada, son solo los archivos empaquetados y los metadatos.</p> <p>En contraste con una \"imagen de contenedor\" que son los contenidos est\u00e1ticos almacenados, un \"contenedor\" normalmente se refiere a la instance en ejecuci\u00f3n, lo que est\u00e1 siendo ejecutado.</p> <p>Cuando el contenedor se inicia y est\u00e1 en funcionamiento (iniciado a partir de una imagen de contenedor), puede crear o cambiar archivos, variables de entorno, etc. Esos cambios existir\u00e1n solo en ese contenedor, pero no persistir\u00e1n en la imagen de contenedor subyacente (no se guardar\u00e1n en disco).</p> <p>Una imagen de contenedor es comparable al archivo de programa y sus contenidos, por ejemplo, <code>python</code> y alg\u00fan archivo <code>main.py</code>.</p> <p>Y el contenedor en s\u00ed (en contraste con la imagen de contenedor) es la instance real en ejecuci\u00f3n de la imagen, comparable a un proceso. De hecho, un contenedor solo se est\u00e1 ejecutando cuando tiene un proceso en ejecuci\u00f3n (y normalmente es solo un proceso). El contenedor se detiene cuando no hay un proceso en ejecuci\u00f3n en \u00e9l.</p>"},{"location":"deployment/docker/#imagenes-de-contenedor","title":"Im\u00e1genes de Contenedor","text":"<p>Docker ha sido una de las herramientas principales para crear y gestionar im\u00e1genes de contenedor y contenedores.</p> <p>Y hay un Docker Hub p\u00fablico con im\u00e1genes de contenedores oficiales pre-hechas para muchas herramientas, entornos, bases de datos y aplicaciones.</p> <p>Por ejemplo, hay una Imagen de Python oficial.</p> <p>Y hay muchas otras im\u00e1genes para diferentes cosas como bases de datos, por ejemplo para:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>MongoDB</li> <li>Redis, etc.</li> </ul> <p>Usando una imagen de contenedor pre-hecha es muy f\u00e1cil combinar y utilizar diferentes herramientas. Por ejemplo, para probar una nueva base de datos. En la mayor\u00eda de los casos, puedes usar las im\u00e1genes oficiales, y simplemente configurarlas con variables de entorno.</p> <p>De esta manera, en muchos casos puedes aprender sobre contenedores y Docker y reutilizar ese conocimiento con muchas herramientas y componentes diferentes.</p> <p>As\u00ed, ejecutar\u00edas m\u00faltiples contenedores con diferentes cosas, como una base de datos, una aplicaci\u00f3n de Python, un servidor web con una aplicaci\u00f3n frontend en React, y conectarlos entre s\u00ed a trav\u00e9s de su red interna.</p> <p>Todos los sistemas de gesti\u00f3n de contenedores (como Docker o Kubernetes) tienen estas caracter\u00edsticas de redes integradas en ellos.</p>"},{"location":"deployment/docker/#contenedores-y-procesos","title":"Contenedores y Procesos","text":"<p>Una imagen de contenedor normalmente incluye en sus metadatos el programa o comando por defecto que deber\u00eda ser ejecutado cuando el contenedor se inicie y los par\u00e1metros que deben pasar a ese programa. Muy similar a lo que ser\u00eda si estuviera en la l\u00ednea de comandos.</p> <p>Cuando un contenedor se inicia, ejecutar\u00e1 ese comando/programa (aunque puedes sobrescribirlo y hacer que ejecute un comando/programa diferente).</p> <p>Un contenedor est\u00e1 en ejecuci\u00f3n mientras el proceso principal (comando o programa) est\u00e9 en ejecuci\u00f3n.</p> <p>Un contenedor normalmente tiene un proceso \u00fanico, pero tambi\u00e9n es posible iniciar subprocesos desde el proceso principal, y de esa manera tendr\u00e1s m\u00faltiples procesos en el mismo contenedor.</p> <p>Pero no es posible tener un contenedor en ejecuci\u00f3n sin al menos un proceso en ejecuci\u00f3n. Si el proceso principal se detiene, el contenedor se detiene.</p>"},{"location":"deployment/docker/#construir-una-imagen-de-docker-para-readyapi","title":"Construir una Imagen de Docker para ReadyAPI","text":"<p>\u00a1Bien, construyamos algo ahora! \ud83d\ude80</p> <p>Te mostrar\u00e9 c\u00f3mo construir una imagen de Docker para ReadyAPI desde cero, basada en la imagen oficial de Python.</p> <p>Esto es lo que querr\u00edas hacer en la mayor\u00eda de los casos, por ejemplo:</p> <ul> <li>Usando Kubernetes o herramientas similares</li> <li>Al ejecutar en un Raspberry Pi</li> <li>Usando un servicio en la nube que ejecutar\u00eda una imagen de contenedor por ti, etc.</li> </ul>"},{"location":"deployment/docker/#requisitos-del-paquete","title":"Requisitos del Paquete","text":"<p>Normalmente tendr\u00edas los requisitos del paquete para tu aplicaci\u00f3n en alg\u00fan archivo.</p> <p>Depender\u00eda principalmente de la herramienta que uses para instalar esos requisitos.</p> <p>La forma m\u00e1s com\u00fan de hacerlo es tener un archivo <code>requirements.txt</code> con los nombres de los paquetes y sus versiones, uno por l\u00ednea.</p> <p>Por supuesto, usar\u00edas las mismas ideas que le\u00edste en Acerca de las versiones de ReadyAPI para establecer los rangos de versiones.</p> <p>Por ejemplo, tu <code>requirements.txt</code> podr\u00eda verse as\u00ed:</p> <pre><code>readyapi[standard]&gt;=0.113.0,&lt;0.114.0\npydantic&gt;=2.7.0,&lt;3.0.0\n</code></pre> <p>Y normalmente instalar\u00edas esas dependencias de los paquetes con <code>pip</code>, por ejemplo:</p> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\nSuccessfully installed readyapi pydantic\n</code></pre> <p>Informaci\u00f3n</p> <p>Existen otros formatos y herramientas para definir e instalar dependencias de paquetes.</p>"},{"location":"deployment/docker/#crear-el-codigo-de-readyapi","title":"Crear el C\u00f3digo de ReadyAPI","text":"<ul> <li>Crea un directorio <code>app</code> y entra en \u00e9l.</li> <li>Crea un archivo vac\u00edo <code>__init__.py</code>.</li> <li>Crea un archivo <code>main.py</code> con:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"deployment/docker/#dockerfile","title":"Dockerfile","text":"<p>Ahora, en el mismo directorio del proyecto, crea un archivo <code>Dockerfile</code> con:</p> <pre><code># (1)!\nFROM python:3.9\n\n# (2)!\nWORKDIR /code\n\n# (3)!\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)!\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)!\nCOPY ./app /code/app\n\n# (6)!\nCMD [\"readyapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Comenzar desde la imagen base oficial de Python.</p> </li> <li> <p>Establecer el directorio de trabajo actual a <code>/code</code>.</p> <p>Aqu\u00ed es donde pondremos el archivo <code>requirements.txt</code> y el directorio <code>app</code>.</p> </li> <li> <p>Copiar el archivo con los requisitos al directorio <code>/code</code>.</p> <p>Copiar solo el archivo con los requisitos primero, no el resto del c\u00f3digo.</p> <p>Como este archivo no cambia a menudo, Docker lo detectar\u00e1 y usar\u00e1 la cach\u00e9 para este paso, habilitando la cach\u00e9 para el siguiente paso tambi\u00e9n.</p> </li> <li> <p>Instalar las dependencias de los paquetes en el archivo de requisitos.</p> <p>La opci\u00f3n <code>--no-cache-dir</code> le dice a <code>pip</code> que no guarde los paquetes descargados localmente, ya que eso solo ser\u00eda si <code>pip</code> fuese a ejecutarse de nuevo para instalar los mismos paquetes, pero ese no es el caso al trabajar con contenedores.</p> <p>Nota</p> <p>El <code>--no-cache-dir</code> est\u00e1 relacionado solo con <code>pip</code>, no tiene nada que ver con Docker o contenedores.</p> <p>La opci\u00f3n <code>--upgrade</code> le dice a <code>pip</code> que actualice los paquetes si ya est\u00e1n instalados.</p> <p>Debido a que el paso anterior de copiar el archivo podr\u00eda ser detectado por la cach\u00e9 de Docker, este paso tambi\u00e9n usar\u00e1 la cach\u00e9 de Docker cuando est\u00e9 disponible.</p> <p>Usar la cach\u00e9 en este paso te ahorrar\u00e1 mucho tiempo al construir la imagen una y otra vez durante el desarrollo, en lugar de descargar e instalar todas las dependencias cada vez.</p> </li> <li> <p>Copiar el directorio <code>./app</code> dentro del directorio <code>/code</code>.</p> <p>Como esto contiene todo el c\u00f3digo, que es lo que cambia con m\u00e1s frecuencia, la cach\u00e9 de Docker no se utilizar\u00e1 para este u otros pasos siguientes f\u00e1cilmente.</p> <p>As\u00ed que es importante poner esto cerca del final del <code>Dockerfile</code>, para optimizar los tiempos de construcci\u00f3n de la imagen del contenedor.</p> </li> <li> <p>Establecer el comando para usar <code>readyapi run</code>, que utiliza Uvicorn debajo.</p> <p><code>CMD</code> toma una lista de cadenas, cada una de estas cadenas es lo que escribir\u00edas en la l\u00ednea de comandos separado por espacios.</p> <p>Este comando se ejecutar\u00e1 desde el directorio de trabajo actual, el mismo directorio <code>/code</code> que estableciste antes con <code>WORKDIR /code</code>.</p> </li> </ol> <p>Consejo</p> <p>Revisa qu\u00e9 hace cada l\u00ednea haciendo clic en cada n\u00famero en la burbuja del c\u00f3digo. \ud83d\udc46</p> <p>Advertencia</p> <p>Aseg\u00farate de siempre usar la forma exec de la instrucci\u00f3n <code>CMD</code>, como se explica a continuaci\u00f3n.</p>"},{"location":"deployment/docker/#usar-cmd-forma-exec","title":"Usar <code>CMD</code> - Forma Exec","text":"<p>La instrucci\u00f3n Docker <code>CMD</code> se puede escribir usando dos formas:</p> <p>\u2705 Forma Exec:</p> <pre><code># \u2705 Haz esto\nCMD [\"readyapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n</code></pre> <p>\u26d4\ufe0f Forma Shell:</p> <pre><code># \u26d4\ufe0f No hagas esto\nCMD readyapi run app/main.py --port 80\n</code></pre> <p>Aseg\u00farate de siempre usar la forma exec para garantizar que ReadyAPI pueda cerrarse de manera adecuada y que los eventos de lifespan sean disparados.</p> <p>Puedes leer m\u00e1s sobre esto en las documentaci\u00f3n de Docker para formas de shell y exec.</p> <p>Esto puede ser bastante notorio al usar <code>docker compose</code>. Consulta esta secci\u00f3n de preguntas frecuentes de Docker Compose para m\u00e1s detalles t\u00e9cnicos: \u00bfPor qu\u00e9 mis servicios tardan 10 segundos en recrearse o detenerse?.</p>"},{"location":"deployment/docker/#estructura-de-directorios","title":"Estructura de Directorios","text":"<p>Ahora deber\u00edas tener una estructura de directorios como:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"deployment/docker/#detras-de-un-proxy-de-terminacion-tls","title":"Detr\u00e1s de un Proxy de Terminaci\u00f3n TLS","text":"<p>Si est\u00e1s ejecutando tu contenedor detr\u00e1s de un Proxy de Terminaci\u00f3n TLS (load balancer) como Nginx o Traefik, a\u00f1ade la opci\u00f3n <code>--proxy-headers</code>, esto le dir\u00e1 a Uvicorn (a trav\u00e9s de la CLI de ReadyAPI) que conf\u00ede en los headers enviados por ese proxy indicando que la aplicaci\u00f3n se est\u00e1 ejecutando detr\u00e1s de HTTPS, etc.</p> <pre><code>CMD [\"readyapi\", \"run\", \"app/main.py\", \"--proxy-headers\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#cache-de-docker","title":"Cache de Docker","text":"<p>Hay un truco importante en este <code>Dockerfile</code>, primero copiamos el archivo con las dependencias solo, no el resto del c\u00f3digo. D\u00e9jame decirte por qu\u00e9 es as\u00ed.</p> <pre><code>COPY ./requirements.txt /code/requirements.txt\n</code></pre> <p>Docker y otras herramientas construyen estas im\u00e1genes de contenedor incrementalmente, a\u00f1adiendo una capa sobre la otra, empezando desde la parte superior del <code>Dockerfile</code> y a\u00f1adiendo cualquier archivo creado por cada una de las instrucciones del <code>Dockerfile</code>.</p> <p>Docker y herramientas similares tambi\u00e9n usan una cach\u00e9 interna al construir la imagen, si un archivo no ha cambiado desde la \u00faltima vez que se construy\u00f3 la imagen del contenedor, entonces reutilizar\u00e1 la misma capa creada la \u00faltima vez, en lugar de copiar el archivo de nuevo y crear una nueva capa desde cero.</p> <p>Solo evitar copiar archivos no mejora necesariamente las cosas mucho, pero porque se us\u00f3 la cach\u00e9 para ese paso, puede usar la cach\u00e9 para el siguiente paso. Por ejemplo, podr\u00eda usar la cach\u00e9 para la instrucci\u00f3n que instala las dependencias con:</p> <pre><code>RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n</code></pre> <p>El archivo con los requisitos de los paquetes no cambiar\u00e1 con frecuencia. As\u00ed que, al copiar solo ese archivo, Docker podr\u00e1 usar la cach\u00e9 para ese paso.</p> <p>Y luego, Docker podr\u00e1 usar la cach\u00e9 para el siguiente paso que descarga e instala esas dependencias. Y aqu\u00ed es donde ahorramos mucho tiempo. \u2728 ...y evitamos el aburrimiento de esperar. \ud83d\ude2a\ud83d\ude06</p> <p>Descargar e instalar las dependencias de los paquetes podr\u00eda llevar minutos, pero usando la cach\u00e9 tomar\u00eda segundos como m\u00e1ximo.</p> <p>Y como estar\u00edas construyendo la imagen del contenedor una y otra vez durante el desarrollo para comprobar que los cambios en tu c\u00f3digo funcionan, hay una gran cantidad de tiempo acumulado que te ahorrar\u00edas.</p> <p>Luego, cerca del final del <code>Dockerfile</code>, copiamos todo el c\u00f3digo. Como esto es lo que cambia con m\u00e1s frecuencia, lo ponemos cerca del final, porque casi siempre, cualquier cosa despu\u00e9s de este paso no podr\u00e1 usar la cach\u00e9.</p> <pre><code>COPY ./app /code/app\n</code></pre>"},{"location":"deployment/docker/#construir-la-imagen-de-docker","title":"Construir la Imagen de Docker","text":"<p>Ahora que todos los archivos est\u00e1n en su lugar, vamos a construir la imagen del contenedor.</p> <ul> <li>Ve al directorio del proyecto (donde est\u00e1 tu <code>Dockerfile</code>, conteniendo tu directorio <code>app</code>).</li> <li>Construye tu imagen de ReadyAPI:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre> <p>Consejo</p> <p>F\u00edjate en el <code>.</code> al final, es equivalente a <code>./</code>, le indica a Docker el directorio a usar para construir la imagen del contenedor.</p> <p>En este caso, es el mismo directorio actual (<code>.</code>).</p>"},{"location":"deployment/docker/#iniciar-el-contenedor-docker","title":"Iniciar el Contenedor Docker","text":"<ul> <li>Ejecuta un contenedor basado en tu imagen:</li> </ul> <pre><code>$ docker run -d --name mycontainer -p 80:80 myimage\n</code></pre>"},{"location":"deployment/docker/#revisalo","title":"Rev\u00edsalo","text":"<p>Deber\u00edas poder revisarlo en la URL de tu contenedor de Docker, por ejemplo: http://192.168.99.100/items/5?q=somequery o http://127.0.0.1/items/5?q=somequery (o equivalente, usando tu host de Docker).</p> <p>Ver\u00e1s algo como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/docker/#documentacion-interactiva-de-la-api","title":"Documentaci\u00f3n Interactiva de la API","text":"<p>Ahora puedes ir a http://192.168.99.100/docs o http://127.0.0.1/docs (o equivalente, usando tu host de Docker).</p> <p>Ver\u00e1s la documentaci\u00f3n interactiva autom\u00e1tica de la API (proporcionada por Swagger UI):</p> <p></p>"},{"location":"deployment/docker/#documentacion-alternativa-de-la-api","title":"Documentaci\u00f3n Alternativa de la API","text":"<p>Y tambi\u00e9n puedes ir a http://192.168.99.100/redoc o http://127.0.0.1/redoc (o equivalente, usando tu host de Docker).</p> <p>Ver\u00e1s la documentaci\u00f3n alternativa autom\u00e1tica (proporcionada por ReDoc):</p> <p></p>"},{"location":"deployment/docker/#construir-una-imagen-de-docker-con-un-readyapi-de-un-solo-archivo","title":"Construir una Imagen de Docker con un ReadyAPI de Un Solo Archivo","text":"<p>Si tu ReadyAPI es un solo archivo, por ejemplo, <code>main.py</code> sin un directorio <code>./app</code>, tu estructura de archivos podr\u00eda verse as\u00ed:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Entonces solo tendr\u00edas que cambiar las rutas correspondientes para copiar el archivo dentro del <code>Dockerfile</code>:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (1)!\nCOPY ./main.py /code/\n\n# (2)!\nCMD [\"readyapi\", \"run\", \"main.py\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Copia el archivo <code>main.py</code> directamente al directorio <code>/code</code> (sin ning\u00fan directorio <code>./app</code>).</p> </li> <li> <p>Usa <code>readyapi run</code> para servir tu aplicaci\u00f3n en el archivo \u00fanico <code>main.py</code>.</p> </li> </ol> <p>Cuando pasas el archivo a <code>readyapi run</code>, detectar\u00e1 autom\u00e1ticamente que es un archivo \u00fanico y no parte de un paquete y sabr\u00e1 c\u00f3mo importarlo y servir tu aplicaci\u00f3n ReadyAPI. \ud83d\ude0e</p>"},{"location":"deployment/docker/#conceptos-de-despliegue","title":"Conceptos de Despliegue","text":"<p>Hablemos nuevamente de algunos de los mismos Conceptos de Despliegue en t\u00e9rminos de contenedores.</p> <p>Los contenedores son principalmente una herramienta para simplificar el proceso de construcci\u00f3n y despliegue de una aplicaci\u00f3n, pero no imponen un enfoque particular para manejar estos conceptos de despliegue, y hay varias estrategias posibles.</p> <p>La buena noticia es que con cada estrategia diferente hay una forma de cubrir todos los conceptos de despliegue. \ud83c\udf89</p> <p>Revisemos estos conceptos de despliegue en t\u00e9rminos de contenedores:</p> <ul> <li>HTTPS</li> <li>Ejecutar en el inicio</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de comenzar</li> </ul>"},{"location":"deployment/docker/#https","title":"HTTPS","text":"<p>Si nos enfocamos solo en la imagen de contenedor para una aplicaci\u00f3n ReadyAPI (y luego el contenedor en ejecuci\u00f3n), HTTPS normalmente ser\u00eda manejado externamente por otra herramienta.</p> <p>Podr\u00eda ser otro contenedor, por ejemplo, con Traefik, manejando HTTPS y la adquisici\u00f3n autom\u00e1tica de certificados.</p> <p>Consejo</p> <p>Traefik tiene integraciones con Docker, Kubernetes, y otros, por lo que es muy f\u00e1cil configurar y configurar HTTPS para tus contenedores con \u00e9l.</p> <p>Alternativamente, HTTPS podr\u00eda ser manejado por un proveedor de la nube como uno de sus servicios (mientras que la aplicaci\u00f3n a\u00fan se ejecuta en un contenedor).</p>"},{"location":"deployment/docker/#ejecutar-en-el-inicio-y-reinicios","title":"Ejecutar en el Inicio y Reinicios","text":"<p>Normalmente hay otra herramienta encargada de iniciar y ejecutar tu contenedor.</p> <p>Podr\u00eda ser Docker directamente, Docker Compose, Kubernetes, un servicio en la nube, etc.</p> <p>En la mayor\u00eda (o todas) de las casos, hay una opci\u00f3n sencilla para habilitar la ejecuci\u00f3n del contenedor al inicio y habilitar los reinicios en caso de fallos. Por ejemplo, en Docker, es la opci\u00f3n de l\u00ednea de comandos <code>--restart</code>.</p> <p>Sin usar contenedores, hacer que las aplicaciones se ejecuten al inicio y con reinicios puede ser engorroso y dif\u00edcil. Pero al trabajar con contenedores en la mayor\u00eda de los casos, esa funcionalidad se incluye por defecto. \u2728</p>"},{"location":"deployment/docker/#replicacion-numero-de-procesos","title":"Replicaci\u00f3n - N\u00famero de Procesos","text":"<p>Si tienes un cluster de m\u00e1quinas con Kubernetes, Docker Swarm Mode, Nomad, u otro sistema complejo similar para gestionar contenedores distribuidos en varias m\u00e1quinas, entonces probablemente querr\u00e1s manejar la replicaci\u00f3n a nivel de cluster en lugar de usar un gestor de procesos (como Uvicorn con workers) en cada contenedor.</p> <p>Uno de esos sistemas de gesti\u00f3n de contenedores distribuidos como Kubernetes normalmente tiene alguna forma integrada de manejar la replicaci\u00f3n de contenedores mientras a\u00fan soporta el load balancing para las requests entrantes. Todo a nivel de cluster.</p> <p>En esos casos, probablemente desear\u00edas construir una imagen de Docker desde cero como se explica arriba, instalando tus dependencias, y ejecutando un solo proceso de Uvicorn en lugar de usar m\u00faltiples workers de Uvicorn.</p>"},{"location":"deployment/docker/#load-balancer","title":"Load Balancer","text":"<p>Al usar contenedores, normalmente tendr\u00edas alg\u00fan componente escuchando en el puerto principal. Podr\u00eda posiblemente ser otro contenedor que es tambi\u00e9n un Proxy de Terminaci\u00f3n TLS para manejar HTTPS o alguna herramienta similar.</p> <p>Como este componente tomar\u00eda la carga de las requests y las distribuir\u00eda entre los workers de una manera (esperablemente) balanceada, tambi\u00e9n se le llama com\u00fanmente Load Balancer.</p> <p>Consejo</p> <p>El mismo componente Proxy de Terminaci\u00f3n TLS usado para HTTPS probablemente tambi\u00e9n ser\u00eda un Load Balancer.</p> <p>Y al trabajar con contenedores, el mismo sistema que usas para iniciarlos y gestionarlos ya tendr\u00eda herramientas internas para transmitir la comunicaci\u00f3n en red (e.g., requests HTTP) desde ese load balancer (que tambi\u00e9n podr\u00eda ser un Proxy de Terminaci\u00f3n TLS) a los contenedores con tu aplicaci\u00f3n.</p>"},{"location":"deployment/docker/#un-load-balancer-multiples-contenedores-worker","title":"Un Load Balancer - M\u00faltiples Contenedores Worker","text":"<p>Al trabajar con Kubernetes u otros sistemas de gesti\u00f3n de contenedores distribuidos similares, usar sus mecanismos de red internos permitir\u00eda que el \u00fanico load balancer que est\u00e1 escuchando en el puerto principal transmita la comunicaci\u00f3n (requests) a posiblemente m\u00faltiples contenedores ejecutando tu aplicaci\u00f3n.</p> <p>Cada uno de estos contenedores ejecutando tu aplicaci\u00f3n normalmente tendr\u00eda solo un proceso (e.g., un proceso Uvicorn ejecutando tu aplicaci\u00f3n ReadyAPI). Todos ser\u00edan contenedores id\u00e9nticos, ejecutando lo mismo, pero cada uno con su propio proceso, memoria, etc. De esa forma, aprovechar\u00edas la paralelizaci\u00f3n en diferentes n\u00facleos de la CPU, o incluso en diferentes m\u00e1quinas.</p> <p>Y el sistema de contenedores distribuido con el load balancer distribuir\u00eda las requests a cada uno de los contenedores replicados que ejecutan tu aplicaci\u00f3n en turnos. As\u00ed, cada request podr\u00eda ser manejado por uno de los m\u00faltiples contenedores replicados ejecutando tu aplicaci\u00f3n.</p> <p>Y normalmente este load balancer podr\u00eda manejar requests que vayan a otras aplicaciones en tu cluster (p. ej., a un dominio diferente, o bajo un prefijo de ruta de URL diferente), y transmitir\u00eda esa comunicaci\u00f3n a los contenedores correctos para esa otra aplicaci\u00f3n ejecut\u00e1ndose en tu cluster.</p>"},{"location":"deployment/docker/#un-proceso-por-contenedor","title":"Un Proceso por Contenedor","text":"<p>En este tipo de escenario, probablemente querr\u00edas tener un solo proceso (Uvicorn) por contenedor, ya que ya estar\u00edas manejando la replicaci\u00f3n a nivel de cluster.</p> <p>As\u00ed que, en este caso, no querr\u00edas tener m\u00faltiples workers en el contenedor, por ejemplo, con la opci\u00f3n de l\u00ednea de comandos <code>--workers</code>. Querr\u00edas tener solo un proceso Uvicorn por contenedor (pero probablemente m\u00faltiples contenedores).</p> <p>Tener otro gestor de procesos dentro del contenedor (como ser\u00eda con m\u00faltiples workers) solo a\u00f1adir\u00eda complejidad innecesaria que probablemente ya est\u00e9s manejando con tu sistema de cluster.</p>"},{"location":"deployment/docker/#contenedores-con-multiples-procesos-y-casos-especiales","title":"Contenedores con M\u00faltiples Procesos y Casos Especiales","text":"<p>Por supuesto, hay casos especiales donde podr\u00edas querer tener un contenedor con varios worker processes de Uvicorn dentro.</p> <p>En esos casos, puedes usar la opci\u00f3n de l\u00ednea de comandos <code>--workers</code> para establecer el n\u00famero de workers que deseas ejecutar:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\n# (1)!\nCMD [\"readyapi\", \"run\", \"app/main.py\", \"--port\", \"80\", \"--workers\", \"4\"]\n</code></pre> <ol> <li>Aqu\u00ed usamos la opci\u00f3n de l\u00ednea de comandos <code>--workers</code> para establecer el n\u00famero de workers a 4.</li> </ol> <p>Aqu\u00ed hay algunos ejemplos de cu\u00e1ndo eso podr\u00eda tener sentido:</p>"},{"location":"deployment/docker/#una-aplicacion-simple","title":"Una Aplicaci\u00f3n Simple","text":"<p>Podr\u00edas querer un gestor de procesos en el contenedor si tu aplicaci\u00f3n es lo suficientemente simple que pueda ejecutarse en un servidor \u00fanico, no un cluster.</p>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":"<p>Podr\u00edas estar desplegando en un servidor \u00fanico (no un cluster) con Docker Compose, por lo que no tendr\u00edas una forma f\u00e1cil de gestionar la replicaci\u00f3n de contenedores (con Docker Compose) mientras se preserva la red compartida y el load balancing.</p> <p>Entonces podr\u00edas querer tener un solo contenedor con un gestor de procesos iniciando varios worker processes dentro.</p> <p>El punto principal es que, ninguna de estas son reglas escritas en piedra que debas seguir a ciegas. Puedes usar estas ideas para evaluar tu propio caso de uso y decidir cu\u00e1l es el mejor enfoque para tu sistema, verificando c\u00f3mo gestionar los conceptos de:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecutar en el inicio</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de comenzar</li> </ul>"},{"location":"deployment/docker/#memoria","title":"Memoria","text":"<p>Si ejecutas un solo proceso por contenedor, tendr\u00e1s una cantidad de memoria m\u00e1s o menos bien definida, estable y limitada consumida por cada uno de esos contenedores (m\u00e1s de uno si est\u00e1n replicados).</p> <p>Y luego puedes establecer esos mismos l\u00edmites de memoria y requisitos en tus configuraciones para tu sistema de gesti\u00f3n de contenedores (por ejemplo, en Kubernetes). De esa manera, podr\u00e1 replicar los contenedores en las m\u00e1quinas disponibles teniendo en cuenta la cantidad de memoria necesaria por ellos, y la cantidad disponible en las m\u00e1quinas en el cluster.</p> <p>Si tu aplicaci\u00f3n es simple, probablemente esto no ser\u00e1 un problema, y puede que no necesites especificar l\u00edmites de memoria estrictos. Pero si est\u00e1s usando mucha memoria (por ejemplo, con modelos de Machine Learning), deber\u00edas verificar cu\u00e1nta memoria est\u00e1s consumiendo y ajustar el n\u00famero de contenedores que se ejecutan en cada m\u00e1quina (y tal vez agregar m\u00e1s m\u00e1quinas a tu cluster).</p> <p>Si ejecutas m\u00faltiples procesos por contenedor, tendr\u00e1s que asegurarte de que el n\u00famero de procesos iniciados no consuma m\u00e1s memoria de la que est\u00e1 disponible.</p>"},{"location":"deployment/docker/#pasos-previos-antes-de-comenzar-y-contenedores","title":"Pasos Previos Antes de Comenzar y Contenedores","text":"<p>Si est\u00e1s usando contenedores (por ejemplo, Docker, Kubernetes), entonces hay dos enfoques principales que puedes usar.</p>"},{"location":"deployment/docker/#multiples-contenedores","title":"M\u00faltiples Contenedores","text":"<p>Si tienes m\u00faltiples contenedores, probablemente cada uno ejecutando un proceso \u00fanico (por ejemplo, en un cluster de Kubernetes), entonces probablemente querr\u00edas tener un contenedor separado realizando el trabajo de los pasos previos en un solo contenedor, ejecutando un solo proceso, antes de ejecutar los contenedores worker replicados.</p> <p>Informaci\u00f3n</p> <p>Si est\u00e1s usando Kubernetes, probablemente ser\u00eda un Contenedor de Inicializaci\u00f3n.</p> <p>Si en tu caso de uso no hay problema en ejecutar esos pasos previos m\u00faltiples veces en paralelo (por ejemplo, si no est\u00e1s ejecutando migraciones de base de datos, sino simplemente verificando si la base de datos est\u00e1 lista), entonces tambi\u00e9n podr\u00edas simplemente ponerlos en cada contenedor justo antes de iniciar el proceso principal.</p>"},{"location":"deployment/docker/#un-contenedor-unico","title":"Un Contenedor \u00danico","text":"<p>Si tienes una configuraci\u00f3n simple, con un contenedor \u00fanico que luego inicia m\u00faltiples worker processes (o tambi\u00e9n solo un proceso), entonces podr\u00edas ejecutar esos pasos previos en el mismo contenedor, justo antes de iniciar el proceso con la aplicaci\u00f3n.</p>"},{"location":"deployment/docker/#imagen-base-de-docker","title":"Imagen Base de Docker","text":"<p>Sol\u00eda haber una imagen official de Docker de ReadyAPI: khulnasoft/uvicorn-gunicorn-readyapi. Pero ahora est\u00e1 obsoleta. \u26d4\ufe0f</p> <p>Probablemente no deber\u00edas usar esta imagen base de Docker (o cualquier otra similar).</p> <p>Si est\u00e1s usando Kubernetes (u otros) y ya est\u00e1s configurando la replicaci\u00f3n a nivel de cluster, con m\u00faltiples contenedores. En esos casos, es mejor que construyas una imagen desde cero como se describe arriba: Construir una Imagen de Docker para ReadyAPI.</p> <p>Y si necesitas tener m\u00faltiples workers, puedes simplemente utilizar la opci\u00f3n de l\u00ednea de comandos <code>--workers</code>.</p> <p>Detalles T\u00e9cnicos</p> <p>La imagen de Docker se cre\u00f3 cuando Uvicorn no soportaba gestionar y reiniciar workers muertos, por lo que era necesario usar Gunicorn con Uvicorn, lo que a\u00f1ad\u00eda bastante complejidad, solo para que Gunicorn gestionara y reiniciara los worker processes de Uvicorn.</p> <p>Pero ahora que Uvicorn (y el comando <code>readyapi</code>) soportan el uso de <code>--workers</code>, no hay raz\u00f3n para utilizar una imagen base de Docker en lugar de construir la tuya propia (es pr\u00e1cticamente la misma cantidad de c\u00f3digo \ud83d\ude05).</p>"},{"location":"deployment/docker/#desplegar-la-imagen-del-contenedor","title":"Desplegar la Imagen del Contenedor","text":"<p>Despu\u00e9s de tener una Imagen de Contenedor (Docker) hay varias maneras de desplegarla.</p> <p>Por ejemplo:</p> <ul> <li>Con Docker Compose en un servidor \u00fanico</li> <li>Con un cluster de Kubernetes</li> <li>Con un cluster de Docker Swarm Mode</li> <li>Con otra herramienta como Nomad</li> <li>Con un servicio en la nube que tome tu imagen de contenedor y la despliegue</li> </ul>"},{"location":"deployment/docker/#imagen-de-docker-con-uv","title":"Imagen de Docker con <code>uv</code>","text":"<p>Si est\u00e1s usando uv para instalar y gestionar tu proyecto, puedes seguir su gu\u00eda de Docker de uv.</p>"},{"location":"deployment/docker/#resumen","title":"Resumen","text":"<p>Usando sistemas de contenedores (por ejemplo, con Docker y Kubernetes) se vuelve bastante sencillo manejar todos los conceptos de despliegue:</p> <ul> <li>HTTPS</li> <li>Ejecutar en el inicio</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de comenzar</li> </ul> <p>En la mayor\u00eda de los casos, probablemente no querr\u00e1s usar ninguna imagen base, y en su lugar construir una imagen de contenedor desde cero basada en la imagen oficial de Docker de Python.</p> <p>Teniendo en cuenta el orden de las instrucciones en el <code>Dockerfile</code> y la cach\u00e9 de Docker puedes minimizar los tiempos de construcci\u00f3n, para maximizar tu productividad (y evitar el aburrimiento). \ud83d\ude0e</p>"},{"location":"deployment/https/","title":"Sobre HTTPS","text":"<p>Es f\u00e1cil asumir que HTTPS es algo que simplemente est\u00e1 \"activado\" o no.</p> <p>Pero es mucho m\u00e1s complejo que eso.</p> <p>Consejo</p> <p>Si tienes prisa o no te importa, contin\u00faa con las siguientes secciones para ver instrucciones paso a paso para configurar todo con diferentes t\u00e9cnicas.</p> <p>Para aprender los conceptos b\u00e1sicos de HTTPS, desde una perspectiva de consumidor, revisa https://howhttps.works/.</p> <p>Ahora, desde una perspectiva de desarrollador, aqu\u00ed hay varias cosas a tener en cuenta al pensar en HTTPS:</p> <ul> <li>Para HTTPS, el servidor necesita tener \"certificados\" generados por un tercero.<ul> <li>Esos certificados en realidad son adquiridos del tercero, no \"generados\".</li> </ul> </li> <li>Los certificados tienen una vida \u00fatil.<ul> <li>Ellos expiran.</li> <li>Y luego necesitan ser renovados, adquiridos nuevamente del tercero.</li> </ul> </li> <li>La encriptaci\u00f3n de la conexi\u00f3n ocurre a nivel de TCP.<ul> <li>Esa es una capa debajo de HTTP.</li> <li>Por lo tanto, el manejo de certificados y encriptaci\u00f3n se realiza antes de HTTP.</li> </ul> </li> <li>TCP no sabe acerca de \"dominios\". Solo sobre direcciones IP.<ul> <li>La informaci\u00f3n sobre el dominio espec\u00edfico solicitado va en los datos HTTP.</li> </ul> </li> <li>Los certificados HTTPS \"certifican\" un cierto dominio, pero el protocolo y la encriptaci\u00f3n ocurren a nivel de TCP, antes de saber con cu\u00e1l dominio se est\u00e1 tratando.</li> <li>Por defecto, eso significar\u00eda que solo puedes tener un certificado HTTPS por direcci\u00f3n IP.<ul> <li>No importa cu\u00e1n grande sea tu servidor o qu\u00e9 tan peque\u00f1a pueda ser cada aplicaci\u00f3n que tengas en \u00e9l.</li> <li>Sin embargo, hay una soluci\u00f3n para esto.</li> </ul> </li> <li>Hay una extensi\u00f3n para el protocolo TLS (el que maneja la encriptaci\u00f3n a nivel de TCP, antes de HTTP) llamada SNI.<ul> <li>Esta extensi\u00f3n SNI permite que un solo servidor (con una sola direcci\u00f3n IP) tenga varios certificados HTTPS y sirva m\u00faltiples dominios/aplicaciones HTTPS.</li> <li>Para que esto funcione, un componente (programa) \u00fanico que se ejecute en el servidor, escuchando en la direcci\u00f3n IP p\u00fablica, debe tener todos los certificados HTTPS en el servidor.</li> </ul> </li> <li>Despu\u00e9s de obtener una conexi\u00f3n segura, el protocolo de comunicaci\u00f3n sigue siendo HTTP.<ul> <li>Los contenidos est\u00e1n encriptados, aunque se envi\u00e9n con el protocolo HTTP.</li> </ul> </li> </ul> <p>Es una pr\u00e1ctica com\u00fan tener un programa/servidor HTTP ejecut\u00e1ndose en el servidor (la m\u00e1quina, host, etc.) y gestionando todas las partes de HTTPS: recibiendo los requests HTTPS encriptados, enviando los requests HTTP desencriptados a la aplicaci\u00f3n HTTP real que se ejecuta en el mismo servidor (la aplicaci\u00f3n ReadyAPI, en este caso), tomando el response HTTP de la aplicaci\u00f3n, encript\u00e1ndolo usando el certificado HTTPS adecuado y envi\u00e1ndolo de vuelta al cliente usando HTTPS. Este servidor a menudo se llama un TLS Termination Proxy.</p> <p>Algunas de las opciones que podr\u00edas usar como un TLS Termination Proxy son:</p> <ul> <li>Traefik (que tambi\u00e9n puede manejar la renovaci\u00f3n de certificados)</li> <li>Caddy (que tambi\u00e9n puede manejar la renovaci\u00f3n de certificados)</li> <li>Nginx</li> <li>HAProxy</li> </ul>"},{"location":"deployment/https/#lets-encrypt","title":"Let's Encrypt","text":"<p>Antes de Let's Encrypt, estos certificados HTTPS eran vendidos por terceros.</p> <p>El proceso para adquirir uno de estos certificados sol\u00eda ser complicado, requerir bastante papeleo y los certificados eran bastante costosos.</p> <p>Pero luego se cre\u00f3 Let's Encrypt.</p> <p>Es un proyecto de la Linux Foundation. Proporciona certificados HTTPS de forma gratuita, de manera automatizada. Estos certificados usan toda la seguridad criptogr\u00e1fica est\u00e1ndar, y tienen una corta duraci\u00f3n (aproximadamente 3 meses), por lo que la seguridad es en realidad mejor debido a su corta vida \u00fatil.</p> <p>Los dominios son verificados de manera segura y los certificados se generan autom\u00e1ticamente. Esto tambi\u00e9n permite automatizar la renovaci\u00f3n de estos certificados.</p> <p>La idea es automatizar la adquisici\u00f3n y renovaci\u00f3n de estos certificados para que puedas tener HTTPS seguro, gratuito, para siempre.</p>"},{"location":"deployment/https/#https-para-desarrolladores","title":"HTTPS para Desarrolladores","text":"<p>Aqu\u00ed tienes un ejemplo de c\u00f3mo podr\u00eda ser una API HTTPS, paso a paso, prestando atenci\u00f3n principalmente a las ideas importantes para los desarrolladores.</p>"},{"location":"deployment/https/#nombre-de-dominio","title":"Nombre de Dominio","text":"<p>Probablemente todo comenzar\u00eda adquiriendo un nombre de dominio. Luego, lo configurar\u00edas en un servidor DNS (posiblemente tu mismo proveedor de la nube).</p> <p>Probablemente conseguir\u00edas un servidor en la nube (una m\u00e1quina virtual) o algo similar, y tendr\u00eda una direcci\u00f3n IP p\u00fablica fija.</p> <p>En el/los servidor(es) DNS configurar\u00edas un registro (un \"<code>A record</code>\") para apuntar tu dominio a la direcci\u00f3n IP p\u00fablica de tu servidor.</p> <p>Probablemente har\u00edas esto solo una vez, la primera vez, al configurar todo.</p> <p>Consejo</p> <p>Esta parte del Nombre de Dominio es mucho antes de HTTPS, pero como todo depende del dominio y la direcci\u00f3n IP, vale la pena mencionarlo aqu\u00ed.</p>"},{"location":"deployment/https/#dns","title":"DNS","text":"<p>Ahora centr\u00e9monos en todas las partes realmente de HTTPS.</p> <p>Primero, el navegador consultar\u00eda con los servidores DNS cu\u00e1l es la IP del dominio, en este caso, <code>someapp.example.com</code>.</p> <p>Los servidores DNS le dir\u00edan al navegador que use una direcci\u00f3n IP espec\u00edfica. Esa ser\u00eda la direcci\u00f3n IP p\u00fablica utilizada por tu servidor, que configuraste en los servidores DNS.</p> <p></p>"},{"location":"deployment/https/#inicio-del-handshake-tls","title":"Inicio del Handshake TLS","text":"<p>El navegador luego se comunicar\u00eda con esa direcci\u00f3n IP en el puerto 443 (el puerto HTTPS).</p> <p>La primera parte de la comunicaci\u00f3n es solo para establecer la conexi\u00f3n entre el cliente y el servidor y decidir las claves criptogr\u00e1ficas que usar\u00e1n, etc.</p> <p></p> <p>Esta interacci\u00f3n entre el cliente y el servidor para establecer la conexi\u00f3n TLS se llama handshake TLS.</p>"},{"location":"deployment/https/#tls-con-extension-sni","title":"TLS con Extensi\u00f3n SNI","text":"<p>Solo un proceso en el servidor puede estar escuchando en un puerto espec\u00edfico en una direcci\u00f3n IP espec\u00edfica. Podr\u00eda haber otros procesos escuchando en otros puertos en la misma direcci\u00f3n IP, pero solo uno para cada combinaci\u00f3n de direcci\u00f3n IP y puerto.</p> <p>TLS (HTTPS) utiliza el puerto espec\u00edfico <code>443</code> por defecto. As\u00ed que ese es el puerto que necesitar\u00edamos.</p> <p>Como solo un proceso puede estar escuchando en este puerto, el proceso que lo har\u00eda ser\u00eda el TLS Termination Proxy.</p> <p>El TLS Termination Proxy tendr\u00eda acceso a uno o m\u00e1s certificados TLS (certificados HTTPS).</p> <p>Usando la extensi\u00f3n SNI discutida anteriormente, el TLS Termination Proxy verificar\u00eda cu\u00e1l de los certificados TLS (HTTPS) disponibles deber\u00eda usar para esta conexi\u00f3n, usando el que coincida con el dominio esperado por el cliente.</p> <p>En este caso, usar\u00eda el certificado para <code>someapp.example.com</code>.</p> <p></p> <p>El cliente ya conf\u00eda en la entidad que gener\u00f3 ese certificado TLS (en este caso Let's Encrypt, pero lo veremos m\u00e1s adelante), por lo que puede verificar que el certificado sea v\u00e1lido.</p> <p>Luego, usando el certificado, el cliente y el TLS Termination Proxy deciden c\u00f3mo encriptar el resto de la comunicaci\u00f3n TCP. Esto completa la parte de Handshake TLS.</p> <p>Despu\u00e9s de esto, el cliente y el servidor tienen una conexi\u00f3n TCP encriptada, esto es lo que proporciona TLS. Y luego pueden usar esa conexi\u00f3n para iniciar la comunicaci\u00f3n HTTP real.</p> <p>Y eso es lo que es HTTPS, es simplemente HTTP simple dentro de una conexi\u00f3n TLS segura en lugar de una conexi\u00f3n TCP pura (sin encriptar).</p> <p>Consejo</p> <p>Ten en cuenta que la encriptaci\u00f3n de la comunicaci\u00f3n ocurre a nivel de TCP, no a nivel de HTTP.</p>"},{"location":"deployment/https/#request-https","title":"Request HTTPS","text":"<p>Ahora que el cliente y el servidor (espec\u00edficamente el navegador y el TLS Termination Proxy) tienen una conexi\u00f3n TCP encriptada, pueden iniciar la comunicaci\u00f3n HTTP.</p> <p>As\u00ed que, el cliente env\u00eda un request HTTPS. Esto es simplemente un request HTTP a trav\u00e9s de una conexi\u00f3n TLS encriptada.</p> <p></p>"},{"location":"deployment/https/#desencriptar-el-request","title":"Desencriptar el Request","text":"<p>El TLS Termination Proxy usar\u00eda la encriptaci\u00f3n acordada para desencriptar el request, y transmitir\u00eda el request HTTP simple (desencriptado) al proceso que ejecuta la aplicaci\u00f3n (por ejemplo, un proceso con Uvicorn ejecutando la aplicaci\u00f3n ReadyAPI).</p> <p></p>"},{"location":"deployment/https/#response-http","title":"Response HTTP","text":"<p>La aplicaci\u00f3n procesar\u00eda el request y enviar\u00eda un response HTTP simple (sin encriptar) al TLS Termination Proxy.</p> <p></p>"},{"location":"deployment/https/#response-https","title":"Response HTTPS","text":"<p>El TLS Termination Proxy entonces encriptar\u00eda el response usando la criptograf\u00eda acordada antes (que comenz\u00f3 con el certificado para <code>someapp.example.com</code>), y lo enviar\u00eda de vuelta al navegador.</p> <p>Luego, el navegador verificar\u00eda que el response sea v\u00e1lido y encriptado con la clave criptogr\u00e1fica correcta, etc. Entonces desencriptar\u00eda el response y lo procesar\u00eda.</p> <p></p> <p>El cliente (navegador) sabr\u00e1 que el response proviene del servidor correcto porque est\u00e1 utilizando la criptograf\u00eda que acordaron usando el certificado HTTPS anteriormente.</p>"},{"location":"deployment/https/#multiples-aplicaciones","title":"M\u00faltiples Aplicaciones","text":"<p>En el mismo servidor (o servidores), podr\u00edan haber m\u00faltiples aplicaciones, por ejemplo, otros programas API o una base de datos.</p> <p>Solo un proceso puede estar gestionando la IP y puerto espec\u00edfica (el TLS Termination Proxy en nuestro ejemplo) pero las otras aplicaciones/procesos pueden estar ejecut\u00e1ndose en el/los servidor(es) tambi\u00e9n, siempre y cuando no intenten usar la misma combinaci\u00f3n de IP p\u00fablica y puerto.</p> <p></p> <p>De esa manera, el TLS Termination Proxy podr\u00eda gestionar HTTPS y certificados para m\u00faltiples dominios, para m\u00faltiples aplicaciones, y luego transmitir los requests a la aplicaci\u00f3n correcta en cada caso.</p>"},{"location":"deployment/https/#renovacion-de-certificados","title":"Renovaci\u00f3n de Certificados","text":"<p>En alg\u00fan momento en el futuro, cada certificado expirar\u00eda (alrededor de 3 meses despu\u00e9s de haberlo adquirido).</p> <p>Y entonces, habr\u00eda otro programa (en algunos casos es otro programa, en algunos casos podr\u00eda ser el mismo TLS Termination Proxy) que hablar\u00eda con Let's Encrypt y renovar\u00eda el/los certificado(s).</p> <p></p> <p>Los certificados TLS est\u00e1n asociados con un nombre de dominio, no con una direcci\u00f3n IP.</p> <p>Entonces, para renovar los certificados, el programa de renovaci\u00f3n necesita probar a la autoridad (Let's Encrypt) que de hecho \"posee\" y controla ese dominio.</p> <p>Para hacer eso, y para acomodar diferentes necesidades de aplicaciones, hay varias formas en que puede hacerlo. Algunas formas populares son:</p> <ul> <li>Modificar algunos registros DNS.<ul> <li>Para esto, el programa de renovaci\u00f3n necesita soportar las API del proveedor de DNS, por lo que, dependiendo del proveedor de DNS que est\u00e9s utilizando, esto podr\u00eda o no ser una opci\u00f3n.</li> </ul> </li> <li>Ejecutarse como un servidor (al menos durante el proceso de adquisici\u00f3n del certificado) en la direcci\u00f3n IP p\u00fablica asociada con el dominio.<ul> <li>Como dijimos anteriormente, solo un proceso puede estar escuchando en una IP y puerto espec\u00edficos.</li> <li>Esta es una de las razones por las que es muy \u00fatil cuando el mismo TLS Termination Proxy tambi\u00e9n se encarga del proceso de renovaci\u00f3n del certificado.</li> <li>De lo contrario, podr\u00edas tener que detener moment\u00e1neamente el TLS Termination Proxy, iniciar el programa de renovaci\u00f3n para adquirir los certificados, luego configurarlos con el TLS Termination Proxy, y luego reiniciar el TLS Termination Proxy. Esto no es ideal, ya que tus aplicaciones no estar\u00e1n disponibles durante el tiempo que el TLS Termination Proxy est\u00e9 apagado.</li> </ul> </li> </ul> <p>Todo este proceso de renovaci\u00f3n, mientras a\u00fan se sirve la aplicaci\u00f3n, es una de las principales razones por las que querr\u00edas tener un sistema separado para gestionar el HTTPS con un TLS Termination Proxy en lugar de simplemente usar los certificados TLS con el servidor de aplicaciones directamente (por ejemplo, Uvicorn).</p>"},{"location":"deployment/https/#resumen","title":"Resumen","text":"<p>Tener HTTPS es muy importante y bastante cr\u00edtico en la mayor\u00eda de los casos. La mayor parte del esfuerzo que como desarrollador tienes que poner en torno a HTTPS es solo sobre entender estos conceptos y c\u00f3mo funcionan.</p> <p>Pero una vez que conoces la informaci\u00f3n b\u00e1sica de HTTPS para desarrolladores puedes combinar y configurar f\u00e1cilmente diferentes herramientas para ayudarte a gestionar todo de una manera sencilla.</p> <p>En algunos de los siguientes cap\u00edtulos, te mostrar\u00e9 varios ejemplos concretos de c\u00f3mo configurar HTTPS para aplicaciones ReadyAPI. \ud83d\udd12</p>"},{"location":"deployment/manually/","title":"Ejecutar un Servidor Manualmente","text":""},{"location":"deployment/manually/#usa-el-comando-readyapi-run","title":"Usa el Comando <code>readyapi run</code>","text":"<p>En resumen, usa <code>readyapi run</code> para servir tu aplicaci\u00f3n ReadyAPI:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; run &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Usando path &lt;font color=\"#3465A4\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Path absoluto resuelto &lt;font color=\"#75507B\"&gt;/home/user/code/awesomeapp/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Buscando una estructura de archivos de paquete desde directorios con archivos &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importando desde &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Archivo de m\u00f3dulo de Python&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                      \u2502\n \u2502  \ud83d\udc0d main.py          \u2502\n \u2502                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importando m\u00f3dulo &lt;font color=\"#4E9A06\"&gt;main&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Encontrada aplicaci\u00f3n ReadyAPI importable\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Aplicaci\u00f3n ReadyAPI importable&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                          \u2502\n \u2502  &lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;from&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; main &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;import&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; app&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;  &lt;/span&gt;  \u2502\n \u2502                          \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Usando la cadena de import &lt;font color=\"#8AE234\"&gt;&lt;b&gt;main:app&lt;/b&gt;&lt;/font&gt;\n\n &lt;font color=\"#4E9A06\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CLI de ReadyAPI - Modo Producci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  Sirviendo en: http://0.0.0.0:8000                    \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  Docs de API: http://0.0.0.0:8000/docs               \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  Corriendo en modo producci\u00f3n, para desarrollo usa:  \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  &lt;/font&gt;&lt;font color=\"#8AE234\"&gt;&lt;b&gt;readyapi dev&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#4E9A06\"&gt;                                        \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Iniciado el proceso del servidor [&lt;font color=\"#06989A\"&gt;2306215&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Esperando el inicio de la aplicaci\u00f3n.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Inicio de la aplicaci\u00f3n completado.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Uvicorn corriendo en &lt;b&gt;http://0.0.0.0:8000&lt;/b&gt; (Presiona CTRL+C para salir)\n</code></pre> <p>Eso funcionar\u00eda para la mayor\u00eda de los casos. \ud83d\ude0e</p> <p>Podr\u00edas usar ese comando, por ejemplo, para iniciar tu app ReadyAPI en un contenedor, en un servidor, etc.</p>"},{"location":"deployment/manually/#servidores-asgi","title":"Servidores ASGI","text":"<p>Vamos a profundizar un poquito en los detalles.</p> <p>ReadyAPI usa un est\u00e1ndar para construir frameworks de web y servidores de Python llamado ASGI. ReadyAPI es un framework web ASGI.</p> <p>Lo principal que necesitas para ejecutar una aplicaci\u00f3n ReadyAPI (o cualquier otra aplicaci\u00f3n ASGI) en una m\u00e1quina de servidor remota es un programa de servidor ASGI como Uvicorn, que es el que viene por defecto en el comando <code>readyapi</code>.</p> <p>Hay varias alternativas, incluyendo:</p> <ul> <li>Uvicorn: un servidor ASGI de alto rendimiento.</li> <li>Hypercorn: un servidor ASGI compatible con HTTP/2 y Trio entre otras funcionalidades.</li> <li>Daphne: el servidor ASGI construido para Django Channels.</li> <li>Granian: Un servidor HTTP Rust para aplicaciones en Python.</li> <li>NGINX Unit: NGINX Unit es un runtime para aplicaciones web ligero y vers\u00e1til.</li> </ul>"},{"location":"deployment/manually/#maquina-servidor-y-programa-servidor","title":"M\u00e1quina Servidor y Programa Servidor","text":"<p>Hay un peque\u00f1o detalle sobre los nombres que hay que tener en cuenta. \ud83d\udca1</p> <p>La palabra \"servidor\" se utiliza com\u00fanmente para referirse tanto al computador remoto/en la nube (la m\u00e1quina f\u00edsica o virtual) como al programa que se est\u00e1 ejecutando en esa m\u00e1quina (por ejemplo, Uvicorn).</p> <p>Solo ten en cuenta que cuando leas \"servidor\" en general, podr\u00eda referirse a una de esas dos cosas.</p> <p>Al referirse a la m\u00e1quina remota, es com\u00fan llamarla servidor, pero tambi\u00e9n m\u00e1quina, VM (m\u00e1quina virtual), nodo. Todos esos se refieren a alg\u00fan tipo de m\u00e1quina remota, generalmente con Linux, donde ejecutas programas.</p>"},{"location":"deployment/manually/#instala-el-programa-del-servidor","title":"Instala el Programa del Servidor","text":"<p>Cuando instalas ReadyAPI, viene con un servidor de producci\u00f3n, Uvicorn, y puedes iniciarlo con el comando <code>readyapi run</code>.</p> <p>Pero tambi\u00e9n puedes instalar un servidor ASGI manualmente.</p> <p>Aseg\u00farate de crear un entorno virtual, act\u00edvalo, y luego puedes instalar la aplicaci\u00f3n del servidor.</p> <p>Por ejemplo, para instalar Uvicorn:</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Un proceso similar se aplicar\u00eda a cualquier otro programa de servidor ASGI.</p> <p>Consejo</p> <p>Al a\u00f1adir <code>standard</code>, Uvicorn instalar\u00e1 y usar\u00e1 algunas dependencias adicionales recomendadas.</p> <p>Eso incluye <code>uvloop</code>, el reemplazo de alto rendimiento para <code>asyncio</code>, que proporciona un gran impulso de rendimiento en concurrencia.</p> <p>Cuando instalas ReadyAPI con algo como <code>pip install \"readyapi[standard]\"</code> ya obtienes <code>uvicorn[standard]</code> tambi\u00e9n.</p>"},{"location":"deployment/manually/#ejecuta-el-programa-del-servidor","title":"Ejecuta el Programa del Servidor","text":"<p>Si instalaste un servidor ASGI manualmente, normalmente necesitar\u00edas pasar una cadena de import en un formato especial para que importe tu aplicaci\u00f3n ReadyAPI:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn corriendo en http://0.0.0.0:80 (Presiona CTRL+C para salir)\n</code></pre> <p>Nota</p> <p>El comando <code>uvicorn main:app</code> se refiere a:</p> <ul> <li><code>main</code>: el archivo <code>main.py</code> (el \"m\u00f3dulo\" de Python).</li> <li><code>app</code>: el objeto creado dentro de <code>main.py</code> con la l\u00ednea <code>app = ReadyAPI()</code>.</li> </ul> <p>Es equivalente a:</p> <pre><code>from main import app\n</code></pre> <p>Cada programa alternativo de servidor ASGI tendr\u00eda un comando similar, puedes leer m\u00e1s en su respectiva documentaci\u00f3n.</p> <p>Advertencia</p> <p>Uvicorn y otros servidores soportan una opci\u00f3n <code>--reload</code> que es \u00fatil durante el desarrollo.</p> <p>La opci\u00f3n <code>--reload</code> consume muchos m\u00e1s recursos, es m\u00e1s inestable, etc.</p> <p>Ayuda mucho durante el desarrollo, pero no deber\u00edas usarla en producci\u00f3n.</p>"},{"location":"deployment/manually/#conceptos-de-despliegue","title":"Conceptos de Despliegue","text":"<p>Estos ejemplos ejecutan el programa del servidor (por ejemplo, Uvicorn), iniciando un solo proceso, escuchando en todas las IPs (<code>0.0.0.0</code>) en un puerto predefinido (por ejemplo, <code>80</code>).</p> <p>Esta es la idea b\u00e1sica. Pero probablemente querr\u00e1s encargarte de algunas cosas adicionales, como:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecuci\u00f3n en el arranque</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos ejecut\u00e1ndose)</li> <li>Memoria</li> <li>Pasos previos antes de comenzar</li> </ul> <p>Te contar\u00e9 m\u00e1s sobre cada uno de estos conceptos, c\u00f3mo pensarlos, y algunos ejemplos concretos con estrategias para manejarlos en los pr\u00f3ximos cap\u00edtulos. \ud83d\ude80</p>"},{"location":"deployment/server-workers/","title":"Servidores Workers - Uvicorn con Workers","text":"<p>Vamos a revisar esos conceptos de despliegue de antes:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecuci\u00f3n al inicio</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de empezar</li> </ul> <p>Hasta este punto, con todos los tutoriales en la documentaci\u00f3n, probablemente has estado ejecutando un programa de servidor, por ejemplo, usando el comando <code>readyapi</code>, que ejecuta Uvicorn, corriendo un solo proceso.</p> <p>Al desplegar aplicaciones probablemente querr\u00e1s tener algo de replicaci\u00f3n de procesos para aprovechar m\u00faltiples n\u00facleos y poder manejar m\u00e1s requests.</p> <p>Como viste en el cap\u00edtulo anterior sobre Conceptos de Despliegue, hay m\u00faltiples estrategias que puedes usar.</p> <p>Aqu\u00ed te mostrar\u00e9 c\u00f3mo usar Uvicorn con worker processes usando el comando <code>readyapi</code> o el comando <code>uvicorn</code> directamente.</p> <p>Informaci\u00f3n</p> <p>Si est\u00e1s usando contenedores, por ejemplo con Docker o Kubernetes, te contar\u00e9 m\u00e1s sobre eso en el pr\u00f3ximo cap\u00edtulo: ReadyAPI en Contenedores - Docker.</p> <p>En particular, cuando corras en Kubernetes probablemente no querr\u00e1s usar workers y en cambio correr un solo proceso de Uvicorn por contenedor, pero te contar\u00e9 sobre eso m\u00e1s adelante en ese cap\u00edtulo.</p>"},{"location":"deployment/server-workers/#multiples-workers","title":"M\u00faltiples Workers","text":"<p>Puedes iniciar m\u00faltiples workers con la opci\u00f3n de l\u00ednea de comando <code>--workers</code>:</p> <code>readyapi</code><code>uvicorn</code> <p>Si usas el comando <code>readyapi</code>:</p> <pre><code>$ &lt;pre&gt; &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; run --workers 4 &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using path &lt;font color=\"#3465A4\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Resolved absolute path &lt;font color=\"#75507B\"&gt;/home/user/code/awesomeapp/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Searching for package file structure from directories with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Python module file&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                      \u2502\n \u2502  \ud83d\udc0d main.py          \u2502\n \u2502                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing module &lt;font color=\"#4E9A06\"&gt;main&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Found importable ReadyAPI app\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Importable ReadyAPI app&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                          \u2502\n \u2502  &lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;from&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; main &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;import&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; app&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;  &lt;/span&gt;  \u2502\n \u2502                          \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using import string &lt;font color=\"#8AE234\"&gt;&lt;b&gt;main:app&lt;/b&gt;&lt;/font&gt;\n\n &lt;font color=\"#4E9A06\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Production mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  Serving at: http://0.0.0.0:8000                    \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  API docs: http://0.0.0.0:8000/docs                 \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  Running in production mode, for development use:   \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502  &lt;/font&gt;&lt;font color=\"#8AE234\"&gt;&lt;b&gt;readyapi dev&lt;/b&gt;&lt;/font&gt;&lt;font color=\"#4E9A06\"&gt;                                        \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2502                                                     \u2502&lt;/font&gt;\n &lt;font color=\"#4E9A06\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;\n\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8000&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;/pre&gt;\n</code></pre> <p>Si prefieres usar el comando <code>uvicorn</code> directamente:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8080&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>La \u00fanica opci\u00f3n nueva aqu\u00ed es <code>--workers</code> indicando a Uvicorn que inicie 4 worker processes.</p> <p>Tambi\u00e9n puedes ver que muestra el PID de cada proceso, <code>27365</code> para el proceso padre (este es el gestor de procesos) y uno para cada worker process: <code>27368</code>, <code>27369</code>, <code>27370</code>, y <code>27367</code>.</p>"},{"location":"deployment/server-workers/#conceptos-de-despliegue","title":"Conceptos de Despliegue","text":"<p>Aqu\u00ed viste c\u00f3mo usar m\u00faltiples workers para paralelizar la ejecuci\u00f3n de la aplicaci\u00f3n, aprovechar los m\u00faltiples n\u00facleos del CPU, y poder servir m\u00e1s requests.</p> <p>De la lista de conceptos de despliegue de antes, usar workers ayudar\u00eda principalmente con la parte de replicaci\u00f3n, y un poquito con los reinicios, pero a\u00fan necesitas encargarte de los otros:</p> <ul> <li>Seguridad - HTTPS</li> <li>Ejecuci\u00f3n al inicio</li> <li>Reinicios</li> <li>Replicaci\u00f3n (el n\u00famero de procesos en ejecuci\u00f3n)</li> <li>Memoria</li> <li>Pasos previos antes de empezar</li> </ul>"},{"location":"deployment/server-workers/#contenedores-y-docker","title":"Contenedores y Docker","text":"<p>En el pr\u00f3ximo cap\u00edtulo sobre ReadyAPI en Contenedores - Docker te explicar\u00e9 algunas estrategias que podr\u00edas usar para manejar los otros conceptos de despliegue.</p> <p>Te mostrar\u00e9 c\u00f3mo construir tu propia imagen desde cero para ejecutar un solo proceso de Uvicorn. Es un proceso sencillo y probablemente es lo que querr\u00edas hacer al usar un sistema de gesti\u00f3n de contenedores distribuido como Kubernetes.</p>"},{"location":"deployment/server-workers/#resumen","title":"Resumen","text":"<p>Puedes usar m\u00faltiples worker processes con la opci\u00f3n CLI <code>--workers</code> con los comandos <code>readyapi</code> o <code>uvicorn</code> para aprovechar los CPUs de m\u00faltiples n\u00facleos, para ejecutar m\u00faltiples procesos en paralelo.</p> <p>Podr\u00edas usar estas herramientas e ideas si est\u00e1s instalando tu propio sistema de despliegue mientras te encargas t\u00fa mismo de los otros conceptos de despliegue.</p> <p>Revisa el pr\u00f3ximo cap\u00edtulo para aprender sobre ReadyAPI con contenedores (por ejemplo, Docker y Kubernetes). Ver\u00e1s que esas herramientas tienen formas sencillas de resolver los otros conceptos de despliegue tambi\u00e9n. \u2728</p>"},{"location":"deployment/versions/","title":"Sobre las versiones de ReadyAPI","text":"<p>ReadyAPI ya se est\u00e1 utilizando en producci\u00f3n en muchas aplicaciones y sistemas. Y la cobertura de tests se mantiene al 100%. Pero su desarrollo sigue avanzando r\u00e1pidamente.</p> <p>Se a\u00f1aden nuevas funcionalidades con frecuencia, se corrigen bugs regularmente, y el c\u00f3digo sigue mejorando continuamente.</p> <p>Por eso las versiones actuales siguen siendo <code>0.x.x</code>, esto refleja que cada versi\u00f3n podr\u00eda tener potencialmente cambios incompatibles. Esto sigue las convenciones de Semantic Versioning.</p> <p>Puedes crear aplicaciones de producci\u00f3n con ReadyAPI ahora mismo (y probablemente ya lo has estado haciendo desde hace alg\u00fan tiempo), solo debes asegurarte de que utilizas una versi\u00f3n que funciona correctamente con el resto de tu c\u00f3digo.</p>"},{"location":"deployment/versions/#fijar-tu-version-de-readyapi","title":"Fijar tu versi\u00f3n de <code>readyapi</code>","text":"<p>Lo primero que debes hacer es \"fijar\" la versi\u00f3n de ReadyAPI que est\u00e1s usando a la versi\u00f3n espec\u00edfica m\u00e1s reciente que sabes que funciona correctamente para tu aplicaci\u00f3n.</p> <p>Por ejemplo, digamos que est\u00e1s utilizando la versi\u00f3n <code>0.112.0</code> en tu aplicaci\u00f3n.</p> <p>Si usas un archivo <code>requirements.txt</code> podr\u00edas especificar la versi\u00f3n con:</p> <pre><code>readyapi[standard]==0.112.0\n</code></pre> <p>eso significar\u00eda que usar\u00edas exactamente la versi\u00f3n <code>0.112.0</code>.</p> <p>O tambi\u00e9n podr\u00edas fijarla con:</p> <pre><code>readyapi[standard]&gt;=0.112.0,&lt;0.113.0\n</code></pre> <p>eso significar\u00eda que usar\u00edas las versiones <code>0.112.0</code> o superiores, pero menores que <code>0.113.0</code>, por ejemplo, una versi\u00f3n <code>0.112.2</code> todav\u00eda ser\u00eda aceptada.</p> <p>Si utilizas cualquier otra herramienta para gestionar tus instalaciones, como <code>uv</code>, Poetry, Pipenv, u otras, todas tienen una forma que puedes usar para definir versiones espec\u00edficas para tus paquetes.</p>"},{"location":"deployment/versions/#versiones-disponibles","title":"Versiones disponibles","text":"<p>Puedes ver las versiones disponibles (por ejemplo, para revisar cu\u00e1l es la m\u00e1s reciente) en las Release Notes.</p>"},{"location":"deployment/versions/#sobre-las-versiones","title":"Sobre las versiones","text":"<p>Siguiendo las convenciones del Semantic Versioning, cualquier versi\u00f3n por debajo de <code>1.0.0</code> podr\u00eda potencialmente a\u00f1adir cambios incompatibles.</p> <p>ReadyAPI tambi\u00e9n sigue la convenci\u00f3n de que cualquier cambio de versi\u00f3n \"PATCH\" es para correcci\u00f3n de bugs y cambios no incompatibles.</p> <p>Consejo</p> <p>El \"PATCH\" es el \u00faltimo n\u00famero, por ejemplo, en <code>0.2.3</code>, la versi\u00f3n PATCH es <code>3</code>.</p> <p>As\u00ed que deber\u00edas poder fijar a una versi\u00f3n como:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Los cambios incompatibles y nuevas funcionalidades se a\u00f1aden en versiones \"MINOR\".</p> <p>Consejo</p> <p>El \"MINOR\" es el n\u00famero en el medio, por ejemplo, en <code>0.2.3</code>, la versi\u00f3n MINOR es <code>2</code>.</p>"},{"location":"deployment/versions/#actualizando-las-versiones-de-readyapi","title":"Actualizando las versiones de ReadyAPI","text":"<p>Deber\u00edas a\u00f1adir tests para tu aplicaci\u00f3n.</p> <p>Con ReadyAPI es muy f\u00e1cil (gracias a Starlette), revisa la documentaci\u00f3n: Testing</p> <p>Despu\u00e9s de tener tests, puedes actualizar la versi\u00f3n de ReadyAPI a una m\u00e1s reciente, y asegurarte de que todo tu c\u00f3digo est\u00e1 funcionando correctamente ejecutando tus tests.</p> <p>Si todo est\u00e1 funcionando, o despu\u00e9s de hacer los cambios necesarios, y todos tus tests pasan, entonces puedes fijar tu <code>readyapi</code> a esa nueva versi\u00f3n m\u00e1s reciente.</p>"},{"location":"deployment/versions/#sobre-starlette","title":"Sobre Starlette","text":"<p>No deber\u00edas fijar la versi\u00f3n de <code>starlette</code>.</p> <p>Diferentes versiones de ReadyAPI utilizar\u00e1n una versi\u00f3n m\u00e1s reciente espec\u00edfica de Starlette.</p> <p>As\u00ed que, puedes simplemente dejar que ReadyAPI use la versi\u00f3n correcta de Starlette.</p>"},{"location":"deployment/versions/#sobre-pydantic","title":"Sobre Pydantic","text":"<p>Pydantic incluye los tests para ReadyAPI con sus propios tests, as\u00ed que nuevas versiones de Pydantic (por encima de <code>1.0.0</code>) siempre son compatibles con ReadyAPI.</p> <p>Puedes fijar Pydantic a cualquier versi\u00f3n por encima de <code>1.0.0</code> que funcione para ti.</p> <p>Por ejemplo:</p> <pre><code>pydantic&gt;=2.7.0,&lt;3.0.0\n</code></pre>"},{"location":"how-to/","title":"How To - Recetas","text":"<p>Aqu\u00ed ver\u00e1s diferentes recetas o gu\u00edas de \"c\u00f3mo hacer\" para varios temas.</p> <p>La mayor\u00eda de estas ideas ser\u00edan m\u00e1s o menos independientes, y en la mayor\u00eda de los casos solo deber\u00edas estudiarlas si aplican directamente a tu proyecto.</p> <p>Si algo parece interesante y \u00fatil para tu proyecto, adelante y rev\u00edsalo, pero de lo contrario, probablemente puedas simplemente omitirlas.</p> <p>Consejo</p> <p>Si quieres aprender ReadyAPI de una manera estructurada (recomendado), ve y lee el Tutorial - User Guide cap\u00edtulo por cap\u00edtulo.</p>"},{"location":"how-to/conditional-openapi/","title":"OpenAPI Condicional","text":"<p>Si lo necesitaras, podr\u00edas usar configuraciones y variables de entorno para configurar OpenAPI condicionalmente seg\u00fan el entorno, e incluso desactivarlo por completo.</p>"},{"location":"how-to/conditional-openapi/#sobre-seguridad-apis-y-documentacion","title":"Sobre seguridad, APIs y documentaci\u00f3n","text":"<p>Ocultar las interfaces de usuario de la documentaci\u00f3n en producci\u00f3n no deber\u00eda ser la forma de proteger tu API.</p> <p>Eso no a\u00f1ade ninguna seguridad extra a tu API, las path operations seguir\u00e1n estando disponibles donde est\u00e1n.</p> <p>Si hay una falla de seguridad en tu c\u00f3digo, seguir\u00e1 existiendo.</p> <p>Ocultar la documentaci\u00f3n solo hace que sea m\u00e1s dif\u00edcil entender c\u00f3mo interactuar con tu API y podr\u00eda dificultar m\u00e1s depurarla en producci\u00f3n. Podr\u00eda considerarse simplemente una forma de Seguridad mediante oscuridad.</p> <p>Si quieres asegurar tu API, hay varias cosas mejores que puedes hacer, por ejemplo:</p> <ul> <li>Aseg\u00farate de tener modelos Pydantic bien definidos para tus request bodies y responses.</li> <li>Configura los permisos y roles necesarios usando dependencias.</li> <li>Nunca guardes contrase\u00f1as en texto plano, solo hashes de contrase\u00f1as.</li> <li>Implementa y utiliza herramientas criptogr\u00e1ficas bien conocidas, como Passlib y JWT tokens, etc.</li> <li>A\u00f1ade controles de permisos m\u00e1s detallados con OAuth2 scopes donde sea necesario.</li> <li>...etc.</li> </ul> <p>No obstante, podr\u00edas tener un caso de uso muy espec\u00edfico donde realmente necesites desactivar la documentaci\u00f3n de la API para alg\u00fan entorno (por ejemplo, para producci\u00f3n) o dependiendo de configuraciones de variables de entorno.</p>"},{"location":"how-to/conditional-openapi/#openapi-condicional-desde-configuraciones-y-variables-de-entorno","title":"OpenAPI condicional desde configuraciones y variables de entorno","text":"<p>Puedes usar f\u00e1cilmente las mismas configuraciones de Pydantic para configurar tu OpenAPI generado y las interfaces de usuario de la documentaci\u00f3n.</p> <p>Por ejemplo:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = ReadyAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Aqu\u00ed declaramos la configuraci\u00f3n <code>openapi_url</code> con el mismo valor predeterminado de <code>\"/openapi.json\"</code>.</p> <p>Y luego la usamos al crear la app de <code>ReadyAPI</code>.</p> <p>Entonces podr\u00edas desactivar OpenAPI (incluyendo las UI de documentaci\u00f3n) configurando la variable de entorno <code>OPENAPI_URL</code> a una string vac\u00eda, as\u00ed:</p> <pre><code>$ OPENAPI_URL= uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Luego, si vas a las URLs en <code>/openapi.json</code>, <code>/docs</code>, o <code>/redoc</code>, solo obtendr\u00e1s un error <code>404 Not Found</code> como:</p> <pre><code>{\n    \"detail\": \"Not Found\"\n}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/","title":"Configurar Swagger UI","text":"<p>Puedes configurar algunos par\u00e1metros adicionales de Swagger UI.</p> <p>Para configurarlos, pasa el argumento <code>swagger_ui_parameters</code> al crear el objeto de la app <code>ReadyAPI()</code> o a la funci\u00f3n <code>get_swagger_ui_html()</code>.</p> <p><code>swagger_ui_parameters</code> recibe un diccionario con las configuraciones pasadas directamente a Swagger UI.</p> <p>ReadyAPI convierte las configuraciones a JSON para hacerlas compatibles con JavaScript, ya que eso es lo que Swagger UI necesita.</p>"},{"location":"how-to/configure-swagger-ui/#desactivar-el-resaltado-de-sintaxis","title":"Desactivar el resaltado de sintaxis","text":"<p>Por ejemplo, podr\u00edas desactivar el resaltado de sintaxis en Swagger UI.</p> <p>Sin cambiar la configuraci\u00f3n, el resaltado de sintaxis est\u00e1 activado por defecto:</p> <p></p> <p>Pero puedes desactivarlo estableciendo <code>syntaxHighlight</code> en <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>...y entonces Swagger UI ya no mostrar\u00e1 el resaltado de sintaxis:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#cambiar-el-tema","title":"Cambiar el tema","text":"<p>De la misma manera, podr\u00edas configurar el tema del resaltado de sintaxis con la clave <code>\"syntaxHighlight.theme\"</code> (ten en cuenta que tiene un punto en el medio):</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": {\"theme\": \"obsidian\"}})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Esa configuraci\u00f3n cambiar\u00eda el tema de color del resaltado de sintaxis:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#cambiar-los-parametros-predeterminados-de-swagger-ui","title":"Cambiar los par\u00e1metros predeterminados de Swagger UI","text":"<p>ReadyAPI incluye algunos par\u00e1metros de configuraci\u00f3n predeterminados apropiados para la mayor\u00eda de los casos de uso.</p> <p>Incluye estas configuraciones predeterminadas:</p> Python 3.8+ <pre><code># Code above omitted \ud83d\udc46\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.8+ <pre><code>import json\nfrom typing import Any, Dict, Optional\n\nfrom readyapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n\ndef get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.khulnasoft.com/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre> <p>Puedes sobrescribir cualquiera de ellos estableciendo un valor diferente en el argumento <code>swagger_ui_parameters</code>.</p> <p>Por ejemplo, para desactivar <code>deepLinking</code> podr\u00edas pasar estas configuraciones a <code>swagger_ui_parameters</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/#otros-parametros-de-swagger-ui","title":"Otros par\u00e1metros de Swagger UI","text":"<p>Para ver todas las dem\u00e1s configuraciones posibles que puedes usar, lee la documentaci\u00f3n oficial de los par\u00e1metros de Swagger UI.</p>"},{"location":"how-to/configure-swagger-ui/#configuraciones-solo-de-javascript","title":"Configuraciones solo de JavaScript","text":"<p>Swagger UI tambi\u00e9n permite otras configuraciones que son objetos solo de JavaScript (por ejemplo, funciones de JavaScript).</p> <p>ReadyAPI tambi\u00e9n incluye estas configuraciones <code>presets</code> solo de JavaScript:</p> <pre><code>presets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n</code></pre> <p>Estos son objetos de JavaScript, no strings, por lo que no puedes pasarlos directamente desde c\u00f3digo de Python.</p> <p>Si necesitas usar configuraciones solo de JavaScript como esas, puedes usar uno de los m\u00e9todos anteriores. Sobrescribe toda la path operation de Swagger UI y escribe manualmente cualquier JavaScript que necesites.</p>"},{"location":"how-to/custom-docs-ui-assets/","title":"Recursos Est\u00e1ticos Personalizados para la Docs UI (Self-Hosting)","text":"<p>La documentaci\u00f3n de la API utiliza Swagger UI y ReDoc, y cada uno de estos necesita algunos archivos JavaScript y CSS.</p> <p>Por defecto, esos archivos se sirven desde un CDN.</p> <p>Pero es posible personalizarlo, puedes establecer un CDN espec\u00edfico, o servir los archivos t\u00fa mismo.</p>"},{"location":"how-to/custom-docs-ui-assets/#cdn-personalizado-para-javascript-y-css","title":"CDN Personalizado para JavaScript y CSS","text":"<p>Digamos que quieres usar un CDN diferente, por ejemplo, quieres usar <code>https://unpkg.com/</code>.</p> <p>Esto podr\u00eda ser \u00fatil si, por ejemplo, vives en un pa\u00eds que restringe algunas URLs.</p>"},{"location":"how-to/custom-docs-ui-assets/#desactiva-la-documentacion-automatica","title":"Desactiva la documentaci\u00f3n autom\u00e1tica","text":"<p>El primer paso es desactivar la documentaci\u00f3n autom\u00e1tica, ya que por defecto, esos usan el CDN predeterminado.</p> <p>Para desactivarlos, establece sus URLs en <code>None</code> cuando crees tu aplicaci\u00f3n de <code>ReadyAPI</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#incluye-la-documentacion-personalizada","title":"Incluye la documentaci\u00f3n personalizada","text":"<p>Ahora puedes crear las path operations para la documentaci\u00f3n personalizada.</p> <p>Puedes reutilizar las funciones internas de ReadyAPI para crear las p\u00e1ginas HTML para la documentaci\u00f3n, y pasarles los argumentos necesarios:</p> <ul> <li><code>openapi_url</code>: la URL donde la p\u00e1gina HTML para la documentaci\u00f3n puede obtener el OpenAPI esquema de tu API. Puedes usar aqu\u00ed el atributo <code>app.openapi_url</code>.</li> <li><code>title</code>: el t\u00edtulo de tu API.</li> <li><code>oauth2_redirect_url</code>: puedes usar <code>app.swagger_ui_oauth2_redirect_url</code> aqu\u00ed para usar el valor predeterminado.</li> <li><code>swagger_js_url</code>: la URL donde el HTML para tu documentaci\u00f3n de Swagger UI puede obtener el archivo JavaScript. Esta es la URL personalizada del CDN.</li> <li><code>swagger_css_url</code>: la URL donde el HTML para tu documentaci\u00f3n de Swagger UI puede obtener el archivo CSS. Esta es la URL personalizada del CDN.</li> </ul> <p>Y de manera similar para ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Consejo</p> <p>La path operation para <code>swagger_ui_redirect</code> es una herramienta cuando utilizas OAuth2.</p> <p>Si integras tu API con un proveedor OAuth2, podr\u00e1s autenticarte y regresar a la documentaci\u00f3n de la API con las credenciales adquiridas. E interactuar con ella usando la autenticaci\u00f3n real de OAuth2.</p> <p>Swagger UI lo manejar\u00e1 detr\u00e1s de escena para ti, pero necesita este auxiliar de \"redirecci\u00f3n\".</p>"},{"location":"how-to/custom-docs-ui-assets/#crea-una-path-operation-para-probarlo","title":"Crea una path operation para probarlo","text":"<p>Ahora, para poder probar que todo funciona, crea una path operation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#pruebalo","title":"Pru\u00e9balo","text":"<p>Ahora, deber\u00edas poder ir a tu documentaci\u00f3n en http://127.0.0.1:8000/docs, y recargar la p\u00e1gina, cargar\u00e1 esos recursos desde el nuevo CDN.</p>"},{"location":"how-to/custom-docs-ui-assets/#self-hosting-de-javascript-y-css-para-la-documentacion","title":"Self-hosting de JavaScript y CSS para la documentaci\u00f3n","text":"<p>El self-hosting de JavaScript y CSS podr\u00eda ser \u00fatil si, por ejemplo, necesitas que tu aplicaci\u00f3n siga funcionando incluso offline, sin acceso a Internet, o en una red local.</p> <p>Aqu\u00ed ver\u00e1s c\u00f3mo servir esos archivos t\u00fa mismo, en la misma aplicaci\u00f3n de ReadyAPI, y configurar la documentaci\u00f3n para usarla.</p>"},{"location":"how-to/custom-docs-ui-assets/#estructura-de-archivos-del-proyecto","title":"Estructura de archivos del proyecto","text":"<p>Supongamos que la estructura de archivos de tu proyecto se ve as\u00ed:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n</code></pre> <p>Ahora crea un directorio para almacenar esos archivos est\u00e1ticos.</p> <p>Tu nueva estructura de archivos podr\u00eda verse as\u00ed:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static/\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#descarga-los-archivos","title":"Descarga los archivos","text":"<p>Descarga los archivos est\u00e1ticos necesarios para la documentaci\u00f3n y ponlos en ese directorio <code>static/</code>.</p> <p>Probablemente puedas hacer clic derecho en cada enlace y seleccionar una opci\u00f3n similar a <code>Guardar enlace como...</code>.</p> <p>Swagger UI utiliza los archivos:</p> <ul> <li><code>swagger-ui-bundle.js</code></li> <li><code>swagger-ui.css</code></li> </ul> <p>Y ReDoc utiliza el archivo:</p> <ul> <li><code>redoc.standalone.js</code></li> </ul> <p>Despu\u00e9s de eso, tu estructura de archivos podr\u00eda verse as\u00ed:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static\n    \u251c\u2500\u2500 redoc.standalone.js\n    \u251c\u2500\u2500 swagger-ui-bundle.js\n    \u2514\u2500\u2500 swagger-ui.css\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#sirve-los-archivos-estaticos","title":"Sirve los archivos est\u00e1ticos","text":"<ul> <li>Importa <code>StaticFiles</code>.</li> <li>\"Monta\" una instance de <code>StaticFiles()</code> en un path espec\u00edfico.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#prueba-los-archivos-estaticos","title":"Prueba los archivos est\u00e1ticos","text":"<p>Inicia tu aplicaci\u00f3n y ve a http://127.0.0.1:8000/static/redoc.standalone.js.</p> <p>Deber\u00edas ver un archivo JavaScript muy largo de ReDoc.</p> <p>Podr\u00eda comenzar con algo como:</p> <pre><code>/*! For license information please see redoc.standalone.js.LICENSE.txt */\n!function(e,t){\"object\"==typeof exports&amp;&amp;\"object\"==typeof module?module.exports=t(require(\"null\")):\n...\n</code></pre> <p>Eso confirma que puedes servir archivos est\u00e1ticos desde tu aplicaci\u00f3n, y que colocaste los archivos est\u00e1ticos para la documentaci\u00f3n en el lugar correcto.</p> <p>Ahora podemos configurar la aplicaci\u00f3n para usar esos archivos est\u00e1ticos para la documentaci\u00f3n.</p>"},{"location":"how-to/custom-docs-ui-assets/#desactiva-la-documentacion-automatica-para-archivos-estaticos","title":"Desactiva la documentaci\u00f3n autom\u00e1tica para archivos est\u00e1ticos","text":"<p>Igual que cuando usas un CDN personalizado, el primer paso es desactivar la documentaci\u00f3n autom\u00e1tica, ya que esos usan el CDN por defecto.</p> <p>Para desactivarlos, establece sus URLs en <code>None</code> cuando crees tu aplicaci\u00f3n de <code>ReadyAPI</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#incluye-la-documentacion-personalizada-para-archivos-estaticos","title":"Incluye la documentaci\u00f3n personalizada para archivos est\u00e1ticos","text":"<p>Y de la misma manera que con un CDN personalizado, ahora puedes crear las path operations para la documentaci\u00f3n personalizada.</p> <p>Nuevamente, puedes reutilizar las funciones internas de ReadyAPI para crear las p\u00e1ginas HTML para la documentaci\u00f3n, y pasarles los argumentos necesarios:</p> <ul> <li><code>openapi_url</code>: la URL donde la p\u00e1gina HTML para la documentaci\u00f3n puede obtener el OpenAPI esquema de tu API. Puedes usar aqu\u00ed el atributo <code>app.openapi_url</code>.</li> <li><code>title</code>: el t\u00edtulo de tu API.</li> <li><code>oauth2_redirect_url</code>: puedes usar <code>app.swagger_ui_oauth2_redirect_url</code> aqu\u00ed para usar el valor predeterminado.</li> <li><code>swagger_js_url</code>: la URL donde el HTML para tu documentaci\u00f3n de Swagger UI puede obtener el archivo JavaScript. Este es el que tu propia aplicaci\u00f3n est\u00e1 sirviendo ahora.</li> <li><code>swagger_css_url</code>: la URL donde el HTML para tu documentaci\u00f3n de Swagger UI puede obtener el archivo CSS. Este es el que tu propia aplicaci\u00f3n est\u00e1 sirviendo ahora.</li> </ul> <p>Y de manera similar para ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Consejo</p> <p>La path operation para <code>swagger_ui_redirect</code> es una herramienta cuando utilizas OAuth2.</p> <p>Si integras tu API con un proveedor OAuth2, podr\u00e1s autenticarte y regresar a la documentaci\u00f3n de la API con las credenciales adquiridas. Y interactuar con ella usando la autenticaci\u00f3n real de OAuth2.</p> <p>Swagger UI lo manejar\u00e1 detr\u00e1s de escena para ti, pero necesita este auxiliar de \"redirecci\u00f3n\".</p>"},{"location":"how-to/custom-docs-ui-assets/#crea-una-path-operation-para-probar-archivos-estaticos","title":"Crea una path operation para probar archivos est\u00e1ticos","text":"<p>Ahora, para poder probar que todo funciona, crea una path operation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#prueba-la-ui-de-archivos-estaticos","title":"Prueba la UI de Archivos Est\u00e1ticos","text":"<p>Ahora, deber\u00edas poder desconectar tu WiFi, ir a tu documentaci\u00f3n en http://127.0.0.1:8000/docs, y recargar la p\u00e1gina.</p> <p>E incluso sin Internet, podr\u00e1s ver la documentaci\u00f3n de tu API e interactuar con ella.</p>"},{"location":"how-to/custom-request-and-route/","title":"Clase personalizada de Request y APIRoute","text":"<p>En algunos casos, puede que quieras sobrescribir la l\u00f3gica utilizada por las clases <code>Request</code> y <code>APIRoute</code>.</p> <p>En particular, esta puede ser una buena alternativa a la l\u00f3gica en un middleware.</p> <p>Por ejemplo, si quieres leer o manipular el request body antes de que sea procesado por tu aplicaci\u00f3n.</p> <p>Advertencia</p> <p>Esta es una funcionalidad \"avanzada\".</p> <p>Si apenas est\u00e1s comenzando con ReadyAPI, quiz\u00e1s quieras saltar esta secci\u00f3n.</p>"},{"location":"how-to/custom-request-and-route/#casos-de-uso","title":"Casos de uso","text":"<p>Algunos casos de uso incluyen:</p> <ul> <li>Convertir cuerpos de requests no-JSON a JSON (por ejemplo, <code>msgpack</code>).</li> <li>Descomprimir cuerpos de requests comprimidos con gzip.</li> <li>Registrar autom\u00e1ticamente todos los request bodies.</li> </ul>"},{"location":"how-to/custom-request-and-route/#manejo-de-codificaciones-personalizadas-de-request-body","title":"Manejo de codificaciones personalizadas de request body","text":"<p>Veamos c\u00f3mo hacer uso de una subclase personalizada de <code>Request</code> para descomprimir requests gzip.</p> <p>Y una subclase de <code>APIRoute</code> para usar esa clase de request personalizada.</p>"},{"location":"how-to/custom-request-and-route/#crear-una-clase-personalizada-gziprequest","title":"Crear una clase personalizada <code>GzipRequest</code>","text":"<p>Consejo</p> <p>Este es un ejemplo sencillo para demostrar c\u00f3mo funciona. Si necesitas soporte para Gzip, puedes usar el <code>GzipMiddleware</code> proporcionado.</p> <p>Primero, creamos una clase <code>GzipRequest</code>, que sobrescribir\u00e1 el m\u00e9todo <code>Request.body()</code> para descomprimir el cuerpo si hay un header apropiado.</p> <p>Si no hay <code>gzip</code> en el header, no intentar\u00e1 descomprimir el cuerpo.</p> <p>De esa manera, la misma clase de ruta puede manejar requests comprimidos con gzip o no comprimidos.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre>"},{"location":"how-to/custom-request-and-route/#crear-una-clase-personalizada-gziproute","title":"Crear una clase personalizada <code>GzipRoute</code>","text":"<p>A continuaci\u00f3n, creamos una subclase personalizada de <code>readyapi.routing.APIRoute</code> que har\u00e1 uso de <code>GzipRequest</code>.</p> <p>Esta vez, sobrescribir\u00e1 el m\u00e9todo <code>APIRoute.get_route_handler()</code>.</p> <p>Este m\u00e9todo devuelve una funci\u00f3n. Y esa funci\u00f3n es la que recibir\u00e1 un request y devolver\u00e1 un response.</p> <p>Aqu\u00ed lo usamos para crear un <code>GzipRequest</code> a partir del request original.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre> <p>Detalles t\u00e9cnicos</p> <p>Un <code>Request</code> tiene un atributo <code>request.scope</code>, que es simplemente un <code>dict</code> de Python que contiene los metadatos relacionados con el request.</p> <p>Un <code>Request</code> tambi\u00e9n tiene un <code>request.receive</code>, que es una funci\u00f3n para \"recibir\" el cuerpo del request.</p> <p>El <code>dict</code> <code>scope</code> y la funci\u00f3n <code>receive</code> son ambos parte de la especificaci\u00f3n ASGI.</p> <p>Y esas dos cosas, <code>scope</code> y <code>receive</code>, son lo que se necesita para crear una nueva Request instance.</p> <p>Para aprender m\u00e1s sobre el <code>Request</code>, revisa la documentaci\u00f3n de Starlette sobre Requests.</p> <p>La \u00fanica cosa que la funci\u00f3n devuelta por <code>GzipRequest.get_route_handler</code> hace diferente es convertir el <code>Request</code> en un <code>GzipRequest</code>.</p> <p>Haciendo esto, nuestro <code>GzipRequest</code> se encargar\u00e1 de descomprimir los datos (si es necesario) antes de pasarlos a nuestras path operations.</p> <p>Despu\u00e9s de eso, toda la l\u00f3gica de procesamiento es la misma.</p> <p>Pero debido a nuestros cambios en <code>GzipRequest.body</code>, el request body se descomprimir\u00e1 autom\u00e1ticamente cuando sea cargado por ReadyAPI si es necesario.</p>"},{"location":"how-to/custom-request-and-route/#accediendo-al-request-body-en-un-manejador-de-excepciones","title":"Accediendo al request body en un manejador de excepciones","text":"<p>Consejo</p> <p>Para resolver este mismo problema, probablemente sea mucho m\u00e1s f\u00e1cil usar el <code>body</code> en un manejador personalizado para <code>RequestValidationError</code> (Manejo de Errores).</p> <p>Pero este ejemplo sigue siendo v\u00e1lido y muestra c\u00f3mo interactuar con los componentes internos.</p> <p>Tambi\u00e9n podemos usar este mismo enfoque para acceder al request body en un manejador de excepciones.</p> <p>Todo lo que necesitamos hacer es manejar el request dentro de un bloque <code>try</code>/<code>except</code>:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre> <p>Si ocurre una excepci\u00f3n, la <code>Request instance</code> a\u00fan estar\u00e1 en el alcance, as\u00ed que podemos leer y hacer uso del request body cuando manejamos el error:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre>"},{"location":"how-to/custom-request-and-route/#clase-personalizada-apiroute-en-un-router","title":"Clase personalizada <code>APIRoute</code> en un router","text":"<p>Tambi\u00e9n puedes establecer el par\u00e1metro <code>route_class</code> de un <code>APIRouter</code>:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre> <p>En este ejemplo, las path operations bajo el <code>router</code> usar\u00e1n la clase personalizada <code>TimedRoute</code>, y tendr\u00e1n un header <code>X-Response-Time</code> extra en el response con el tiempo que tom\u00f3 generar el response:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre>"},{"location":"how-to/extending-openapi/","title":"Extender OpenAPI","text":"<p>Hay algunos casos en los que podr\u00edas necesitar modificar el esquema de OpenAPI generado.</p> <p>En esta secci\u00f3n ver\u00e1s c\u00f3mo hacerlo.</p>"},{"location":"how-to/extending-openapi/#el-proceso-normal","title":"El proceso normal","text":"<p>El proceso normal (por defecto) es el siguiente.</p> <p>Una aplicaci\u00f3n (instance) de <code>ReadyAPI</code> tiene un m\u00e9todo <code>.openapi()</code> que se espera que devuelva el esquema de OpenAPI.</p> <p>Como parte de la creaci\u00f3n del objeto de la aplicaci\u00f3n, se registra una path operation para <code>/openapi.json</code> (o para lo que sea que configures tu <code>openapi_url</code>).</p> <p>Simplemente devuelve un response JSON con el resultado del m\u00e9todo <code>.openapi()</code> de la aplicaci\u00f3n.</p> <p>Por defecto, lo que hace el m\u00e9todo <code>.openapi()</code> es revisar la propiedad <code>.openapi_schema</code> para ver si tiene contenido y devolverlo.</p> <p>Si no lo tiene, lo genera usando la funci\u00f3n de utilidad en <code>readyapi.openapi.utils.get_openapi</code>.</p> <p>Y esa funci\u00f3n <code>get_openapi()</code> recibe como par\u00e1metros:</p> <ul> <li><code>title</code>: El t\u00edtulo de OpenAPI, mostrado en la documentaci\u00f3n.</li> <li><code>version</code>: La versi\u00f3n de tu API, por ejemplo <code>2.5.0</code>.</li> <li><code>openapi_version</code>: La versi\u00f3n de la especificaci\u00f3n OpenAPI utilizada. Por defecto, la m\u00e1s reciente: <code>3.1.0</code>.</li> <li><code>summary</code>: Un breve resumen de la API.</li> <li><code>description</code>: La descripci\u00f3n de tu API, esta puede incluir markdown y se mostrar\u00e1 en la documentaci\u00f3n.</li> <li><code>routes</code>: Una list de rutas, estas son cada una de las path operations registradas. Se toman de <code>app.routes</code>.</li> </ul> <p>Informaci\u00f3n</p> <p>El par\u00e1metro <code>summary</code> est\u00e1 disponible en OpenAPI 3.1.0 y versiones superiores, soportado por ReadyAPI 0.99.0 y superiores.</p>"},{"location":"how-to/extending-openapi/#sobrescribir-los-valores-por-defecto","title":"Sobrescribir los valores por defecto","text":"<p>Usando la informaci\u00f3n anterior, puedes usar la misma funci\u00f3n de utilidad para generar el esquema de OpenAPI y sobrescribir cada parte que necesites.</p> <p>Por ejemplo, vamos a a\u00f1adir la extensi\u00f3n OpenAPI de ReDoc para incluir un logo personalizado.</p>"},{"location":"how-to/extending-openapi/#readyapi-normal","title":"ReadyAPI normal","text":"<p>Primero, escribe toda tu aplicaci\u00f3n ReadyAPI como normalmente:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#generar-el-esquema-de-openapi","title":"Generar el esquema de OpenAPI","text":"<p>Luego, usa la misma funci\u00f3n de utilidad para generar el esquema de OpenAPI, dentro de una funci\u00f3n <code>custom_openapi()</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#modificar-el-esquema-de-openapi","title":"Modificar el esquema de OpenAPI","text":"<p>Ahora puedes a\u00f1adir la extensi\u00f3n de ReDoc, agregando un <code>x-logo</code> personalizado al \"objeto\" <code>info</code> en el esquema de OpenAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#cachear-el-esquema-de-openapi","title":"Cachear el esquema de OpenAPI","text":"<p>Puedes usar la propiedad <code>.openapi_schema</code> como un \"cache\", para almacenar tu esquema generado.</p> <p>De esa forma, tu aplicaci\u00f3n no tendr\u00e1 que generar el esquema cada vez que un usuario abra la documentaci\u00f3n de tu API.</p> <p>Se generar\u00e1 solo una vez, y luego se usar\u00e1 el mismo esquema cacheado para las siguientes requests.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#sobrescribir-el-metodo","title":"Sobrescribir el m\u00e9todo","text":"<p>Ahora puedes reemplazar el m\u00e9todo <code>.openapi()</code> por tu nueva funci\u00f3n.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.khulnasoft.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#revisa","title":"Revisa","text":"<p>Una vez que vayas a http://127.0.0.1:8000/redoc ver\u00e1s que est\u00e1s usando tu logo personalizado (en este ejemplo, el logo de ReadyAPI):</p> <p></p>"},{"location":"how-to/general/","title":"General - C\u00f3mo Hacer - Recetas","text":"<p>Aqu\u00ed tienes varias indicaciones hacia otros lugares en la documentaci\u00f3n, para preguntas generales o frecuentes.</p>"},{"location":"how-to/general/#filtrar-datos-seguridad","title":"Filtrar Datos - Seguridad","text":"<p>Para asegurarte de que no devuelves m\u00e1s datos de los que deber\u00edas, lee la documentaci\u00f3n para Tutorial - Modelo de Response - Tipo de Retorno.</p>"},{"location":"how-to/general/#etiquetas-de-documentacion-openapi","title":"Etiquetas de Documentaci\u00f3n - OpenAPI","text":"<p>Para agregar etiquetas a tus path operations, y agruparlas en la interfaz de usuario de la documentaci\u00f3n, lee la documentaci\u00f3n para Tutorial - Configuraciones de Path Operation - Etiquetas.</p>"},{"location":"how-to/general/#resumen-y-descripcion-de-documentacion-openapi","title":"Resumen y Descripci\u00f3n de Documentaci\u00f3n - OpenAPI","text":"<p>Para agregar un resumen y descripci\u00f3n a tus path operations, y mostrarlos en la interfaz de usuario de la documentaci\u00f3n, lee la documentaci\u00f3n para Tutorial - Configuraciones de Path Operation - Resumen y Descripci\u00f3n.</p>"},{"location":"how-to/general/#documentacion-de-descripcion-de-response-openapi","title":"Documentaci\u00f3n de Descripci\u00f3n de Response - OpenAPI","text":"<p>Para definir la descripci\u00f3n del response, mostrada en la interfaz de usuario de la documentaci\u00f3n, lee la documentaci\u00f3n para Tutorial - Configuraciones de Path Operation - Descripci\u00f3n del Response.</p>"},{"location":"how-to/general/#documentar-la-deprecacion-de-una-path-operation-openapi","title":"Documentar la Deprecaci\u00f3n de una Path Operation - OpenAPI","text":"<p>Para deprecar una path operation, y mostrarla en la interfaz de usuario de la documentaci\u00f3n, lee la documentaci\u00f3n para Tutorial - Configuraciones de Path Operation - Deprecaci\u00f3n.</p>"},{"location":"how-to/general/#convertir-cualquier-dato-a-compatible-con-json","title":"Convertir cualquier Dato a Compatible con JSON","text":"<p>Para convertir cualquier dato a compatible con JSON, lee la documentaci\u00f3n para Tutorial - Codificador Compatible con JSON.</p>"},{"location":"how-to/general/#metadatos-openapi-documentacion","title":"Metadatos OpenAPI - Documentaci\u00f3n","text":"<p>Para agregar metadatos a tu esquema de OpenAPI, incluyendo una licencia, versi\u00f3n, contacto, etc, lee la documentaci\u00f3n para Tutorial - Metadatos y URLs de Documentaci\u00f3n.</p>"},{"location":"how-to/general/#url-personalizada-de-openapi","title":"URL Personalizada de OpenAPI","text":"<p>Para personalizar la URL de OpenAPI (o eliminarla), lee la documentaci\u00f3n para Tutorial - Metadatos y URLs de Documentaci\u00f3n.</p>"},{"location":"how-to/general/#urls-de-documentacion-de-openapi","title":"URLs de Documentaci\u00f3n de OpenAPI","text":"<p>Para actualizar las URLs usadas para las interfaces de usuario de documentaci\u00f3n generadas autom\u00e1ticamente, lee la documentaci\u00f3n para Tutorial - Metadatos y URLs de Documentaci\u00f3n.</p>"},{"location":"how-to/graphql/","title":"GraphQL","text":"<p>Como ReadyAPI se basa en el est\u00e1ndar ASGI, es muy f\u00e1cil integrar cualquier paquete de GraphQL que tambi\u00e9n sea compatible con ASGI.</p> <p>Puedes combinar las path operations normales de ReadyAPI con GraphQL en la misma aplicaci\u00f3n.</p> <p>Consejo</p> <p>GraphQL resuelve algunos casos de uso muy espec\u00edficos.</p> <p>Tiene ventajas y desventajas en comparaci\u00f3n con las APIs web comunes.</p> <p>Aseg\u00farate de evaluar si los beneficios para tu caso de uso compensan los inconvenientes. \ud83e\udd13</p>"},{"location":"how-to/graphql/#paquetes-de-graphql","title":"Paquetes de GraphQL","text":"<p>Aqu\u00ed algunos de los paquetes de GraphQL que tienen soporte ASGI. Podr\u00edas usarlos con ReadyAPI:</p> <ul> <li>Strawberry \ud83c\udf53<ul> <li>Con documentaci\u00f3n para ReadyAPI</li> </ul> </li> <li>Ariadne<ul> <li>Con documentaci\u00f3n para ReadyAPI</li> </ul> </li> <li>Tartiflette<ul> <li>Con Tartiflette ASGI para proporcionar integraci\u00f3n con ASGI</li> </ul> </li> <li>Graphene<ul> <li>Con starlette-graphene3</li> </ul> </li> </ul>"},{"location":"how-to/graphql/#graphql-con-strawberry","title":"GraphQL con Strawberry","text":"<p>Si necesitas o quieres trabajar con GraphQL, Strawberry es el paquete recomendado ya que tiene un dise\u00f1o muy similar al dise\u00f1o de ReadyAPI, todo basado en anotaciones de tipos.</p> <p>Dependiendo de tu caso de uso, podr\u00edas preferir usar un paquete diferente, pero si me preguntas, probablemente te sugerir\u00eda probar Strawberry.</p> <p>Aqu\u00ed tienes una peque\u00f1a vista previa de c\u00f3mo podr\u00edas integrar Strawberry con ReadyAPI:</p> Python 3.8+ <pre><code>import strawberry\nfrom readyapi import ReadyAPI\nfrom strawberry.readyapi import GraphQLRouter\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -&gt; User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQLRouter(schema)\n\napp = ReadyAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>Puedes aprender m\u00e1s sobre Strawberry en la documentaci\u00f3n de Strawberry.</p> <p>Y tambi\u00e9n la documentaci\u00f3n sobre Strawberry con ReadyAPI.</p>"},{"location":"how-to/graphql/#graphqlapp-viejo-de-starlette","title":"<code>GraphQLApp</code> viejo de Starlette","text":"<p>Las versiones anteriores de Starlette inclu\u00edan una clase <code>GraphQLApp</code> para integrar con Graphene.</p> <p>Fue deprecada de Starlette, pero si tienes c\u00f3digo que lo usaba, puedes f\u00e1cilmente migrar a starlette-graphene3, que cubre el mismo caso de uso y tiene una interfaz casi id\u00e9ntica.</p> <p>Consejo</p> <p>Si necesitas GraphQL, a\u00fan te recomendar\u00eda revisar Strawberry, ya que se basa en anotaciones de tipos en lugar de clases y tipos personalizados.</p>"},{"location":"how-to/graphql/#aprende-mas","title":"Aprende M\u00e1s","text":"<p>Puedes aprender m\u00e1s sobre GraphQL en la documentaci\u00f3n oficial de GraphQL.</p> <p>Tambi\u00e9n puedes leer m\u00e1s sobre cada uno de esos paquetes descritos arriba en sus enlaces.</p>"},{"location":"how-to/separate-openapi-schemas/","title":"Separaci\u00f3n de Esquemas OpenAPI para Entrada y Salida o No","text":"<p>Al usar Pydantic v2, el OpenAPI generado es un poco m\u00e1s exacto y correcto que antes. \ud83d\ude0e</p> <p>De hecho, en algunos casos, incluso tendr\u00e1 dos JSON Schemas en OpenAPI para el mismo modelo Pydantic, para entrada y salida, dependiendo de si tienen valores por defecto.</p> <p>Veamos c\u00f3mo funciona eso y c\u00f3mo cambiarlo si necesitas hacerlo.</p>"},{"location":"how-to/separate-openapi-schemas/#modelos-pydantic-para-entrada-y-salida","title":"Modelos Pydantic para Entrada y Salida","text":"<p>Digamos que tienes un modelo Pydantic con valores por defecto, como este:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-entrada","title":"Modelo para Entrada","text":"<p>Si usas este modelo como entrada, como aqu\u00ed:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...entonces el campo <code>description</code> no ser\u00e1 requerido. Porque tiene un valor por defecto de <code>None</code>.</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-de-entrada-en-la-documentacion","title":"Modelo de Entrada en la Documentaci\u00f3n","text":"<p>Puedes confirmar eso en la documentaci\u00f3n, el campo <code>description</code> no tiene un asterisco rojo, no est\u00e1 marcado como requerido:</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-salida","title":"Modelo para Salida","text":"<p>Pero si usas el mismo modelo como salida, como aqu\u00ed:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...entonces, porque <code>description</code> tiene un valor por defecto, si no devuelves nada para ese campo, a\u00fan tendr\u00e1 ese valor por defecto.</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-datos-de-response-de-salida","title":"Modelo para Datos de Response de Salida","text":"<p>Si interact\u00faas con la documentaci\u00f3n y revisas el response, aunque el c\u00f3digo no agreg\u00f3 nada en uno de los campos <code>description</code>, el response JSON contiene el valor por defecto (<code>null</code>):</p> <p>Esto significa que siempre tendr\u00e1 un valor, solo que a veces el valor podr\u00eda ser <code>None</code> (o <code>null</code> en JSON).</p> <p>Eso significa que, los clientes que usan tu API no tienen que comprobar si el valor existe o no, pueden asumir que el campo siempre estar\u00e1 all\u00ed, pero solo que en algunos casos tendr\u00e1 el valor por defecto de <code>None</code>.</p> <p>La forma de describir esto en OpenAPI es marcar ese campo como requerido, porque siempre estar\u00e1 all\u00ed.</p> <p>Debido a eso, el JSON Schema para un modelo puede ser diferente dependiendo de si se usa para entrada o salida:</p> <ul> <li>para entrada el <code>description</code> no ser\u00e1 requerido</li> <li>para salida ser\u00e1 requerido (y posiblemente <code>None</code>, o en t\u00e9rminos de JSON, <code>null</code>)</li> </ul>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-salida-en-la-documentacion","title":"Modelo para Salida en la Documentaci\u00f3n","text":"<p>Tambi\u00e9n puedes revisar el modelo de salida en la documentaci\u00f3n, ambos <code>name</code> y <code>description</code> est\u00e1n marcados como requeridos con un asterisco rojo:</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-entrada-y-salida-en-la-documentacion","title":"Modelo para Entrada y Salida en la Documentaci\u00f3n","text":"<p>Y si revisas todos los esquemas disponibles (JSON Schemas) en OpenAPI, ver\u00e1s que hay dos, uno <code>Item-Input</code> y uno <code>Item-Output</code>.</p> <p>Para <code>Item-Input</code>, <code>description</code> no es requerido, no tiene un asterisco rojo.</p> <p>Pero para <code>Item-Output</code>, <code>description</code> es requerido, tiene un asterisco rojo.</p> <p>Con esta funcionalidad de Pydantic v2, la documentaci\u00f3n de tu API es m\u00e1s precisa, y si tienes clientes y SDKs autogenerados, tambi\u00e9n ser\u00e1n m\u00e1s precisos, con una mejor experiencia para desarrolladores y consistencia. \ud83c\udf89</p>"},{"location":"how-to/separate-openapi-schemas/#no-separar-esquemas","title":"No Separar Esquemas","text":"<p>Ahora, hay algunos casos donde podr\u00edas querer tener el mismo esquema para entrada y salida.</p> <p>Probablemente el caso principal para esto es si ya tienes alg\u00fan c\u00f3digo cliente/SDKs autogenerado y no quieres actualizar todo el c\u00f3digo cliente/SDKs autogenerado a\u00fan, probablemente querr\u00e1s hacerlo en alg\u00fan momento, pero tal vez no ahora.</p> <p>En ese caso, puedes desactivar esta funcionalidad en ReadyAPI, con el par\u00e1metro <code>separate_input_output_schemas=False</code>.</p> <p>Informaci\u00f3n</p> <p>El soporte para <code>separate_input_output_schemas</code> fue agregado en ReadyAPI <code>0.102.0</code>. \ud83e\udd13</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#mismo-esquema-para-modelos-de-entrada-y-salida-en-la-documentacion","title":"Mismo Esquema para Modelos de Entrada y Salida en la Documentaci\u00f3n","text":"<p>Y ahora habr\u00e1 un \u00fanico esquema para entrada y salida para el modelo, solo <code>Item</code>, y tendr\u00e1 <code>description</code> como no requerido:</p> <p>Este es el mismo comportamiento que en Pydantic v1. \ud83e\udd13</p>"},{"location":"how-to/testing-database/","title":"Probando una Base de Datos","text":"<p>Puedes estudiar sobre bases de datos, SQL y SQLDev en la documentaci\u00f3n de SQLDev. \ud83e\udd13</p> <p>Hay un mini tutorial sobre el uso de SQLDev con ReadyAPI. \u2728</p> <p>Ese tutorial incluye una secci\u00f3n sobre c\u00f3mo probar bases de datos SQL. \ud83d\ude0e</p>"},{"location":"learn/","title":"Aprende","text":"<p>Aqu\u00ed est\u00e1n las secciones introductorias y los tutoriales para aprender ReadyAPI.</p> <p>Podr\u00edas considerar esto un libro, un curso, la forma oficial y recomendada de aprender ReadyAPI. \ud83d\ude0e</p>"},{"location":"resources/","title":"Recursos","text":"<p>Recursos adicionales, enlaces externos, art\u00edculos y m\u00e1s. \u2708\ufe0f</p>"},{"location":"tutorial/","title":"Tutorial - Gu\u00eda del Usuario","text":"<p>Este tutorial te muestra c\u00f3mo usar ReadyAPI con la mayor\u00eda de sus funcionalidades, paso a paso.</p> <p>Cada secci\u00f3n se basa gradualmente en las anteriores, pero est\u00e1 estructurada para separar temas, de manera que puedas ir directamente a cualquier secci\u00f3n espec\u00edfica para resolver tus necesidades espec\u00edficas de API.</p> <p>Tambi\u00e9n est\u00e1 dise\u00f1ado para funcionar como una referencia futura para que puedas volver y ver exactamente lo que necesitas.</p>"},{"location":"tutorial/#ejecuta-el-codigo","title":"Ejecuta el c\u00f3digo","text":"<p>Todos los bloques de c\u00f3digo pueden ser copiados y usados directamente (de hecho, son archivos Python probados).</p> <p>Para ejecutar cualquiera de los ejemplos, copia el c\u00f3digo a un archivo <code>main.py</code>, y comienza <code>readyapi dev</code> con:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using path &lt;font color=\"#3465A4\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Resolved absolute path &lt;font color=\"#75507B\"&gt;/home/user/code/awesomeapp/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Searching for package file structure from directories with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Python module file&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                      \u2502\n \u2502  \ud83d\udc0d main.py          \u2502\n \u2502                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing module &lt;font color=\"#4E9A06\"&gt;main&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Found importable ReadyAPI app\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Importable ReadyAPI app&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                          \u2502\n \u2502  &lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;from&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; main &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;import&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; app&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;  &lt;/span&gt;  \u2502\n \u2502                          \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using import string &lt;font color=\"#8AE234\"&gt;&lt;b&gt;main:app&lt;/b&gt;&lt;/font&gt;\n\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Serving at: http://127.0.0.1:8000                  \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  API docs: http://127.0.0.1:8000/docs               \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Running in development mode, for production use:   \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#555753\"&gt;&lt;b&gt;readyapi run&lt;/b&gt;&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;                                        \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;&lt;/span&gt;\n\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Will watch for changes in these directories: [&amp;apos;/home/user/code/awesomeapp&amp;apos;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://127.0.0.1:8000&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started reloader process [&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;2265862&lt;/b&gt;&lt;/font&gt;] using &lt;font color=\"#34E2E2\"&gt;&lt;b&gt;WatchFiles&lt;/b&gt;&lt;/font&gt;\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;2265873&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;/pre&gt;\n</code></pre> <p>Es ALTAMENTE recomendable que escribas o copies el c\u00f3digo, lo edites y lo ejecutes localmente.</p> <p>Usarlo en tu editor es lo que realmente te muestra los beneficios de ReadyAPI, al ver cu\u00e1n poco c\u00f3digo tienes que escribir, todos los chequeos de tipos, autocompletado, etc.</p>"},{"location":"tutorial/#instalar-readyapi","title":"Instalar ReadyAPI","text":"<p>El primer paso es instalar ReadyAPI.</p> <p>Aseg\u00farate de crear un entorno virtual, act\u00edvalo, y luego instala ReadyAPI:</p> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Nota</p> <p>Cuando instalas con <code>pip install \"readyapi[standard]\"</code> viene con algunas dependencias opcionales est\u00e1ndar por defecto.</p> <p>Si no quieres tener esas dependencias opcionales, en su lugar puedes instalar <code>pip install readyapi</code>.</p>"},{"location":"tutorial/#guia-avanzada-del-usuario","title":"Gu\u00eda Avanzada del Usuario","text":"<p>Tambi\u00e9n hay una Gu\u00eda Avanzada del Usuario que puedes leer despu\u00e9s de esta Tutorial - Gu\u00eda del Usuario.</p> <p>La Gu\u00eda Avanzada del Usuario se basa en esta, utiliza los mismos conceptos y te ense\u00f1a algunas funcionalidades adicionales.</p> <p>Pero primero deber\u00edas leer la Tutorial - Gu\u00eda del Usuario (lo que est\u00e1s leyendo ahora mismo).</p> <p>Est\u00e1 dise\u00f1ada para que puedas construir una aplicaci\u00f3n completa solo con la Tutorial - Gu\u00eda del Usuario, y luego extenderla de diferentes maneras, dependiendo de tus necesidades, utilizando algunas de las ideas adicionales de la Gu\u00eda Avanzada del Usuario.</p>"},{"location":"tutorial/background-tasks/","title":"Tareas en Segundo Plano","text":"<p>Puedes definir tareas en segundo plano para que se ejecuten despu\u00e9s de devolver un response.</p> <p>Esto es \u00fatil para operaciones que necesitan ocurrir despu\u00e9s de un request, pero para las que el cliente realmente no necesita esperar a que la operaci\u00f3n termine antes de recibir el response.</p> <p>Esto incluye, por ejemplo:</p> <ul> <li>Notificaciones por email enviadas despu\u00e9s de realizar una acci\u00f3n:</li> <li>Como conectarse a un servidor de email y enviar un email tiende a ser \"lento\" (varios segundos), puedes devolver el response de inmediato y enviar la notificaci\u00f3n por email en segundo plano.</li> <li>Procesamiento de datos:</li> <li>Por ejemplo, supongamos que recibes un archivo que debe pasar por un proceso lento, puedes devolver un response de \"Accepted\" (HTTP 202) y procesar el archivo en segundo plano.</li> </ul>"},{"location":"tutorial/background-tasks/#usando-backgroundtasks","title":"Usando <code>BackgroundTasks</code>","text":"<p>Primero, importa <code>BackgroundTasks</code> y define un par\u00e1metro en tu path operation function con una declaraci\u00f3n de tipo de <code>BackgroundTasks</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p>ReadyAPI crear\u00e1 el objeto de tipo <code>BackgroundTasks</code> por ti y lo pasar\u00e1 como ese par\u00e1metro.</p>"},{"location":"tutorial/background-tasks/#crear-una-funcion-de-tarea","title":"Crear una funci\u00f3n de tarea","text":"<p>Crea una funci\u00f3n para que se ejecute como la tarea en segundo plano.</p> <p>Es solo una funci\u00f3n est\u00e1ndar que puede recibir par\u00e1metros.</p> <p>Puede ser una funci\u00f3n <code>async def</code> o una funci\u00f3n normal <code>def</code>, ReadyAPI sabr\u00e1 c\u00f3mo manejarla correctamente.</p> <p>En este caso, la funci\u00f3n de tarea escribir\u00e1 en un archivo (simulando el env\u00edo de un email).</p> <p>Y como la operaci\u00f3n de escritura no usa <code>async</code> y <code>await</code>, definimos la funci\u00f3n con un <code>def</code> normal:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre>"},{"location":"tutorial/background-tasks/#agregar-la-tarea-en-segundo-plano","title":"Agregar la tarea en segundo plano","text":"<p>Dentro de tu path operation function, pasa tu funci\u00f3n de tarea al objeto de background tasks con el m\u00e9todo <code>.add_task()</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p><code>.add_task()</code> recibe como argumentos:</p> <ul> <li>Una funci\u00f3n de tarea para ejecutar en segundo plano (<code>write_notification</code>).</li> <li>Cualquier secuencia de argumentos que deba pasarse a la funci\u00f3n de tarea en orden (<code>email</code>).</li> <li>Cualquier argumento de palabras clave que deba pasarse a la funci\u00f3n de tarea (<code>message=\"some notification\"</code>).</li> </ul>"},{"location":"tutorial/background-tasks/#inyeccion-de-dependencias","title":"Inyecci\u00f3n de Dependencias","text":"<p>Usar <code>BackgroundTasks</code> tambi\u00e9n funciona con el sistema de inyecci\u00f3n de dependencias, puedes declarar un par\u00e1metro de tipo <code>BackgroundTasks</code> en varios niveles: en una path operation function, en una dependencia (dependable), en una sub-dependencia, etc.</p> <p>ReadyAPI sabe qu\u00e9 hacer en cada caso y c\u00f3mo reutilizar el mismo objeto, de modo que todas las tareas en segundo plano se combinan y ejecutan en segundo plano despu\u00e9s:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>En este ejemplo, los mensajes se escribir\u00e1n en el archivo <code>log.txt</code> despu\u00e9s de que se env\u00ede el response.</p> <p>Si hay un query en el request, se escribir\u00e1 en el log en una tarea en segundo plano.</p> <p>Y luego otra tarea en segundo plano generada en la path operation function escribir\u00e1 un mensaje usando el par\u00e1metro de path <code>email</code>.</p>"},{"location":"tutorial/background-tasks/#detalles-tecnicos","title":"Detalles T\u00e9cnicos","text":"<p>La clase <code>BackgroundTasks</code> proviene directamente de <code>starlette.background</code>.</p> <p>Se importa/incluye directamente en ReadyAPI para que puedas importarla desde <code>readyapi</code> y evitar importar accidentalmente la alternativa <code>BackgroundTask</code> (sin la <code>s</code> al final) de <code>starlette.background</code>.</p> <p>Al usar solo <code>BackgroundTasks</code> (y no <code>BackgroundTask</code>), es posible usarla como un par\u00e1metro de path operation function y dejar que ReadyAPI maneje el resto por ti, tal como cuando usas el objeto <code>Request</code> directamente.</p> <p>Todav\u00eda es posible usar <code>BackgroundTask</code> solo en ReadyAPI, pero debes crear el objeto en tu c\u00f3digo y devolver una <code>Response</code> de Starlette incluy\u00e9ndolo.</p> <p>Puedes ver m\u00e1s detalles en la documentaci\u00f3n oficial de Starlette sobre Background Tasks.</p>"},{"location":"tutorial/background-tasks/#advertencia","title":"Advertencia","text":"<p>Si necesitas realizar una computaci\u00f3n intensa en segundo plano y no necesariamente necesitas que se ejecute por el mismo proceso (por ejemplo, no necesitas compartir memoria, variables, etc.), podr\u00edas beneficiarte del uso de otras herramientas m\u00e1s grandes como Celery.</p> <p>Tienden a requerir configuraciones m\u00e1s complejas, un gestor de cola de mensajes/trabajos, como RabbitMQ o Redis, pero te permiten ejecutar tareas en segundo plano en m\u00faltiples procesos, y especialmente, en m\u00faltiples servidores.</p> <p>Pero si necesitas acceder a variables y objetos de la misma app de ReadyAPI, o necesitas realizar peque\u00f1as tareas en segundo plano (como enviar una notificaci\u00f3n por email), simplemente puedes usar <code>BackgroundTasks</code>.</p>"},{"location":"tutorial/background-tasks/#resumen","title":"Resumen","text":"<p>Importa y usa <code>BackgroundTasks</code> con par\u00e1metros en path operation functions y dependencias para agregar tareas en segundo plano.</p>"},{"location":"tutorial/bigger-applications/","title":"Aplicaciones m\u00e1s grandes - M\u00faltiples archivos","text":"<p>Si est\u00e1s construyendo una aplicaci\u00f3n o una API web, rara vez podr\u00e1s poner todo en un solo archivo.</p> <p>ReadyAPI proporciona una herramienta conveniente para estructurar tu aplicaci\u00f3n manteniendo toda la flexibilidad.</p> <p>Informaci\u00f3n</p> <p>Si vienes de Flask, esto ser\u00eda el equivalente a los Blueprints de Flask.</p>"},{"location":"tutorial/bigger-applications/#un-ejemplo-de-estructura-de-archivos","title":"Un ejemplo de estructura de archivos","text":"<p>Digamos que tienes una estructura de archivos como esta:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py\n</code></pre> <p>Consejo</p> <p>Hay varios archivos <code>__init__.py</code>: uno en cada directorio o subdirectorio.</p> <p>Esto es lo que permite importar c\u00f3digo de un archivo a otro.</p> <p>Por ejemplo, en <code>app/main.py</code> podr\u00edas tener una l\u00ednea como:</p> <pre><code>from app.routers import items\n</code></pre> <ul> <li>El directorio <code>app</code> contiene todo. Y tiene un archivo vac\u00edo <code>app/__init__.py</code>, por lo que es un \"paquete de Python\" (una colecci\u00f3n de \"m\u00f3dulos de Python\"): <code>app</code>.</li> <li>Contiene un archivo <code>app/main.py</code>. Como est\u00e1 dentro de un paquete de Python (un directorio con un archivo <code>__init__.py</code>), es un \"m\u00f3dulo\" de ese paquete: <code>app.main</code>.</li> <li>Tambi\u00e9n hay un archivo <code>app/dependencies.py</code>, al igual que <code>app/main.py</code>, es un \"m\u00f3dulo\": <code>app.dependencies</code>.</li> <li>Hay un subdirectorio <code>app/routers/</code> con otro archivo <code>__init__.py</code>, por lo que es un \"subpaquete de Python\": <code>app.routers</code>.</li> <li>El archivo <code>app/routers/items.py</code> est\u00e1 dentro de un paquete, <code>app/routers/</code>, por lo que es un subm\u00f3dulo: <code>app.routers.items</code>.</li> <li>Lo mismo con <code>app/routers/users.py</code>, es otro subm\u00f3dulo: <code>app.routers.users</code>.</li> <li>Tambi\u00e9n hay un subdirectorio <code>app/internal/</code> con otro archivo <code>__init__.py</code>, por lo que es otro \"subpaquete de Python\": <code>app.internal</code>.</li> <li>Y el archivo <code>app/internal/admin.py</code> es otro subm\u00f3dulo: <code>app.internal.admin</code>.</li> </ul> <p></p> <p>La misma estructura de archivos con comentarios:</p> <pre><code>.\n\u251c\u2500\u2500 app                  # \"app\" es un paquete de Python\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py      # este archivo hace que \"app\" sea un \"paquete de Python\"\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py          # m\u00f3dulo \"main\", por ejemplo import app.main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py  # m\u00f3dulo \"dependencies\", por ejemplo import app.dependencies\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers          # \"routers\" es un \"subpaquete de Python\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py  # hace que \"routers\" sea un \"subpaquete de Python\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py     # subm\u00f3dulo \"items\", por ejemplo import app.routers.items\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py     # subm\u00f3dulo \"users\", por ejemplo import app.routers.users\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal         # \"internal\" es un \"subpaquete de Python\"\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py  # hace que \"internal\" sea un \"subpaquete de Python\"\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py     # subm\u00f3dulo \"admin\", por ejemplo import app.internal.admin\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter","title":"<code>APIRouter</code>","text":"<p>Digamos que el archivo dedicado solo a manejar usuarios es el subm\u00f3dulo en <code>/app/routers/users.py</code>.</p> <p>Quieres tener las path operations relacionadas con tus usuarios separadas del resto del c\u00f3digo, para mantenerlo organizado.</p> <p>Pero todav\u00eda es parte de la misma aplicaci\u00f3n/web API de ReadyAPI (es parte del mismo \"paquete de Python\").</p> <p>Puedes crear las path operations para ese m\u00f3dulo usando <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#importar-apirouter","title":"Importar <code>APIRouter</code>","text":"<p>Lo importas y creas una \"instance\" de la misma manera que lo har\u00edas con la clase <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/bigger-applications/#path-operations-con-apirouter","title":"Path operations con <code>APIRouter</code>","text":"<p>Y luego lo usas para declarar tus path operations.</p> <p>\u00dasalo de la misma manera que usar\u00edas la clase <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre> <p>Puedes pensar en <code>APIRouter</code> como una clase \"mini <code>ReadyAPI</code>\".</p> <p>Se soportan todas las mismas opciones.</p> <p>Todos los mismos <code>parameters</code>, <code>responses</code>, <code>dependencies</code>, <code>tags</code>, etc.</p> <p>Consejo</p> <p>En este ejemplo, la variable se llama <code>router</code>, pero puedes nombrarla como quieras.</p> <p>Vamos a incluir este <code>APIRouter</code> en la aplicaci\u00f3n principal de <code>ReadyAPI</code>, pero primero, revisemos las dependencias y otro <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#dependencias","title":"Dependencias","text":"<p>Vemos que vamos a necesitar algunas dependencias usadas en varios lugares de la aplicaci\u00f3n.</p> <p>As\u00ed que las ponemos en su propio m\u00f3dulo <code>dependencies</code> (<code>app/dependencies.py</code>).</p> <p>Ahora utilizaremos una dependencia simple para leer un encabezado <code>X-Token</code> personalizado:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated app/dependencies.py<pre><code>from typing import Annotated\n\nfrom readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Consejo</p> <p>Preferiblemente usa la versi\u00f3n <code>Annotated</code> si es posible.</p> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Consejo</p> <p>Estamos usando un encabezado inventado para simplificar este ejemplo.</p> <p>Pero en casos reales obtendr\u00e1s mejores resultados usando las utilidades de Seguridad integradas.</p>"},{"location":"tutorial/bigger-applications/#otro-modulo-con-apirouter","title":"Otro m\u00f3dulo con <code>APIRouter</code>","text":"<p>Digamos que tambi\u00e9n tienes los endpoints dedicados a manejar \"items\" de tu aplicaci\u00f3n en el m\u00f3dulo <code>app/routers/items.py</code>.</p> <p>Tienes path operations para:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>Es toda la misma estructura que con <code>app/routers/users.py</code>.</p> <p>Pero queremos ser m\u00e1s inteligentes y simplificar un poco el c\u00f3digo.</p> <p>Sabemos que todas las path operations en este m\u00f3dulo tienen el mismo:</p> <ul> <li>Prefijo de path: <code>/items</code>.</li> <li><code>tags</code>: (solo una etiqueta: <code>items</code>).</li> <li><code>responses</code> extra.</li> <li><code>dependencies</code>: todas necesitan esa dependencia <code>X-Token</code> que creamos.</li> </ul> <p>Entonces, en lugar de agregar todo eso a cada path operation, podemos agregarlo al <code>APIRouter</code>.</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Como el path de cada path operation tiene que empezar con <code>/</code>, como en:</p> <pre><code>@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    ...\n</code></pre> <p>...el prefijo no debe incluir un <code>/</code> final.</p> <p>As\u00ed que, el prefijo en este caso es <code>/items</code>.</p> <p>Tambi\u00e9n podemos agregar una lista de <code>tags</code> y <code>responses</code> extra que se aplicar\u00e1n a todas las path operations incluidas en este router.</p> <p>Y podemos agregar una lista de <code>dependencies</code> que se a\u00f1adir\u00e1 a todas las path operations en el router y se ejecutar\u00e1n/solucionar\u00e1n por cada request que les haga.</p> <p>Consejo</p> <p>Nota que, al igual que dependencias en decoradores de path operations, ning\u00fan valor ser\u00e1 pasado a tu path operation function.</p> <p>El resultado final es que los paths de item son ahora:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>...como pretend\u00edamos.</p> <ul> <li>Ser\u00e1n marcados con una lista de tags que contiene un solo string <code>\"items\"</code>.</li> <li>Estos \"tags\" son especialmente \u00fatiles para los sistemas de documentaci\u00f3n interactiva autom\u00e1tica (usando OpenAPI).</li> <li>Todos incluir\u00e1n las <code>responses</code> predefinidas.</li> <li>Todas estas path operations tendr\u00e1n la lista de <code>dependencies</code> evaluadas/ejecutadas antes de ellas.</li> <li>Si tambi\u00e9n declaras dependencias en una path operation espec\u00edfica, tambi\u00e9n se ejecutar\u00e1n.</li> <li>Las dependencias del router se ejecutan primero, luego las dependencias en el decorador, y luego las dependencias de par\u00e1metros normales.</li> <li>Tambi\u00e9n puedes agregar dependencias de <code>Security</code> con <code>scopes</code>.</li> </ul> <p>Consejo</p> <p>Tener <code>dependencies</code> en el <code>APIRouter</code> puede ser usado, por ejemplo, para requerir autenticaci\u00f3n para un grupo completo de path operations. Incluso si las dependencias no son a\u00f1adidas individualmente a cada una de ellas.</p> <p>Revisa</p> <p>Los par\u00e1metros <code>prefix</code>, <code>tags</code>, <code>responses</code>, y <code>dependencies</code> son (como en muchos otros casos) solo una funcionalidad de ReadyAPI para ayudarte a evitar la duplicaci\u00f3n de c\u00f3digo.</p>"},{"location":"tutorial/bigger-applications/#importar-las-dependencias","title":"Importar las dependencias","text":"<p>Este c\u00f3digo vive en el m\u00f3dulo <code>app.routers.items</code>, el archivo <code>app/routers/items.py</code>.</p> <p>Y necesitamos obtener la funci\u00f3n de dependencia del m\u00f3dulo <code>app.dependencies</code>, el archivo <code>app/dependencies.py</code>.</p> <p>As\u00ed que usamos un import relativo con <code>..</code> para las dependencias:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#como-funcionan-los-imports-relativos","title":"C\u00f3mo funcionan los imports relativos","text":"<p>Consejo</p> <p>Si sabes perfectamente c\u00f3mo funcionan los imports, contin\u00faa a la siguiente secci\u00f3n.</p> <p>Un solo punto <code>.</code>, como en:</p> <pre><code>from .dependencies import get_token_header\n</code></pre> <p>significar\u00eda:</p> <ul> <li>Partiendo en el mismo paquete en el que este m\u00f3dulo (el archivo <code>app/routers/items.py</code>) habita (el directorio <code>app/routers/</code>)...</li> <li>busca el m\u00f3dulo <code>dependencies</code> (un archivo imaginario en <code>app/routers/dependencies.py</code>)...</li> <li>y de \u00e9l, importa la funci\u00f3n <code>get_token_header</code>.</li> </ul> <p>Pero ese archivo no existe, nuestras dependencias est\u00e1n en un archivo en <code>app/dependencies.py</code>.</p> <p>Recuerda c\u00f3mo se ve nuestra estructura de aplicaci\u00f3n/archivo:</p> <p></p> <p>Los dos puntos <code>..</code>, como en:</p> <pre><code>from ..dependencies import get_token_header\n</code></pre> <p>significan:</p> <ul> <li>Partiendo en el mismo paquete en el que este m\u00f3dulo (el archivo <code>app/routers/items.py</code>) habita (el directorio <code>app/routers/</code>)...</li> <li>ve al paquete padre (el directorio <code>app/</code>)...</li> <li>y all\u00ed, busca el m\u00f3dulo <code>dependencies</code> (el archivo en <code>app/dependencies.py</code>)...</li> <li>y de \u00e9l, importa la funci\u00f3n <code>get_token_header</code>.</li> </ul> <p>\u00a1Eso funciona correctamente! \ud83c\udf89</p> <p>De la misma manera, si hubi\u00e9ramos usado tres puntos <code>...</code>, como en:</p> <pre><code>from ...dependencies import get_token_header\n</code></pre> <p>eso significar\u00eda:</p> <ul> <li>Partiendo en el mismo paquete en el que este m\u00f3dulo (el archivo <code>app/routers/items.py</code>) habita (el directorio <code>app/routers/</code>)...</li> <li>ve al paquete padre (el directorio <code>app/</code>)...</li> <li>luego ve al paquete padre de ese paquete (no hay paquete padre, <code>app</code> es el nivel superior \ud83d\ude31)...</li> <li>y all\u00ed, busca el m\u00f3dulo <code>dependencies</code> (el archivo en <code>app/dependencies.py</code>)...</li> <li>y de \u00e9l, importa la funci\u00f3n <code>get_token_header</code>.</li> </ul> <p>Eso se referir\u00eda a alg\u00fan paquete arriba de <code>app/</code>, con su propio archivo <code>__init__.py</code>, etc. Pero no tenemos eso. As\u00ed que, eso lanzar\u00eda un error en nuestro ejemplo. \ud83d\udea8</p> <p>Pero ahora sabes c\u00f3mo funciona, para que puedas usar imports relativos en tus propias aplicaciones sin importar cu\u00e1n complejas sean. \ud83e\udd13</p>"},{"location":"tutorial/bigger-applications/#agregar-algunos-tags-responses-y-dependencies-personalizados","title":"Agregar algunos <code>tags</code>, <code>responses</code>, y <code>dependencies</code> personalizados","text":"<p>No estamos agregando el prefijo <code>/items</code> ni los <code>tags=[\"items\"]</code> a cada path operation porque los hemos a\u00f1adido al <code>APIRouter</code>.</p> <p>Pero a\u00fan podemos agregar m\u00e1s <code>tags</code> que se aplicar\u00e1n a una path operation espec\u00edfica, y tambi\u00e9n algunas <code>responses</code> extra espec\u00edficas para esa path operation:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Consejo</p> <p>Esta \u00faltima path operation tendr\u00e1 la combinaci\u00f3n de tags: <code>[\"items\", \"custom\"]</code>.</p> <p>Y tambi\u00e9n tendr\u00e1 ambas responses en la documentaci\u00f3n, una para <code>404</code> y otra para <code>403</code>.</p>"},{"location":"tutorial/bigger-applications/#el-readyapi-principal","title":"El <code>ReadyAPI</code> principal","text":"<p>Ahora, veamos el m\u00f3dulo en <code>app/main.py</code>.</p> <p>Aqu\u00ed es donde importas y usas la clase <code>ReadyAPI</code>.</p> <p>Este ser\u00e1 el archivo principal en tu aplicaci\u00f3n que conecta todo.</p>"},{"location":"tutorial/bigger-applications/#importar-readyapi","title":"Importar <code>ReadyAPI</code>","text":"<p>Importas y creas una clase <code>ReadyAPI</code> como de costumbre.</p> <p>Y podemos incluso declarar dependencias globales que se combinar\u00e1n con las dependencias para cada <code>APIRouter</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#importar-el-apirouter","title":"Importar el <code>APIRouter</code>","text":"<p>Ahora importamos los otros subm\u00f3dulos que tienen <code>APIRouter</code>s:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Como los archivos <code>app/routers/users.py</code> y <code>app/routers/items.py</code> son subm\u00f3dulos que son parte del mismo paquete de Python <code>app</code>, podemos usar un solo punto <code>.</code> para importarlos usando \"imports relativos\".</p>"},{"location":"tutorial/bigger-applications/#como-funciona-la-importacion","title":"C\u00f3mo funciona la importaci\u00f3n","text":"<p>La secci\u00f3n:</p> <pre><code>from .routers import items, users\n</code></pre> <p>significa:</p> <ul> <li>Partiendo en el mismo paquete en el que este m\u00f3dulo (el archivo <code>app/main.py</code>) habita (el directorio <code>app/</code>)...</li> <li>busca el subpaquete <code>routers</code> (el directorio en <code>app/routers/</code>)...</li> <li>y de \u00e9l, importa el subm\u00f3dulo <code>items</code> (el archivo en <code>app/routers/items.py</code>) y <code>users</code> (el archivo en <code>app/routers/users.py</code>)...</li> </ul> <p>El m\u00f3dulo <code>items</code> tendr\u00e1 una variable <code>router</code> (<code>items.router</code>). Este es el mismo que creamos en el archivo <code>app/routers/items.py</code>, es un objeto <code>APIRouter</code>.</p> <p>Y luego hacemos lo mismo para el m\u00f3dulo <code>users</code>.</p> <p>Tambi\u00e9n podr\u00edamos importarlos as\u00ed:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Informaci\u00f3n</p> <p>La primera versi\u00f3n es un \"import relativo\":</p> <pre><code>from .routers import items, users\n</code></pre> <p>La segunda versi\u00f3n es un \"import absoluto\":</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Para aprender m\u00e1s sobre Paquetes y M\u00f3dulos de Python, lee la documentaci\u00f3n oficial de Python sobre M\u00f3dulos.</p>"},{"location":"tutorial/bigger-applications/#evitar-colisiones-de-nombres","title":"Evitar colisiones de nombres","text":"<p>Estamos importando el subm\u00f3dulo <code>items</code> directamente, en lugar de importar solo su variable <code>router</code>.</p> <p>Esto se debe a que tambi\u00e9n tenemos otra variable llamada <code>router</code> en el subm\u00f3dulo <code>users</code>.</p> <p>Si hubi\u00e9ramos importado uno despu\u00e9s del otro, como:</p> <pre><code>from .routers.items import router\nfrom .routers.users import router\n</code></pre> <p>el <code>router</code> de <code>users</code> sobrescribir\u00eda el de <code>items</code> y no podr\u00edamos usarlos al mismo tiempo.</p> <p>As\u00ed que, para poder usar ambos en el mismo archivo, importamos los subm\u00f3dulos directamente:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#incluir-los-apirouters-para-users-y-items","title":"Incluir los <code>APIRouter</code>s para <code>users</code> y <code>items</code>","text":"<p>Ahora, incluyamos los <code>router</code>s de los subm\u00f3dulos <code>users</code> y <code>items</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Informaci\u00f3n</p> <p><code>users.router</code> contiene el <code>APIRouter</code> dentro del archivo <code>app/routers/users.py</code>.</p> <p>Y <code>items.router</code> contiene el <code>APIRouter</code> dentro del archivo <code>app/routers/items.py</code>.</p> <p>Con <code>app.include_router()</code> podemos agregar cada <code>APIRouter</code> a la aplicaci\u00f3n principal de <code>ReadyAPI</code>.</p> <p>Incluir\u00e1 todas las rutas de ese router como parte de ella.</p> <p>Detalles T\u00e9cnicos</p> <p>En realidad crear\u00e1 internamente una path operation para cada path operation que fue declarada en el <code>APIRouter</code>.</p> <p>As\u00ed, detr\u00e1s de escena, funcionar\u00e1 como si todo fuera la misma \u00fanica aplicaci\u00f3n.</p> <p>Revisa</p> <p>No tienes que preocuparte por el rendimiento al incluir routers.</p> <p>Esto tomar\u00e1 microsegundos y solo suceder\u00e1 al inicio.</p> <p>As\u00ed que no afectar\u00e1 el rendimiento. \u26a1</p>"},{"location":"tutorial/bigger-applications/#incluir-un-apirouter-con-un-prefix-tags-responses-y-dependencies-personalizados","title":"Incluir un <code>APIRouter</code> con un <code>prefix</code>, <code>tags</code>, <code>responses</code>, y <code>dependencies</code> personalizados","text":"<p>Ahora, imaginemos que tu organizaci\u00f3n te dio el archivo <code>app/internal/admin.py</code>.</p> <p>Contiene un <code>APIRouter</code> con algunas path operations de administraci\u00f3n que tu organizaci\u00f3n comparte entre varios proyectos.</p> <p>Para este ejemplo ser\u00e1 s\u00faper simple. Pero digamos que porque est\u00e1 compartido con otros proyectos en la organizaci\u00f3n, no podemos modificarlo y agregar un <code>prefix</code>, <code>dependencies</code>, <code>tags</code>, etc. directamente al <code>APIRouter</code>:</p> app/internal/admin.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n</code></pre> <p>Pero a\u00fan queremos configurar un <code>prefix</code> personalizado al incluir el <code>APIRouter</code> para que todas sus path operations comiencen con <code>/admin</code>, queremos asegurarlo con las <code>dependencies</code> que ya tenemos para este proyecto, y queremos incluir <code>tags</code> y <code>responses</code>.</p> <p>Podemos declarar todo eso sin tener que modificar el <code>APIRouter</code> original pasando esos par\u00e1metros a <code>app.include_router()</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>De esa manera, el <code>APIRouter</code> original permanecer\u00e1 sin modificar, por lo que a\u00fan podemos compartir ese mismo archivo <code>app/internal/admin.py</code> con otros proyectos en la organizaci\u00f3n.</p> <p>El resultado es que, en nuestra aplicaci\u00f3n, cada una de las path operations del m\u00f3dulo <code>admin</code> tendr\u00e1:</p> <ul> <li>El prefix <code>/admin</code>.</li> <li>El tag <code>admin</code>.</li> <li>La dependencia <code>get_token_header</code>.</li> <li>La response <code>418</code>. \ud83c\udf75</li> </ul> <p>Pero eso solo afectar\u00e1 a ese <code>APIRouter</code> en nuestra aplicaci\u00f3n, no en ning\u00fan otro c\u00f3digo que lo utilice.</p> <p>As\u00ed, por ejemplo, otros proyectos podr\u00edan usar el mismo <code>APIRouter</code> con un m\u00e9todo de autenticaci\u00f3n diferente.</p>"},{"location":"tutorial/bigger-applications/#incluir-una-path-operation","title":"Incluir una path operation","text":"<p>Tambi\u00e9n podemos agregar path operations directamente a la aplicaci\u00f3n de <code>ReadyAPI</code>.</p> <p>Aqu\u00ed lo hacemos... solo para mostrar que podemos \ud83e\udd37:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>y funcionar\u00e1 correctamente, junto con todas las otras path operations a\u00f1adidas con <code>app.include_router()</code>.</p> <p>Detalles Muy T\u00e9cnicos</p> <p>Nota: este es un detalle muy t\u00e9cnico que probablemente puedes simplemente omitir.</p> <p>Los <code>APIRouter</code>s no est\u00e1n \"montados\", no est\u00e1n aislados del resto de la aplicaci\u00f3n.</p> <p>Esto se debe a que queremos incluir sus path operations en el esquema de OpenAPI y las interfaces de usuario.</p> <p>Como no podemos simplemente aislarlos y \"montarlos\" independientemente del resto, se \"clonan\" las path operations (se vuelven a crear), no se incluyen directamente.</p>"},{"location":"tutorial/bigger-applications/#revisa-la-documentacion-automatica-de-la-api","title":"Revisa la documentaci\u00f3n autom\u00e1tica de la API","text":"<p>Ahora, ejecuta tu aplicaci\u00f3n:</p> <pre><code>$ readyapi dev app/main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Y abre la documentaci\u00f3n en http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s la documentaci\u00f3n autom\u00e1tica de la API, incluyendo los paths de todos los subm\u00f3dulos, usando los paths correctos (y prefijos) y las tags correctas:</p> <p></p>"},{"location":"tutorial/bigger-applications/#incluir-el-mismo-router-multiples-veces-con-diferentes-prefix","title":"Incluir el mismo router m\u00faltiples veces con diferentes <code>prefix</code>","text":"<p>Tambi\u00e9n puedes usar <code>.include_router()</code> m\u00faltiples veces con el mismo router usando diferentes prefijos.</p> <p>Esto podr\u00eda ser \u00fatil, por ejemplo, para exponer la misma API bajo diferentes prefijos, por ejemplo, <code>/api/v1</code> y <code>/api/latest</code>.</p> <p>Este es un uso avanzado que quiz\u00e1s no necesites realmente, pero est\u00e1 all\u00ed en caso de que lo necesites.</p>"},{"location":"tutorial/bigger-applications/#incluir-un-apirouter-en-otro","title":"Incluir un <code>APIRouter</code> en otro","text":"<p>De la misma manera que puedes incluir un <code>APIRouter</code> en una aplicaci\u00f3n <code>ReadyAPI</code>, puedes incluir un <code>APIRouter</code> en otro <code>APIRouter</code> usando:</p> <pre><code>router.include_router(other_router)\n</code></pre> <p>Aseg\u00farate de hacerlo antes de incluir <code>router</code> en la aplicaci\u00f3n de <code>ReadyAPI</code>, para que las path operations de <code>other_router</code> tambi\u00e9n se incluyan.</p>"},{"location":"tutorial/body-fields/","title":"Body - Campos","text":"<p>De la misma manera que puedes declarar validaciones adicionales y metadatos en los par\u00e1metros de las path operation function con <code>Query</code>, <code>Path</code> y <code>Body</code>, puedes declarar validaciones y metadatos dentro de los modelos de Pydantic usando <code>Field</code> de Pydantic.</p>"},{"location":"tutorial/body-fields/#importar-field","title":"Importar <code>Field</code>","text":"<p>Primero, tienes que importarlo:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Advertencia</p> <p>F\u00edjate que <code>Field</code> se importa directamente desde <code>pydantic</code>, no desde <code>readyapi</code> como el resto (<code>Query</code>, <code>Path</code>, <code>Body</code>, etc).</p>"},{"location":"tutorial/body-fields/#declarar-atributos-del-modelo","title":"Declarar atributos del modelo","text":"<p>Despu\u00e9s puedes utilizar <code>Field</code> con los atributos del modelo:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p><code>Field</code> funciona de la misma manera que <code>Query</code>, <code>Path</code> y <code>Body</code>, tiene todos los mismos par\u00e1metros, etc.</p> <p>Detalles t\u00e9cnicos</p> <p>En realidad, <code>Query</code>, <code>Path</code> y otros que ver\u00e1s a continuaci\u00f3n crean objetos de subclases de una clase com\u00fan <code>Param</code>, que es a su vez una subclase de la clase <code>FieldInfo</code> de Pydantic.</p> <p>Y <code>Field</code> de Pydantic tambi\u00e9n regresa una instance de <code>FieldInfo</code>.</p> <p><code>Body</code> tambi\u00e9n devuelve objetos de una subclase de <code>FieldInfo</code> directamente. Y hay otros que ver\u00e1s m\u00e1s adelante que son subclases de la clase <code>Body</code>.</p> <p>Recuerda que cuando importas <code>Query</code>, <code>Path</code>, y otros desde <code>readyapi</code>, en realidad son funciones que devuelven clases especiales.</p> <p>Consejo</p> <p>Observa c\u00f3mo cada atributo del modelo con un tipo, un valor por defecto y <code>Field</code> tiene la misma estructura que un par\u00e1metro de una path operation function, con <code>Field</code> en lugar de <code>Path</code>, <code>Query</code> y <code>Body</code>.</p>"},{"location":"tutorial/body-fields/#agregar-informacion-extra","title":"Agregar informaci\u00f3n extra","text":"<p>Puedes declarar informaci\u00f3n extra en <code>Field</code>, <code>Query</code>, <code>Body</code>, etc. Y ser\u00e1 incluida en el JSON Schema generado.</p> <p>Aprender\u00e1s m\u00e1s sobre c\u00f3mo agregar informaci\u00f3n extra m\u00e1s adelante en la documentaci\u00f3n, cuando aprendamos a declarar ejemplos.</p> <p>Advertencia</p> <p>Las claves extra pasadas a <code>Field</code> tambi\u00e9n estar\u00e1n presentes en el esquema de OpenAPI resultante para tu aplicaci\u00f3n. Como estas claves no necesariamente tienen que ser parte de la especificaci\u00f3n de OpenAPI, algunas herramientas de OpenAPI, por ejemplo el validador de OpenAPI, podr\u00edan no funcionar con tu esquema generado.</p>"},{"location":"tutorial/body-fields/#resumen","title":"Resumen","text":"<p>Puedes utilizar <code>Field</code> de Pydantic para declarar validaciones adicionales y metadatos para los atributos del modelo.</p> <p>Tambi\u00e9n puedes usar los argumentos de palabra clave extra para pasar metadatos adicionales del JSON Schema.</p>"},{"location":"tutorial/body-multiple-params/","title":"Cuerpo - M\u00faltiples Par\u00e1metros","text":"<p>Ahora que hemos visto c\u00f3mo usar <code>Path</code> y <code>Query</code>, veamos usos m\u00e1s avanzados de las declaraciones del request body.</p>"},{"location":"tutorial/body-multiple-params/#mezclar-path-query-y-parametros-del-cuerpo","title":"Mezclar <code>Path</code>, <code>Query</code> y par\u00e1metros del cuerpo","text":"<p>Primero, por supuesto, puedes mezclar las declaraciones de par\u00e1metros de <code>Path</code>, <code>Query</code> y del request body libremente y ReadyAPI sabr\u00e1 qu\u00e9 hacer.</p> <p>Y tambi\u00e9n puedes declarar par\u00e1metros del cuerpo como opcionales, estableciendo el valor predeterminado a <code>None</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre>"},{"location":"tutorial/body-multiple-params/#multiples-parametros-del-cuerpo","title":"M\u00faltiples par\u00e1metros del cuerpo","text":"<p>Nota</p> <p>Ten en cuenta que, en este caso, el <code>item</code> que se tomar\u00eda del cuerpo es opcional. Ya que tiene un valor por defecto de <code>None</code>.</p>"},{"location":"tutorial/body-multiple-params/#multiples-parametros-del-cuerpo_1","title":"M\u00faltiples par\u00e1metros del cuerpo","text":"<p>En el ejemplo anterior, las path operations esperar\u00edan un cuerpo JSON con los atributos de un <code>Item</code>, como:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre> <p>Pero tambi\u00e9n puedes declarar m\u00faltiples par\u00e1metros del cuerpo, por ejemplo <code>item</code> y <code>user</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <p>En este caso, ReadyAPI notar\u00e1 que hay m\u00e1s de un par\u00e1metro del cuerpo en la funci\u00f3n (hay dos par\u00e1metros que son modelos de Pydantic).</p> <p>Entonces, usar\u00e1 los nombres de los par\u00e1metros como claves (nombres de campo) en el cuerpo, y esperar\u00e1 un cuerpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    }\n}\n</code></pre> <p>Nota</p> <p>Ten en cuenta que aunque el <code>item</code> se declar\u00f3 de la misma manera que antes, ahora se espera que est\u00e9 dentro del cuerpo con una clave <code>item</code>.</p> <p>ReadyAPI har\u00e1 la conversi\u00f3n autom\u00e1tica del request, de modo que el par\u00e1metro <code>item</code> reciba su contenido espec\u00edfico y lo mismo para <code>user</code>.</p> <p>Realizar\u00e1 la validaci\u00f3n de los datos compuestos, y los documentar\u00e1 as\u00ed para el esquema de OpenAPI y la documentaci\u00f3n autom\u00e1tica.</p>"},{"location":"tutorial/body-multiple-params/#valores-singulares-en-el-cuerpo","title":"Valores singulares en el cuerpo","text":"<p>De la misma manera que hay un <code>Query</code> y <code>Path</code> para definir datos extra para par\u00e1metros de query y path, ReadyAPI proporciona un equivalente <code>Body</code>.</p> <p>Por ejemplo, ampliando el modelo anterior, podr\u00edas decidir que deseas tener otra clave <code>importance</code> en el mismo cuerpo, adem\u00e1s de <code>item</code> y <code>user</code>.</p> <p>Si lo declaras tal cual, debido a que es un valor singular, ReadyAPI asumir\u00e1 que es un par\u00e1metro de query.</p> <p>Pero puedes instruir a ReadyAPI para que lo trate como otra clave del cuerpo usando <code>Body</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>En este caso, ReadyAPI esperar\u00e1 un cuerpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    },\n    \"importance\": 5\n}\n</code></pre> <p>Nuevamente, convertir\u00e1 los tipos de datos, validar\u00e1, documentar\u00e1, etc.</p>"},{"location":"tutorial/body-multiple-params/#multiples-parametros-de-cuerpo-y-query","title":"M\u00faltiples par\u00e1metros de cuerpo y query","text":"<p>Por supuesto, tambi\u00e9n puedes declarar par\u00e1metros adicionales de query siempre que lo necesites, adem\u00e1s de cualquier par\u00e1metro del cuerpo.</p> <p>Como, por defecto, los valores singulares se interpretan como par\u00e1metros de query, no tienes que a\u00f1adir expl\u00edcitamente un <code>Query</code>, solo puedes hacer:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>O en Python 3.10 y superior:</p> <pre><code>q: str | None = None\n</code></pre> <p>Por ejemplo:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informaci\u00f3n</p> <p><code>Body</code> tambi\u00e9n tiene todos los mismos par\u00e1metros de validaci\u00f3n y metadatos extras que <code>Query</code>, <code>Path</code> y otros que ver\u00e1s luego.</p>"},{"location":"tutorial/body-multiple-params/#embeber-un-solo-parametro-de-cuerpo","title":"Embeber un solo par\u00e1metro de cuerpo","text":"<p>Supongamos que solo tienes un \u00fanico par\u00e1metro de cuerpo <code>item</code> de un modelo Pydantic <code>Item</code>.</p> <p>Por defecto, ReadyAPI esperar\u00e1 su cuerpo directamente.</p> <p>Pero si deseas que espere un JSON con una clave <code>item</code> y dentro de ella los contenidos del modelo, como lo hace cuando declaras par\u00e1metros de cuerpo extra, puedes usar el par\u00e1metro especial <code>Body</code> <code>embed</code>:</p> <pre><code>item: Item = Body(embed=True)\n</code></pre> <p>como en:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>En este caso, ReadyAPI esperar\u00e1 un cuerpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    }\n}\n</code></pre> <p>en lugar de:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre>"},{"location":"tutorial/body-multiple-params/#resumen","title":"Resumen","text":"<p>Puedes a\u00f1adir m\u00faltiples par\u00e1metros de cuerpo a tu path operation function, aunque un request solo puede tener un \u00fanico cuerpo.</p> <p>Pero ReadyAPI lo manejar\u00e1, te dar\u00e1 los datos correctos en tu funci\u00f3n, y validar\u00e1 y documentar\u00e1 el esquema correcto en la path operation.</p> <p>Tambi\u00e9n puedes declarar valores singulares para ser recibidos como parte del cuerpo.</p> <p>Y puedes instruir a ReadyAPI para embeber el cuerpo en una clave incluso cuando solo hay un \u00fanico par\u00e1metro declarado.</p>"},{"location":"tutorial/body-nested-models/","title":"Cuerpo - Modelos Anidados","text":"<p>Con ReadyAPI, puedes definir, validar, documentar y usar modelos anidados de manera arbitraria (gracias a Pydantic).</p>"},{"location":"tutorial/body-nested-models/#campos-de-lista","title":"Campos de lista","text":"<p>Puedes definir un atributo como un subtipo. Por ejemplo, una <code>list</code> en Python:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Esto har\u00e1 que <code>tags</code> sea una lista, aunque no declare el tipo de los elementos de la lista.</p>"},{"location":"tutorial/body-nested-models/#campos-de-lista-con-parametro-de-tipo","title":"Campos de lista con par\u00e1metro de tipo","text":"<p>Pero Python tiene una forma espec\u00edfica de declarar listas con tipos internos, o \"par\u00e1metros de tipo\":</p>"},{"location":"tutorial/body-nested-models/#importar-list-de-typing","title":"Importar <code>List</code> de typing","text":"<p>En Python 3.9 y superior, puedes usar el <code>list</code> est\u00e1ndar para declarar estas anotaciones de tipo como veremos a continuaci\u00f3n. \ud83d\udca1</p> <p>Pero en versiones de Python anteriores a 3.9 (desde 3.6 en adelante), primero necesitas importar <code>List</code> del m\u00f3dulo <code>typing</code> est\u00e1ndar de Python:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#declarar-una-list-con-un-parametro-de-tipo","title":"Declarar una <code>list</code> con un par\u00e1metro de tipo","text":"<p>Para declarar tipos que tienen par\u00e1metros de tipo (tipos internos), como <code>list</code>, <code>dict</code>, <code>tuple</code>:</p> <ul> <li>Si est\u00e1s en una versi\u00f3n de Python inferior a 3.9, importa su versi\u00f3n equivalente del m\u00f3dulo <code>typing</code></li> <li>Pasa el/los tipo(s) interno(s) como \"par\u00e1metros de tipo\" usando corchetes: <code>[</code> y <code>]</code></li> </ul> <p>En Python 3.9 ser\u00eda:</p> <pre><code>my_list: list[str]\n</code></pre> <p>En versiones de Python anteriores a 3.9, ser\u00eda:</p> <pre><code>from typing import List\n\nmy_list: List[str]\n</code></pre> <p>Eso es toda la sintaxis est\u00e1ndar de Python para declaraciones de tipo.</p> <p>Usa esa misma sintaxis est\u00e1ndar para atributos de modelos con tipos internos.</p> <p>As\u00ed, en nuestro ejemplo, podemos hacer que <code>tags</code> sea espec\u00edficamente una \"lista de strings\":</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#tipos-de-conjunto","title":"Tipos de conjunto","text":"<p>Pero luego pensamos en ello, y nos damos cuenta de que los tags no deber\u00edan repetirse, probablemente ser\u00edan strings \u00fanicos.</p> <p>Y Python tiene un tipo de datos especial para conjuntos de elementos \u00fanicos, el <code>set</code>.</p> <p>Entonces podemos declarar <code>tags</code> como un conjunto de strings:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Con esto, incluso si recibes un request con datos duplicados, se convertir\u00e1 en un conjunto de elementos \u00fanicos.</p> <p>Y siempre que emitas esos datos, incluso si la fuente ten\u00eda duplicados, se emitir\u00e1 como un conjunto de elementos \u00fanicos.</p> <p>Y tambi\u00e9n se anotar\u00e1/documentar\u00e1 en consecuencia.</p>"},{"location":"tutorial/body-nested-models/#modelos-anidados","title":"Modelos Anidados","text":"<p>Cada atributo de un modelo Pydantic tiene un tipo.</p> <p>Pero ese tipo puede ser en s\u00ed mismo otro modelo Pydantic.</p> <p>As\u00ed que, puedes declarar \"objetos\" JSON anidados profundamente con nombres de atributos espec\u00edficos, tipos y validaciones.</p> <p>Todo eso, de manera arbitraria.</p>"},{"location":"tutorial/body-nested-models/#definir-un-submodelo","title":"Definir un submodelo","text":"<p>Por ejemplo, podemos definir un modelo <code>Image</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#usar-el-submodelo-como-tipo","title":"Usar el submodelo como tipo","text":"<p>Y luego podemos usarlo como el tipo de un atributo:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Esto significar\u00eda que ReadyAPI esperar\u00eda un cuerpo similar a:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\"rock\", \"metal\", \"bar\"],\n    \"image\": {\n        \"url\": \"http://example.com/baz.jpg\",\n        \"name\": \"The Foo live\"\n    }\n}\n</code></pre> <p>Nuevamente, haciendo solo esa declaraci\u00f3n, con ReadyAPI obtienes:</p> <ul> <li>Soporte de editor (autocompletado, etc.), incluso para modelos anidados</li> <li>Conversi\u00f3n de datos</li> <li>Validaci\u00f3n de datos</li> <li>Documentaci\u00f3n autom\u00e1tica</li> </ul>"},{"location":"tutorial/body-nested-models/#tipos-especiales-y-validacion","title":"Tipos especiales y validaci\u00f3n","text":"<p>Adem\u00e1s de tipos singulares normales como <code>str</code>, <code>int</code>, <code>float</code>, etc., puedes usar tipos singulares m\u00e1s complejos que heredan de <code>str</code>.</p> <p>Para ver todas las opciones que tienes, revisa el Overview de Tipos de Pydantic. Ver\u00e1s algunos ejemplos en el siguiente cap\u00edtulo.</p> <p>Por ejemplo, como en el modelo <code>Image</code> tenemos un campo <code>url</code>, podemos declararlo como una instance de <code>HttpUrl</code> de Pydantic en lugar de un <code>str</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>El string ser\u00e1 verificado para ser una URL v\u00e1lida, y documentado en JSON Schema / OpenAPI como tal.</p>"},{"location":"tutorial/body-nested-models/#atributos-con-listas-de-submodelos","title":"Atributos con listas de submodelos","text":"<p>Tambi\u00e9n puedes usar modelos Pydantic como subtipos de <code>list</code>, <code>set</code>, etc.:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Esto esperar\u00e1 (convertir\u00e1, validar\u00e1, documentar\u00e1, etc.) un cuerpo JSON como:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\n        \"rock\",\n        \"metal\",\n        \"bar\"\n    ],\n    \"images\": [\n        {\n            \"url\": \"http://example.com/baz.jpg\",\n            \"name\": \"The Foo live\"\n        },\n        {\n            \"url\": \"http://example.com/dave.jpg\",\n            \"name\": \"The Baz\"\n        }\n    ]\n}\n</code></pre> <p>Informaci\u00f3n</p> <p>Nota c\u00f3mo la clave <code>images</code> ahora tiene una lista de objetos de imagen.</p>"},{"location":"tutorial/body-nested-models/#modelos-anidados-profundamente","title":"Modelos anidados profundamente","text":"<p>Puedes definir modelos anidados tan profundamente como desees:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <p>Informaci\u00f3n</p> <p>Observa c\u00f3mo <code>Offer</code> tiene una lista de <code>Item</code>s, que a su vez tienen una lista opcional de <code>Image</code>s</p>"},{"location":"tutorial/body-nested-models/#cuerpos-de-listas-puras","title":"Cuerpos de listas puras","text":"<p>Si el valor superior del cuerpo JSON que esperas es un <code>array</code> JSON (una <code>list</code> en Python), puedes declarar el tipo en el par\u00e1metro de la funci\u00f3n, al igual que en los modelos Pydantic:</p> <pre><code>images: List[Image]\n</code></pre> <p>o en Python 3.9 y superior:</p> <pre><code>images: list[Image]\n</code></pre> <p>como en:</p> Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    return images\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n</code></pre>"},{"location":"tutorial/body-nested-models/#soporte-de-editor-en-todas-partes","title":"Soporte de editor en todas partes","text":"<p>Y obtienes soporte de editor en todas partes.</p> <p>Incluso para elementos dentro de listas:</p> <p></p> <p>No podr\u00edas obtener este tipo de soporte de editor si estuvieras trabajando directamente con <code>dict</code> en lugar de modelos Pydantic.</p> <p>Pero tampoco tienes que preocuparte por ellos, los <code>dicts</code> entrantes se convierten autom\u00e1ticamente y tu salida se convierte autom\u00e1ticamente a JSON tambi\u00e9n.</p>"},{"location":"tutorial/body-nested-models/#cuerpos-de-dicts-arbitrarios","title":"Cuerpos de <code>dict</code>s arbitrarios","text":"<p>Tambi\u00e9n puedes declarar un cuerpo como un <code>dict</code> con claves de alg\u00fan tipo y valores de alg\u00fan otro tipo.</p> <p>De esta manera, no tienes que saber de antemano cu\u00e1les son los nombres v\u00e1lidos de campo/atributo (como ser\u00eda el caso con modelos Pydantic).</p> <p>Esto ser\u00eda \u00fatil si deseas recibir claves que a\u00fan no conoces.</p> <p>Otro caso \u00fatil es cuando deseas tener claves de otro tipo (por ejemplo, <code>int</code>).</p> <p>Eso es lo que vamos a ver aqu\u00ed.</p> <p>En este caso, aceptar\u00edas cualquier <code>dict</code> siempre que tenga claves <code>int</code> con valores <code>float</code>:</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n</code></pre> <p>Consejo</p> <p>Ten en cuenta que JSON solo admite <code>str</code> como claves.</p> <p>Pero Pydantic tiene conversi\u00f3n autom\u00e1tica de datos.</p> <p>Esto significa que, aunque tus clientes de API solo pueden enviar strings como claves, mientras esos strings contengan enteros puros, Pydantic los convertir\u00e1 y validar\u00e1.</p> <p>Y el <code>dict</code> que recibas como <code>weights</code> tendr\u00e1 realmente claves <code>int</code> y valores <code>float</code>.</p>"},{"location":"tutorial/body-nested-models/#resumen","title":"Resumen","text":"<p>Con ReadyAPI tienes la m\u00e1xima flexibilidad proporcionada por los modelos Pydantic, manteniendo tu c\u00f3digo simple, corto y elegante.</p> <p>Pero con todos los beneficios:</p> <ul> <li>Soporte de editor (\u00a1autocompletado en todas partes!)</li> <li>Conversi\u00f3n de datos (tambi\u00e9n conocido como parsing/serializaci\u00f3n)</li> <li>Validaci\u00f3n de datos</li> <li>Documentaci\u00f3n del esquema</li> <li>Documentaci\u00f3n autom\u00e1tica</li> </ul>"},{"location":"tutorial/body-updates/","title":"Cuerpo - Actualizaciones","text":""},{"location":"tutorial/body-updates/#actualizacion-reemplazando-con-put","title":"Actualizaci\u00f3n reemplazando con <code>PUT</code>","text":"<p>Para actualizar un \u00edtem puedes utilizar la operaci\u00f3n de HTTP <code>PUT</code>.</p> <p>Puedes usar el <code>jsonable_encoder</code> para convertir los datos de entrada en datos que se puedan almacenar como JSON (por ejemplo, con una base de datos NoSQL). Por ejemplo, convirtiendo <code>datetime</code> a <code>str</code>.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <p><code>PUT</code> se usa para recibir datos que deben reemplazar los datos existentes.</p>"},{"location":"tutorial/body-updates/#advertencia-sobre-el-reemplazo","title":"Advertencia sobre el reemplazo","text":"<p>Esto significa que si quieres actualizar el \u00edtem <code>bar</code> usando <code>PUT</code> con un body que contenga:</p> <pre><code>{\n    \"name\": \"Barz\",\n    \"price\": 3,\n    \"description\": None,\n}\n</code></pre> <p>debido a que no incluye el atributo ya almacenado <code>\"tax\": 20.2</code>, el modelo de entrada tomar\u00eda el valor por defecto de <code>\"tax\": 10.5</code>.</p> <p>Y los datos se guardar\u00edan con ese \"nuevo\" <code>tax</code> de <code>10.5</code>.</p>"},{"location":"tutorial/body-updates/#actualizaciones-parciales-con-patch","title":"Actualizaciones parciales con <code>PATCH</code>","text":"<p>Tambi\u00e9n puedes usar la operaci\u00f3n de HTTP <code>PATCH</code> para actualizar parcialmente datos.</p> <p>Esto significa que puedes enviar solo los datos que deseas actualizar, dejando el resto intacto.</p> <p>Nota</p> <p><code>PATCH</code> es menos usado y conocido que <code>PUT</code>.</p> <p>Y muchos equipos utilizan solo <code>PUT</code>, incluso para actualizaciones parciales.</p> <p>Eres libre de usarlos como desees, ReadyAPI no impone ninguna restricci\u00f3n.</p> <p>Pero esta gu\u00eda te muestra, m\u00e1s o menos, c\u00f3mo se pretende que se usen.</p>"},{"location":"tutorial/body-updates/#uso-del-parametro-exclude_unset-de-pydantic","title":"Uso del par\u00e1metro <code>exclude_unset</code> de Pydantic","text":"<p>Si quieres recibir actualizaciones parciales, es muy \u00fatil usar el par\u00e1metro <code>exclude_unset</code> en el <code>.model_dump()</code> del modelo de Pydantic.</p> <p>Como <code>item.model_dump(exclude_unset=True)</code>.</p> <p>Informaci\u00f3n</p> <p>En Pydantic v1 el m\u00e9todo se llamaba <code>.dict()</code>, fue deprecado (pero a\u00fan soportado) en Pydantic v2, y renombrado a <code>.model_dump()</code>.</p> <p>Los ejemplos aqu\u00ed usan <code>.dict()</code> para compatibilidad con Pydantic v1, pero deber\u00edas usar <code>.model_dump()</code> si puedes usar Pydantic v2.</p> <p>Eso generar\u00eda un <code>dict</code> solo con los datos que se establecieron al crear el modelo <code>item</code>, excluyendo los valores por defecto.</p> <p>Luego puedes usar esto para generar un <code>dict</code> solo con los datos que se establecieron (enviados en el request), omitiendo los valores por defecto:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#uso-del-parametro-update-de-pydantic","title":"Uso del par\u00e1metro <code>update</code> de Pydantic","text":"<p>Ahora, puedes crear una copia del modelo existente usando <code>.model_copy()</code>, y pasar el par\u00e1metro <code>update</code> con un <code>dict</code> que contenga los datos a actualizar.</p> <p>Informaci\u00f3n</p> <p>En Pydantic v1 el m\u00e9todo se llamaba <code>.copy()</code>, fue deprecado (pero a\u00fan soportado) en Pydantic v2, y renombrado a <code>.model_copy()</code>.</p> <p>Los ejemplos aqu\u00ed usan <code>.copy()</code> para compatibilidad con Pydantic v1, pero deber\u00edas usar <code>.model_copy()</code> si puedes usar Pydantic v2.</p> <p>Como <code>stored_item_model.model_copy(update=update_data)</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#resumen-de-actualizaciones-parciales","title":"Resumen de actualizaciones parciales","text":"<p>En resumen, para aplicar actualizaciones parciales deber\u00edas:</p> <ul> <li>(Opcionalmente) usar <code>PATCH</code> en lugar de <code>PUT</code>.</li> <li>Recuperar los datos almacenados.</li> <li>Poner esos datos en un modelo de Pydantic.</li> <li>Generar un <code>dict</code> sin valores por defecto del modelo de entrada (usando <code>exclude_unset</code>).<ul> <li>De esta manera puedes actualizar solo los valores realmente establecidos por el usuario, en lugar de sobrescribir valores ya almacenados con valores por defecto en tu modelo.</li> </ul> </li> <li>Crear una copia del modelo almacenado, actualizando sus atributos con las actualizaciones parciales recibidas (usando el par\u00e1metro <code>update</code>).</li> <li>Convertir el modelo copiado en algo que pueda almacenarse en tu base de datos (por ejemplo, usando el <code>jsonable_encoder</code>).<ul> <li>Esto es comparable a usar el m\u00e9todo <code>.model_dump()</code> del modelo de nuevo, pero asegura (y convierte) los valores a tipos de datos que pueden convertirse a JSON, por ejemplo, <code>datetime</code> a <code>str</code>.</li> </ul> </li> <li>Guardar los datos en tu base de datos.</li> <li>Devolver el modelo actualizado.</li> </ul> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <p>Consejo</p> <p>Puedes realmente usar esta misma t\u00e9cnica con una operaci\u00f3n HTTP <code>PUT</code>.</p> <p>Pero el ejemplo aqu\u00ed usa <code>PATCH</code> porque fue creado para estos casos de uso.</p> <p>Nota</p> <p>Observa que el modelo de entrada sigue siendo validado.</p> <p>Entonces, si deseas recibir actualizaciones parciales que puedan omitir todos los atributos, necesitas tener un modelo con todos los atributos marcados como opcionales (con valores por defecto o <code>None</code>).</p> <p>Para distinguir entre los modelos con todos los valores opcionales para actualizaciones y modelos con valores requeridos para creaci\u00f3n, puedes utilizar las ideas descritas en Modelos Extra.</p>"},{"location":"tutorial/body/","title":"Request Body","text":"<p>Cuando necesitas enviar datos desde un cliente (digamos, un navegador) a tu API, los env\u00edas como un request body.</p> <p>Un request body es un dato enviado por el cliente a tu API. Un response body es el dato que tu API env\u00eda al cliente.</p> <p>Tu API casi siempre tiene que enviar un response body. Pero los clientes no necesariamente necesitan enviar request bodies todo el tiempo, a veces solo solicitan un path, quiz\u00e1s con algunos par\u00e1metros de query, pero no env\u00edan un body.</p> <p>Para declarar un request body, usas modelos de Pydantic con todo su poder y beneficios.</p> <p>Informaci\u00f3n</p> <p>Para enviar datos, deber\u00edas usar uno de estos m\u00e9todos: <code>POST</code> (el m\u00e1s com\u00fan), <code>PUT</code>, <code>DELETE</code> o <code>PATCH</code>.</p> <p>Enviar un body con un request <code>GET</code> tiene un comportamiento indefinido en las especificaciones, no obstante, es soportado por ReadyAPI, solo para casos de uso muy complejos/extremos.</p> <p>Como no se recomienda, la documentaci\u00f3n interactiva con Swagger UI no mostrar\u00e1 la documentaci\u00f3n para el body cuando se usa <code>GET</code>, y los proxies intermedios podr\u00edan no soportarlo.</p>"},{"location":"tutorial/body/#importar-basemodel-de-pydantic","title":"Importar <code>BaseModel</code> de Pydantic","text":"<p>Primero, necesitas importar <code>BaseModel</code> de <code>pydantic</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/body/#crea-tu-modelo-de-datos","title":"Crea tu modelo de datos","text":"<p>Luego, declaras tu modelo de datos como una clase que hereda de <code>BaseModel</code>.</p> <p>Usa tipos est\u00e1ndar de Python para todos los atributos:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Al igual que al declarar par\u00e1metros de query, cuando un atributo del modelo tiene un valor por defecto, no es obligatorio. De lo contrario, es obligatorio. Usa <code>None</code> para hacerlo opcional.</p> <p>Por ejemplo, el modelo anterior declara un \u201c<code>object</code>\u201d JSON (o <code>dict</code> en Python) como:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"An optional description\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n</code></pre> <p>...dado que <code>description</code> y <code>tax</code> son opcionales (con un valor por defecto de <code>None</code>), este \u201c<code>object</code>\u201d JSON tambi\u00e9n ser\u00eda v\u00e1lido:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n</code></pre>"},{"location":"tutorial/body/#declaralo-como-un-parametro","title":"Decl\u00e1ralo como un par\u00e1metro","text":"<p>Para a\u00f1adirlo a tu path operation, decl\u00e1ralo de la misma manera que declaraste par\u00e1metros de path y query:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>...y declara su tipo como el modelo que creaste, <code>Item</code>.</p>"},{"location":"tutorial/body/#resultados","title":"Resultados","text":"<p>Con solo esa declaraci\u00f3n de tipo en Python, ReadyAPI har\u00e1 lo siguiente:</p> <ul> <li>Leer el body del request como JSON.</li> <li>Convertir los tipos correspondientes (si es necesario).</li> <li>Validar los datos.<ul> <li>Si los datos son inv\u00e1lidos, devolver\u00e1 un error claro e indicado, se\u00f1alando exactamente d\u00f3nde y qu\u00e9 fue lo incorrecto.</li> </ul> </li> <li>Proporcionar los datos recibidos en el par\u00e1metro <code>item</code>.<ul> <li>Como lo declaraste en la funci\u00f3n como de tipo <code>Item</code>, tambi\u00e9n tendr\u00e1s todo el soporte del editor (autocompletado, etc.) para todos los atributos y sus tipos.</li> </ul> </li> <li>Generar definiciones de JSON Schema para tu modelo, que tambi\u00e9n puedes usar en cualquier otro lugar si tiene sentido para tu proyecto.</li> <li>Esquemas que ser\u00e1n parte del esquema de OpenAPI generado y usados por la UIs de documentaci\u00f3n autom\u00e1tica.</li> </ul>"},{"location":"tutorial/body/#documentacion-automatica","title":"Documentaci\u00f3n autom\u00e1tica","text":"<p>Los JSON Schemas de tus modelos ser\u00e1n parte del esquema OpenAPI generado y se mostrar\u00e1n en la documentaci\u00f3n API interactiva:</p> <p></p> <p>Y tambi\u00e9n se utilizar\u00e1n en la documentaci\u00f3n API dentro de cada path operation que los necesite:</p> <p></p>"},{"location":"tutorial/body/#soporte-del-editor","title":"Soporte del editor","text":"<p>En tu editor, dentro de tu funci\u00f3n, obtendr\u00e1s anotaciones de tipos y autocompletado en todas partes (esto no suceder\u00eda si recibieras un <code>dict</code> en lugar de un modelo de Pydantic):</p> <p></p> <p>Tambi\u00e9n recibir\u00e1s chequeos de errores para operaciones de tipo incorrecto:</p> <p></p> <p>No es por casualidad, todo el framework fue construido alrededor de ese dise\u00f1o.</p> <p>Y fue rigurosamente probado en la fase de dise\u00f1o, antes de cualquier implementaci\u00f3n, para garantizar que funcionar\u00eda con todos los editores.</p> <p>Incluso se hicieron algunos cambios en Pydantic para admitir esto.</p> <p>Las capturas de pantalla anteriores se tomaron con Visual Studio Code.</p> <p>Pero obtendr\u00edas el mismo soporte en el editor con PyCharm y la mayor\u00eda de los otros editores de Python:</p> <p></p> <p>Consejo</p> <p>Si usas PyCharm como tu editor, puedes usar el Pydantic PyCharm Plugin.</p> <p>Mejora el soporte del editor para modelos de Pydantic, con:</p> <ul> <li>autocompletado</li> <li>chequeo de tipos</li> <li>refactorizaci\u00f3n</li> <li>b\u00fasqueda</li> <li>inspecciones</li> </ul>"},{"location":"tutorial/body/#usa-el-modelo","title":"Usa el modelo","text":"<p>Dentro de la funci\u00f3n, puedes acceder a todos los atributos del objeto modelo directamente:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre>"},{"location":"tutorial/body/#request-body-parametros-de-path","title":"Request body + par\u00e1metros de path","text":"<p>Puedes declarar par\u00e1metros de path y request body al mismo tiempo.</p> <p>ReadyAPI reconocer\u00e1 que los par\u00e1metros de funci\u00f3n que coinciden con los par\u00e1metros de path deben ser tomados del path, y que los par\u00e1metros de funci\u00f3n que se declaran como modelos de Pydantic deben ser tomados del request body.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre>"},{"location":"tutorial/body/#request-body-path-parametros-de-query","title":"Request body + path + par\u00e1metros de query","text":"<p>Tambi\u00e9n puedes declarar par\u00e1metros de body, path y query, todos al mismo tiempo.</p> <p>ReadyAPI reconocer\u00e1 cada uno de ellos y tomar\u00e1 los datos del lugar correcto.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> <p>Los par\u00e1metros de la funci\u00f3n se reconocer\u00e1n de la siguiente manera:</p> <ul> <li>Si el par\u00e1metro tambi\u00e9n se declara en el path, se utilizar\u00e1 como un par\u00e1metro de path.</li> <li>Si el par\u00e1metro es de un tipo singular (como <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, etc.), se interpretar\u00e1 como un par\u00e1metro de query.</li> <li>Si el par\u00e1metro se declara como del tipo de un modelo de Pydantic, se interpretar\u00e1 como un request body.</li> </ul> <p>Nota</p> <p>ReadyAPI sabr\u00e1 que el valor de <code>q</code> no es requerido debido al valor por defecto <code>= None</code>.</p> <p>El <code>str | None</code> (Python 3.10+) o <code>Union</code> en <code>Union[str, None]</code> (Python 3.8+) no es utilizado por ReadyAPI para determinar que el valor no es requerido, sabr\u00e1 que no es requerido porque tiene un valor por defecto de <code>= None</code>.</p> <p>Pero agregar las anotaciones de tipos permitir\u00e1 que tu editor te brinde un mejor soporte y detecte errores.</p>"},{"location":"tutorial/body/#sin-pydantic","title":"Sin Pydantic","text":"<p>Si no quieres usar modelos de Pydantic, tambi\u00e9n puedes usar par\u00e1metros Body. Consulta la documentaci\u00f3n para Body - Multiples Parametros: Valores singulares en body.</p>"},{"location":"tutorial/cookie-param-models/","title":"Modelos de Cookies","text":"<p>Si tienes un grupo de cookies que est\u00e1n relacionadas, puedes crear un modelo de Pydantic para declararlas. \ud83c\udf6a</p> <p>Esto te permitir\u00e1 reutilizar el modelo en m\u00faltiples lugares y tambi\u00e9n declarar validaciones y metadatos para todos los par\u00e1metros a la vez. \ud83d\ude0e</p> <p>Nota</p> <p>Esto es compatible desde la versi\u00f3n <code>0.115.0</code> de ReadyAPI. \ud83e\udd13</p> <p>Consejo</p> <p>Esta misma t\u00e9cnica se aplica a <code>Query</code>, <code>Cookie</code>, y <code>Header</code>. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-param-models/#cookies-con-un-modelo-de-pydantic","title":"Cookies con un Modelo de Pydantic","text":"<p>Declara los par\u00e1metros de cookie que necesites en un modelo de Pydantic, y luego declara el par\u00e1metro como <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>ReadyAPI extraer\u00e1 los datos para cada campo de las cookies recibidas en el request y te entregar\u00e1 el modelo de Pydantic que definiste.</p>"},{"location":"tutorial/cookie-param-models/#revisa-la-documentacion","title":"Revisa la Documentaci\u00f3n","text":"<p>Puedes ver las cookies definidas en la UI de la documentaci\u00f3n en <code>/docs</code>:</p> <p>Informaci\u00f3n</p> <p>Ten en cuenta que, como los navegadores manejan las cookies de maneras especiales y detr\u00e1s de escenas, no permiten f\u00e1cilmente que JavaScript las toque.</p> <p>Si vas a la UI de la documentaci\u00f3n de la API en <code>/docs</code> podr\u00e1s ver la documentaci\u00f3n de las cookies para tus path operations.</p> <p>Pero incluso si rellenas los datos y haces clic en \"Execute\", como la UI de la documentaci\u00f3n funciona con JavaScript, las cookies no ser\u00e1n enviadas y ver\u00e1s un mensaje de error como si no hubieras escrito ning\u00fan valor.</p>"},{"location":"tutorial/cookie-param-models/#prohibir-cookies-extra","title":"Prohibir Cookies Extra","text":"<p>En algunos casos de uso especiales (probablemente no muy comunes), podr\u00edas querer restringir las cookies que deseas recibir.</p> <p>Tu API ahora tiene el poder de controlar su propio consentimiento de cookies. \ud83e\udd2a\ud83c\udf6a</p> <p>Puedes usar la configuraci\u00f3n del modelo de Pydantic para <code>prohibir</code> cualquier campo <code>extra</code>:</p> Python 3.9+ <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Si un cliente intenta enviar algunas cookies extra, recibir\u00e1n un response de error.</p> <p>Pobres banners de cookies con todo su esfuerzo para obtener tu consentimiento para que la API lo rechace. \ud83c\udf6a</p> <p>Por ejemplo, si el cliente intenta enviar una cookie <code>santa_tracker</code> con un valor de <code>good-list-please</code>, el cliente recibir\u00e1 un response de error que le informa que la cookie <code>santa_tracker</code> no est\u00e1 permitida:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"cookie\", \"santa_tracker\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"good-list-please\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/cookie-param-models/#resumen","title":"Resumen","text":"<p>Puedes usar modelos de Pydantic para declarar cookies en ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-params/","title":"Par\u00e1metros de Cookie","text":"<p>Puedes definir par\u00e1metros de Cookie de la misma manera que defines los par\u00e1metros <code>Query</code> y <code>Path</code>.</p>"},{"location":"tutorial/cookie-params/#importar-cookie","title":"Importar <code>Cookie</code>","text":"<p>Primero importa <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre>"},{"location":"tutorial/cookie-params/#declarar-parametros-de-cookie","title":"Declarar par\u00e1metros de <code>Cookie</code>","text":"<p>Luego declara los par\u00e1metros de cookie usando la misma estructura que con <code>Path</code> y <code>Query</code>.</p> <p>Puedes definir el valor por defecto as\u00ed como toda la validaci\u00f3n extra o los par\u00e1metros de anotaci\u00f3n:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Detalles T\u00e9cnicos</p> <p><code>Cookie</code> es una clase \"hermana\" de <code>Path</code> y <code>Query</code>. Tambi\u00e9n hereda de la misma clase com\u00fan <code>Param</code>.</p> <p>Pero recuerda que cuando importas <code>Query</code>, <code>Path</code>, <code>Cookie</code> y otros desde <code>readyapi</code>, en realidad son funciones que devuelven clases especiales.</p> <p>Informaci\u00f3n</p> <p>Para declarar cookies, necesitas usar <code>Cookie</code>, porque de lo contrario los par\u00e1metros ser\u00edan interpretados como par\u00e1metros de query.</p>"},{"location":"tutorial/cookie-params/#resumen","title":"Resumen","text":"<p>Declara cookies con <code>Cookie</code>, usando el mismo patr\u00f3n com\u00fan que <code>Query</code> y <code>Path</code>.</p>"},{"location":"tutorial/cors/","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>CORS o \"Cross-Origin Resource Sharing\" se refiere a situaciones en las que un frontend que se ejecuta en un navegador tiene c\u00f3digo JavaScript que se comunica con un backend, y el backend est\u00e1 en un \"origen\" diferente al frontend.</p>"},{"location":"tutorial/cors/#origen","title":"Origen","text":"<p>Un origen es la combinaci\u00f3n de protocolo (<code>http</code>, <code>https</code>), dominio (<code>myapp.com</code>, <code>localhost</code>, <code>localhost.khulnasoft.com</code>) y puerto (<code>80</code>, <code>443</code>, <code>8080</code>).</p> <p>As\u00ed que, todos estos son or\u00edgenes diferentes:</p> <ul> <li><code>http://localhost</code></li> <li><code>https://localhost</code></li> <li><code>http://localhost:8080</code></li> </ul> <p>Aunque todos est\u00e1n en <code>localhost</code>, usan protocolos o puertos diferentes, por lo tanto, son \"or\u00edgenes\" diferentes.</p>"},{"location":"tutorial/cors/#pasos","title":"Pasos","text":"<p>Entonces, digamos que tienes un frontend corriendo en tu navegador en <code>http://localhost:8080</code>, y su JavaScript est\u00e1 tratando de comunicarse con un backend corriendo en <code>http://localhost</code> (porque no especificamos un puerto, el navegador asumir\u00e1 el puerto por defecto <code>80</code>).</p> <p>Entonces, el navegador enviar\u00e1 un request HTTP <code>OPTIONS</code> al backend <code>:80</code>, y si el backend env\u00eda los headers apropiados autorizando la comunicaci\u00f3n desde este origen diferente (<code>http://localhost:8080</code>), entonces el navegador <code>:8080</code> permitir\u00e1 que el JavaScript en el frontend env\u00ede su request al backend <code>:80</code>.</p> <p>Para lograr esto, el backend <code>:80</code> debe tener una lista de \"or\u00edgenes permitidos\".</p> <p>En este caso, la lista tendr\u00eda que incluir <code>http://localhost:8080</code> para que el frontend <code>:8080</code> funcione correctamente.</p>"},{"location":"tutorial/cors/#comodines","title":"Comodines","text":"<p>Tambi\u00e9n es posible declarar la lista como <code>\"*\"</code> (un \"comod\u00edn\") para decir que todos est\u00e1n permitidos.</p> <p>Pero eso solo permitir\u00e1 ciertos tipos de comunicaci\u00f3n, excluyendo todo lo que implique credenciales: Cookies, headers de autorizaci\u00f3n como los utilizados con Bearer Tokens, etc.</p> <p>As\u00ed que, para que todo funcione correctamente, es mejor especificar expl\u00edcitamente los or\u00edgenes permitidos.</p>"},{"location":"tutorial/cors/#usa-corsmiddleware","title":"Usa <code>CORSMiddleware</code>","text":"<p>Puedes configurarlo en tu aplicaci\u00f3n ReadyAPI usando el <code>CORSMiddleware</code>.</p> <ul> <li>Importa <code>CORSMiddleware</code>.</li> <li>Crea una lista de or\u00edgenes permitidos (como strings).</li> <li>Agr\u00e9galo como un \"middleware\" a tu aplicaci\u00f3n ReadyAPI.</li> </ul> <p>Tambi\u00e9n puedes especificar si tu backend permite:</p> <ul> <li>Credenciales (headers de autorizaci\u00f3n, cookies, etc).</li> <li>M\u00e9todos HTTP espec\u00edficos (<code>POST</code>, <code>PUT</code>) o todos ellos con el comod\u00edn <code>\"*\"</code>.</li> <li>Headers HTTP espec\u00edficos o todos ellos con el comod\u00edn <code>\"*\"</code>.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.cors import CORSMiddleware\n\napp = ReadyAPI()\n\norigins = [\n    \"http://localhost.khulnasoft.com\",\n    \"https://localhost.khulnasoft.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Los par\u00e1metros predeterminados utilizados por la implementaci\u00f3n de <code>CORSMiddleware</code> son restrictivos por defecto, por lo que necesitar\u00e1s habilitar expl\u00edcitamente or\u00edgenes, m\u00e9todos o headers particulares para que los navegadores est\u00e9n permitidos de usarlos en un contexto de Cross-Domain.</p> <p>Se admiten los siguientes argumentos:</p> <ul> <li><code>allow_origins</code> - Una lista de or\u00edgenes que deber\u00edan estar permitidos para hacer requests cross-origin. Por ejemplo, <code>['https://example.org', 'https://www.example.org']</code>. Puedes usar <code>['*']</code> para permitir cualquier origen.</li> <li><code>allow_origin_regex</code> - Una cadena regex para coincidir con or\u00edgenes que deber\u00edan estar permitidos para hacer requests cross-origin. por ejemplo, <code>'https://.*\\.example\\.org'</code>.</li> <li><code>allow_methods</code> - Una lista de m\u00e9todos HTTP que deber\u00edan estar permitidos para requests cross-origin. Por defecto es <code>['GET']</code>. Puedes usar <code>['*']</code> para permitir todos los m\u00e9todos est\u00e1ndar.</li> <li><code>allow_headers</code> - Una lista de headers de request HTTP que deber\u00edan estar soportados para requests cross-origin. Por defecto es <code>[]</code>. Puedes usar <code>['*']</code> para permitir todos los headers. Los headers <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code> y <code>Content-Type</code> siempre est\u00e1n permitidos para requests CORS simples.</li> <li><code>allow_credentials</code> - Indica que las cookies deber\u00edan estar soportadas para requests cross-origin. Por defecto es <code>False</code>. Adem\u00e1s, <code>allow_origins</code> no puede ser configurado a <code>['*']</code> para que las credenciales est\u00e9n permitidas, los or\u00edgenes deben ser especificados.</li> <li><code>expose_headers</code> - Indica cualquier header de response que deber\u00eda ser accesible para el navegador. Por defecto es <code>[]</code>.</li> <li><code>max_age</code> - Establece un tiempo m\u00e1ximo en segundos para que los navegadores almacenen en cach\u00e9 los responses CORS. Por defecto es <code>600</code>.</li> </ul> <p>El middleware responde a dos tipos particulares de request HTTP...</p>"},{"location":"tutorial/cors/#requests-de-preflight-cors","title":"Requests de preflight CORS","text":"<p>Estos son cualquier request <code>OPTIONS</code> con headers <code>Origin</code> y <code>Access-Control-Request-Method</code>.</p> <p>En este caso, el middleware interceptar\u00e1 el request entrante y responder\u00e1 con los headers CORS adecuados, y un response <code>200</code> o <code>400</code> con fines informativos.</p>"},{"location":"tutorial/cors/#requests-simples","title":"Requests simples","text":"<p>Cualquier request con un header <code>Origin</code>. En este caso, el middleware pasar\u00e1 el request a trav\u00e9s de lo normal, pero incluir\u00e1 los headers CORS adecuados en el response.</p>"},{"location":"tutorial/cors/#mas-info","title":"M\u00e1s info","text":"<p>Para m\u00e1s informaci\u00f3n sobre CORS, revisa la documentaci\u00f3n de CORS de Mozilla.</p> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.middleware.cors import CORSMiddleware</code>.</p> <p>ReadyAPI proporciona varios middlewares en <code>readyapi.middleware</code> como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los middlewares disponibles provienen directamente de Starlette.</p>"},{"location":"tutorial/debugging/","title":"Depuraci\u00f3n","text":"<p>Puedes conectar el depurador en tu editor, por ejemplo con Visual Studio Code o PyCharm.</p>"},{"location":"tutorial/debugging/#llama-a-uvicorn","title":"Llama a <code>uvicorn</code>","text":"<p>En tu aplicaci\u00f3n de ReadyAPI, importa y ejecuta <code>uvicorn</code> directamente:</p> Python 3.8+ <pre><code>import uvicorn\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"tutorial/debugging/#acerca-de-__name__-__main__","title":"Acerca de <code>__name__ == \"__main__\"</code>","text":"<p>El objetivo principal de <code>__name__ == \"__main__\"</code> es tener algo de c\u00f3digo que se ejecute cuando tu archivo es llamado con:</p> <pre><code>$ python myapp.py\n</code></pre> <p>pero no es llamado cuando otro archivo lo importa, como en:</p> <pre><code>from myapp import app\n</code></pre>"},{"location":"tutorial/debugging/#mas-detalles","title":"M\u00e1s detalles","text":"<p>Supongamos que tu archivo se llama <code>myapp.py</code>.</p> <p>Si lo ejecutas con:</p> <pre><code>$ python myapp.py\n</code></pre> <p>entonces la variable interna <code>__name__</code> en tu archivo, creada autom\u00e1ticamente por Python, tendr\u00e1 como valor el string <code>\"__main__\"</code>.</p> <p>As\u00ed que, la secci\u00f3n:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>se ejecutar\u00e1.</p> <p>Esto no ocurrir\u00e1 si importas ese m\u00f3dulo (archivo).</p> <p>Entonces, si tienes otro archivo <code>importer.py</code> con:</p> <pre><code>from myapp import app\n\n# Alg\u00fan c\u00f3digo adicional\n</code></pre> <p>en ese caso, la variable creada autom\u00e1ticamente dentro de <code>myapp.py</code> no tendr\u00e1 la variable <code>__name__</code> con un valor de <code>\"__main__\"</code>.</p> <p>As\u00ed que, la l\u00ednea:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>no se ejecutar\u00e1.</p> <p>Informaci\u00f3n</p> <p>Para m\u00e1s informaci\u00f3n, revisa la documentaci\u00f3n oficial de Python.</p>"},{"location":"tutorial/debugging/#ejecuta-tu-codigo-con-tu-depurador","title":"Ejecuta tu c\u00f3digo con tu depurador","text":"<p>Dado que est\u00e1s ejecutando el servidor Uvicorn directamente desde tu c\u00f3digo, puedes llamar a tu programa de Python (tu aplicaci\u00f3n ReadyAPI) directamente desde el depurador.</p> <p>Por ejemplo, en Visual Studio Code, puedes:</p> <ul> <li>Ir al panel de \"Debug\".</li> <li>\"Add configuration...\".</li> <li>Seleccionar \"Python\".</li> <li>Ejecutar el depurador con la opci\u00f3n \"<code>Python: Current File (Integrated Terminal)</code>\".</li> </ul> <p>Luego, iniciar\u00e1 el servidor con tu c\u00f3digo ReadyAPI, deteni\u00e9ndose en tus puntos de interrupci\u00f3n, etc.</p> <p>As\u00ed es como podr\u00eda verse:</p> <p></p> <p>Si usas PyCharm, puedes:</p> <ul> <li>Abrir el men\u00fa \"Run\".</li> <li>Seleccionar la opci\u00f3n \"Debug...\".</li> <li>Luego aparece un men\u00fa contextual.</li> <li>Selecciona el archivo para depurar (en este caso, <code>main.py</code>).</li> </ul> <p>Luego, iniciar\u00e1 el servidor con tu c\u00f3digo ReadyAPI, deteni\u00e9ndose en tus puntos de interrupci\u00f3n, etc.</p> <p>As\u00ed es como podr\u00eda verse:</p> <p></p>"},{"location":"tutorial/encoder/","title":"JSON Compatible Encoder","text":"<p>Hay algunos casos en los que podr\u00edas necesitar convertir un tipo de dato (como un modelo de Pydantic) a algo compatible con JSON (como un <code>dict</code>, <code>list</code>, etc).</p> <p>Por ejemplo, si necesitas almacenarlo en una base de datos.</p> <p>Para eso, ReadyAPI proporciona una funci\u00f3n <code>jsonable_encoder()</code>.</p>"},{"location":"tutorial/encoder/#usando-el-jsonable_encoder","title":"Usando el <code>jsonable_encoder</code>","text":"<p>Imaginemos que tienes una base de datos <code>fake_db</code> que solo recibe datos compatibles con JSON.</p> <p>Por ejemplo, no recibe objetos <code>datetime</code>, ya que no son compatibles con JSON.</p> <p>Entonces, un objeto <code>datetime</code> tendr\u00eda que ser convertido a un <code>str</code> que contenga los datos en formato ISO.</p> <p>De la misma manera, esta base de datos no recibir\u00eda un modelo de Pydantic (un objeto con atributos), solo un <code>dict</code>.</p> <p>Puedes usar <code>jsonable_encoder</code> para eso.</p> <p>Recibe un objeto, como un modelo de Pydantic, y devuelve una versi\u00f3n compatible con JSON:</p> Python 3.10+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <p>En este ejemplo, convertir\u00eda el modelo de Pydantic a un <code>dict</code>, y el <code>datetime</code> a un <code>str</code>.</p> <p>El resultado de llamarlo es algo que puede ser codificado con la funci\u00f3n est\u00e1ndar de Python <code>json.dumps()</code>.</p> <p>No devuelve un gran <code>str</code> que contenga los datos en formato JSON (como una cadena de texto). Devuelve una estructura de datos est\u00e1ndar de Python (por ejemplo, un <code>dict</code>) con valores y sub-valores que son todos compatibles con JSON.</p> <p>Nota</p> <p><code>jsonable_encoder</code> es utilizado internamente por ReadyAPI para convertir datos. Pero es \u00fatil en muchos otros escenarios.</p>"},{"location":"tutorial/extra-data-types/","title":"Tipos de Datos Extra","text":"<p>Hasta ahora, has estado usando tipos de datos comunes, como:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>bool</code></li> </ul> <p>Pero tambi\u00e9n puedes usar tipos de datos m\u00e1s complejos.</p> <p>Y seguir\u00e1s teniendo las mismas funcionalidades como hasta ahora:</p> <ul> <li>Gran soporte de editor.</li> <li>Conversi\u00f3n de datos de requests entrantes.</li> <li>Conversi\u00f3n de datos para datos de response.</li> <li>Validaci\u00f3n de datos.</li> <li>Anotaci\u00f3n y documentaci\u00f3n autom\u00e1tica.</li> </ul>"},{"location":"tutorial/extra-data-types/#otros-tipos-de-datos","title":"Otros tipos de datos","text":"<p>Aqu\u00ed hay algunos de los tipos de datos adicionales que puedes usar:</p> <ul> <li><code>UUID</code>:<ul> <li>Un \"Identificador Universalmente \u00danico\" est\u00e1ndar, com\u00fan como un ID en muchas bases de datos y sistemas.</li> <li>En requests y responses se representar\u00e1 como un <code>str</code>.</li> </ul> </li> <li><code>datetime.datetime</code>:<ul> <li>Un <code>datetime.datetime</code> de Python.</li> <li>En requests y responses se representar\u00e1 como un <code>str</code> en formato ISO 8601, como: <code>2008-09-15T15:53:00+05:00</code>.</li> </ul> </li> <li><code>datetime.date</code>:<ul> <li><code>datetime.date</code> de Python.</li> <li>En requests y responses se representar\u00e1 como un <code>str</code> en formato ISO 8601, como: <code>2008-09-15</code>.</li> </ul> </li> <li><code>datetime.time</code>:<ul> <li>Un <code>datetime.time</code> de Python.</li> <li>En requests y responses se representar\u00e1 como un <code>str</code> en formato ISO 8601, como: <code>14:23:55.003</code>.</li> </ul> </li> <li><code>datetime.timedelta</code>:<ul> <li>Un <code>datetime.timedelta</code> de Python.</li> <li>En requests y responses se representar\u00e1 como un <code>float</code> de segundos totales.</li> <li>Pydantic tambi\u00e9n permite representarlo como una \"codificaci\u00f3n de diferencia horaria ISO 8601\", consulta la documentaci\u00f3n para m\u00e1s informaci\u00f3n.</li> </ul> </li> <li><code>frozenset</code>:<ul> <li>En requests y responses, tratado igual que un <code>set</code>:<ul> <li>En requests, se leer\u00e1 una list, eliminando duplicados y convirti\u00e9ndola en un <code>set</code>.</li> <li>En responses, el <code>set</code> se convertir\u00e1 en una <code>list</code>.</li> <li>El esquema generado especificar\u00e1 que los valores del <code>set</code> son \u00fanicos (usando <code>uniqueItems</code> de JSON Schema).</li> </ul> </li> </ul> </li> <li><code>bytes</code>:<ul> <li><code>bytes</code> est\u00e1ndar de Python.</li> <li>En requests y responses se tratar\u00e1 como <code>str</code>.</li> <li>El esquema generado especificar\u00e1 que es un <code>str</code> con \"binary\" como \"format\".</li> </ul> </li> <li><code>Decimal</code>:<ul> <li><code>Decimal</code> est\u00e1ndar de Python.</li> <li>En requests y responses, manejado igual que un <code>float</code>.</li> </ul> </li> <li>Puedes revisar todos los tipos de datos v\u00e1lidos de Pydantic aqu\u00ed: Tipos de datos de Pydantic.</li> </ul>"},{"location":"tutorial/extra-data-types/#ejemplo","title":"Ejemplo","text":"<p>Aqu\u00ed tienes un ejemplo de una path operation con par\u00e1metros usando algunos de los tipos anteriores.</p> Python 3.10+ <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Nota que los par\u00e1metros dentro de la funci\u00f3n tienen su tipo de dato natural, y puedes, por ejemplo, realizar manipulaciones de fechas normales, como:</p> Python 3.10+ <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre>"},{"location":"tutorial/extra-models/","title":"Modelos Extra","text":"<p>Continuando con el ejemplo anterior, ser\u00e1 com\u00fan tener m\u00e1s de un modelo relacionado.</p> <p>Esto es especialmente el caso para los modelos de usuario, porque:</p> <ul> <li>El modelo de entrada necesita poder tener una contrase\u00f1a.</li> <li>El modelo de salida no deber\u00eda tener una contrase\u00f1a.</li> <li>El modelo de base de datos probablemente necesitar\u00eda tener una contrase\u00f1a hasheada.</li> </ul> <p>Peligro</p> <p>Nunca almacenes contrase\u00f1as de usuarios en texto plano. Siempre almacena un \"hash seguro\" que puedas verificar luego.</p> <p>Si no lo sabes, aprender\u00e1s qu\u00e9 es un \"hash de contrase\u00f1a\" en los cap\u00edtulos de seguridad.</p>"},{"location":"tutorial/extra-models/#multiples-modelos","title":"M\u00faltiples modelos","text":"<p>Aqu\u00ed tienes una idea general de c\u00f3mo podr\u00edan ser los modelos con sus campos de contrase\u00f1a y los lugares donde se utilizan:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> <p>Informaci\u00f3n</p> <p>En Pydantic v1 el m\u00e9todo se llamaba <code>.dict()</code>, fue deprecado (pero a\u00fan soportado) en Pydantic v2, y renombrado a <code>.model_dump()</code>.</p> <p>Los ejemplos aqu\u00ed usan <code>.dict()</code> para compatibilidad con Pydantic v1, pero deber\u00edas usar <code>.model_dump()</code> en su lugar si puedes usar Pydantic v2.</p>"},{"location":"tutorial/extra-models/#acerca-de-user_indict","title":"Acerca de <code>**user_in.dict()</code>","text":""},{"location":"tutorial/extra-models/#dict-de-pydantic","title":"<code>.dict()</code> de Pydantic","text":"<p><code>user_in</code> es un modelo Pydantic de la clase <code>UserIn</code>.</p> <p>Los modelos Pydantic tienen un m\u00e9todo <code>.dict()</code> que devuelve un <code>dict</code> con los datos del modelo.</p> <p>As\u00ed que, si creamos un objeto Pydantic <code>user_in</code> como:</p> <pre><code>user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n</code></pre> <p>y luego llamamos a:</p> <pre><code>user_dict = user_in.dict()\n</code></pre> <p>ahora tenemos un <code>dict</code> con los datos en la variable <code>user_dict</code> (es un <code>dict</code> en lugar de un objeto modelo Pydantic).</p> <p>Y si llamamos a:</p> <pre><code>print(user_dict)\n</code></pre> <p>obtendremos un <code>dict</code> de Python con:</p> <pre><code>{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\n</code></pre>"},{"location":"tutorial/extra-models/#desempaquetando-un-dict","title":"Desempaquetando un <code>dict</code>","text":"<p>Si tomamos un <code>dict</code> como <code>user_dict</code> y lo pasamos a una funci\u00f3n (o clase) con <code>**user_dict</code>, Python lo \"desempaquetar\u00e1\". Pasar\u00e1 las claves y valores del <code>user_dict</code> directamente como argumentos clave-valor.</p> <p>As\u00ed que, continuando con el <code>user_dict</code> anterior, escribir:</p> <pre><code>UserInDB(**user_dict)\n</code></pre> <p>ser\u00eda equivalente a algo como:</p> <pre><code>UserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n</code></pre> <p>O m\u00e1s exactamente, usando <code>user_dict</code> directamente, con cualquier contenido que pueda tener en el futuro:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n)\n</code></pre>"},{"location":"tutorial/extra-models/#un-modelo-pydantic-a-partir-del-contenido-de-otro","title":"Un modelo Pydantic a partir del contenido de otro","text":"<p>Como en el ejemplo anterior obtuvimos <code>user_dict</code> de <code>user_in.dict()</code>, este c\u00f3digo:</p> <pre><code>user_dict = user_in.dict()\nUserInDB(**user_dict)\n</code></pre> <p>ser\u00eda equivalente a:</p> <pre><code>UserInDB(**user_in.dict())\n</code></pre> <p>...porque <code>user_in.dict()</code> es un <code>dict</code>, y luego hacemos que Python lo \"desempaquete\" al pasarlo a <code>UserInDB</code> con el prefijo <code>**</code>.</p> <p>As\u00ed, obtenemos un modelo Pydantic a partir de los datos en otro modelo Pydantic.</p>"},{"location":"tutorial/extra-models/#desempaquetando-un-dict-y-palabras-clave-adicionales","title":"Desempaquetando un <code>dict</code> y palabras clave adicionales","text":"<p>Y luego agregando el argumento de palabra clave adicional <code>hashed_password=hashed_password</code>, como en:</p> <pre><code>UserInDB(**user_in.dict(), hashed_password=hashed_password)\n</code></pre> <p>...termina siendo como:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n</code></pre> <p>Advertencia</p> <p>Las funciones adicionales de soporte <code>fake_password_hasher</code> y <code>fake_save_user</code> son solo para demostrar un posible flujo de datos, pero por supuesto no proporcionan ninguna seguridad real.</p>"},{"location":"tutorial/extra-models/#reducir-duplicacion","title":"Reducir duplicaci\u00f3n","text":"<p>Reducir la duplicaci\u00f3n de c\u00f3digo es una de las ideas centrales en ReadyAPI.</p> <p>Ya que la duplicaci\u00f3n de c\u00f3digo incrementa las posibilidades de bugs, problemas de seguridad, problemas de desincronizaci\u00f3n de c\u00f3digo (cuando actualizas en un lugar pero no en los otros), etc.</p> <p>Y estos modelos est\u00e1n compartiendo muchos de los datos y duplicando nombres y tipos de atributos.</p> <p>Podr\u00edamos hacerlo mejor.</p> <p>Podemos declarar un modelo <code>UserBase</code> que sirva como base para nuestros otros modelos. Y luego podemos hacer subclases de ese modelo que heredan sus atributos (declaraciones de tipo, validaci\u00f3n, etc).</p> <p>Toda la conversi\u00f3n de datos, validaci\u00f3n, documentaci\u00f3n, etc. seguir\u00e1 funcionando normalmente.</p> <p>De esa manera, podemos declarar solo las diferencias entre los modelos (con <code>password</code> en texto plano, con <code>hashed_password</code> y sin contrase\u00f1a):</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#union-o-anyof","title":"<code>Union</code> o <code>anyOf</code>","text":"<p>Puedes declarar un response que sea la <code>Union</code> de dos o m\u00e1s tipos, eso significa que el response ser\u00eda cualquiera de ellos.</p> <p>Se definir\u00e1 en OpenAPI con <code>anyOf</code>.</p> <p>Para hacerlo, usa el type hint est\u00e1ndar de Python <code>typing.Union</code>:</p> <p>Nota</p> <p>Al definir una <code>Union</code>, incluye el tipo m\u00e1s espec\u00edfico primero, seguido por el tipo menos espec\u00edfico. En el ejemplo a continuaci\u00f3n, el m\u00e1s espec\u00edfico <code>PlaneItem</code> viene antes de <code>CarItem</code> en <code>Union[PlaneItem, CarItem]</code>.</p> Python 3.10+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/extra-models/#union-en-python-310","title":"<code>Union</code> en Python 3.10","text":"<p>En este ejemplo pasamos <code>Union[PlaneItem, CarItem]</code> como el valor del argumento <code>response_model</code>.</p> <p>Porque lo estamos pasando como un valor a un argumento en lugar de ponerlo en una anotaci\u00f3n de tipo, tenemos que usar <code>Union</code> incluso en Python 3.10.</p> <p>Si estuviera en una anotaci\u00f3n de tipo podr\u00edamos haber usado la barra vertical, como:</p> <pre><code>some_variable: PlaneItem | CarItem\n</code></pre> <p>Pero si ponemos eso en la asignaci\u00f3n <code>response_model=PlaneItem | CarItem</code> obtendr\u00edamos un error, porque Python intentar\u00eda realizar una operaci\u00f3n inv\u00e1lida entre <code>PlaneItem</code> y <code>CarItem</code> en lugar de interpretar eso como una anotaci\u00f3n de tipo.</p>"},{"location":"tutorial/extra-models/#lista-de-modelos","title":"Lista de modelos","text":"<p>De la misma manera, puedes declarar responses de listas de objetos.</p> <p>Para eso, usa el <code>typing.List</code> est\u00e1ndar de Python (o simplemente <code>list</code> en Python 3.9 y posteriores):</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n</code></pre>"},{"location":"tutorial/extra-models/#response-con-dict-arbitrario","title":"Response con <code>dict</code> arbitrario","text":"<p>Tambi\u00e9n puedes declarar un response usando un <code>dict</code> arbitrario plano, declarando solo el tipo de las claves y valores, sin usar un modelo Pydantic.</p> <p>Esto es \u00fatil si no conoces los nombres de los campos/atributos v\u00e1lidos (que ser\u00edan necesarios para un modelo Pydantic) de antemano.</p> <p>En este caso, puedes usar <code>typing.Dict</code> (o solo <code>dict</code> en Python 3.9 y posteriores):</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre>"},{"location":"tutorial/extra-models/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Usa m\u00faltiples modelos Pydantic y hereda libremente para cada caso.</p> <p>No necesitas tener un solo modelo de datos por entidad si esa entidad debe poder tener diferentes \"estados\". Como el caso con la \"entidad\" usuario con un estado que incluye <code>password</code>, <code>password_hash</code> y sin contrase\u00f1a.</p>"},{"location":"tutorial/first-steps/","title":"Primeros Pasos","text":"<p>El archivo ReadyAPI m\u00e1s simple podr\u00eda verse as\u00ed:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Copia eso en un archivo <code>main.py</code>.</p> <p>Ejecuta el servidor en vivo:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using path &lt;font color=\"#3465A4\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Resolved absolute path &lt;font color=\"#75507B\"&gt;/home/user/code/awesomeapp/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Searching for package file structure from directories with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Python module file&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                      \u2502\n \u2502  \ud83d\udc0d main.py          \u2502\n \u2502                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing module &lt;font color=\"#4E9A06\"&gt;main&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Found importable ReadyAPI app\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Importable ReadyAPI app&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                          \u2502\n \u2502  &lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;from&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; main &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;import&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; app&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;  &lt;/span&gt;  \u2502\n \u2502                          \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using import string &lt;font color=\"#8AE234\"&gt;&lt;b&gt;main:app&lt;/b&gt;&lt;/font&gt;\n\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Serving at: http://127.0.0.1:8000                  \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  API docs: http://127.0.0.1:8000/docs               \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Running in development mode, for production use:   \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#555753\"&gt;&lt;b&gt;readyapi run&lt;/b&gt;&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;                                        \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;&lt;/span&gt;\n\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Will watch for changes in these directories: [&amp;apos;/home/user/code/awesomeapp&amp;apos;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://127.0.0.1:8000&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started reloader process [&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;2265862&lt;/b&gt;&lt;/font&gt;] using &lt;font color=\"#34E2E2\"&gt;&lt;b&gt;WatchFiles&lt;/b&gt;&lt;/font&gt;\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;2265873&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>En el resultado, hay una l\u00ednea con algo como:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Esa l\u00ednea muestra la URL donde tu aplicaci\u00f3n est\u00e1 siendo servida, en tu m\u00e1quina local.</p>"},{"location":"tutorial/first-steps/#compruebalo","title":"Compru\u00e9balo","text":"<p>Abre tu navegador en http://127.0.0.1:8000.</p> <p>Ver\u00e1s el response JSON como:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#documentacion-interactiva-de-la-api","title":"Documentaci\u00f3n interactiva de la API","text":"<p>Ahora ve a http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s la documentaci\u00f3n interactiva autom\u00e1tica de la API (proporcionada por Swagger UI):</p> <p></p>"},{"location":"tutorial/first-steps/#documentacion-alternativa-de-la-api","title":"Documentaci\u00f3n alternativa de la API","text":"<p>Y ahora, ve a http://127.0.0.1:8000/redoc.</p> <p>Ver\u00e1s la documentaci\u00f3n alternativa autom\u00e1tica (proporcionada por ReDoc):</p> <p></p>"},{"location":"tutorial/first-steps/#openapi","title":"OpenAPI","text":"<p>ReadyAPI genera un \"esquema\" con toda tu API utilizando el est\u00e1ndar OpenAPI para definir APIs.</p>"},{"location":"tutorial/first-steps/#esquema","title":"\"Esquema\"","text":"<p>Un \"esquema\" es una definici\u00f3n o descripci\u00f3n de algo. No el c\u00f3digo que lo implementa, sino solo una descripci\u00f3n abstracta.</p>"},{"location":"tutorial/first-steps/#esquema-de-la-api","title":"Esquema de la API","text":"<p>En este caso, OpenAPI es una especificaci\u00f3n que dicta c\u00f3mo definir un esquema de tu API.</p> <p>Esta definici\u00f3n de esquema incluye los paths de tu API, los posibles par\u00e1metros que toman, etc.</p>"},{"location":"tutorial/first-steps/#esquema-de-datos","title":"Esquema de Datos","text":"<p>El t\u00e9rmino \"esquema\" tambi\u00e9n podr\u00eda referirse a la forma de algunos datos, como el contenido JSON.</p> <p>En ese caso, significar\u00eda los atributos del JSON, los tipos de datos que tienen, etc.</p>"},{"location":"tutorial/first-steps/#openapi-y-json-schema","title":"OpenAPI y JSON Schema","text":"<p>OpenAPI define un esquema de API para tu API. Y ese esquema incluye definiciones (o \"esquemas\") de los datos enviados y recibidos por tu API utilizando JSON Schema, el est\u00e1ndar para esquemas de datos JSON.</p>"},{"location":"tutorial/first-steps/#revisa-el-openapijson","title":"Revisa el <code>openapi.json</code>","text":"<p>Si tienes curiosidad por c\u00f3mo se ve el esquema OpenAPI en bruto, ReadyAPI autom\u00e1ticamente genera un JSON (esquema) con las descripciones de toda tu API.</p> <p>Puedes verlo directamente en: http://127.0.0.1:8000/openapi.json.</p> <p>Mostrar\u00e1 un JSON que empieza con algo como:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n</code></pre>"},{"location":"tutorial/first-steps/#para-que-sirve-openapi","title":"Para qu\u00e9 sirve OpenAPI","text":"<p>El esquema OpenAPI es lo que impulsa los dos sistemas de documentaci\u00f3n interactiva incluidos.</p> <p>Y hay docenas de alternativas, todas basadas en OpenAPI. Podr\u00edas a\u00f1adir f\u00e1cilmente cualquiera de esas alternativas a tu aplicaci\u00f3n construida con ReadyAPI.</p> <p>Tambi\u00e9n podr\u00edas usarlo para generar c\u00f3digo autom\u00e1ticamente, para clientes que se comuniquen con tu API. Por ejemplo, aplicaciones frontend, m\u00f3viles o IoT.</p>"},{"location":"tutorial/first-steps/#recapitulacion-paso-a-paso","title":"Recapitulaci\u00f3n, paso a paso","text":""},{"location":"tutorial/first-steps/#paso-1-importa-readyapi","title":"Paso 1: importa <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>ReadyAPI</code> es una clase de Python que proporciona toda la funcionalidad para tu API.</p> <p>Detalles T\u00e9cnicos</p> <p><code>ReadyAPI</code> es una clase que hereda directamente de <code>Starlette</code>.</p> <p>Puedes usar toda la funcionalidad de Starlette con <code>ReadyAPI</code> tambi\u00e9n.</p>"},{"location":"tutorial/first-steps/#paso-2-crea-una-instance-de-readyapi","title":"Paso 2: crea una \"instance\" de <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Aqu\u00ed la variable <code>app</code> ser\u00e1 una \"instance\" de la clase <code>ReadyAPI</code>.</p> <p>Este ser\u00e1 el punto principal de interacci\u00f3n para crear toda tu API.</p>"},{"location":"tutorial/first-steps/#paso-3-crea-una-path-operation","title":"Paso 3: crea una path operation","text":""},{"location":"tutorial/first-steps/#path","title":"Path","text":"<p>\"Path\" aqu\u00ed se refiere a la \u00faltima parte de la URL empezando desde la primera <code>/</code>.</p> <p>As\u00ed que, en una URL como:</p> <pre><code>https://example.com/items/foo\n</code></pre> <p>...el path ser\u00eda:</p> <pre><code>/items/foo\n</code></pre> <p>Info</p> <p>Un \"path\" tambi\u00e9n es com\u00fanmente llamado \"endpoint\" o \"ruta\".</p> <p>Mientras construyes una API, el \"path\" es la forma principal de separar \"concerns\" y \"resources\".</p>"},{"location":"tutorial/first-steps/#operacion","title":"Operaci\u00f3n","text":"<p>\"Operaci\u00f3n\" aqu\u00ed se refiere a uno de los \"m\u00e9todos\" HTTP.</p> <p>Uno de:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>...y los m\u00e1s ex\u00f3ticos:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>En el protocolo HTTP, puedes comunicarte con cada path usando uno (o m\u00e1s) de estos \"m\u00e9todos\".</p> <p>Al construir APIs, normalmente usas estos m\u00e9todos HTTP espec\u00edficos para realizar una acci\u00f3n espec\u00edfica.</p> <p>Normalmente usas:</p> <ul> <li><code>POST</code>: para crear datos.</li> <li><code>GET</code>: para leer datos.</li> <li><code>PUT</code>: para actualizar datos.</li> <li><code>DELETE</code>: para eliminar datos.</li> </ul> <p>As\u00ed que, en OpenAPI, cada uno de los m\u00e9todos HTTP se llama una \"operation\".</p> <p>Vamos a llamarlas \"operaciones\" tambi\u00e9n.</p>"},{"location":"tutorial/first-steps/#define-un-path-operation-decorator","title":"Define un path operation decorator","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>El <code>@app.get(\"/\")</code> le dice a ReadyAPI que la funci\u00f3n justo debajo se encarga de manejar requests que vayan a:</p> <ul> <li>el path <code>/</code></li> <li>usando una <code>get</code> operation</li> </ul> <p>Informaci\u00f3n sobre <code>@decorator</code></p> <p>Esa sintaxis <code>@algo</code> en Python se llama un \"decorador\".</p> <p>Lo pones encima de una funci\u00f3n. Como un bonito sombrero decorativo (supongo que de ah\u00ed viene el t\u00e9rmino).</p> <p>Un \"decorador\" toma la funci\u00f3n de abajo y hace algo con ella.</p> <p>En nuestro caso, este decorador le dice a ReadyAPI que la funci\u00f3n de abajo corresponde al path <code>/</code> con una operation <code>get</code>.</p> <p>Es el \"path operation decorator\".</p> <p>Tambi\u00e9n puedes usar las otras operaciones:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>Y los m\u00e1s ex\u00f3ticos:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Tip</p> <p>Eres libre de usar cada operaci\u00f3n (m\u00e9todo HTTP) como quieras.</p> <p>ReadyAPI no fuerza ning\u00fan significado espec\u00edfico.</p> <p>La informaci\u00f3n aqu\u00ed se presenta como una gu\u00eda, no un requisito.</p> <p>Por ejemplo, cuando usas GraphQL normalmente realizas todas las acciones usando solo operaciones <code>POST</code>.</p>"},{"location":"tutorial/first-steps/#paso-4-define-la-path-operation-function","title":"Paso 4: define la path operation function","text":"<p>Esta es nuestra \"path operation function\":</p> <ul> <li>path: es <code>/</code>.</li> <li>operation: es <code>get</code>.</li> <li>function: es la funci\u00f3n debajo del \"decorador\" (debajo de <code>@app.get(\"/\")</code>).</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Esta es una funci\u00f3n de Python.</p> <p>Ser\u00e1 llamada por ReadyAPI cuando reciba un request en la URL \"<code>/</code>\" usando una operaci\u00f3n <code>GET</code>.</p> <p>En este caso, es una funci\u00f3n <code>async</code>.</p> <p>Tambi\u00e9n podr\u00edas definirla como una funci\u00f3n normal en lugar de <code>async def</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Nota</p> <p>Si no sabes la diferencia, revisa la secci\u00f3n Async: \"\u00bfTienes prisa?\".</p>"},{"location":"tutorial/first-steps/#paso-5-retorna-el-contenido","title":"Paso 5: retorna el contenido","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Puedes retornar un <code>dict</code>, <code>list</code>, valores singulares como <code>str</code>, <code>int</code>, etc.</p> <p>Tambi\u00e9n puedes retornar modelos de Pydantic (ver\u00e1s m\u00e1s sobre eso m\u00e1s adelante).</p> <p>Hay muchos otros objetos y modelos que ser\u00e1n autom\u00e1ticamente convertidos a JSON (incluyendo ORMs, etc). Intenta usar tus favoritos, es altamente probable que ya sean compatibles.</p>"},{"location":"tutorial/first-steps/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<ul> <li>Importa <code>ReadyAPI</code>.</li> <li>Crea una instancia <code>app</code>.</li> <li>Escribe un path operation decorator usando decoradores como <code>@app.get(\"/\")</code>.</li> <li>Define una path operation function; por ejemplo, <code>def root(): ...</code>.</li> <li>Ejecuta el servidor de desarrollo usando el comando <code>readyapi dev</code>.</li> </ul>"},{"location":"tutorial/handling-errors/","title":"Manejo de Errores","text":"<p>Existen muchas situaciones en las que necesitas notificar un error a un cliente que est\u00e1 usando tu API.</p> <p>Este cliente podr\u00eda ser un navegador con un frontend, un c\u00f3digo de otra persona, un dispositivo IoT, etc.</p> <p>Podr\u00edas necesitar decirle al cliente que:</p> <ul> <li>El cliente no tiene suficientes privilegios para esa operaci\u00f3n.</li> <li>El cliente no tiene acceso a ese recurso.</li> <li>El \u00edtem al que el cliente intentaba acceder no existe.</li> <li>etc.</li> </ul> <p>En estos casos, normalmente devolver\u00edas un c\u00f3digo de estado HTTP en el rango de 400 (de 400 a 499).</p> <p>Esto es similar a los c\u00f3digos de estado HTTP 200 (de 200 a 299). Esos c\u00f3digos de estado \"200\" significan que de alguna manera hubo un \"\u00e9xito\" en el request.</p> <p>Los c\u00f3digos de estado en el rango de 400 significan que hubo un error por parte del cliente.</p> <p>\u00bfRecuerdas todos esos errores de \"404 Not Found\" (y chistes)?</p>"},{"location":"tutorial/handling-errors/#usa-httpexception","title":"Usa <code>HTTPException</code>","text":"<p>Para devolver responses HTTP con errores al cliente, usa <code>HTTPException</code>.</p>"},{"location":"tutorial/handling-errors/#importa-httpexception","title":"Importa <code>HTTPException</code>","text":"Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#lanza-un-httpexception-en-tu-codigo","title":"Lanza un <code>HTTPException</code> en tu c\u00f3digo","text":"<p><code>HTTPException</code> es una excepci\u00f3n de Python normal con datos adicionales relevantes para APIs.</p> <p>Debido a que es una excepci\u00f3n de Python, no la <code>return</code>, sino que la <code>raise</code>.</p> <p>Esto tambi\u00e9n significa que si est\u00e1s dentro de una funci\u00f3n de utilidad que est\u00e1s llamando dentro de tu path operation function, y lanzas el <code>HTTPException</code> desde dentro de esa funci\u00f3n de utilidad, no se ejecutar\u00e1 el resto del c\u00f3digo en la path operation function, terminar\u00e1 ese request de inmediato y enviar\u00e1 el error HTTP del <code>HTTPException</code> al cliente.</p> <p>El beneficio de lanzar una excepci\u00f3n en lugar de <code>return</code>ar un valor ser\u00e1 m\u00e1s evidente en la secci\u00f3n sobre Dependencias y Seguridad.</p> <p>En este ejemplo, cuando el cliente solicita un \u00edtem por un ID que no existe, lanza una excepci\u00f3n con un c\u00f3digo de estado de <code>404</code>:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#el-response-resultante","title":"El response resultante","text":"<p>Si el cliente solicita <code>http://example.com/items/foo</code> (un <code>item_id</code> <code>\"foo\"</code>), ese cliente recibir\u00e1 un c\u00f3digo de estado HTTP de 200, y un response JSON de:</p> <pre><code>{\n  \"item\": \"The Foo Wrestlers\"\n}\n</code></pre> <p>Pero si el cliente solicita <code>http://example.com/items/bar</code> (un <code>item_id</code> inexistente <code>\"bar\"</code>), ese cliente recibir\u00e1 un c\u00f3digo de estado HTTP de 404 (el error \"no encontrado\"), y un response JSON de:</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre> <p>Consejo</p> <p>Cuando lanzas un <code>HTTPException</code>, puedes pasar cualquier valor que pueda convertirse a JSON como el par\u00e1metro <code>detail</code>, no solo <code>str</code>.</p> <p>Podr\u00edas pasar un <code>dict</code>, un <code>list</code>, etc.</p> <p>Son manejados autom\u00e1ticamente por ReadyAPI y convertidos a JSON.</p>"},{"location":"tutorial/handling-errors/#agrega-headers-personalizados","title":"Agrega headers personalizados","text":"<p>Existen algunas situaciones en las que es \u00fatil poder agregar headers personalizados al error HTTP. Por ejemplo, para algunos tipos de seguridad.</p> <p>Probablemente no necesitar\u00e1s usarlos directamente en tu c\u00f3digo.</p> <p>Pero en caso de que los necesites para un escenario avanzado, puedes agregar headers personalizados:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#instalar-manejadores-de-excepciones-personalizados","title":"Instalar manejadores de excepciones personalizados","text":"<p>Puedes agregar manejadores de excepciones personalizados con las mismas utilidades de excepciones de Starlette.</p> <p>Supongamos que tienes una excepci\u00f3n personalizada <code>UnicornException</code> que t\u00fa (o un paquete que usas) podr\u00eda lanzar.</p> <p>Y quieres manejar esta excepci\u00f3n globalmente con ReadyAPI.</p> <p>Podr\u00edas agregar un manejador de excepciones personalizado con <code>@app.exception_handler()</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n</code></pre> <p>Aqu\u00ed, si solicitas <code>/unicorns/yolo</code>, la path operation lanzar\u00e1 un <code>UnicornException</code>.</p> <p>Pero ser\u00e1 manejado por el <code>unicorn_exception_handler</code>.</p> <p>As\u00ed que recibir\u00e1s un error limpio, con un c\u00f3digo de estado HTTP de <code>418</code> y un contenido JSON de:</p> <pre><code>{\"message\": \"Oops! yolo did something. There goes a rainbow...\"}\n</code></pre> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.requests import Request</code> y <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI ofrece las mismas <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette. Lo mismo con <code>Request</code>.</p>"},{"location":"tutorial/handling-errors/#sobrescribir-los-manejadores-de-excepciones-predeterminados","title":"Sobrescribir los manejadores de excepciones predeterminados","text":"<p>ReadyAPI tiene algunos manejadores de excepciones predeterminados.</p> <p>Estos manejadores se encargan de devolver los responses JSON predeterminadas cuando lanzas un <code>HTTPException</code> y cuando el request tiene datos inv\u00e1lidos.</p> <p>Puedes sobrescribir estos manejadores de excepciones con los tuyos propios.</p>"},{"location":"tutorial/handling-errors/#sobrescribir-excepciones-de-validacion-de-request","title":"Sobrescribir excepciones de validaci\u00f3n de request","text":"<p>Cuando un request contiene datos inv\u00e1lidos, ReadyAPI lanza internamente un <code>RequestValidationError</code>.</p> <p>Y tambi\u00e9n incluye un manejador de excepciones predeterminado para ello.</p> <p>Para sobrescribirlo, importa el <code>RequestValidationError</code> y \u00fasalo con <code>@app.exception_handler(RequestValidationError)</code> para decorar el manejador de excepciones.</p> <p>El manejador de excepciones recibir\u00e1 un <code>Request</code> y la excepci\u00f3n.</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Ahora, si vas a <code>/items/foo</code>, en lugar de obtener el error JSON por defecto con:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>obtendr\u00e1s una versi\u00f3n en texto, con:</p> <pre><code>1 validation error\npath -&gt; item_id\n  value is not a valid integer (type=type_error.integer)\n</code></pre>"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","title":"<code>RequestValidationError</code> vs <code>ValidationError</code>","text":"<p>Advertencia</p> <p>Estos son detalles t\u00e9cnicos que podr\u00edas omitir si no es importante para ti en este momento.</p> <p><code>RequestValidationError</code> es una subclase de <code>ValidationError</code> de Pydantic.</p> <p>ReadyAPI la usa para que, si usas un modelo Pydantic en <code>response_model</code>, y tus datos tienen un error, lo ver\u00e1s en tu log.</p> <p>Pero el cliente/usuario no lo ver\u00e1. En su lugar, el cliente recibir\u00e1 un \"Error Interno del Servidor\" con un c\u00f3digo de estado HTTP <code>500</code>.</p> <p>Deber\u00eda ser as\u00ed porque si tienes un <code>ValidationError</code> de Pydantic en tu response o en cualquier lugar de tu c\u00f3digo (no en el request del cliente), en realidad es un bug en tu c\u00f3digo.</p> <p>Y mientras lo arreglas, tus clientes/usuarios no deber\u00edan tener acceso a informaci\u00f3n interna sobre el error, ya que eso podr\u00eda exponer una vulnerabilidad de seguridad.</p>"},{"location":"tutorial/handling-errors/#sobrescribir-el-manejador-de-errores-de-httpexception","title":"Sobrescribir el manejador de errores de <code>HTTPException</code>","text":"<p>De la misma manera, puedes sobrescribir el manejador de <code>HTTPException</code>.</p> <p>Por ejemplo, podr\u00edas querer devolver un response de texto plano en lugar de JSON para estos errores:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import PlainTextResponse</code>.</p> <p>ReadyAPI ofrece las mismas <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette.</p>"},{"location":"tutorial/handling-errors/#usar-el-body-de-requestvalidationerror","title":"Usar el body de <code>RequestValidationError</code>","text":"<p>El <code>RequestValidationError</code> contiene el <code>body</code> que recibi\u00f3 con datos inv\u00e1lidos.</p> <p>Podr\u00edas usarlo mientras desarrollas tu aplicaci\u00f3n para registrar el body y depurarlo, devolverlo al usuario, etc.</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, Request, status\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )\n\n\nclass Item(BaseModel):\n    title: str\n    size: int\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Ahora intenta enviar un \u00edtem inv\u00e1lido como:</p> <pre><code>{\n  \"title\": \"towel\",\n  \"size\": \"XL\"\n}\n</code></pre> <p>Recibir\u00e1s un response que te dir\u00e1 que los datos son inv\u00e1lidos conteniendo el body recibido:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"body\",\n        \"size\"\n      ],\n      \"msg\": \"value is not a valid integer\",\n      \"type\": \"type_error.integer\"\n    }\n  ],\n  \"body\": {\n    \"title\": \"towel\",\n    \"size\": \"XL\"\n  }\n}\n</code></pre>"},{"location":"tutorial/handling-errors/#httpexception-de-readyapi-vs-httpexception-de-starlette","title":"<code>HTTPException</code> de ReadyAPI vs <code>HTTPException</code> de Starlette","text":"<p>ReadyAPI tiene su propio <code>HTTPException</code>.</p> <p>Y la clase de error <code>HTTPException</code> de ReadyAPI hereda de la clase de error <code>HTTPException</code> de Starlette.</p> <p>La \u00fanica diferencia es que el <code>HTTPException</code> de ReadyAPI acepta cualquier dato JSON-able para el campo <code>detail</code>, mientras que el <code>HTTPException</code> de Starlette solo acepta strings para ello.</p> <p>As\u00ed que puedes seguir lanzando un <code>HTTPException</code> de ReadyAPI como de costumbre en tu c\u00f3digo.</p> <p>Pero cuando registras un manejador de excepciones, deber\u00edas registrarlo para el <code>HTTPException</code> de Starlette.</p> <p>De esta manera, si alguna parte del c\u00f3digo interno de Starlette, o una extensi\u00f3n o complemento de Starlette, lanza un <code>HTTPException</code> de Starlette, tu manejador podr\u00e1 capturarlo y manejarlo.</p> <p>En este ejemplo, para poder tener ambos <code>HTTPException</code> en el mismo c\u00f3digo, las excepciones de Starlette son renombradas a <code>StarletteHTTPException</code>:</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\n</code></pre>"},{"location":"tutorial/handling-errors/#reutilizar-los-manejadores-de-excepciones-de-readyapi","title":"Reutilizar los manejadores de excepciones de ReadyAPI","text":"<p>Si quieres usar la excepci\u00f3n junto con los mismos manejadores de excepciones predeterminados de ReadyAPI, puedes importar y reutilizar los manejadores de excepciones predeterminados de <code>readyapi.exception_handlers</code>:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom readyapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>En este ejemplo solo est\u00e1s <code>print</code>eando el error con un mensaje muy expresivo, pero te haces una idea. Puedes usar la excepci\u00f3n y luego simplemente reutilizar los manejadores de excepciones predeterminados.</p>"},{"location":"tutorial/header-param-models/","title":"Modelos de Par\u00e1metros de Header","text":"<p>Si tienes un grupo de par\u00e1metros de header relacionados, puedes crear un modelo Pydantic para declararlos.</p> <p>Esto te permitir\u00e1 reutilizar el modelo en m\u00faltiples lugares y tambi\u00e9n declarar validaciones y metadatos para todos los par\u00e1metros al mismo tiempo. \ud83d\ude0e</p> <p>Nota</p> <p>Esto es compatible desde la versi\u00f3n <code>0.115.0</code> de ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/header-param-models/#parametros-de-header-con-un-modelo-pydantic","title":"Par\u00e1metros de Header con un Modelo Pydantic","text":"<p>Declara los par\u00e1metros de header que necesitas en un modelo Pydantic, y luego declara el par\u00e1metro como <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>ReadyAPI extraer\u00e1 los datos para cada campo de los headers en el request y te dar\u00e1 el modelo Pydantic que definiste.</p>"},{"location":"tutorial/header-param-models/#revisa-la-documentacion","title":"Revisa la Documentaci\u00f3n","text":"<p>Puedes ver los headers requeridos en la interfaz de documentaci\u00f3n en <code>/docs</code>:</p>"},{"location":"tutorial/header-param-models/#prohibir-headers-extra","title":"Prohibir Headers Extra","text":"<p>En algunos casos de uso especiales (probablemente no muy comunes), podr\u00edas querer restringir los headers que deseas recibir.</p> <p>Puedes usar la configuraci\u00f3n del modelo de Pydantic para <code>prohibir</code> cualquier campo <code>extra</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Si un cliente intenta enviar algunos headers extra, recibir\u00e1n un response de error.</p> <p>Por ejemplo, si el cliente intenta enviar un header <code>tool</code> con un valor de <code>plumbus</code>, recibir\u00e1n un response de error indicando que el par\u00e1metro de header <code>tool</code> no est\u00e1 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"header\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-param-models/#resumen","title":"Resumen","text":"<p>Puedes usar modelos Pydantic para declarar headers en ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/header-params/","title":"Par\u00e1metros de Header","text":"<p>Puedes definir los par\u00e1metros de Header de la misma manera que defines los par\u00e1metros de <code>Query</code>, <code>Path</code> y <code>Cookie</code>.</p>"},{"location":"tutorial/header-params/#importar-header","title":"Importar <code>Header</code>","text":"<p>Primero importa <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre>"},{"location":"tutorial/header-params/#declarar-parametros-de-header","title":"Declarar par\u00e1metros de <code>Header</code>","text":"<p>Luego declara los par\u00e1metros de header usando la misma estructura que con <code>Path</code>, <code>Query</code> y <code>Cookie</code>.</p> <p>Puedes definir el valor por defecto as\u00ed como toda la validaci\u00f3n extra o los par\u00e1metros de anotaciones:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Detalles T\u00e9cnicos</p> <p><code>Header</code> es una clase \"hermana\" de <code>Path</code>, <code>Query</code> y <code>Cookie</code>. Tambi\u00e9n hereda de la misma clase com\u00fan <code>Param</code>.</p> <p>Pero recuerda que cuando importas <code>Query</code>, <code>Path</code>, <code>Header</code>, y otros de <code>readyapi</code>, en realidad son funciones que retornan clases especiales.</p> <p>Informaci\u00f3n</p> <p>Para declarar headers, necesitas usar <code>Header</code>, porque de otra forma los par\u00e1metros ser\u00edan interpretados como par\u00e1metros de query.</p>"},{"location":"tutorial/header-params/#conversion-automatica","title":"Conversi\u00f3n autom\u00e1tica","text":"<p><code>Header</code> tiene un poquito de funcionalidad extra adem\u00e1s de lo que proporcionan <code>Path</code>, <code>Query</code> y <code>Cookie</code>.</p> <p>La mayor\u00eda de los headers est\u00e1ndar est\u00e1n separados por un car\u00e1cter \"guion\", tambi\u00e9n conocido como el \"s\u00edmbolo menos\" (<code>-</code>).</p> <p>Pero una variable como <code>user-agent</code> es inv\u00e1lida en Python.</p> <p>As\u00ed que, por defecto, <code>Header</code> convertir\u00e1 los caracteres de los nombres de los par\u00e1metros de guion bajo (<code>_</code>) a guion (<code>-</code>) para extraer y documentar los headers.</p> <p>Adem\u00e1s, los headers HTTP no diferencian entre may\u00fasculas y min\u00fasculas, por lo que los puedes declarar con el estilo est\u00e1ndar de Python (tambi\u00e9n conocido como \"snake_case\").</p> <p>As\u00ed que, puedes usar <code>user_agent</code> como normalmente lo har\u00edas en c\u00f3digo Python, en lugar de necesitar capitalizar las primeras letras como <code>User_Agent</code> o algo similar.</p> <p>Si por alguna raz\u00f3n necesitas desactivar la conversi\u00f3n autom\u00e1tica de guiones bajos a guiones, establece el par\u00e1metro <code>convert_underscores</code> de <code>Header</code> a <code>False</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Advertencia</p> <p>Antes de establecer <code>convert_underscores</code> a <code>False</code>, ten en cuenta que algunos proxies y servidores HTTP no permiten el uso de headers con guiones bajos.</p>"},{"location":"tutorial/header-params/#headers-duplicados","title":"Headers duplicados","text":"<p>Es posible recibir headers duplicados. Eso significa, el mismo header con m\u00faltiples valores.</p> <p>Puedes definir esos casos usando una lista en la declaraci\u00f3n del tipo.</p> <p>Recibir\u00e1s todos los valores del header duplicado como una <code>list</code> de Python.</p> <p>Por ejemplo, para declarar un header de <code>X-Token</code> que puede aparecer m\u00e1s de una vez, puedes escribir:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Si te comunicas con esa path operation enviando dos headers HTTP como:</p> <pre><code>X-Token: foo\nX-Token: bar\n</code></pre> <p>El response ser\u00eda como:</p> <pre><code>{\n    \"X-Token values\": [\n        \"bar\",\n        \"foo\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-params/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Declara headers con <code>Header</code>, usando el mismo patr\u00f3n com\u00fan que <code>Query</code>, <code>Path</code> y <code>Cookie</code>.</p> <p>Y no te preocupes por los guiones bajos en tus variables, ReadyAPI se encargar\u00e1 de convertirlos.</p>"},{"location":"tutorial/metadata/","title":"Metadata y URLs de Docs","text":"<p>Puedes personalizar varias configuraciones de metadata en tu aplicaci\u00f3n ReadyAPI.</p>"},{"location":"tutorial/metadata/#metadata-para-la-api","title":"Metadata para la API","text":"<p>Puedes establecer los siguientes campos que se usan en la especificaci\u00f3n OpenAPI y en las interfaces autom\u00e1ticas de documentaci\u00f3n de la API:</p> Par\u00e1metro Tipo Descripci\u00f3n <code>title</code> <code>str</code> El t\u00edtulo de la API. <code>summary</code> <code>str</code> Un resumen corto de la API. Disponible desde OpenAPI 3.1.0, ReadyAPI 0.99.0. <code>description</code> <code>str</code> Una breve descripci\u00f3n de la API. Puede usar Markdown. <code>version</code> <code>string</code> La versi\u00f3n de la API. Esta es la versi\u00f3n de tu propia aplicaci\u00f3n, no de OpenAPI. Por ejemplo, <code>2.5.0</code>. <code>terms_of_service</code> <code>str</code> Una URL a los T\u00e9rminos de Servicio para la API. Si se proporciona, debe ser una URL. <code>contact</code> <code>dict</code> La informaci\u00f3n de contacto para la API expuesta. Puede contener varios campos. <code>contact</code> fieldsPar\u00e1metroTipoDescripci\u00f3n<code>name</code><code>str</code>El nombre identificativo de la persona/organizaci\u00f3n de contacto.<code>url</code><code>str</code>La URL que apunta a la informaci\u00f3n de contacto. DEBE tener el formato de una URL.<code>email</code><code>str</code>La direcci\u00f3n de correo electr\u00f3nico de la persona/organizaci\u00f3n de contacto. DEBE tener el formato de una direcci\u00f3n de correo. <code>license_info</code> <code>dict</code> La informaci\u00f3n de la licencia para la API expuesta. Puede contener varios campos. <code>license_info</code> fieldsPar\u00e1metroTipoDescripci\u00f3n<code>name</code><code>str</code>REQUERIDO (si se establece un <code>license_info</code>). El nombre de la licencia utilizada para la API.<code>identifier</code><code>str</code>Una expresi\u00f3n de licencia SPDX para la API. El campo <code>identifier</code> es mutuamente excluyente del campo <code>url</code>. Disponible desde OpenAPI 3.1.0, ReadyAPI 0.99.0.<code>url</code><code>str</code>Una URL a la licencia utilizada para la API. DEBE tener el formato de una URL. <p>Puedes configurarlos de la siguiente manera:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre> <p>Consejo</p> <p>Puedes escribir Markdown en el campo <code>description</code> y se mostrar\u00e1 en el resultado.</p> <p>Con esta configuraci\u00f3n, la documentaci\u00f3n autom\u00e1tica de la API se ver\u00eda as\u00ed:</p> <p></p>"},{"location":"tutorial/metadata/#identificador-de-licencia","title":"Identificador de licencia","text":"<p>Desde OpenAPI 3.1.0 y ReadyAPI 0.99.0, tambi\u00e9n puedes establecer la <code>license_info</code> con un <code>identifier</code> en lugar de una <code>url</code>.</p> <p>Por ejemplo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre>"},{"location":"tutorial/metadata/#metadata-para-etiquetas","title":"Metadata para etiquetas","text":"<p>Tambi\u00e9n puedes agregar metadata adicional para las diferentes etiquetas usadas para agrupar tus path operations con el par\u00e1metro <code>openapi_tags</code>.</p> <p>Este toma una list que contiene un diccionario para cada etiqueta.</p> <p>Cada diccionario puede contener:</p> <ul> <li><code>name</code> (requerido): un <code>str</code> con el mismo nombre de etiqueta que usas en el par\u00e1metro <code>tags</code> en tus path operations y <code>APIRouter</code>s.</li> <li><code>description</code>: un <code>str</code> con una breve descripci\u00f3n de la etiqueta. Puede tener Markdown y se mostrar\u00e1 en la interfaz de documentaci\u00f3n.</li> <li><code>externalDocs</code>: un <code>dict</code> que describe documentaci\u00f3n externa con:<ul> <li><code>description</code>: un <code>str</code> con una breve descripci\u00f3n para la documentaci\u00f3n externa.</li> <li><code>url</code> (requerido): un <code>str</code> con la URL para la documentaci\u00f3n externa.</li> </ul> </li> </ul>"},{"location":"tutorial/metadata/#crear-metadata-para-etiquetas","title":"Crear metadata para etiquetas","text":"<p>Probemos eso en un ejemplo con etiquetas para <code>users</code> y <code>items</code>.</p> <p>Crea metadata para tus etiquetas y p\u00e1sala al par\u00e1metro <code>openapi_tags</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Nota que puedes utilizar Markdown dentro de las descripciones, por ejemplo \"login\" se mostrar\u00e1 en negrita (login) y \"fancy\" se mostrar\u00e1 en cursiva (fancy).</p> <p>Consejo</p> <p>No tienes que agregar metadata para todas las etiquetas que uses.</p>"},{"location":"tutorial/metadata/#usar-tus-etiquetas","title":"Usar tus etiquetas","text":"<p>Usa el par\u00e1metro <code>tags</code> con tus path operations (y <code>APIRouter</code>s) para asignarlas a diferentes etiquetas:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Informaci\u00f3n</p> <p>Lee m\u00e1s sobre etiquetas en Configuraci\u00f3n de Path Operation.</p>"},{"location":"tutorial/metadata/#revisa-la-documentacion","title":"Revisa la documentaci\u00f3n","text":"<p>Ahora, si revisas la documentaci\u00f3n, mostrar\u00e1 toda la metadata adicional:</p> <p></p>"},{"location":"tutorial/metadata/#orden-de-las-etiquetas","title":"Orden de las etiquetas","text":"<p>El orden de cada diccionario de metadata de etiqueta tambi\u00e9n define el orden mostrado en la interfaz de documentaci\u00f3n.</p> <p>Por ejemplo, aunque <code>users</code> ir\u00eda despu\u00e9s de <code>items</code> en orden alfab\u00e9tico, se muestra antes porque agregamos su metadata como el primer diccionario en la list.</p>"},{"location":"tutorial/metadata/#url-de-openapi","title":"URL de OpenAPI","text":"<p>Por defecto, el esquema OpenAPI se sirve en <code>/openapi.json</code>.</p> <p>Pero puedes configurarlo con el par\u00e1metro <code>openapi_url</code>.</p> <p>Por ejemplo, para configurarlo para que se sirva en <code>/api/v1/openapi.json</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Si quieres deshabilitar el esquema OpenAPI completamente, puedes establecer <code>openapi_url=None</code>, eso tambi\u00e9n deshabilitar\u00e1 las interfaces de usuario de documentaci\u00f3n que lo usan.</p>"},{"location":"tutorial/metadata/#urls-de-docs","title":"URLs de Docs","text":"<p>Puedes configurar las dos interfaces de usuario de documentaci\u00f3n incluidas:</p> <ul> <li>Swagger UI: servida en <code>/docs</code>.<ul> <li>Puedes establecer su URL con el par\u00e1metro <code>docs_url</code>.</li> <li>Puedes deshabilitarla estableciendo <code>docs_url=None</code>.</li> </ul> </li> <li>ReDoc: servida en <code>/redoc</code>.<ul> <li>Puedes establecer su URL con el par\u00e1metro <code>redoc_url</code>.</li> <li>Puedes deshabilitarla estableciendo <code>redoc_url=None</code>.</li> </ul> </li> </ul> <p>Por ejemplo, para configurar Swagger UI para que se sirva en <code>/documentation</code> y deshabilitar ReDoc:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"tutorial/middleware/","title":"Middleware","text":"<p>Puedes a\u00f1adir middleware a las aplicaciones de ReadyAPI.</p> <p>Un \"middleware\" es una funci\u00f3n que trabaja con cada request antes de que sea procesada por cualquier path operation espec\u00edfica. Y tambi\u00e9n con cada response antes de devolverla.</p> <ul> <li>Toma cada request que llega a tu aplicaci\u00f3n.</li> <li>Puede entonces hacer algo a esa request o ejecutar cualquier c\u00f3digo necesario.</li> <li>Luego pasa la request para que sea procesada por el resto de la aplicaci\u00f3n (por alguna path operation).</li> <li>Despu\u00e9s toma la response generada por la aplicaci\u00f3n (por alguna path operation).</li> <li>Puede hacer algo a esa response o ejecutar cualquier c\u00f3digo necesario.</li> <li>Luego devuelve la response.</li> </ul> <p>Detalles T\u00e9cnicos</p> <p>Si tienes dependencias con <code>yield</code>, el c\u00f3digo de salida se ejecutar\u00e1 despu\u00e9s del middleware.</p> <p>Si hubiera alguna tarea en segundo plano (documentada m\u00e1s adelante), se ejecutar\u00e1 despu\u00e9s de todo el middleware.</p>"},{"location":"tutorial/middleware/#crear-un-middleware","title":"Crear un middleware","text":"<p>Para crear un middleware usas el decorador <code>@app.middleware(\"http\")</code> encima de una funci\u00f3n.</p> <p>La funci\u00f3n middleware recibe:</p> <ul> <li>La <code>request</code>.</li> <li>Una funci\u00f3n <code>call_next</code> que recibir\u00e1 la <code>request</code> como par\u00e1metro.<ul> <li>Esta funci\u00f3n pasar\u00e1 la <code>request</code> a la correspondiente path operation.</li> <li>Luego devuelve la <code>response</code> generada por la correspondiente path operation.</li> </ul> </li> <li>Puedes entonces modificar a\u00fan m\u00e1s la <code>response</code> antes de devolverla.</li> </ul> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Consejo</p> <p>Ten en cuenta que los custom proprietary headers se pueden a\u00f1adir usando el prefijo 'X-'.</p> <p>Pero si tienes custom headers que deseas que un cliente en un navegador pueda ver, necesitas a\u00f1adirlos a tus configuraciones de CORS (CORS (Cross-Origin Resource Sharing)) usando el par\u00e1metro <code>expose_headers</code> documentado en la documentaci\u00f3n de CORS de Starlette.</p> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI lo proporciona como una conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.</p>"},{"location":"tutorial/middleware/#antes-y-despues-de-la-response","title":"Antes y despu\u00e9s de la <code>response</code>","text":"<p>Puedes a\u00f1adir c\u00f3digo que se ejecute con la <code>request</code>, antes de que cualquier path operation la reciba.</p> <p>Y tambi\u00e9n despu\u00e9s de que se genere la <code>response</code>, antes de devolverla.</p> <p>Por ejemplo, podr\u00edas a\u00f1adir un custom header <code>X-Process-Time</code> que contenga el tiempo en segundos que tom\u00f3 procesar la request y generar una response:</p> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Consejo</p> <p>Aqu\u00ed usamos <code>time.perf_counter()</code> en lugar de <code>time.time()</code> porque puede ser m\u00e1s preciso para estos casos de uso. \ud83e\udd13</p>"},{"location":"tutorial/middleware/#otros-middlewares","title":"Otros middlewares","text":"<p>M\u00e1s adelante puedes leer sobre otros middlewares en la Gu\u00eda del Usuario Avanzado: Middleware Avanzado.</p> <p>Leer\u00e1s sobre c\u00f3mo manejar CORS con un middleware en la siguiente secci\u00f3n.</p>"},{"location":"tutorial/path-operation-configuration/","title":"Configuraci\u00f3n de Path Operation","text":"<p>Hay varios par\u00e1metros que puedes pasar a tu path operation decorator para configurarlo.</p> <p>Advertencia</p> <p>Ten en cuenta que estos par\u00e1metros se pasan directamente al path operation decorator, no a tu path operation function.</p>"},{"location":"tutorial/path-operation-configuration/#codigo-de-estado-del-response","title":"C\u00f3digo de Estado del Response","text":"<p>Puedes definir el <code>status_code</code> (HTTP) que se utilizar\u00e1 en el response de tu path operation.</p> <p>Puedes pasar directamente el c\u00f3digo <code>int</code>, como <code>404</code>.</p> <p>Pero si no recuerdas para qu\u00e9 es cada c\u00f3digo num\u00e9rico, puedes usar las constantes atajo en <code>status</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Ese c\u00f3digo de estado se usar\u00e1 en el response y se a\u00f1adir\u00e1 al esquema de OpenAPI.</p> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette import status</code>.</p> <p>ReadyAPI ofrece el mismo <code>starlette.status</code> como <code>readyapi.status</code> solo por conveniencia para ti, el desarrollador. Pero viene directamente de Starlette.</p>"},{"location":"tutorial/path-operation-configuration/#tags","title":"Tags","text":"<p>Puedes a\u00f1adir tags a tu path operation, pasando el par\u00e1metro <code>tags</code> con un <code>list</code> de <code>str</code> (com\u00fanmente solo una <code>str</code>):</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <p>Ser\u00e1n a\u00f1adidas al esquema de OpenAPI y usadas por las interfaces de documentaci\u00f3n autom\u00e1tica:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#tags-con-enums","title":"Tags con Enums","text":"<p>Si tienes una gran aplicaci\u00f3n, podr\u00edas terminar acumulando varias tags, y querr\u00edas asegurarte de que siempre uses la misma tag para path operations relacionadas.</p> <p>En estos casos, podr\u00eda tener sentido almacenar las tags en un <code>Enum</code>.</p> <p>ReadyAPI soporta eso de la misma manera que con strings normales:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#resumen-y-descripcion","title":"Resumen y Descripci\u00f3n","text":"<p>Puedes a\u00f1adir un <code>summary</code> y <code>description</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#descripcion-desde-docstring","title":"Descripci\u00f3n desde docstring","text":"<p>Como las descripciones tienden a ser largas y cubrir m\u00faltiples l\u00edneas, puedes declarar la descripci\u00f3n de la path operation en la docstring de la funci\u00f3n y ReadyAPI la leer\u00e1 desde all\u00ed.</p> <p>Puedes escribir Markdown en el docstring, se interpretar\u00e1 y mostrar\u00e1 correctamente (teniendo en cuenta la indentaci\u00f3n del docstring).</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Ser\u00e1 usado en la documentaci\u00f3n interactiva:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#descripcion-del-response","title":"Descripci\u00f3n del Response","text":"<p>Puedes especificar la descripci\u00f3n del response con el par\u00e1metro <code>response_description</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Informaci\u00f3n</p> <p>Ten en cuenta que <code>response_description</code> se refiere espec\u00edficamente al response, mientras que <code>description</code> se refiere a la path operation en general.</p> <p>Revisa</p> <p>OpenAPI especifica que cada path operation requiere una descripci\u00f3n de response.</p> <p>Entonces, si no proporcionas una, ReadyAPI generar\u00e1 autom\u00e1ticamente una de \"Response exitoso\".</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#deprecar-una-path-operation","title":"Deprecar una path operation","text":"<p>Si necesitas marcar una path operation como deprecated, pero sin eliminarla, pasa el par\u00e1metro <code>deprecated</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Se marcar\u00e1 claramente como deprecado en la documentaci\u00f3n interactiva:</p> <p></p> <p>Revisa c\u00f3mo lucen las path operations deprecadas y no deprecadas:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#resumen","title":"Resumen","text":"<p>Puedes configurar y a\u00f1adir metadatos a tus path operations f\u00e1cilmente pasando par\u00e1metros a los path operation decorators.</p>"},{"location":"tutorial/path-params-numeric-validations/","title":"Par\u00e1metros de Path y Validaciones Num\u00e9ricas","text":"<p>De la misma manera que puedes declarar m\u00e1s validaciones y metadatos para los par\u00e1metros de query con <code>Query</code>, puedes declarar el mismo tipo de validaciones y metadatos para los par\u00e1metros de path con <code>Path</code>.</p>"},{"location":"tutorial/path-params-numeric-validations/#importar-path","title":"Importar Path","text":"<p>Primero, importa <code>Path</code> de <code>readyapi</code>, e importa <code>Annotated</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informaci\u00f3n</p> <p>ReadyAPI agreg\u00f3 soporte para <code>Annotated</code> (y comenz\u00f3 a recomendar su uso) en la versi\u00f3n 0.95.0.</p> <p>Si tienes una versi\u00f3n anterior, obtendr\u00e1s errores al intentar usar <code>Annotated</code>.</p> <p>Aseg\u00farate de Actualizar la versi\u00f3n de ReadyAPI a al menos la 0.95.1 antes de usar <code>Annotated</code>.</p>"},{"location":"tutorial/path-params-numeric-validations/#declarar-metadatos","title":"Declarar metadatos","text":"<p>Puedes declarar todos los mismos par\u00e1metros que para <code>Query</code>.</p> <p>Por ejemplo, para declarar un valor de metadato <code>title</code> para el par\u00e1metro de path <code>item_id</code> puedes escribir:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Nota</p> <p>Un par\u00e1metro de path siempre es requerido ya que tiene que formar parte del path. Incluso si lo declaras con <code>None</code> o le asignas un valor por defecto, no afectar\u00e1 en nada, siempre ser\u00e1 requerido.</p>"},{"location":"tutorial/path-params-numeric-validations/#ordena-los-parametros-como-necesites","title":"Ordena los par\u00e1metros como necesites","text":"<p>Consejo</p> <p>Esto probablemente no es tan importante o necesario si usas <code>Annotated</code>.</p> <p>Supongamos que quieres declarar el par\u00e1metro de query <code>q</code> como un <code>str</code> requerido.</p> <p>Y no necesitas declarar nada m\u00e1s para ese par\u00e1metro, as\u00ed que realmente no necesitas usar <code>Query</code>.</p> <p>Pero a\u00fan necesitas usar <code>Path</code> para el par\u00e1metro de path <code>item_id</code>. Y no quieres usar <code>Annotated</code> por alguna raz\u00f3n.</p> <p>Python se quejar\u00e1 si pones un valor con un \"default\" antes de un valor que no tenga un \"default\".</p> <p>Pero puedes reordenarlos y poner el valor sin un default (el par\u00e1metro de query <code>q</code>) primero.</p> <p>No importa para ReadyAPI. Detectar\u00e1 los par\u00e1metros por sus nombres, tipos y declaraciones por defecto (<code>Query</code>, <code>Path</code>, etc.), no le importa el orden.</p> <p>As\u00ed que puedes declarar tu funci\u00f3n como:</p> Python 3.8 non-Annotated <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Pero ten en cuenta que si usas <code>Annotated</code>, no tendr\u00e1s este problema, no importar\u00e1 ya que no est\u00e1s usando los valores por defecto de los par\u00e1metros de la funci\u00f3n para <code>Query()</code> o <code>Path()</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#ordena-los-parametros-como-necesites-trucos","title":"Ordena los par\u00e1metros como necesites, trucos","text":"<p>Consejo</p> <p>Esto probablemente no es tan importante o necesario si usas <code>Annotated</code>.</p> <p>Aqu\u00ed hay un peque\u00f1o truco que puede ser \u00fatil, pero no lo necesitar\u00e1s a menudo.</p> <p>Si quieres:</p> <ul> <li>declarar el par\u00e1metro de query <code>q</code> sin un <code>Query</code> ni ning\u00fan valor por defecto</li> <li>declarar el par\u00e1metro de path <code>item_id</code> usando <code>Path</code></li> <li>tenerlos en un orden diferente</li> <li>no usar <code>Annotated</code></li> </ul> <p>...Python tiene una sintaxis especial para eso.</p> <p>Pasa <code>*</code>, como el primer par\u00e1metro de la funci\u00f3n.</p> <p>Python no har\u00e1 nada con ese <code>*</code>, pero sabr\u00e1 que todos los par\u00e1metros siguientes deben ser llamados como argumentos de palabras clave (parejas key-value), tambi\u00e9n conocidos como <code>kwargs</code>. Incluso si no tienen un valor por defecto.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#mejor-con-annotated","title":"Mejor con <code>Annotated</code>","text":"<p>Ten en cuenta que si usas <code>Annotated</code>, como no est\u00e1s usando valores por defecto de los par\u00e1metros de la funci\u00f3n, no tendr\u00e1s este problema y probablemente no necesitar\u00e1s usar <code>*</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validaciones-numericas-mayor-o-igual","title":"Validaciones num\u00e9ricas: mayor o igual","text":"<p>Con <code>Query</code> y <code>Path</code> (y otros que ver\u00e1s m\u00e1s adelante) puedes declarar restricciones num\u00e9ricas.</p> <p>Aqu\u00ed, con <code>ge=1</code>, <code>item_id</code> necesitar\u00e1 ser un n\u00famero entero \"<code>g</code>reater than or <code>e</code>qual\" a <code>1</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validaciones-numericas-mayor-que-y-menor-o-igual","title":"Validaciones num\u00e9ricas: mayor que y menor o igual","text":"<p>Lo mismo aplica para:</p> <ul> <li><code>gt</code>: <code>g</code>reater <code>t</code>han</li> <li><code>le</code>: <code>l</code>ess than or <code>e</code>qual</li> </ul> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validaciones-numericas-flotantes-mayor-y-menor","title":"Validaciones num\u00e9ricas: flotantes, mayor y menor","text":"<p>Las validaciones num\u00e9ricas tambi\u00e9n funcionan para valores <code>float</code>.</p> <p>Aqu\u00ed es donde se convierte en importante poder declarar <code>gt</code> y no solo <code>ge</code>. Ya que con esto puedes requerir, por ejemplo, que un valor sea mayor que <code>0</code>, incluso si es menor que <code>1</code>.</p> <p>As\u00ed, <code>0.5</code> ser\u00eda un valor v\u00e1lido. Pero <code>0.0</code> o <code>0</code> no lo ser\u00edan.</p> <p>Y lo mismo para <code>lt</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#resumen","title":"Resumen","text":"<p>Con <code>Query</code>, <code>Path</code> (y otros que a\u00fan no has visto) puedes declarar metadatos y validaciones de string de las mismas maneras que con Par\u00e1metros de Query y Validaciones de String.</p> <p>Y tambi\u00e9n puedes declarar validaciones num\u00e9ricas:</p> <ul> <li><code>gt</code>: <code>g</code>reater <code>t</code>han</li> <li><code>ge</code>: <code>g</code>reater than or <code>e</code>qual</li> <li><code>lt</code>: <code>l</code>ess <code>t</code>han</li> <li><code>le</code>: <code>l</code>ess than or <code>e</code>qual</li> </ul> <p>Informaci\u00f3n</p> <p><code>Query</code>, <code>Path</code> y otras clases que ver\u00e1s m\u00e1s adelante son subclases de una clase com\u00fan <code>Param</code>.</p> <p>Todas ellas comparten los mismos par\u00e1metros para validaci\u00f3n adicional y metadatos que has visto.</p> <p>Nota t\u00e9cnica</p> <p>Cuando importas <code>Query</code>, <code>Path</code> y otros de <code>readyapi</code>, en realidad son funciones.</p> <p>Que cuando se llaman, retornan instances de clases con el mismo nombre.</p> <p>As\u00ed que importas <code>Query</code>, que es una funci\u00f3n. Y cuando la llamas, retorna una instance de una clase tambi\u00e9n llamada <code>Query</code>.</p> <p>Estas funciones est\u00e1n all\u00ed (en lugar de usar simplemente las clases directamente) para que tu editor no marque errores sobre sus tipos.</p> <p>De esa forma puedes usar tu editor y herramientas de programaci\u00f3n normales sin tener que agregar configuraciones personalizadas para omitir esos errores.</p>"},{"location":"tutorial/path-params/","title":"Par\u00e1metros de Path","text":"<p>Puedes declarar \"par\u00e1metros\" o \"variables\" de path con la misma sintaxis que se usa en los format strings de Python:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n</code></pre> <p>El valor del par\u00e1metro de path <code>item_id</code> se pasar\u00e1 a tu funci\u00f3n como el argumento <code>item_id</code>.</p> <p>As\u00ed que, si ejecutas este ejemplo y vas a http://127.0.0.1:8000/items/foo, ver\u00e1s un response de:</p> <pre><code>{\"item_id\":\"foo\"}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-de-path-con-tipos","title":"Par\u00e1metros de path con tipos","text":"<p>Puedes declarar el tipo de un par\u00e1metro de path en la funci\u00f3n, usando anotaciones de tipos est\u00e1ndar de Python:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>En este caso, <code>item_id</code> se declara como un <code>int</code>.</p> <p>Revisa</p> <p>Esto te dar\u00e1 soporte del editor dentro de tu funci\u00f3n, con chequeo de errores, autocompletado, etc.</p>"},{"location":"tutorial/path-params/#conversion-de-datos","title":"Conversi\u00f3n de datos","text":"<p>Si ejecutas este ejemplo y abres tu navegador en http://127.0.0.1:8000/items/3, ver\u00e1s un response de:</p> <pre><code>{\"item_id\":3}\n</code></pre> <p>Revisa</p> <p>Nota que el valor que tu funci\u00f3n recibi\u00f3 (y devolvi\u00f3) es <code>3</code>, como un <code>int</code> de Python, no un string <code>\"3\"</code>.</p> <p>Entonces, con esa declaraci\u00f3n de tipo, ReadyAPI te ofrece \"parsing\" autom\u00e1tico de requests.</p>"},{"location":"tutorial/path-params/#validacion-de-datos","title":"Validaci\u00f3n de datos","text":"<p>Pero si vas al navegador en http://127.0.0.1:8000/items/foo, ver\u00e1s un bonito error HTTP de:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"type\": \"int_parsing\",\n      \"loc\": [\n        \"path\",\n        \"item_id\"\n      ],\n      \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n      \"input\": \"foo\",\n      \"url\": \"https://errors.pydantic.dev/2.1/v/int_parsing\"\n    }\n  ]\n}\n</code></pre> <p>porque el par\u00e1metro de path <code>item_id</code> ten\u00eda un valor de <code>\"foo\"</code>, que no es un <code>int</code>.</p> <p>El mismo error aparecer\u00eda si proporcionaras un <code>float</code> en lugar de un <code>int</code>, como en: http://127.0.0.1:8000/items/4.2</p> <p>Revisa</p> <p>Entonces, con la misma declaraci\u00f3n de tipo de Python, ReadyAPI te ofrece validaci\u00f3n de datos.</p> <p>Nota que el error tambi\u00e9n indica claramente el punto exacto donde la validaci\u00f3n fall\u00f3.</p> <p>Esto es incre\u00edblemente \u00fatil mientras desarrollas y depuras c\u00f3digo que interact\u00faa con tu API.</p>"},{"location":"tutorial/path-params/#documentacion","title":"Documentaci\u00f3n","text":"<p>Y cuando abras tu navegador en http://127.0.0.1:8000/docs, ver\u00e1s una documentaci\u00f3n de API autom\u00e1tica e interactiva como:</p> <p></p> <p>Revisa</p> <p>Nuevamente, solo con esa misma declaraci\u00f3n de tipo de Python, ReadyAPI te ofrece documentaci\u00f3n autom\u00e1tica e interactiva (integrando Swagger UI).</p> <p>Nota que el par\u00e1metro de path est\u00e1 declarado como un entero.</p>"},{"location":"tutorial/path-params/#beneficios-basados-en-estandares-documentacion-alternativa","title":"Beneficios basados en est\u00e1ndares, documentaci\u00f3n alternativa","text":"<p>Y porque el esquema generado es del est\u00e1ndar OpenAPI, hay muchas herramientas compatibles.</p> <p>Debido a esto, el propio ReadyAPI proporciona una documentaci\u00f3n de API alternativa (usando ReDoc), a la cual puedes acceder en http://127.0.0.1:8000/redoc:</p> <p></p> <p>De la misma manera, hay muchas herramientas compatibles. Incluyendo herramientas de generaci\u00f3n de c\u00f3digo para muchos lenguajes.</p>"},{"location":"tutorial/path-params/#pydantic","title":"Pydantic","text":"<p>Toda la validaci\u00f3n de datos se realiza internamente con Pydantic, as\u00ed que obtienes todos los beneficios de esta. Y sabes que est\u00e1s en buenas manos.</p> <p>Puedes usar las mismas declaraciones de tipo con <code>str</code>, <code>float</code>, <code>bool</code> y muchos otros tipos de datos complejos.</p> <p>Varios de estos se exploran en los siguientes cap\u00edtulos del tutorial.</p>"},{"location":"tutorial/path-params/#el-orden-importa","title":"El orden importa","text":"<p>Al crear path operations, puedes encontrarte en situaciones donde tienes un path fijo.</p> <p>Como <code>/users/me</code>, imaginemos que es para obtener datos sobre el usuario actual.</p> <p>Y luego tambi\u00e9n puedes tener un path <code>/users/{user_id}</code> para obtener datos sobre un usuario espec\u00edfico por alg\u00fan ID de usuario.</p> <p>Debido a que las path operations se eval\u00faan en orden, necesitas asegurarte de que el path para <code>/users/me</code> se declara antes que el de <code>/users/{user_id}</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n</code></pre> <p>De lo contrario, el path para <code>/users/{user_id}</code> tambi\u00e9n coincidir\u00eda para <code>/users/me</code>, \"pensando\" que est\u00e1 recibiendo un par\u00e1metro <code>user_id</code> con un valor de <code>\"me\"</code>.</p> <p>De manera similar, no puedes redefinir una path operation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]\n</code></pre> <p>La primera siempre ser\u00e1 utilizada ya que el path coincide primero.</p>"},{"location":"tutorial/path-params/#valores-predefinidos","title":"Valores predefinidos","text":"<p>Si tienes una path operation que recibe un path parameter, pero quieres que los valores posibles v\u00e1lidos del path parameter est\u00e9n predefinidos, puedes usar un <code>Enum</code> est\u00e1ndar de Python.</p>"},{"location":"tutorial/path-params/#crear-una-clase-enum","title":"Crear una clase <code>Enum</code>","text":"<p>Importa <code>Enum</code> y crea una subclase que herede de <code>str</code> y de <code>Enum</code>.</p> <p>Al heredar de <code>str</code>, la documentaci\u00f3n de la API podr\u00e1 saber que los valores deben ser de tipo <code>string</code> y podr\u00e1 representarlos correctamente.</p> <p>Luego crea atributos de clase con valores fijos, que ser\u00e1n los valores v\u00e1lidos disponibles:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Informaci\u00f3n</p> <p>Las enumeraciones (o enums) est\u00e1n disponibles en Python desde la versi\u00f3n 3.4.</p> <p>Consejo</p> <p>Si te est\u00e1s preguntando, \"AlexNet\", \"ResNet\" y \"LeNet\" son solo nombres de modelos de Machine Learning.</p>"},{"location":"tutorial/path-params/#declarar-un-path-parameter","title":"Declarar un path parameter","text":"<p>Luego crea un path parameter con una anotaci\u00f3n de tipo usando la clase enum que creaste (<code>ModelName</code>):</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#revisa-la-documentacion","title":"Revisa la documentaci\u00f3n","text":"<p>Como los valores disponibles para el path parameter est\u00e1n predefinidos, la documentaci\u00f3n interactiva puede mostrarlos de manera ordenada:</p> <p></p>"},{"location":"tutorial/path-params/#trabajando-con-enumeraciones-de-python","title":"Trabajando con enumeraciones de Python","text":"<p>El valor del path parameter ser\u00e1 un miembro de enumeraci\u00f3n.</p>"},{"location":"tutorial/path-params/#comparar-miembros-de-enumeraciones","title":"Comparar miembros de enumeraciones","text":"<p>Puedes compararlo con el miembro de enumeraci\u00f3n en tu enum creada <code>ModelName</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#obtener-el-valor-de-enumeracion","title":"Obtener el valor de enumeraci\u00f3n","text":"<p>Puedes obtener el valor actual (un <code>str</code> en este caso) usando <code>model_name.value</code>, o en general, <code>your_enum_member.value</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Consejo</p> <p>Tambi\u00e9n podr\u00edas acceder al valor <code>\"lenet\"</code> con <code>ModelName.lenet.value</code>.</p>"},{"location":"tutorial/path-params/#devolver-miembros-de-enumeracion","title":"Devolver miembros de enumeraci\u00f3n","text":"<p>Puedes devolver miembros de enum desde tu path operation, incluso anidados en un cuerpo JSON (por ejemplo, un <code>dict</code>).</p> <p>Ser\u00e1n convertidos a sus valores correspondientes (cadenas en este caso) antes de devolverlos al cliente:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>En tu cliente recibir\u00e1s un response JSON como:</p> <pre><code>{\n  \"model_name\": \"alexnet\",\n  \"message\": \"Deep Learning FTW!\"\n}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-de-path-conteniendo-paths","title":"Par\u00e1metros de path conteniendo paths","text":"<p>Imaginemos que tienes una path operation con un path <code>/files/{file_path}</code>.</p> <p>Pero necesitas que <code>file_path</code> en s\u00ed mismo contenga un path, como <code>home/johndoe/myfile.txt</code>.</p> <p>Entonces, la URL para ese archivo ser\u00eda algo como: <code>/files/home/johndoe/myfile.txt</code>.</p>"},{"location":"tutorial/path-params/#soporte-de-openapi","title":"Soporte de OpenAPI","text":"<p>OpenAPI no soporta una manera de declarar un path parameter para que contenga un path dentro, ya que eso podr\u00eda llevar a escenarios que son dif\u00edciles de probar y definir.</p> <p>Sin embargo, todav\u00eda puedes hacerlo en ReadyAPI, usando una de las herramientas internas de Starlette.</p> <p>Y la documentaci\u00f3n seguir\u00eda funcionando, aunque no agregue ninguna documentaci\u00f3n indicando que el par\u00e1metro debe contener un path.</p>"},{"location":"tutorial/path-params/#convertidor-de-path","title":"Convertidor de Path","text":"<p>Usando una opci\u00f3n directamente de Starlette puedes declarar un path parameter conteniendo un path usando una URL como:</p> <pre><code>/files/{file_path:path}\n</code></pre> <p>En este caso, el nombre del par\u00e1metro es <code>file_path</code>, y la \u00faltima parte, <code>:path</code>, indica que el par\u00e1metro deber\u00eda coincidir con cualquier path.</p> <p>As\u00ed que, puedes usarlo con:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre> <p>Consejo</p> <p>Podr\u00edas necesitar que el par\u00e1metro contenga <code>/home/johndoe/myfile.txt</code>, con una barra inclinada (<code>/</code>) inicial.</p> <p>En ese caso, la URL ser\u00eda: <code>/files//home/johndoe/myfile.txt</code>, con una doble barra inclinada (<code>//</code>) entre <code>files</code> y <code>home</code>.</p>"},{"location":"tutorial/path-params/#resumen","title":"Resumen","text":"<p>Con ReadyAPI, al usar declaraciones de tipo est\u00e1ndar de Python, cortas e intuitivas, obtienes:</p> <ul> <li>Soporte del editor: chequeo de errores, autocompletado, etc.</li> <li>\"parsing\" de datos</li> <li>Validaci\u00f3n de datos</li> <li>Anotaci\u00f3n de API y documentaci\u00f3n autom\u00e1tica</li> </ul> <p>Y solo tienes que declararlos una vez.</p> <p>Probablemente esa sea la principal ventaja visible de ReadyAPI en comparaci\u00f3n con otros frameworks alternativos (aparte del rendimiento bruto).</p>"},{"location":"tutorial/query-param-models/","title":"Modelos de Par\u00e1metros Query","text":"<p>Si tienes un grupo de par\u00e1metros query que est\u00e1n relacionados, puedes crear un modelo de Pydantic para declararlos.</p> <p>Esto te permitir\u00eda reutilizar el modelo en m\u00faltiples lugares y tambi\u00e9n declarar validaciones y metadatos para todos los par\u00e1metros de una vez. \ud83d\ude0e</p> <p>Nota</p> <p>Esto es compatible desde la versi\u00f3n <code>0.115.0</code> de ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/query-param-models/#parametros-query-con-un-modelo-pydantic","title":"Par\u00e1metros Query con un Modelo Pydantic","text":"<p>Declara los par\u00e1metros query que necesitas en un modelo de Pydantic, y luego declara el par\u00e1metro como <code>Query</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>ReadyAPI extraer\u00e1 los datos para cada campo de los par\u00e1metros query en el request y te proporcionar\u00e1 el modelo de Pydantic que definiste.</p>"},{"location":"tutorial/query-param-models/#revisa-la-documentacion","title":"Revisa la Documentaci\u00f3n","text":"<p>Puedes ver los par\u00e1metros query en la UI de documentaci\u00f3n en <code>/docs</code>:</p>"},{"location":"tutorial/query-param-models/#prohibir-parametros-query-extras","title":"Prohibir Par\u00e1metros Query Extras","text":"<p>En algunos casos de uso especiales (probablemente no muy comunes), podr\u00edas querer restringir los par\u00e1metros query que deseas recibir.</p> <p>Puedes usar la configuraci\u00f3n del modelo de Pydantic para <code>forbid</code> cualquier campo <code>extra</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Si un cliente intenta enviar algunos datos extra en los par\u00e1metros query, recibir\u00e1n un response de error.</p> <p>Por ejemplo, si el cliente intenta enviar un par\u00e1metro query <code>tool</code> con un valor de <code>plumbus</code>, como:</p> <pre><code>https://example.com/items/?limit=10&amp;tool=plumbus\n</code></pre> <p>Recibir\u00e1n un response de error que les indica que el par\u00e1metro query <code>tool</code> no est\u00e1 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"query\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/query-param-models/#resumen","title":"Resumen","text":"<p>Puedes usar modelos de Pydantic para declarar par\u00e1metros query en ReadyAPI. \ud83d\ude0e</p> <p>Consejo</p> <p>Alerta de spoiler: tambi\u00e9n puedes usar modelos de Pydantic para declarar cookies y headers, pero leer\u00e1s sobre eso m\u00e1s adelante en el tutorial. \ud83e\udd2b</p>"},{"location":"tutorial/query-params-str-validations/","title":"Par\u00e1metros de Query y Validaciones de String","text":"<p>ReadyAPI te permite declarar informaci\u00f3n adicional y validaci\u00f3n para tus par\u00e1metros.</p> <p>Tomemos esta aplicaci\u00f3n como ejemplo:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>El par\u00e1metro de query <code>q</code> es del tipo <code>Union[str, None]</code> (o <code>str | None</code> en Python 3.10), lo que significa que es de tipo <code>str</code> pero tambi\u00e9n podr\u00eda ser <code>None</code>, y de hecho, el valor por defecto es <code>None</code>, as\u00ed que ReadyAPI sabr\u00e1 que no es requerido.</p> <p>Nota</p> <p>ReadyAPI sabr\u00e1 que el valor de <code>q</code> no es requerido por el valor por defecto <code>= None</code>.</p> <p>El <code>Union</code> en <code>Union[str, None]</code> permitir\u00e1 a tu editor darte un mejor soporte y detectar errores.</p>"},{"location":"tutorial/query-params-str-validations/#validaciones-adicionales","title":"Validaciones adicionales","text":"<p>Vamos a hacer que, aunque <code>q</code> sea opcional, siempre que se proporcione, su longitud no exceda los 50 caracteres.</p>"},{"location":"tutorial/query-params-str-validations/#importar-query-y-annotated","title":"Importar <code>Query</code> y <code>Annotated</code>","text":"<p>Para lograr eso, primero importa:</p> <ul> <li><code>Query</code> desde <code>readyapi</code></li> <li><code>Annotated</code> desde <code>typing</code> (o desde <code>typing_extensions</code> en Python por debajo de 3.9)</li> </ul> Python 3.10+Python 3.8+ <p>En Python 3.9 o superior, <code>Annotated</code> es parte de la biblioteca est\u00e1ndar, as\u00ed que puedes importarlo desde <code>typing</code>.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>En versiones de Python por debajo de 3.9 importas <code>Annotated</code> desde <code>typing_extensions</code>.</p> <p>Ya estar\u00e1 instalado con ReadyAPI.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informaci\u00f3n</p> <p>ReadyAPI a\u00f1adi\u00f3 soporte para <code>Annotated</code> (y empez\u00f3 a recomendarlo) en la versi\u00f3n 0.95.0.</p> <p>Si tienes una versi\u00f3n m\u00e1s antigua, obtendr\u00e1s errores al intentar usar <code>Annotated</code>.</p> <p>Aseg\u00farate de Actualizar la versi\u00f3n de ReadyAPI a al menos 0.95.1 antes de usar <code>Annotated</code>.</p>"},{"location":"tutorial/query-params-str-validations/#usar-annotated-en-el-tipo-del-parametro-q","title":"Usar <code>Annotated</code> en el tipo del par\u00e1metro <code>q</code>","text":"<p>\u00bfRecuerdas que te dije antes que <code>Annotated</code> puede ser usado para agregar metadatos a tus par\u00e1metros en la Introducci\u00f3n a Tipos de Python?</p> <p>Ahora es el momento de usarlo con ReadyAPI. \ud83d\ude80</p> <p>Ten\u00edamos esta anotaci\u00f3n de tipo:</p> Python 3.10+Python 3.8+ <pre><code>q: str | None = None\n</code></pre> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Lo que haremos es envolver eso con <code>Annotated</code>, para que se convierta en:</p> Python 3.10+Python 3.8+ <pre><code>q: Annotated[str | None] = None\n</code></pre> <pre><code>q: Annotated[Union[str, None]] = None\n</code></pre> <p>Ambas versiones significan lo mismo, <code>q</code> es un par\u00e1metro que puede ser un <code>str</code> o <code>None</code>, y por defecto, es <code>None</code>.</p> <p>Ahora vamos a lo divertido. \ud83c\udf89</p>"},{"location":"tutorial/query-params-str-validations/#agregar-query-a-annotated-en-el-parametro-q","title":"Agregar <code>Query</code> a <code>Annotated</code> en el par\u00e1metro <code>q</code>","text":"<p>Ahora que tenemos este <code>Annotated</code> donde podemos poner m\u00e1s informaci\u00f3n (en este caso algunas validaciones adicionales), agrega <code>Query</code> dentro de <code>Annotated</code>, y establece el par\u00e1metro <code>max_length</code> a <code>50</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Nota que el valor por defecto sigue siendo <code>None</code>, por lo que el par\u00e1metro sigue siendo opcional.</p> <p>Pero ahora, al tener <code>Query(max_length=50)</code> dentro de <code>Annotated</code>, le estamos diciendo a ReadyAPI que queremos que tenga validaci\u00f3n adicional para este valor, queremos que tenga un m\u00e1ximo de 50 caracteres. \ud83d\ude0e</p> <p>Consejo</p> <p>Aqu\u00ed estamos usando <code>Query()</code> porque este es un par\u00e1metro de query. M\u00e1s adelante veremos otros como <code>Path()</code>, <code>Body()</code>, <code>Header()</code>, y <code>Cookie()</code>, que tambi\u00e9n aceptan los mismos argumentos que <code>Query()</code>.</p> <p>ReadyAPI ahora:</p> <ul> <li>Validar\u00e1 los datos asegur\u00e1ndose de que la longitud m\u00e1xima sea de 50 caracteres</li> <li>Mostrar\u00e1 un error claro para el cliente cuando los datos no sean v\u00e1lidos</li> <li>Documentar\u00e1 el par\u00e1metro en el OpenAPI esquema path operation (as\u00ed aparecer\u00e1 en la UI de documentaci\u00f3n autom\u00e1tica)</li> </ul>"},{"location":"tutorial/query-params-str-validations/#alternativa-antigua-query-como-valor-por-defecto","title":"Alternativa (antigua): <code>Query</code> como valor por defecto","text":"<p>Versiones anteriores de ReadyAPI (antes de 0.95.0) requer\u00edan que usaras <code>Query</code> como el valor por defecto de tu par\u00e1metro, en lugar de ponerlo en <code>Annotated</code>. Hay una alta probabilidad de que veas c\u00f3digo us\u00e1ndolo alrededor, as\u00ed que te lo explicar\u00e9.</p> <p>Consejo</p> <p>Para nuevo c\u00f3digo y siempre que sea posible, usa <code>Annotated</code> como se explic\u00f3 arriba. Hay m\u00faltiples ventajas (explicadas a continuaci\u00f3n) y no hay desventajas. \ud83c\udf70</p> <p>As\u00ed es como usar\u00edas <code>Query()</code> como el valor por defecto de tu par\u00e1metro de funci\u00f3n, estableciendo el par\u00e1metro <code>max_length</code> a 50:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Ya que en este caso (sin usar <code>Annotated</code>) debemos reemplazar el valor por defecto <code>None</code> en la funci\u00f3n con <code>Query()</code>, ahora necesitamos establecer el valor por defecto con el par\u00e1metro <code>Query(default=None)</code>, esto sirve al mismo prop\u00f3sito de definir ese valor por defecto (al menos para ReadyAPI).</p> <p>Entonces:</p> <pre><code>q: Union[str, None] = Query(default=None)\n</code></pre> <p>...hace que el par\u00e1metro sea opcional, con un valor por defecto de <code>None</code>, lo mismo que:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Y en Python 3.10 y superior:</p> <pre><code>q: str | None = Query(default=None)\n</code></pre> <p>...hace que el par\u00e1metro sea opcional, con un valor por defecto de <code>None</code>, lo mismo que:</p> <pre><code>q: str | None = None\n</code></pre> <p>Pero las versiones de <code>Query</code> lo declaran expl\u00edcitamente como un par\u00e1metro de query.</p> <p>Informaci\u00f3n</p> <p>Ten en cuenta que la parte m\u00e1s importante para hacer un par\u00e1metro opcional es la parte:</p> <pre><code>= None\n</code></pre> <p>o la parte:</p> <pre><code>= Query(default=None)\n</code></pre> <p>ya que usar\u00e1 ese <code>None</code> como el valor por defecto, y de esa manera har\u00e1 el par\u00e1metro no requerido.</p> <p>La parte <code>Union[str, None]</code> permite que tu editor brinde un mejor soporte, pero no es lo que le dice a ReadyAPI que este par\u00e1metro no es requerido.</p> <p>Luego, podemos pasar m\u00e1s par\u00e1metros a <code>Query</code>. En este caso, el par\u00e1metro <code>max_length</code> que se aplica a los strings:</p> <pre><code>q: Union[str, None] = Query(default=None, max_length=50)\n</code></pre> <p>Esto validar\u00e1 los datos, mostrar\u00e1 un error claro cuando los datos no sean v\u00e1lidos, y documentar\u00e1 el par\u00e1metro en el esquema del path operation de OpenaPI.</p>"},{"location":"tutorial/query-params-str-validations/#query-como-valor-por-defecto-o-en-annotated","title":"<code>Query</code> como valor por defecto o en <code>Annotated</code>","text":"<p>Ten en cuenta que cuando uses <code>Query</code> dentro de <code>Annotated</code> no puedes usar el par\u00e1metro <code>default</code> para <code>Query</code>.</p> <p>En su lugar utiliza el valor por defecto real del par\u00e1metro de la funci\u00f3n. De lo contrario, ser\u00eda inconsistente.</p> <p>Por ejemplo, esto no est\u00e1 permitido:</p> <pre><code>q: Annotated[str, Query(default=\"rick\")] = \"morty\"\n</code></pre> <p>...porque no est\u00e1 claro si el valor por defecto deber\u00eda ser <code>\"rick\"</code> o <code>\"morty\"</code>.</p> <p>As\u00ed que utilizar\u00edas (preferentemente):</p> <pre><code>q: Annotated[str, Query()] = \"rick\"\n</code></pre> <p>...o en code bases m\u00e1s antiguos encontrar\u00e1s:</p> <pre><code>q: str = Query(default=\"rick\")\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#ventajas-de-annotated","title":"Ventajas de <code>Annotated</code>","text":"<p>Usar <code>Annotated</code> es recomendado en lugar del valor por defecto en los par\u00e1metros de funci\u00f3n, es mejor por m\u00faltiples razones. \ud83e\udd13</p> <p>El valor por defecto del par\u00e1metro de funci\u00f3n es el valor real por defecto, eso es m\u00e1s intuitivo con Python en general. \ud83d\ude0c</p> <p>Podr\u00edas llamar a esa misma funci\u00f3n en otros lugares sin ReadyAPI, y funcionar\u00eda como se espera. Si hay un par\u00e1metro requerido (sin un valor por defecto), tu editor te avisar\u00e1 con un error, Python tambi\u00e9n se quejar\u00e1 si lo ejecutas sin pasar el par\u00e1metro requerido.</p> <p>Cuando no usas <code>Annotated</code> y en su lugar usas el estilo de valor por defecto (antiguo), si llamas a esa funci\u00f3n sin ReadyAPI en otros lugares, tienes que recordar pasar los argumentos a la funci\u00f3n para que funcione correctamente, de lo contrario, los valores ser\u00e1n diferentes de lo que esperas (por ejemplo, <code>QueryInfo</code> o algo similar en lugar de <code>str</code>). Y tu editor no se quejar\u00e1, y Python no se quejar\u00e1 al ejecutar esa funci\u00f3n, solo cuando los errores dentro de las operaciones hagan que funcione incorrectamente.</p> <p>Dado que <code>Annotated</code> puede tener m\u00e1s de una anotaci\u00f3n de metadato, ahora podr\u00edas incluso usar la misma funci\u00f3n con otras herramientas, como Cligenius. \ud83d\ude80</p>"},{"location":"tutorial/query-params-str-validations/#agregar-mas-validaciones","title":"Agregar m\u00e1s validaciones","text":"<p>Tambi\u00e9n puedes agregar un par\u00e1metro <code>min_length</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#agregar-expresiones-regulares","title":"Agregar expresiones regulares","text":"<p>Puedes definir una expresi\u00f3n regular <code>pattern</code> que el par\u00e1metro debe coincidir:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Este patr\u00f3n espec\u00edfico de expresi\u00f3n regular comprueba que el valor recibido del par\u00e1metro:</p> <ul> <li><code>^</code>: comience con los siguientes caracteres, no tiene caracteres antes.</li> <li><code>fixedquery</code>: tiene el valor exacto <code>fixedquery</code>.</li> <li><code>$</code>: termina all\u00ed, no tiene m\u00e1s caracteres despu\u00e9s de <code>fixedquery</code>.</li> </ul> <p>Si te sientes perdido con todas estas ideas de \"expresi\u00f3n regular\", no te preocupes. Son un tema dif\u00edcil para muchas personas. A\u00fan puedes hacer muchas cosas sin necesitar expresiones regulares todav\u00eda.</p> <p>Pero cuando las necesites y vayas a aprenderlas, ya sabes que puedes usarlas directamente en ReadyAPI.</p>"},{"location":"tutorial/query-params-str-validations/#pydantic-v1-regex-en-lugar-de-pattern","title":"Pydantic v1 <code>regex</code> en lugar de <code>pattern</code>","text":"<p>Antes de la versi\u00f3n 2 de Pydantic y antes de ReadyAPI 0.100.0, el par\u00e1metro se llamaba <code>regex</code> en lugar de <code>pattern</code>, pero ahora est\u00e1 en desuso.</p> <p>Todav\u00eda podr\u00edas ver algo de c\u00f3digo que lo usa:</p> Pydantic v1 Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Pero que sepas que esto est\u00e1 deprecado y deber\u00eda actualizarse para usar el nuevo par\u00e1metro <code>pattern</code>. \ud83e\udd13</p>"},{"location":"tutorial/query-params-str-validations/#valores-por-defecto","title":"Valores por defecto","text":"<p>Puedes, por supuesto, usar valores por defecto diferentes de <code>None</code>.</p> <p>Digamos que quieres declarar el par\u00e1metro de query <code>q</code> para que tenga un <code>min_length</code> de <code>3</code>, y para que tenga un valor por defecto de <code>\"fixedquery\"</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Nota</p> <p>Tener un valor por defecto de cualquier tipo, incluyendo <code>None</code>, hace que el par\u00e1metro sea opcional (no requerido).</p>"},{"location":"tutorial/query-params-str-validations/#parametros-requeridos","title":"Par\u00e1metros requeridos","text":"<p>Cuando no necesitamos declarar m\u00e1s validaciones o metadatos, podemos hacer que el par\u00e1metro de query <code>q</code> sea requerido simplemente no declarando un valor por defecto, como:</p> <pre><code>q: str\n</code></pre> <p>en lugar de:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Pero ahora lo estamos declarando con <code>Query</code>, por ejemplo, como:</p> Annotatednon-Annotated <pre><code>q: Annotated[Union[str, None], Query(min_length=3)] = None\n</code></pre> <pre><code>q: Union[str, None] = Query(default=None, min_length=3)\n</code></pre> <p>As\u00ed que, cuando necesites declarar un valor como requerido mientras usas <code>Query</code>, simplemente puedes no declarar un valor por defecto:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#requerido-puede-ser-none","title":"Requerido, puede ser <code>None</code>","text":"<p>Puedes declarar que un par\u00e1metro puede aceptar <code>None</code>, pero que a\u00fan as\u00ed es requerido. Esto obligar\u00eda a los clientes a enviar un valor, incluso si el valor es <code>None</code>.</p> <p>Para hacer eso, puedes declarar que <code>None</code> es un tipo v\u00e1lido pero a\u00fan usar <code>...</code> como el valor por defecto:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Consejo</p> <p>Pydantic, que es lo que impulsa toda la validaci\u00f3n y serializaci\u00f3n de datos en ReadyAPI, tiene un comportamiento especial cuando usas <code>Optional</code> o <code>Union[Something, None]</code> sin un valor por defecto, puedes leer m\u00e1s al respecto en la documentaci\u00f3n de Pydantic sobre Campos requeridos.</p> <p>Consejo</p> <p>Recuerda que en la mayor\u00eda de los casos, cuando algo es requerido, puedes simplemente omitir el default, as\u00ed que normalmente no tienes que usar <code>...</code>.</p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-query-multiples-valores","title":"Lista de par\u00e1metros de Query / m\u00faltiples valores","text":"<p>Cuando defines un par\u00e1metro de query expl\u00edcitamente con <code>Query</code> tambi\u00e9n puedes declararlo para recibir una lista de valores, o dicho de otra manera, para recibir m\u00faltiples valores.</p> <p>Por ejemplo, para declarar un par\u00e1metro de query <code>q</code> que puede aparecer varias veces en la URL, puedes escribir:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Entonces, con una URL como:</p> <pre><code>http://localhost:8000/items/?q=foo&amp;q=bar\n</code></pre> <p>recibir\u00edas los m\u00faltiples valores del query parameter <code>q</code> (<code>foo</code> y <code>bar</code>) en una <code>list</code> de Python dentro de tu path operation function, en el par\u00e1metro de funci\u00f3n <code>q</code>.</p> <p>Entonces, el response a esa URL ser\u00eda:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre> <p>Consejo</p> <p>Para declarar un par\u00e1metro de query con un tipo de <code>list</code>, como en el ejemplo anterior, necesitas usar expl\u00edcitamente <code>Query</code>, de lo contrario ser\u00eda interpretado como un request body.</p> <p>La documentaci\u00f3n interactiva de API se actualizar\u00e1 en consecuencia, para permitir m\u00faltiples valores:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-query-multiples-valores-con-valores-por-defecto","title":"Lista de par\u00e1metros de Query / m\u00faltiples valores con valores por defecto","text":"<p>Y tambi\u00e9n puedes definir un valor por defecto <code>list</code> de valores si no se proporcionan ninguno:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Si vas a:</p> <pre><code>http://localhost:8000/items/\n</code></pre> <p>el valor por defecto de <code>q</code> ser\u00e1: <code>[\"foo\", \"bar\"]</code> y tu response ser\u00e1:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#usando-solo-list","title":"Usando solo <code>list</code>","text":"<p>Tambi\u00e9n puedes usar <code>list</code> directamente en lugar de <code>List[str]</code> (o <code>list[str]</code> en Python 3.9+):</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Nota</p> <p>Ten en cuenta que en este caso, ReadyAPI no comprobar\u00e1 el contenido de la lista.</p> <p>Por ejemplo, <code>List[int]</code> comprobar\u00eda (y documentar\u00eda) que el contenido de la lista son enteros. Pero <code>list</code> sola no lo har\u00eda.</p>"},{"location":"tutorial/query-params-str-validations/#declarar-mas-metadatos","title":"Declarar m\u00e1s metadatos","text":"<p>Puedes agregar m\u00e1s informaci\u00f3n sobre el par\u00e1metro.</p> <p>Esa informaci\u00f3n se incluir\u00e1 en el OpenAPI generado y ser\u00e1 utilizada por las interfaces de usuario de documentaci\u00f3n y herramientas externas.</p> <p>Nota</p> <p>Ten en cuenta que diferentes herramientas podr\u00edan tener diferentes niveles de soporte de OpenAPI.</p> <p>Algunas de ellas podr\u00edan no mostrar toda la informaci\u00f3n extra declarada todav\u00eda, aunque en la mayor\u00eda de los casos, la funcionalidad faltante ya est\u00e1 planificada para desarrollo.</p> <p>Puedes agregar un <code>title</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Y una <code>description</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#alias-para-parametros","title":"Alias para par\u00e1metros","text":"<p>Imagina que quieres que el par\u00e1metro sea <code>item-query</code>.</p> <p>Como en:</p> <pre><code>http://127.0.0.1:8000/items/?item-query=foobaritems\n</code></pre> <p>Pero <code>item-query</code> no es un nombre de variable v\u00e1lido en Python.</p> <p>Lo m\u00e1s cercano ser\u00eda <code>item_query</code>.</p> <p>Pero a\u00fan necesitas que sea exactamente <code>item-query</code>...</p> <p>Entonces puedes declarar un <code>alias</code>, y ese alias ser\u00e1 usado para encontrar el valor del par\u00e1metro:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#declarar-parametros-obsoletos","title":"Declarar par\u00e1metros obsoletos","text":"<p>Ahora digamos que ya no te gusta este par\u00e1metro.</p> <p>Tienes que dejarlo all\u00ed por un tiempo porque hay clientes us\u00e1ndolo, pero quieres que la documentaci\u00f3n lo muestre claramente como deprecated.</p> <p>Luego pasa el par\u00e1metro <code>deprecated=True</code> a <code>Query</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>La documentaci\u00f3n lo mostrar\u00e1 as\u00ed:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#excluir-parametros-de-openapi","title":"Excluir par\u00e1metros de OpenAPI","text":"<p>Para excluir un par\u00e1metro de query del esquema de OpenAPI generado (y por lo tanto, de los sistemas de documentaci\u00f3n autom\u00e1tica), establece el par\u00e1metro <code>include_in_schema</code> de <code>Query</code> a <code>False</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: str | None = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Puedes declarar validaciones y metadatos adicionales para tus par\u00e1metros.</p> <p>Validaciones gen\u00e9ricas y metadatos:</p> <ul> <li><code>alias</code></li> <li><code>title</code></li> <li><code>description</code></li> <li><code>deprecated</code></li> </ul> <p>Validaciones espec\u00edficas para strings:</p> <ul> <li><code>min_length</code></li> <li><code>max_length</code></li> <li><code>pattern</code></li> </ul> <p>En estos ejemplos viste c\u00f3mo declarar validaciones para valores de tipo <code>str</code>.</p> <p>Mira los siguientes cap\u00edtulos para aprender c\u00f3mo declarar validaciones para otros tipos, como n\u00fameros.</p>"},{"location":"tutorial/query-params/","title":"Par\u00e1metros de Query","text":"<p>Cuando declaras otros par\u00e1metros de funci\u00f3n que no son parte de los par\u00e1metros de path, son autom\u00e1ticamente interpretados como par\u00e1metros de \"query\".</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n</code></pre> <p>La query es el conjunto de pares clave-valor que van despu\u00e9s del <code>?</code> en una URL, separados por caracteres <code>&amp;</code>.</p> <p>Por ejemplo, en la URL:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>...los par\u00e1metros de query son:</p> <ul> <li><code>skip</code>: con un valor de <code>0</code></li> <li><code>limit</code>: con un valor de <code>10</code></li> </ul> <p>Como son parte de la URL, son \"naturalmente\" strings.</p> <p>Pero cuando los declaras con tipos de Python (en el ejemplo anterior, como <code>int</code>), son convertidos a ese tipo y validados respecto a \u00e9l.</p> <p>Todo el mismo proceso que se aplica para los par\u00e1metros de path tambi\u00e9n se aplica para los par\u00e1metros de query:</p> <ul> <li>Soporte del editor (obviamente)</li> <li>\"Parsing\" de datos</li> <li>Validaci\u00f3n de datos</li> <li>Documentaci\u00f3n autom\u00e1tica</li> </ul>"},{"location":"tutorial/query-params/#valores-por-defecto","title":"Valores por defecto","text":"<p>Como los par\u00e1metros de query no son una parte fija de un path, pueden ser opcionales y pueden tener valores por defecto.</p> <p>En el ejemplo anterior, tienen valores por defecto de <code>skip=0</code> y <code>limit=10</code>.</p> <p>Entonces, ir a la URL:</p> <pre><code>http://127.0.0.1:8000/items/\n</code></pre> <p>ser\u00eda lo mismo que ir a:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>Pero si vas a, por ejemplo:</p> <pre><code>http://127.0.0.1:8000/items/?skip=20\n</code></pre> <p>Los valores de los par\u00e1metros en tu funci\u00f3n ser\u00e1n:</p> <ul> <li><code>skip=20</code>: porque lo configuraste en la URL</li> <li><code>limit=10</code>: porque ese era el valor por defecto</li> </ul>"},{"location":"tutorial/query-params/#parametros-opcionales","title":"Par\u00e1metros opcionales","text":"<p>De la misma manera, puedes declarar par\u00e1metros de query opcionales, estableciendo su valor por defecto en <code>None</code>:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <p>Revisa</p> <p>Adem\u00e1s, nota que ReadyAPI es lo suficientemente inteligente para notar que el par\u00e1metro de path <code>item_id</code> es un par\u00e1metro de path y <code>q</code> no lo es, por lo tanto, es un par\u00e1metro de query.</p>"},{"location":"tutorial/query-params/#conversion-de-tipos-en-parametros-de-query","title":"Conversi\u00f3n de tipos en par\u00e1metros de query","text":"<p>Tambi\u00e9n puedes declarar tipos <code>bool</code>, y ser\u00e1n convertidos:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <p>En este caso, si vas a:</p> <pre><code>http://127.0.0.1:8000/items/foo?short=1\n</code></pre> <p>o</p> <pre><code>http://127.0.0.1:8000/items/foo?short=True\n</code></pre> <p>o</p> <pre><code>http://127.0.0.1:8000/items/foo?short=true\n</code></pre> <p>o</p> <pre><code>http://127.0.0.1:8000/items/foo?short=on\n</code></pre> <p>o</p> <pre><code>http://127.0.0.1:8000/items/foo?short=yes\n</code></pre> <p>o cualquier otra variaci\u00f3n (may\u00fasculas, primera letra en may\u00fascula, etc.), tu funci\u00f3n ver\u00e1 el par\u00e1metro <code>short</code> con un valor <code>bool</code> de <code>True</code>. De lo contrario, ser\u00e1 <code>False</code>.</p>"},{"location":"tutorial/query-params/#multiples-parametros-de-path-y-de-query","title":"M\u00faltiples par\u00e1metros de path y de query","text":"<p>Puedes declarar m\u00faltiples par\u00e1metros de path y de query al mismo tiempo, ReadyAPI sabe cu\u00e1l es cu\u00e1l.</p> <p>Y no tienes que declararlos en un orden espec\u00edfico.</p> <p>Ser\u00e1n detectados por nombre:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre>"},{"location":"tutorial/query-params/#parametros-de-query-requeridos","title":"Par\u00e1metros de query requeridos","text":"<p>Cuando declaras un valor por defecto para par\u00e1metros que no son de path (por ahora, solo hemos visto par\u00e1metros de query), entonces no es requerido.</p> <p>Si no quieres agregar un valor espec\u00edfico pero solo hacer que sea opcional, establece el valor por defecto como <code>None</code>.</p> <p>Pero cuando quieres hacer un par\u00e1metro de query requerido, simplemente no declares ning\u00fan valor por defecto:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n</code></pre> <p>Aqu\u00ed el par\u00e1metro de query <code>needy</code> es un par\u00e1metro de query requerido de tipo <code>str</code>.</p> <p>Si abres en tu navegador una URL como:</p> <pre><code>http://127.0.0.1:8000/items/foo-item\n</code></pre> <p>...sin agregar el par\u00e1metro requerido <code>needy</code>, ver\u00e1s un error como:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"type\": \"missing\",\n      \"loc\": [\n        \"query\",\n        \"needy\"\n      ],\n      \"msg\": \"Field required\",\n      \"input\": null,\n      \"url\": \"https://errors.pydantic.dev/2.1/v/missing\"\n    }\n  ]\n}\n</code></pre> <p>Como <code>needy</code> es un par\u00e1metro requerido, necesitar\u00edas establecerlo en la URL:</p> <pre><code>http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n</code></pre> <p>...esto funcionar\u00eda:</p> <pre><code>{\n    \"item_id\": \"foo-item\",\n    \"needy\": \"sooooneedy\"\n}\n</code></pre> <p>Y por supuesto, puedes definir algunos par\u00e1metros como requeridos, algunos con un valor por defecto, y algunos enteramente opcionales:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <p>En este caso, hay 3 par\u00e1metros de query:</p> <ul> <li><code>needy</code>, un <code>str</code> requerido.</li> <li><code>skip</code>, un <code>int</code> con un valor por defecto de <code>0</code>.</li> <li><code>limit</code>, un <code>int</code> opcional.</li> </ul> <p>Consejo</p> <p>Tambi\u00e9n podr\u00edas usar <code>Enum</code>s de la misma manera que con Par\u00e1metros de Path.</p>"},{"location":"tutorial/request-files/","title":"Archivos de Request","text":"<p>Puedes definir archivos que ser\u00e1n subidos por el cliente utilizando <code>File</code>.</p> <p>Informaci\u00f3n</p> <p>Para recibir archivos subidos, primero instala <code>python-multipart</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Esto es porque los archivos subidos se env\u00edan como \"form data\".</p>"},{"location":"tutorial/request-files/#importar-file","title":"Importar <code>File</code>","text":"<p>Importa <code>File</code> y <code>UploadFile</code> desde <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#definir-parametros-file","title":"Definir Par\u00e1metros <code>File</code>","text":"<p>Crea par\u00e1metros de archivo de la misma manera que lo har\u00edas para <code>Body</code> o <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Informaci\u00f3n</p> <p><code>File</code> es una clase que hereda directamente de <code>Form</code>.</p> <p>Pero recuerda que cuando importas <code>Query</code>, <code>Path</code>, <code>File</code> y otros desde <code>readyapi</code>, esos son en realidad funciones que devuelven clases especiales.</p> <p>Consejo</p> <p>Para declarar cuerpos de File, necesitas usar <code>File</code>, porque de otra manera los par\u00e1metros ser\u00edan interpretados como par\u00e1metros query o par\u00e1metros de cuerpo (JSON).</p> <p>Los archivos se subir\u00e1n como \"form data\".</p> <p>Si declaras el tipo de tu par\u00e1metro de path operation function como <code>bytes</code>, ReadyAPI leer\u00e1 el archivo por ti y recibir\u00e1s el contenido como <code>bytes</code>.</p> <p>Ten en cuenta que esto significa que todo el contenido se almacenar\u00e1 en memoria. Esto funcionar\u00e1 bien para archivos peque\u00f1os.</p> <p>Pero hay varios casos en los que podr\u00edas beneficiarte de usar <code>UploadFile</code>.</p>"},{"location":"tutorial/request-files/#parametros-de-archivo-con-uploadfile","title":"Par\u00e1metros de Archivo con <code>UploadFile</code>","text":"<p>Define un par\u00e1metro de archivo con un tipo de <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Usar <code>UploadFile</code> tiene varias ventajas sobre <code>bytes</code>:</p> <ul> <li>No tienes que usar <code>File()</code> en el valor por defecto del par\u00e1metro.</li> <li>Usa un archivo \"spooled\":<ul> <li>Un archivo almacenado en memoria hasta un l\u00edmite de tama\u00f1o m\u00e1ximo, y despu\u00e9s de superar este l\u00edmite, se almacenar\u00e1 en el disco.</li> </ul> </li> <li>Esto significa que funcionar\u00e1 bien para archivos grandes como im\u00e1genes, videos, binarios grandes, etc. sin consumir toda la memoria.</li> <li>Puedes obtener metadatos del archivo subido.</li> <li>Tiene una interfaz <code>async</code> parecida a un archivo.</li> <li>Expone un objeto Python real <code>SpooledTemporaryFile</code> que puedes pasar directamente a otros paquetes que esperan un objeto parecido a un archivo.</li> </ul>"},{"location":"tutorial/request-files/#uploadfile","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> tiene los siguientes atributos:</p> <ul> <li><code>filename</code>: Un <code>str</code> con el nombre original del archivo que fue subido (por ejemplo, <code>myimage.jpg</code>).</li> <li><code>content_type</code>: Un <code>str</code> con el tipo de contenido (MIME type / media type) (por ejemplo, <code>image/jpeg</code>).</li> <li><code>file</code>: Un <code>SpooledTemporaryFile</code> (un objeto parecido a un archivo). Este es el objeto de archivo Python real que puedes pasar directamente a otras funciones o paquetes que esperan un objeto \"parecido a un archivo\".</li> </ul> <p><code>UploadFile</code> tiene los siguientes m\u00e9todos <code>async</code>. Todos ellos llaman a los m\u00e9todos correspondientes del archivo por debajo (usando el <code>SpooledTemporaryFile</code> interno).</p> <ul> <li><code>write(data)</code>: Escribe <code>data</code> (<code>str</code> o <code>bytes</code>) en el archivo.</li> <li><code>read(size)</code>: Lee <code>size</code> (<code>int</code>) bytes/caracteres del archivo.</li> <li><code>seek(offset)</code>: Va a la posici\u00f3n de bytes <code>offset</code> (<code>int</code>) en el archivo.<ul> <li>Por ejemplo, <code>await myfile.seek(0)</code> ir\u00eda al inicio del archivo.</li> <li>Esto es especialmente \u00fatil si ejecutas <code>await myfile.read()</code> una vez y luego necesitas leer el contenido nuevamente.</li> </ul> </li> <li><code>close()</code>: Cierra el archivo.</li> </ul> <p>Como todos estos m\u00e9todos son m\u00e9todos <code>async</code>, necesitas \"await\" para ellos.</p> <p>Por ejemplo, dentro de una path operation function <code>async</code> puedes obtener los contenidos con:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>Si est\u00e1s dentro de una path operation function normal <code>def</code>, puedes acceder al <code>UploadFile.file</code> directamente, por ejemplo:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p>Detalles T\u00e9cnicos de <code>async</code></p> <p>Cuando usas los m\u00e9todos <code>async</code>, ReadyAPI ejecuta los m\u00e9todos del archivo en un threadpool y los espera.</p> <p>Detalles T\u00e9cnicos de Starlette</p> <p>El <code>UploadFile</code> de ReadyAPI hereda directamente del <code>UploadFile</code> de Starlette, pero a\u00f1ade algunas partes necesarias para hacerlo compatible con Pydantic y las otras partes de ReadyAPI.</p>"},{"location":"tutorial/request-files/#que-es-form-data","title":"Qu\u00e9 es \"Form Data\"","text":"<p>La manera en que los forms de HTML (<code>&lt;form&gt;&lt;/form&gt;</code>) env\u00edan los datos al servidor normalmente utiliza una codificaci\u00f3n \"especial\" para esos datos, es diferente de JSON.</p> <p>ReadyAPI se asegurar\u00e1 de leer esos datos del lugar correcto en lugar de JSON.</p> <p>Detalles T\u00e9cnicos</p> <p>Los datos de los forms normalmente se codifican usando el \"media type\" <code>application/x-www-form-urlencoded</code> cuando no incluyen archivos.</p> <p>Pero cuando el formulario incluye archivos, se codifica como <code>multipart/form-data</code>. Si usas <code>File</code>, ReadyAPI sabr\u00e1 que tiene que obtener los archivos de la parte correcta del cuerpo.</p> <p>Si deseas leer m\u00e1s sobre estas codificaciones y campos de formularios, dir\u00edgete a la MDN web docs para <code>POST</code>.</p> <p>Advertencia</p> <p>Puedes declarar m\u00faltiples par\u00e1metros <code>File</code> y <code>Form</code> en una path operation, pero no puedes declarar campos <code>Body</code> que esperas recibir como JSON, ya que el request tendr\u00e1 el cuerpo codificado usando <code>multipart/form-data</code> en lugar de <code>application/json</code>.</p> <p>Esto no es una limitaci\u00f3n de ReadyAPI, es parte del protocolo HTTP.</p>"},{"location":"tutorial/request-files/#subida-de-archivos-opcional","title":"Subida de Archivos Opcional","text":"<p>Puedes hacer un archivo opcional utilizando anotaciones de tipos est\u00e1ndar y estableciendo un valor por defecto de <code>None</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploadfile-con-metadatos-adicionales","title":"<code>UploadFile</code> con Metadatos Adicionales","text":"<p>Tambi\u00e9n puedes usar <code>File()</code> con <code>UploadFile</code>, por ejemplo, para establecer metadatos adicionales:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#subidas-de-multiples-archivos","title":"Subidas de M\u00faltiples Archivos","text":"<p>Es posible subir varios archivos al mismo tiempo.</p> <p>Estar\u00edan asociados al mismo \"campo de formulario\" enviado usando \"form data\".</p> <p>Para usar eso, declara una lista de <code>bytes</code> o <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Recibir\u00e1s, como se declar\u00f3, una <code>list</code> de <code>bytes</code> o <code>UploadFile</code>s.</p> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI proporciona las mismas <code>starlette.responses</code> como <code>readyapi.responses</code> solo como una conveniencia para ti, el desarrollador. Pero la mayor\u00eda de los responses disponibles vienen directamente de Starlette.</p>"},{"location":"tutorial/request-files/#subidas-de-multiples-archivos-con-metadatos-adicionales","title":"Subidas de M\u00faltiples Archivos con Metadatos Adicionales","text":"<p>Y de la misma manera que antes, puedes usar <code>File()</code> para establecer par\u00e1metros adicionales, incluso para <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request-files/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Usa <code>File</code>, <code>bytes</code> y <code>UploadFile</code> para declarar archivos que se subir\u00e1n en el request, enviados como form data.</p>"},{"location":"tutorial/request-form-models/","title":"Modelos de Formulario","text":"<p>Puedes usar modelos de Pydantic para declarar campos de formulario en ReadyAPI.</p> <p>Informaci\u00f3n</p> <p>Para usar formularios, primero instala <code>python-multipart</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo, y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Nota</p> <p>Esto es compatible desde la versi\u00f3n <code>0.113.0</code> de ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/request-form-models/#modelos-de-pydantic-para-formularios","title":"Modelos de Pydantic para Formularios","text":"<p>Solo necesitas declarar un modelo de Pydantic con los campos que quieres recibir como campos de formulario, y luego declarar el par\u00e1metro como <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>ReadyAPI extraer\u00e1 los datos de cada campo de los form data en el request y te dar\u00e1 el modelo de Pydantic que definiste.</p>"},{"location":"tutorial/request-form-models/#revisa-la-documentacion","title":"Revisa la Documentaci\u00f3n","text":"<p>Puedes verificarlo en la interfaz de documentaci\u00f3n en <code>/docs</code>:</p>"},{"location":"tutorial/request-form-models/#prohibir-campos-de-formulario-extra","title":"Prohibir Campos de Formulario Extra","text":"<p>En algunos casos de uso especiales (probablemente no muy comunes), podr\u00edas querer restringir los campos de formulario a solo aquellos declarados en el modelo de Pydantic. Y prohibir cualquier campo extra.</p> <p>Nota</p> <p>Esto es compatible desde la versi\u00f3n <code>0.114.0</code> de ReadyAPI. \ud83e\udd13</p> <p>Puedes usar la configuraci\u00f3n del modelo de Pydantic para <code>forbid</code> cualquier campo <code>extra</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>Si un cliente intenta enviar datos extra, recibir\u00e1 un response de error.</p> <p>Por ejemplo, si el cliente intenta enviar los campos de formulario:</p> <ul> <li><code>username</code>: <code>Rick</code></li> <li><code>password</code>: <code>Portal Gun</code></li> <li><code>extra</code>: <code>Mr. Poopybutthole</code></li> </ul> <p>Recibir\u00e1 un response de error indicando que el campo <code>extra</code> no est\u00e1 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/request-form-models/#resumen","title":"Resumen","text":"<p>Puedes usar modelos de Pydantic para declarar campos de formulario en ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/request-forms-and-files/","title":"Request Forms and Files","text":"<p>Puedes definir archivos y campos de formulario al mismo tiempo usando <code>File</code> y <code>Form</code>.</p> <p>Informaci\u00f3n</p> <p>Para recibir archivos subidos y/o form data, primero instala <code>python-multipart</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, act\u00edvalo y luego inst\u00e1lalo, por ejemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#importar-file-y-form","title":"Importar <code>File</code> y <code>Form</code>","text":"Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#definir-parametros-file-y-form","title":"Definir par\u00e1metros <code>File</code> y <code>Form</code>","text":"<p>Crea par\u00e1metros de archivo y formulario de la misma manera que lo har\u00edas para <code>Body</code> o <code>Query</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Los archivos y campos de formulario se subir\u00e1n como form data y recibir\u00e1s los archivos y campos de formulario.</p> <p>Y puedes declarar algunos de los archivos como <code>bytes</code> y algunos como <code>UploadFile</code>.</p> <p>Advertencia</p> <p>Puedes declarar m\u00faltiples par\u00e1metros <code>File</code> y <code>Form</code> en una path operation, pero no puedes tambi\u00e9n declarar campos <code>Body</code> que esperas recibir como JSON, ya que el request tendr\u00e1 el body codificado usando <code>multipart/form-data</code> en lugar de <code>application/json</code>.</p> <p>Esto no es una limitaci\u00f3n de ReadyAPI, es parte del protocolo HTTP.</p>"},{"location":"tutorial/request-forms-and-files/#resumen","title":"Resumen","text":"<p>Usa <code>File</code> y <code>Form</code> juntos cuando necesites recibir datos y archivos en el mismo request.</p>"},{"location":"tutorial/request-forms/","title":"Form Data","text":"<p>Cuando necesitas recibir campos de formulario en lugar de JSON, puedes usar <code>Form</code>.</p> <p>Informaci\u00f3n</p> <p>Para usar forms, primero instala <code>python-multipart</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo, y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre>"},{"location":"tutorial/request-forms/#importar-form","title":"Importar <code>Form</code>","text":"<p>Importar <code>Form</code> desde <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/request-forms/#definir-parametros-de-form","title":"Definir par\u00e1metros de <code>Form</code>","text":"<p>Crea par\u00e1metros de formulario de la misma manera que lo har\u00edas para <code>Body</code> o <code>Query</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> <p>Por ejemplo, en una de las formas en las que se puede usar la especificaci\u00f3n OAuth2 (llamada \"password flow\") se requiere enviar un <code>username</code> y <code>password</code> como campos de formulario.</p> <p>La especificaci\u00f3n requiere que los campos se llamen exactamente <code>username</code> y <code>password</code>, y que se env\u00eden como campos de formulario, no JSON.</p> <p>Con <code>Form</code> puedes declarar las mismas configuraciones que con <code>Body</code> (y <code>Query</code>, <code>Path</code>, <code>Cookie</code>), incluyendo validaci\u00f3n, ejemplos, un alias (por ejemplo, <code>user-name</code> en lugar de <code>username</code>), etc.</p> <p>Informaci\u00f3n</p> <p><code>Form</code> es una clase que hereda directamente de <code>Body</code>.</p> <p>Consejo</p> <p>Para declarar bodies de forms, necesitas usar <code>Form</code> expl\u00edcitamente, porque sin \u00e9l, los par\u00e1metros se interpretar\u00edan como par\u00e1metros de query o como par\u00e1metros de body (JSON).</p>"},{"location":"tutorial/request-forms/#sobre-campos-de-formulario","title":"Sobre \"Campos de Formulario\"","text":"<p>La manera en que los forms HTML (<code>&lt;form&gt;&lt;/form&gt;</code>) env\u00edan los datos al servidor normalmente usa una codificaci\u00f3n \"especial\" para esos datos, es diferente de JSON.</p> <p>ReadyAPI se encargar\u00e1 de leer esos datos del lugar correcto en lugar de JSON.</p> <p>Detalles t\u00e9cnicos</p> <p>Los datos de forms normalmente se codifican usando el \"media type\" <code>application/x-www-form-urlencoded</code>.</p> <p>Pero cuando el formulario incluye archivos, se codifica como <code>multipart/form-data</code>. Leer\u00e1s sobre la gesti\u00f3n de archivos en el pr\u00f3ximo cap\u00edtulo.</p> <p>Si quieres leer m\u00e1s sobre estas codificaciones y campos de formulario, dir\u00edgete a la MDN web docs para <code>POST</code>.</p> <p>Advertencia</p> <p>Puedes declarar m\u00faltiples par\u00e1metros <code>Form</code> en una path operation, pero no puedes tambi\u00e9n declarar campos <code>Body</code> que esperas recibir como JSON, ya que el request tendr\u00e1 el body codificado usando <code>application/x-www-form-urlencoded</code> en lugar de <code>application/json</code>.</p> <p>Esto no es una limitaci\u00f3n de ReadyAPI, es parte del protocolo HTTP.</p>"},{"location":"tutorial/request-forms/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Usa <code>Form</code> para declarar par\u00e1metros de entrada de datos de formulario.</p>"},{"location":"tutorial/response-model/","title":"Modelo de Response - Tipo de Retorno","text":"<p>Puedes declarar el tipo utilizado para el response anotando el tipo de retorno de la path operation function.</p> <p>Puedes utilizar anotaciones de tipos de la misma manera que lo har\u00edas para datos de entrada en par\u00e1metros de funci\u00f3n, puedes utilizar modelos de Pydantic, listas, diccionarios, valores escalares como enteros, booleanos, etc.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI usar\u00e1 este tipo de retorno para:</p> <ul> <li>Validar los datos devueltos.<ul> <li>Si los datos son inv\u00e1lidos (por ejemplo, falta un campo), significa que el c\u00f3digo de tu aplicaci\u00f3n est\u00e1 defectuoso, no devolviendo lo que deber\u00eda, y retornar\u00e1 un error del servidor en lugar de devolver datos incorrectos. De esta manera, t\u00fa y tus clientes pueden estar seguros de que recibir\u00e1n los datos y la forma de los datos esperada.</li> </ul> </li> <li>Agregar un JSON Schema para el response, en la path operation de OpenAPI.<ul> <li>Esto ser\u00e1 utilizado por la documentaci\u00f3n autom\u00e1tica.</li> <li>Tambi\u00e9n ser\u00e1 utilizado por herramientas de generaci\u00f3n autom\u00e1tica de c\u00f3digo de cliente.</li> </ul> </li> </ul> <p>Pero lo m\u00e1s importante:</p> <ul> <li>Limitar\u00e1 y filtrar\u00e1 los datos de salida a lo que se define en el tipo de retorno.<ul> <li>Esto es particularmente importante para la seguridad, veremos m\u00e1s sobre eso a continuaci\u00f3n.</li> </ul> </li> </ul>"},{"location":"tutorial/response-model/#parametro-response_model","title":"Par\u00e1metro <code>response_model</code>","text":"<p>Hay algunos casos en los que necesitas o quieres devolver algunos datos que no son exactamente lo que declara el tipo.</p> <p>Por ejemplo, podr\u00edas querer devolver un diccionario u objeto de base de datos, pero declararlo como un modelo de Pydantic. De esta manera el modelo de Pydantic har\u00eda toda la documentaci\u00f3n de datos, validaci\u00f3n, etc. para el objeto que devolviste (por ejemplo, un diccionario u objeto de base de datos).</p> <p>Si a\u00f1adiste la anotaci\u00f3n del tipo de retorno, las herramientas y editores se quejar\u00edan con un error (correcto) dici\u00e9ndote que tu funci\u00f3n est\u00e1 devolviendo un tipo (por ejemplo, un dict) que es diferente de lo que declaraste (por ejemplo, un modelo de Pydantic).</p> <p>En esos casos, puedes usar el par\u00e1metro del decorador de path operation <code>response_model</code> en lugar del tipo de retorno.</p> <p>Puedes usar el par\u00e1metro <code>response_model</code> en cualquiera de las path operations:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <p>Nota</p> <p>Observa que <code>response_model</code> es un par\u00e1metro del m\u00e9todo \"decorador\" (<code>get</code>, <code>post</code>, etc). No de tu path operation function, como todos los par\u00e1metros y el cuerpo.</p> <p><code>response_model</code> recibe el mismo tipo que declarar\u00edas para un campo de modelo Pydantic, por lo que puede ser un modelo de Pydantic, pero tambi\u00e9n puede ser, por ejemplo, un <code>list</code> de modelos de Pydantic, como <code>List[Item]</code>.</p> <p>ReadyAPI usar\u00e1 este <code>response_model</code> para hacer toda la documentaci\u00f3n de datos, validaci\u00f3n, etc. y tambi\u00e9n para convertir y filtrar los datos de salida a su declaraci\u00f3n de tipo.</p> <p>Consejo</p> <p>Si tienes chequeos estrictos de tipos en tu editor, mypy, etc., puedes declarar el tipo de retorno de la funci\u00f3n como <code>Any</code>.</p> <p>De esa manera le dices al editor que intencionalmente est\u00e1s devolviendo cualquier cosa. Pero ReadyAPI todav\u00eda har\u00e1 la documentaci\u00f3n de datos, validaci\u00f3n, filtrado, etc. con <code>response_model</code>.</p>"},{"location":"tutorial/response-model/#prioridad-del-response_model","title":"Prioridad del <code>response_model</code>","text":"<p>Si declaras tanto un tipo de retorno como un <code>response_model</code>, el <code>response_model</code> tomar\u00e1 prioridad y ser\u00e1 utilizado por ReadyAPI.</p> <p>De esta manera puedes a\u00f1adir anotaciones de tipos correctas a tus funciones incluso cuando est\u00e1s devolviendo un tipo diferente al modelo de response, para ser utilizado por el editor y herramientas como mypy. Y a\u00fan as\u00ed puedes hacer que ReadyAPI realice la validaci\u00f3n de datos, documentaci\u00f3n, etc. usando el <code>response_model</code>.</p> <p>Tambi\u00e9n puedes usar <code>response_model=None</code> para desactivar la creaci\u00f3n de un modelo de response para esa path operation, podr\u00edas necesitar hacerlo si est\u00e1s a\u00f1adiendo anotaciones de tipos para cosas que no son campos v\u00e1lidos de Pydantic, ver\u00e1s un ejemplo de eso en una de las secciones a continuaci\u00f3n.</p>"},{"location":"tutorial/response-model/#devolver-los-mismos-datos-de-entrada","title":"Devolver los mismos datos de entrada","text":"<p>Aqu\u00ed estamos declarando un modelo <code>UserIn</code>, contendr\u00e1 una contrase\u00f1a en texto plano:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Informaci\u00f3n</p> <p>Para usar <code>EmailStr</code>, primero instala <code>email-validator</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo, y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install email-validator\n</code></pre> <p>o con:</p> <pre><code>$ pip install \"pydantic[email]\"\n</code></pre> <p>Y estamos usando este modelo para declarar nuestra entrada y el mismo modelo para declarar nuestra salida:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Ahora, cada vez que un navegador est\u00e9 creando un usuario con una contrase\u00f1a, la API devolver\u00e1 la misma contrase\u00f1a en el response.</p> <p>En este caso, podr\u00eda no ser un problema, porque es el mismo usuario que env\u00eda la contrase\u00f1a.</p> <p>Pero si usamos el mismo modelo para otra path operation, podr\u00edamos estar enviando las contrase\u00f1as de nuestros usuarios a cada cliente.</p> <p>Peligro</p> <p>Nunca almacenes la contrase\u00f1a en texto plano de un usuario ni la env\u00edes en un response como esta, a menos que conozcas todas las advertencias y sepas lo que est\u00e1s haciendo.</p>"},{"location":"tutorial/response-model/#anadir-un-modelo-de-salida","title":"A\u00f1adir un modelo de salida","text":"<p>Podemos en cambio crear un modelo de entrada con la contrase\u00f1a en texto plano y un modelo de salida sin ella:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Aqu\u00ed, aunque nuestra path operation function est\u00e1 devolviendo el mismo usuario de entrada que contiene la contrase\u00f1a:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>...hemos declarado el <code>response_model</code> para ser nuestro modelo <code>UserOut</code>, que no incluye la contrase\u00f1a:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Entonces, ReadyAPI se encargar\u00e1 de filtrar todos los datos que no est\u00e9n declarados en el modelo de salida (usando Pydantic).</p>"},{"location":"tutorial/response-model/#response_model-o-tipo-de-retorno","title":"<code>response_model</code> o Tipo de Retorno","text":"<p>En este caso, como los dos modelos son diferentes, si anot\u00e1ramos el tipo de retorno de la funci\u00f3n como <code>UserOut</code>, el editor y las herramientas se quejar\u00edan de que estamos devolviendo un tipo inv\u00e1lido, ya que son clases diferentes.</p> <p>Por eso en este ejemplo tenemos que declararlo en el par\u00e1metro <code>response_model</code>.</p> <p>...pero sigue leyendo abajo para ver c\u00f3mo superar eso.</p>"},{"location":"tutorial/response-model/#tipo-de-retorno-y-filtrado-de-datos","title":"Tipo de Retorno y Filtrado de Datos","text":"<p>Continuemos con el ejemplo anterior. Quer\u00edamos anotar la funci\u00f3n con un tipo, pero quer\u00edamos poder devolver desde la funci\u00f3n algo que en realidad incluya m\u00e1s datos.</p> <p>Queremos que ReadyAPI contin\u00fae filtrando los datos usando el modelo de response. Para que, incluso cuando la funci\u00f3n devuelva m\u00e1s datos, el response solo incluya los campos declarados en el modelo de response.</p> <p>En el ejemplo anterior, debido a que las clases eran diferentes, tuvimos que usar el par\u00e1metro <code>response_model</code>. Pero eso tambi\u00e9n significa que no obtenemos el soporte del editor y las herramientas verificando el tipo de retorno de la funci\u00f3n.</p> <p>Pero en la mayor\u00eda de los casos en los que necesitamos hacer algo como esto, queremos que el modelo solo filtre/elimine algunos de los datos como en este ejemplo.</p> <p>Y en esos casos, podemos usar clases y herencia para aprovechar las anotaciones de tipos de funciones para obtener mejor soporte en el editor y herramientas, y a\u00fan as\u00ed obtener el filtrado de datos de ReadyAPI.</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <p>Con esto, obtenemos soporte de las herramientas, de los editores y mypy ya que este c\u00f3digo es correcto en t\u00e9rminos de tipos, pero tambi\u00e9n obtenemos el filtrado de datos de ReadyAPI.</p> <p>\u00bfC\u00f3mo funciona esto? Vamos a echarle un vistazo. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#anotaciones-de-tipos-y-herramientas","title":"Anotaciones de Tipos y Herramientas","text":"<p>Primero vamos a ver c\u00f3mo los editores, mypy y otras herramientas ver\u00edan esto.</p> <p><code>BaseUser</code> tiene los campos base. Luego <code>UserIn</code> hereda de <code>BaseUser</code> y a\u00f1ade el campo <code>password</code>, por lo que incluir\u00e1 todos los campos de ambos modelos.</p> <p>Anotamos el tipo de retorno de la funci\u00f3n como <code>BaseUser</code>, pero en realidad estamos devolviendo una instancia de <code>UserIn</code>.</p> <p>El editor, mypy y otras herramientas no se quejar\u00e1n de esto porque, en t\u00e9rminos de tipificaci\u00f3n, <code>UserIn</code> es una subclase de <code>BaseUser</code>, lo que significa que es un tipo v\u00e1lido cuando se espera algo que es un <code>BaseUser</code>.</p>"},{"location":"tutorial/response-model/#filtrado-de-datos-en-readyapi","title":"Filtrado de Datos en ReadyAPI","text":"<p>Ahora, para ReadyAPI, ver\u00e1 el tipo de retorno y se asegurar\u00e1 de que lo que devuelves incluya solo los campos que est\u00e1n declarados en el tipo.</p> <p>ReadyAPI realiza varias cosas internamente con Pydantic para asegurarse de que esas mismas reglas de herencia de clases no se utilicen para el filtrado de datos devueltos, de lo contrario, podr\u00edas terminar devolviendo muchos m\u00e1s datos de los que esperabas.</p> <p>De esta manera, puedes obtener lo mejor de ambos mundos: anotaciones de tipos con soporte de herramientas y filtrado de datos.</p>"},{"location":"tutorial/response-model/#verlo-en-la-documentacion","title":"Verlo en la documentaci\u00f3n","text":"<p>Cuando veas la documentaci\u00f3n autom\u00e1tica, puedes verificar que el modelo de entrada y el modelo de salida tendr\u00e1n cada uno su propio JSON Schema:</p> <p></p> <p>Y ambos modelos se utilizar\u00e1n para la documentaci\u00f3n interactiva de la API:</p> <p></p>"},{"location":"tutorial/response-model/#otras-anotaciones-de-tipos-de-retorno","title":"Otras Anotaciones de Tipos de Retorno","text":"<p>Podr\u00eda haber casos en los que devuelvas algo que no es un campo v\u00e1lido de Pydantic y lo anotes en la funci\u00f3n, solo para obtener el soporte proporcionado por las herramientas (el editor, mypy, etc).</p>"},{"location":"tutorial/response-model/#devolver-un-response-directamente","title":"Devolver un Response Directamente","text":"<p>El caso m\u00e1s com\u00fan ser\u00eda devolver un Response directamente como se explica m\u00e1s adelante en la documentaci\u00f3n avanzada.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import JSONResponse, RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n</code></pre> <p>Este caso simple es manejado autom\u00e1ticamente por ReadyAPI porque la anotaci\u00f3n del tipo de retorno es la clase (o una subclase de) <code>Response</code>.</p> <p>Y las herramientas tambi\u00e9n estar\u00e1n felices porque tanto <code>RedirectResponse</code> como <code>JSONResponse</code> son subclases de <code>Response</code>, por lo que la anotaci\u00f3n del tipo es correcta.</p>"},{"location":"tutorial/response-model/#anotar-una-subclase-de-response","title":"Anotar una Subclase de Response","text":"<p>Tambi\u00e9n puedes usar una subclase de <code>Response</code> en la anotaci\u00f3n del tipo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -&gt; RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n</code></pre> <p>Esto tambi\u00e9n funcionar\u00e1 porque <code>RedirectResponse</code> es una subclase de <code>Response</code>, y ReadyAPI manejar\u00e1 autom\u00e1ticamente este caso simple.</p>"},{"location":"tutorial/response-model/#anotaciones-de-tipos-de-retorno-invalidas","title":"Anotaciones de Tipos de Retorno Inv\u00e1lidas","text":"<p>Pero cuando devuelves alg\u00fan otro objeto arbitrario que no es un tipo v\u00e1lido de Pydantic (por ejemplo, un objeto de base de datos) y lo anotas as\u00ed en la funci\u00f3n, ReadyAPI intentar\u00e1 crear un modelo de response de Pydantic a partir de esa anotaci\u00f3n de tipo, y fallar\u00e1.</p> <p>Lo mismo suceder\u00eda si tuvieras algo como un union entre diferentes tipos donde uno o m\u00e1s de ellos no son tipos v\u00e1lidos de Pydantic, por ejemplo esto fallar\u00eda \ud83d\udca5:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>...esto falla porque la anotaci\u00f3n de tipo no es un tipo de Pydantic y no es solo una sola clase <code>Response</code> o subclase, es una uni\u00f3n (cualquiera de los dos) entre una <code>Response</code> y un <code>dict</code>.</p>"},{"location":"tutorial/response-model/#desactivar-el-modelo-de-response","title":"Desactivar el Modelo de Response","text":"<p>Continuando con el ejemplo anterior, puede que no quieras tener la validaci\u00f3n de datos por defecto, documentaci\u00f3n, filtrado, etc. que realiza ReadyAPI.</p> <p>Pero puedes querer mantener la anotaci\u00f3n del tipo de retorno en la funci\u00f3n para obtener el soporte de herramientas como editores y verificadores de tipos (por ejemplo, mypy).</p> <p>En este caso, puedes desactivar la generaci\u00f3n del modelo de response configurando <code>response_model=None</code>:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>Esto har\u00e1 que ReadyAPI omita la generaci\u00f3n del modelo de response y de esa manera puedes tener cualquier anotaci\u00f3n de tipo de retorno que necesites sin que afecte a tu aplicaci\u00f3n ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#parametros-de-codificacion-del-modelo-de-response","title":"Par\u00e1metros de codificaci\u00f3n del Modelo de Response","text":"<p>Tu modelo de response podr\u00eda tener valores por defecto, como:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <ul> <li><code>description: Union[str, None] = None</code> (o <code>str | None = None</code> en Python 3.10) tiene un valor por defecto de <code>None</code>.</li> <li><code>tax: float = 10.5</code> tiene un valor por defecto de <code>10.5</code>.</li> <li><code>tags: List[str] = []</code> tiene un valor por defecto de una lista vac\u00eda: <code>[]</code>.</li> </ul> <p>pero podr\u00edas querer omitirlos del resultado si no fueron en realidad almacenados.</p> <p>Por ejemplo, si tienes modelos con muchos atributos opcionales en una base de datos NoSQL, pero no quieres enviar responses JSON muy largos llenos de valores por defecto.</p>"},{"location":"tutorial/response-model/#usa-el-parametro-response_model_exclude_unset","title":"Usa el par\u00e1metro <code>response_model_exclude_unset</code>","text":"<p>Puedes configurar el par\u00e1metro del decorador de path operation <code>response_model_exclude_unset=True</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <p>y esos valores por defecto no ser\u00e1n incluidos en el response, solo los valores realmente establecidos.</p> <p>Entonces, si env\u00edas un request a esa path operation para el \u00edtem con ID <code>foo</code>, el response (no incluyendo valores por defecto) ser\u00e1:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 50.2\n}\n</code></pre> <p>Informaci\u00f3n</p> <p>En Pydantic v1 el m\u00e9todo se llamaba <code>.dict()</code>, fue deprecado (pero a\u00fan soportado) en Pydantic v2, y renombrado a <code>.model_dump()</code>.</p> <p>Los ejemplos aqu\u00ed usan <code>.dict()</code> para compatibilidad con Pydantic v1, pero deber\u00edas usar <code>.model_dump()</code> en su lugar si puedes usar Pydantic v2.</p> <p>Informaci\u00f3n</p> <p>ReadyAPI usa el m\u00e9todo <code>.dict()</code> del modelo de Pydantic con su par\u00e1metro <code>exclude_unset</code> para lograr esto.</p> <p>Informaci\u00f3n</p> <p>Tambi\u00e9n puedes usar:</p> <ul> <li><code>response_model_exclude_defaults=True</code></li> <li><code>response_model_exclude_none=True</code></li> </ul> <p>como se describe en la documentaci\u00f3n de Pydantic para <code>exclude_defaults</code> y <code>exclude_none</code>.</p>"},{"location":"tutorial/response-model/#datos-con-valores-para-campos-con-valores-por-defecto","title":"Datos con valores para campos con valores por defecto","text":"<p>Pero si tus datos tienen valores para los campos del modelo con valores por defecto, como el art\u00edculo con ID <code>bar</code>:</p> <pre><code>{\n    \"name\": \"Bar\",\n    \"description\": \"The bartenders\",\n    \"price\": 62,\n    \"tax\": 20.2\n}\n</code></pre> <p>ser\u00e1n incluidos en el response.</p>"},{"location":"tutorial/response-model/#datos-con-los-mismos-valores-que-los-valores-por-defecto","title":"Datos con los mismos valores que los valores por defecto","text":"<p>Si los datos tienen los mismos valores que los valores por defecto, como el art\u00edculo con ID <code>baz</code>:</p> <pre><code>{\n    \"name\": \"Baz\",\n    \"description\": None,\n    \"price\": 50.2,\n    \"tax\": 10.5,\n    \"tags\": []\n}\n</code></pre> <p>ReadyAPI es lo suficientemente inteligente (de hecho, Pydantic es lo suficientemente inteligente) para darse cuenta de que, a pesar de que <code>description</code>, <code>tax</code> y <code>tags</code> tienen los mismos valores que los valores por defecto, fueron establecidos expl\u00edcitamente (en lugar de tomados de los valores por defecto).</p> <p>Por lo tanto, se incluir\u00e1n en el response JSON.</p> <p>Consejo</p> <p>Ten en cuenta que los valores por defecto pueden ser cualquier cosa, no solo <code>None</code>.</p> <p>Pueden ser una lista (<code>[]</code>), un <code>float</code> de <code>10.5</code>, etc.</p>"},{"location":"tutorial/response-model/#response_model_include-y-response_model_exclude","title":"<code>response_model_include</code> y <code>response_model_exclude</code>","text":"<p>Tambi\u00e9n puedes usar los par\u00e1metros del decorador de path operation <code>response_model_include</code> y <code>response_model_exclude</code>.</p> <p>Aceptan un <code>set</code> de <code>str</code> con el nombre de los atributos a incluir (omitiendo el resto) o excluir (incluyendo el resto).</p> <p>Esto se puede usar como un atajo r\u00e1pido si solo tienes un modelo de Pydantic y quieres eliminar algunos datos de la salida.</p> <p>Consejo</p> <p>Pero todav\u00eda se recomienda usar las ideas anteriores, usando m\u00faltiples clases, en lugar de estos par\u00e1metros.</p> <p>Esto se debe a que el JSON Schema generado en el OpenAPI de tu aplicaci\u00f3n (y la documentaci\u00f3n) a\u00fan ser\u00e1 el del modelo completo, incluso si usas <code>response_model_include</code> o <code>response_model_exclude</code> para omitir algunos atributos.</p> <p>Esto tambi\u00e9n se aplica a <code>response_model_by_alias</code> que funciona de manera similar.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <p>Consejo</p> <p>La sintaxis <code>{\"name\", \"description\"}</code> crea un <code>set</code> con esos dos valores.</p> <p>Es equivalente a <code>set([\"name\", \"description\"])</code>.</p>"},{"location":"tutorial/response-model/#usar-lists-en-lugar-de-sets","title":"Usar <code>list</code>s en lugar de <code>set</code>s","text":"<p>Si olvidas usar un <code>set</code> y usas un <code>list</code> o <code>tuple</code> en su lugar, ReadyAPI todav\u00eda lo convertir\u00e1 a un <code>set</code> y funcionar\u00e1 correctamente:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/response-model/#resumen","title":"Resumen","text":"<p>Usa el par\u00e1metro <code>response_model</code> del decorador de path operation para definir modelos de response y especialmente para asegurarte de que los datos privados sean filtrados.</p> <p>Usa <code>response_model_exclude_unset</code> para devolver solo los valores establecidos expl\u00edcitamente.</p>"},{"location":"tutorial/response-status-code/","title":"C\u00f3digo de Estado del Response","text":"<p>De la misma manera que puedes especificar un modelo de response, tambi\u00e9n puedes declarar el c\u00f3digo de estado HTTP usado para el response con el par\u00e1metro <code>status_code</code> en cualquiera de las path operations:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Nota</p> <p>Observa que <code>status_code</code> es un par\u00e1metro del m\u00e9todo \"decorador\" (<code>get</code>, <code>post</code>, etc). No de tu path operation function, como todos los par\u00e1metros y body.</p> <p>El par\u00e1metro <code>status_code</code> recibe un n\u00famero con el c\u00f3digo de estado HTTP.</p> <p>Informaci\u00f3n</p> <p><code>status_code</code> tambi\u00e9n puede recibir un <code>IntEnum</code>, como por ejemplo el <code>http.HTTPStatus</code> de Python.</p> <p>Esto har\u00e1:</p> <ul> <li>Devolver ese c\u00f3digo de estado en el response.</li> <li>Documentarlo como tal en el esquema de OpenAPI (y por lo tanto, en las interfaces de usuario):</li> </ul> <p></p> <p>Nota</p> <p>Algunos c\u00f3digos de response (ver la siguiente secci\u00f3n) indican que el response no tiene un body.</p> <p>ReadyAPI sabe esto, y producir\u00e1 documentaci\u00f3n OpenAPI que establece que no hay un response body.</p>"},{"location":"tutorial/response-status-code/#acerca-de-los-codigos-de-estado-http","title":"Acerca de los c\u00f3digos de estado HTTP","text":"<p>Nota</p> <p>Si ya sabes qu\u00e9 son los c\u00f3digos de estado HTTP, salta a la siguiente secci\u00f3n.</p> <p>En HTTP, env\u00edas un c\u00f3digo de estado num\u00e9rico de 3 d\u00edgitos como parte del response.</p> <p>Estos c\u00f3digos de estado tienen un nombre asociado para reconocerlos, pero la parte importante es el n\u00famero.</p> <p>En breve:</p> <ul> <li><code>100</code> y superiores son para \"Informaci\u00f3n\". Rara vez los usas directamente. Los responses con estos c\u00f3digos de estado no pueden tener un body.</li> <li><code>200</code> y superiores son para responses \"Exitosos\". Estos son los que usar\u00edas m\u00e1s.<ul> <li><code>200</code> es el c\u00f3digo de estado por defecto, lo que significa que todo estaba \"OK\".</li> <li>Otro ejemplo ser\u00eda <code>201</code>, \"Created\". Com\u00fanmente se usa despu\u00e9s de crear un nuevo registro en la base de datos.</li> <li>Un caso especial es <code>204</code>, \"No Content\". Este response se usa cuando no hay contenido para devolver al cliente, por lo tanto, el response no debe tener un body.</li> </ul> </li> <li><code>300</code> y superiores son para \"Redirecci\u00f3n\". Los responses con estos c\u00f3digos de estado pueden o no tener un body, excepto <code>304</code>, \"Not Modified\", que no debe tener uno.</li> <li><code>400</code> y superiores son para responses de \"Error del Cliente\". Este es el segundo tipo que probablemente m\u00e1s usar\u00edas.<ul> <li>Un ejemplo es <code>404</code>, para un response \"Not Found\".</li> <li>Para errores gen\u00e9ricos del cliente, puedes usar simplemente <code>400</code>.</li> </ul> </li> <li><code>500</code> y superiores son para errores del servidor. Casi nunca los usas directamente. Cuando algo sale mal en alguna parte de tu c\u00f3digo de aplicaci\u00f3n, o del servidor, autom\u00e1ticamente devolver\u00e1 uno de estos c\u00f3digos de estado.</li> </ul> <p>Consejo</p> <p>Para saber m\u00e1s sobre cada c\u00f3digo de estado y qu\u00e9 c\u00f3digo es para qu\u00e9, revisa la documentaci\u00f3n de MDN sobre c\u00f3digos de estado HTTP.</p>"},{"location":"tutorial/response-status-code/#atajo-para-recordar-los-nombres","title":"Atajo para recordar los nombres","text":"<p>Veamos de nuevo el ejemplo anterior:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p><code>201</code> es el c\u00f3digo de estado para \"Created\".</p> <p>Pero no tienes que memorizar lo que significa cada uno de estos c\u00f3digos.</p> <p>Puedes usar las variables de conveniencia de <code>readyapi.status</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Son solo una conveniencia, mantienen el mismo n\u00famero, pero de esa manera puedes usar el autocompletado del editor para encontrarlos:</p> <p></p> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette import status</code>.</p> <p>ReadyAPI proporciona el mismo <code>starlette.status</code> como <code>readyapi.status</code> solo como una conveniencia para ti, el desarrollador. Pero proviene directamente de Starlette.</p>"},{"location":"tutorial/response-status-code/#cambiando-el-valor-por-defecto","title":"Cambiando el valor por defecto","text":"<p>M\u00e1s adelante, en la Gu\u00eda de Usuario Avanzada, ver\u00e1s c\u00f3mo devolver un c\u00f3digo de estado diferente al valor por defecto que est\u00e1s declarando aqu\u00ed.</p>"},{"location":"tutorial/schema-extra-example/","title":"Declarar Ejemplos de Request","text":"<p>Puedes declarar ejemplos de los datos que tu aplicaci\u00f3n puede recibir.</p> <p>Aqu\u00ed tienes varias formas de hacerlo.</p>"},{"location":"tutorial/schema-extra-example/#datos-extra-de-json-schema-en-modelos-de-pydantic","title":"Datos extra de JSON Schema en modelos de Pydantic","text":"<p>Puedes declarar <code>examples</code> para un modelo de Pydantic que se a\u00f1adir\u00e1 al JSON Schema generado.</p> Pydantic v2Pydantic v1 Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Esa informaci\u00f3n extra se a\u00f1adir\u00e1 tal cual al JSON Schema generado para ese modelo, y se usar\u00e1 en la documentaci\u00f3n de la API.</p> Pydantic v2Pydantic v1 <p>En Pydantic versi\u00f3n 2, usar\u00edas el atributo <code>model_config</code>, que toma un <code>dict</code> como se describe en la documentaci\u00f3n de Pydantic: Configuraci\u00f3n.</p> <p>Puedes establecer <code>\"json_schema_extra\"</code> con un <code>dict</code> que contenga cualquier dato adicional que desees que aparezca en el JSON Schema generado, incluyendo <code>examples</code>.</p> <p>En Pydantic versi\u00f3n 1, usar\u00edas una clase interna <code>Config</code> y <code>schema_extra</code>, como se describe en la documentaci\u00f3n de Pydantic: Personalizaci\u00f3n de Esquema.</p> <p>Puedes establecer <code>schema_extra</code> con un <code>dict</code> que contenga cualquier dato adicional que desees que aparezca en el JSON Schema generado, incluyendo <code>examples</code>.</p> <p>Consejo</p> <p>Podr\u00edas usar la misma t\u00e9cnica para extender el JSON Schema y a\u00f1adir tu propia informaci\u00f3n extra personalizada.</p> <p>Por ejemplo, podr\u00edas usarlo para a\u00f1adir metadatos para una interfaz de usuario frontend, etc.</p> <p>Informaci\u00f3n</p> <p>OpenAPI 3.1.0 (usado desde ReadyAPI 0.99.0) a\u00f1adi\u00f3 soporte para <code>examples</code>, que es parte del est\u00e1ndar de JSON Schema.</p> <p>Antes de eso, solo soportaba la palabra clave <code>example</code> con un solo ejemplo. Eso a\u00fan es soportado por OpenAPI 3.1.0, pero est\u00e1 obsoleto y no es parte del est\u00e1ndar de JSON Schema. As\u00ed que se recomienda migrar de <code>example</code> a <code>examples</code>. \ud83e\udd13</p> <p>Puedes leer m\u00e1s al final de esta p\u00e1gina.</p>"},{"location":"tutorial/schema-extra-example/#argumentos-adicionales-en-field","title":"Argumentos adicionales en <code>Field</code>","text":"<p>Cuando usas <code>Field()</code> con modelos de Pydantic, tambi\u00e9n puedes declarar <code>examples</code> adicionales:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#examples-en-json-schema-openapi","title":"<code>examples</code> en JSON Schema - OpenAPI","text":"<p>Cuando usas cualquiera de:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>tambi\u00e9n puedes declarar un grupo de <code>examples</code> con informaci\u00f3n adicional que se a\u00f1adir\u00e1 a sus JSON Schemas dentro de OpenAPI.</p>"},{"location":"tutorial/schema-extra-example/#body-con-examples","title":"<code>Body</code> con <code>examples</code>","text":"<p>Aqu\u00ed pasamos <code>examples</code> que contiene un ejemplo de los datos esperados en <code>Body()</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#ejemplo-en-la-interfaz-de-documentacion","title":"Ejemplo en la interfaz de documentaci\u00f3n","text":"<p>Con cualquiera de los m\u00e9todos anteriores se ver\u00eda as\u00ed en los <code>/docs</code>:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#body-con-multiples-examples","title":"<code>Body</code> con m\u00faltiples <code>examples</code>","text":"<p>Por supuesto, tambi\u00e9n puedes pasar m\u00faltiples <code>examples</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Cuando haces esto, los ejemplos ser\u00e1n parte del JSON Schema interno para esos datos de body.</p> <p>Sin embargo, al momento de escribir esto, Swagger UI, la herramienta encargada de mostrar la interfaz de documentaci\u00f3n, no soporta mostrar m\u00faltiples ejemplos para los datos en JSON Schema. Pero lee m\u00e1s abajo para una soluci\u00f3n alternativa.</p>"},{"location":"tutorial/schema-extra-example/#examples-especificos-de-openapi","title":"<code>examples</code> espec\u00edficos de OpenAPI","text":"<p>Desde antes de que JSON Schema soportara <code>examples</code>, OpenAPI ten\u00eda soporte para un campo diferente tambi\u00e9n llamado <code>examples</code>.</p> <p>Estos <code>examples</code> espec\u00edficos de OpenAPI van en otra secci\u00f3n en la especificaci\u00f3n de OpenAPI. Van en los detalles para cada path operation, no dentro de cada JSON Schema.</p> <p>Y Swagger UI ha soportado este campo particular de <code>examples</code> por un tiempo. As\u00ed que, puedes usarlo para mostrar diferentes ejemplos en la interfaz de documentaci\u00f3n.</p> <p>La forma de este campo espec\u00edfico de OpenAPI <code>examples</code> es un <code>dict</code> con m\u00faltiples ejemplos (en lugar de una <code>list</code>), cada uno con informaci\u00f3n adicional que tambi\u00e9n se a\u00f1adir\u00e1 a OpenAPI.</p> <p>Esto no va dentro de cada JSON Schema contenido en OpenAPI, esto va afuera, directamente en la path operation.</p>"},{"location":"tutorial/schema-extra-example/#usando-el-parametro-openapi_examples","title":"Usando el Par\u00e1metro <code>openapi_examples</code>","text":"<p>Puedes declarar los <code>examples</code> espec\u00edficos de OpenAPI en ReadyAPI con el par\u00e1metro <code>openapi_examples</code> para:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>Las claves del <code>dict</code> identifican cada ejemplo, y cada valor es otro <code>dict</code>.</p> <p>Cada <code>dict</code> espec\u00edfico del ejemplo en los <code>examples</code> puede contener:</p> <ul> <li><code>summary</code>: Descripci\u00f3n corta del ejemplo.</li> <li><code>description</code>: Una descripci\u00f3n larga que puede contener texto Markdown.</li> <li><code>value</code>: Este es el ejemplo real mostrado, e.g. un <code>dict</code>.</li> <li><code>externalValue</code>: alternativa a <code>value</code>, una URL que apunta al ejemplo. Aunque esto puede no ser soportado por tantas herramientas como <code>value</code>.</li> </ul> <p>Puedes usarlo as\u00ed:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#ejemplos-de-openapi-en-la-interfaz-de-documentacion","title":"Ejemplos de OpenAPI en la Interfaz de Documentaci\u00f3n","text":"<p>Con <code>openapi_examples</code> a\u00f1adido a <code>Body()</code>, los <code>/docs</code> se ver\u00edan as\u00ed:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#detalles-tecnicos","title":"Detalles T\u00e9cnicos","text":"<p>Consejo</p> <p>Si ya est\u00e1s usando la versi\u00f3n 0.99.0 o superior de ReadyAPI, probablemente puedes omitir estos detalles.</p> <p>Son m\u00e1s relevantes para versiones m\u00e1s antiguas, antes de que OpenAPI 3.1.0 estuviera disponible.</p> <p>Puedes considerar esto una breve lecci\u00f3n de historia de OpenAPI y JSON Schema. \ud83e\udd13</p> <p>Advertencia</p> <p>Estos son detalles muy t\u00e9cnicos sobre los est\u00e1ndares JSON Schema y OpenAPI.</p> <p>Si las ideas anteriores ya funcionan para ti, eso podr\u00eda ser suficiente, y probablemente no necesites estos detalles, si\u00e9ntete libre de omitirlos.</p> <p>Antes de OpenAPI 3.1.0, OpenAPI usaba una versi\u00f3n m\u00e1s antigua y modificada de JSON Schema.</p> <p>JSON Schema no ten\u00eda <code>examples</code>, as\u00ed que OpenAPI a\u00f1adi\u00f3 su propio campo <code>example</code> a su versi\u00f3n modificada.</p> <p>OpenAPI tambi\u00e9n a\u00f1adi\u00f3 los campos <code>example</code> y <code>examples</code> a otras partes de la especificaci\u00f3n:</p> <ul> <li><code>Parameter Object</code> (en la especificaci\u00f3n) que era usado por ReadyAPI:<ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> </ul> </li> <li><code>Request Body Object</code>, en el campo <code>content</code>, sobre el <code>Media Type Object</code> (en la especificaci\u00f3n) que era usado por ReadyAPI:<ul> <li><code>Body()</code></li> <li><code>File()</code></li> <li><code>Form()</code></li> </ul> </li> </ul> <p>Informaci\u00f3n</p> <p>Este viejo par\u00e1metro <code>examples</code> espec\u00edfico de OpenAPI ahora es <code>openapi_examples</code> desde ReadyAPI <code>0.103.0</code>.</p>"},{"location":"tutorial/schema-extra-example/#campo-examples-de-json-schema","title":"Campo <code>examples</code> de JSON Schema","text":"<p>Pero luego JSON Schema a\u00f1adi\u00f3 un campo <code>examples</code> a una nueva versi\u00f3n de la especificaci\u00f3n.</p> <p>Y entonces el nuevo OpenAPI 3.1.0 se bas\u00f3 en la \u00faltima versi\u00f3n (JSON Schema 2020-12) que inclu\u00eda este nuevo campo <code>examples</code>.</p> <p>Y ahora este nuevo campo <code>examples</code> tiene precedencia sobre el viejo campo \u00fanico (y personalizado) <code>example</code>, que ahora est\u00e1 obsoleto.</p> <p>Este nuevo campo <code>examples</code> en JSON Schema es solo una <code>list</code> de ejemplos, no un dict con metadatos adicionales como en los otros lugares en OpenAPI (descritos arriba).</p> <p>Informaci\u00f3n</p> <p>Incluso despu\u00e9s de que OpenAPI 3.1.0 fue lanzado con esta nueva integraci\u00f3n m\u00e1s sencilla con JSON Schema, por un tiempo, Swagger UI, la herramienta que proporciona la documentaci\u00f3n autom\u00e1tica, no soportaba OpenAPI 3.1.0 (lo hace desde la versi\u00f3n 5.0.0 \ud83c\udf89).</p> <p>Debido a eso, las versiones de ReadyAPI anteriores a 0.99.0 todav\u00eda usaban versiones de OpenAPI menores a 3.1.0.</p>"},{"location":"tutorial/schema-extra-example/#examples-de-pydantic-y-readyapi","title":"<code>examples</code> de Pydantic y ReadyAPI","text":"<p>Cuando a\u00f1ades <code>examples</code> dentro de un modelo de Pydantic, usando <code>schema_extra</code> o <code>Field(examples=[\"algo\"])</code>, ese ejemplo se a\u00f1ade al JSON Schema para ese modelo de Pydantic.</p> <p>Y ese JSON Schema del modelo de Pydantic se incluye en el OpenAPI de tu API, y luego se usa en la interfaz de documentaci\u00f3n.</p> <p>En las versiones de ReadyAPI antes de 0.99.0 (0.99.0 y superior usan el nuevo OpenAPI 3.1.0) cuando usabas <code>example</code> o <code>examples</code> con cualquiera de las otras utilidades (<code>Query()</code>, <code>Body()</code>, etc.) esos ejemplos no se a\u00f1ad\u00edan al JSON Schema que describe esos datos (ni siquiera a la propia versi\u00f3n de JSON Schema de OpenAPI), se a\u00f1ad\u00edan directamente a la declaraci\u00f3n de la path operation en OpenAPI (fuera de las partes de OpenAPI que usan JSON Schema).</p> <p>Pero ahora que ReadyAPI 0.99.0 y superiores usa OpenAPI 3.1.0, que usa JSON Schema 2020-12, y Swagger UI 5.0.0 y superiores, todo es m\u00e1s consistente y los ejemplos se incluyen en JSON Schema.</p>"},{"location":"tutorial/schema-extra-example/#swagger-ui-y-examples-especificos-de-openapi","title":"Swagger UI y <code>examples</code> espec\u00edficos de OpenAPI","text":"<p>Ahora, como Swagger UI no soportaba m\u00faltiples ejemplos de JSON Schema (a fecha de 2023-08-26), los usuarios no ten\u00edan una forma de mostrar m\u00faltiples ejemplos en los documentos.</p> <p>Para resolver eso, ReadyAPI <code>0.103.0</code> a\u00f1adi\u00f3 soporte para declarar el mismo viejo campo espec\u00edfico de OpenAPI <code>examples</code> con el nuevo par\u00e1metro <code>openapi_examples</code>. \ud83e\udd13</p>"},{"location":"tutorial/schema-extra-example/#resumen","title":"Resumen","text":"<p>Sol\u00eda decir que no me gustaba mucho la historia... y m\u00edrame ahora dando lecciones de \"historia tecnol\u00f3gica\". \ud83d\ude05</p> <p>En resumen, actualiza a ReadyAPI 0.99.0 o superior, y las cosas son mucho m\u00e1s simples, consistentes e intuitivas, y no necesitas conocer todos estos detalles hist\u00f3ricos. \ud83d\ude0e</p>"},{"location":"tutorial/sql-databases/","title":"Bases de Datos SQL (Relacionales)","text":"<p>ReadyAPI no requiere que uses una base de datos SQL (relacional). Pero puedes utilizar cualquier base de datos que desees.</p> <p>Aqu\u00ed veremos un ejemplo usando SQLDev.</p> <p>SQLDev est\u00e1 construido sobre SQLAlchemy y Pydantic. Fue creado por el mismo autor de ReadyAPI para ser la combinaci\u00f3n perfecta para aplicaciones de ReadyAPI que necesiten usar bases de datos SQL.</p> <p>Consejo</p> <p>Puedes usar cualquier otro paquete de bases de datos SQL o NoSQL que quieras (en algunos casos llamadas \"ORMs\"), ReadyAPI no te obliga a usar nada. \ud83d\ude0e</p> <p>Como SQLDev se basa en SQLAlchemy, puedes usar f\u00e1cilmente cualquier base de datos soportada por SQLAlchemy (lo que las hace tambi\u00e9n soportadas por SQLDev), como:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>Microsoft SQL Server, etc.</li> </ul> <p>En este ejemplo, usaremos SQLite, porque utiliza un solo archivo y Python tiene soporte integrado. As\u00ed que puedes copiar este ejemplo y ejecutarlo tal cual.</p> <p>M\u00e1s adelante, para tu aplicaci\u00f3n en producci\u00f3n, es posible que desees usar un servidor de base de datos como PostgreSQL.</p> <p>Consejo</p> <p>Hay un generador de proyectos oficial con ReadyAPI y PostgreSQL que incluye un frontend y m\u00e1s herramientas: https://github.com/readyapi/full-stack-readyapi-template</p> <p>Este es un tutorial muy simple y corto, si deseas aprender sobre bases de datos en general, sobre SQL o m\u00e1s funcionalidades avanzadas, ve a la documentaci\u00f3n de SQLDev.</p>"},{"location":"tutorial/sql-databases/#instalar-sqldev","title":"Instalar <code>SQLDev</code>","text":"<p>Primero, aseg\u00farate de crear tu entorno virtual, act\u00edvalo, y luego instala <code>sqldev</code>:</p> <pre><code>$ pip install sqldev\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/sql-databases/#crear-la-app-con-un-solo-modelo","title":"Crear la App con un Solo Modelo","text":"<p>Primero crearemos la versi\u00f3n m\u00e1s simple de la aplicaci\u00f3n con un solo modelo de SQLDev.</p> <p>M\u00e1s adelante la mejoraremos aumentando la seguridad y versatilidad con m\u00faltiples modelos a continuaci\u00f3n. \ud83e\udd13</p>"},{"location":"tutorial/sql-databases/#crear-modelos","title":"Crear Modelos","text":"<p>Importa <code>SQLDev</code> y crea un modelo de base de datos:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>La clase <code>Hero</code> es muy similar a un modelo de Pydantic (de hecho, en el fondo, realmente es un modelo de Pydantic).</p> <p>Hay algunas diferencias:</p> <ul> <li> <p><code>table=True</code> le dice a SQLDev que este es un modelo de tabla, que debe representar una tabla en la base de datos SQL, no es solo un modelo de datos (como lo ser\u00eda cualquier otra clase regular de Pydantic).</p> </li> <li> <p><code>Field(primary_key=True)</code> le dice a SQLDev que <code>id</code> es la clave primaria en la base de datos SQL (puedes aprender m\u00e1s sobre claves primarias de SQL en la documentaci\u00f3n de SQLDev).</p> <p>Al tener el tipo como <code>int | None</code>, SQLDev sabr\u00e1 que esta columna debe ser un <code>INTEGER</code> en la base de datos SQL y que debe ser <code>NULLABLE</code>.</p> </li> <li> <p><code>Field(index=True)</code> le dice a SQLDev que debe crear un \u00edndice SQL para esta columna, lo que permitir\u00e1 b\u00fasquedas m\u00e1s r\u00e1pidas en la base de datos cuando se lean datos filtrados por esta columna.</p> <p>SQLDev sabr\u00e1 que algo declarado como <code>str</code> ser\u00e1 una columna SQL de tipo <code>TEXT</code> (o <code>VARCHAR</code>, dependiendo de la base de datos).</p> </li> </ul>"},{"location":"tutorial/sql-databases/#crear-un-engine","title":"Crear un Engine","text":"<p>Un <code>engine</code> de SQLDev (en el fondo, realmente es un <code>engine</code> de SQLAlchemy) es lo que mantiene las conexiones a la base de datos.</p> <p>Tendr\u00edas un solo objeto <code>engine</code> para todo tu c\u00f3digo para conectar a la misma base de datos.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Usar <code>check_same_thread=False</code> permite a ReadyAPI usar la misma base de datos SQLite en diferentes hilos. Esto es necesario ya que una sola request podr\u00eda usar m\u00e1s de un hilo (por ejemplo, en dependencias).</p> <p>No te preocupes, con la forma en que est\u00e1 estructurado el c\u00f3digo, nos aseguraremos de usar una sola session de SQLDev por request m\u00e1s adelante, esto es realmente lo que intenta lograr el <code>check_same_thread</code>.</p>"},{"location":"tutorial/sql-databases/#crear-las-tablas","title":"Crear las Tablas","text":"<p>Luego a\u00f1adimos una funci\u00f3n que usa <code>SQLDev.metadata.create_all(engine)</code> para crear las tablas para todos los modelos de tabla.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#crear-una-dependencia-de-session","title":"Crear una Dependencia de Session","text":"<p>Una <code>Session</code> es lo que almacena los objetos en memoria y lleva un seguimiento de cualquier cambio necesario en los datos, luego usa el <code>engine</code> para comunicarse con la base de datos.</p> <p>Crearemos una dependencia de ReadyAPI con <code>yield</code> que proporcionar\u00e1 una nueva <code>Session</code> para cada request. Esto es lo que asegura que usemos una sola session por request. \ud83e\udd13</p> <p>Luego creamos una dependencia <code>Annotated</code> <code>SessionDep</code> para simplificar el resto del c\u00f3digo que usar\u00e1 esta dependencia.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#crear-tablas-de-base-de-datos-al-arrancar","title":"Crear Tablas de Base de Datos al Arrancar","text":"<p>Crearemos las tablas de la base de datos cuando arranque la aplicaci\u00f3n.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Aqu\u00ed creamos las tablas en un evento de inicio de la aplicaci\u00f3n.</p> <p>Para producci\u00f3n probablemente usar\u00edas un script de migraci\u00f3n que se ejecuta antes de iniciar tu aplicaci\u00f3n. \ud83e\udd13</p> <p>Consejo</p> <p>SQLDev tendr\u00e1 utilidades de migraci\u00f3n envolviendo Alembic, pero por ahora, puedes usar Alembic directamente.</p>"},{"location":"tutorial/sql-databases/#crear-un-hero","title":"Crear un Hero","text":"<p>Debido a que cada modelo de SQLDev tambi\u00e9n es un modelo de Pydantic, puedes usarlo en las mismas anotaciones de tipos que podr\u00edas usar en modelos de Pydantic.</p> <p>Por ejemplo, si declaras un par\u00e1metro de tipo <code>Hero</code>, ser\u00e1 le\u00eddo desde el JSON body.</p> <p>De la misma manera, puedes declararlo como el tipo de retorno de la funci\u00f3n, y luego la forma de los datos aparecer\u00e1 en la interfaz autom\u00e1tica de documentaci\u00f3n de la API.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Aqu\u00ed usamos la dependencia <code>SessionDep</code> (una <code>Session</code>) para a\u00f1adir el nuevo <code>Hero</code> a la instance <code>Session</code>, comiteamos los cambios a la base de datos, refrescamos los datos en el <code>hero</code> y luego lo devolvemos.</p>"},{"location":"tutorial/sql-databases/#leer-heroes","title":"Leer Heroes","text":"<p>Podemos leer <code>Hero</code>s de la base de datos usando un <code>select()</code>. Podemos incluir un <code>limit</code> y <code>offset</code> para paginar los resultados.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#leer-un-hero","title":"Leer Un Hero","text":"<p>Podemos leer un \u00fanico <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#eliminar-un-hero","title":"Eliminar un Hero","text":"<p>Tambi\u00e9n podemos eliminar un <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#ejecutar-la-app","title":"Ejecutar la App","text":"<p>Puedes ejecutar la aplicaci\u00f3n:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Luego dir\u00edgete a la interfaz de <code>/docs</code>, ver\u00e1s que ReadyAPI est\u00e1 usando estos modelos para documentar la API, y los usar\u00e1 para serializar y validar los datos tambi\u00e9n.</p>"},{"location":"tutorial/sql-databases/#actualizar-la-app-con-multiples-modelos","title":"Actualizar la App con M\u00faltiples Modelos","text":"<p>Ahora vamos a refactorizar un poco esta aplicaci\u00f3n para aumentar la seguridad y la versatilidad.</p> <p>Si revisas la aplicaci\u00f3n anterior, en la interfaz ver\u00e1s que, hasta ahora, permite al cliente decidir el <code>id</code> del <code>Hero</code> a crear. \ud83d\ude31</p> <p>No deber\u00edamos permitir que eso suceda, podr\u00edan sobrescribir un <code>id</code> que ya tenemos asignado en la base de datos. Decidir el <code>id</code> deber\u00eda ser tarea del backend o la base de datos, no del cliente.</p> <p>Adem\u00e1s, creamos un <code>secret_name</code> para el h\u00e9roe, pero hasta ahora, lo estamos devolviendo en todas partes, eso no es muy secreto... \ud83d\ude05</p> <p>Arreglaremos estas cosas a\u00f1adiendo unos modelos extra. Aqu\u00ed es donde SQLDev brillar\u00e1. \u2728</p>"},{"location":"tutorial/sql-databases/#crear-multiples-modelos","title":"Crear M\u00faltiples Modelos","text":"<p>En SQLDev, cualquier clase de modelo que tenga <code>table=True</code> es un modelo de tabla.</p> <p>Y cualquier clase de modelo que no tenga <code>table=True</code> es un modelo de datos, estos son en realidad solo modelos de Pydantic (con un par de caracter\u00edsticas extra peque\u00f1as). \ud83e\udd13</p> <p>Con SQLDev, podemos usar herencia para evitar duplicar todos los campos en todos los casos.</p>"},{"location":"tutorial/sql-databases/#herobase-la-clase-base","title":"<code>HeroBase</code> - la clase base","text":"<p>Comencemos con un modelo <code>HeroBase</code> que tiene todos los campos que son compartidos por todos los modelos:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#hero-el-modelo-de-tabla","title":"<code>Hero</code> - el modelo de tabla","text":"<p>Luego, crearemos <code>Hero</code>, el modelo de tabla real, con los campos extra que no siempre est\u00e1n en los otros modelos:</p> <ul> <li><code>id</code></li> <li><code>secret_name</code></li> </ul> <p>Debido a que <code>Hero</code> hereda de <code>HeroBase</code>, tambi\u00e9n tiene los campos declarados en <code>HeroBase</code>, por lo que todos los campos para <code>Hero</code> son:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heropublic-el-modelo-de-datos-publico","title":"<code>HeroPublic</code> - el modelo de datos p\u00fablico","text":"<p>A continuaci\u00f3n, creamos un modelo <code>HeroPublic</code>, este es el que ser\u00e1 devuelto a los clientes de la API.</p> <p>Tiene los mismos campos que <code>HeroBase</code>, por lo que no incluir\u00e1 <code>secret_name</code>.</p> <p>Por fin, la identidad de nuestros h\u00e9roes est\u00e1 protegida! \ud83e\udd77</p> <p>Tambi\u00e9n vuelve a declarar <code>id: int</code>. Al hacer esto, estamos haciendo un contrato con los clientes de la API, para que siempre puedan esperar que el <code>id</code> est\u00e9 all\u00ed y sea un <code>int</code> (nunca ser\u00e1 <code>None</code>).</p> <p>Consejo</p> <p>Tener el modelo de retorno asegurando que un valor siempre est\u00e9 disponible y siempre sea <code>int</code> (no <code>None</code>) es muy \u00fatil para los clientes de la API, pueden escribir c\u00f3digo mucho m\u00e1s simple teniendo esta certeza.</p> <p>Adem\u00e1s, los clientes generados autom\u00e1ticamente tendr\u00e1n interfaces m\u00e1s simples, para que los desarrolladores que se comuniquen con tu API puedan tener una experiencia mucho mejor trabajando con tu API. \ud83d\ude0e</p> <p>Todos los campos en <code>HeroPublic</code> son los mismos que en <code>HeroBase</code>, con <code>id</code> declarado como <code>int</code> (no <code>None</code>):</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#herocreate-el-modelo-de-datos-para-crear-un-heroe","title":"<code>HeroCreate</code> - el modelo de datos para crear un h\u00e9roe","text":"<p>Ahora creamos un modelo <code>HeroCreate</code>, este es el que validar\u00e1 los datos de los clientes.</p> <p>Tiene los mismos campos que <code>HeroBase</code>, y tambi\u00e9n tiene <code>secret_name</code>.</p> <p>Ahora, cuando los clientes crean un nuevo h\u00e9roe, enviar\u00e1n el <code>secret_name</code>, se almacenar\u00e1 en la base de datos, pero esos nombres secretos no se devolver\u00e1n en la API a los clientes.</p> <p>Consejo</p> <p>Esta es la forma en la que manejar\u00edas contrase\u00f1as. Rec\u00edbelas, pero no las devuelvas en la API.</p> <p>Tambi\u00e9n hashea los valores de las contrase\u00f1as antes de almacenarlos, nunca los almacenes en texto plano.</p> <p>Los campos de <code>HeroCreate</code> son:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heroupdate-el-modelo-de-datos-para-actualizar-un-heroe","title":"<code>HeroUpdate</code> - el modelo de datos para actualizar un h\u00e9roe","text":"<p>No ten\u00edamos una forma de actualizar un h\u00e9roe en la versi\u00f3n anterior de la aplicaci\u00f3n, pero ahora con m\u00faltiples modelos, podemos hacerlo. \ud83c\udf89</p> <p>El modelo de datos <code>HeroUpdate</code> es algo especial, tiene todos los mismos campos que ser\u00edan necesarios para crear un nuevo h\u00e9roe, pero todos los campos son opcionales (todos tienen un valor por defecto). De esta forma, cuando actualices un h\u00e9roe, puedes enviar solo los campos que deseas actualizar.</p> <p>Debido a que todos los campos realmente cambian (el tipo ahora incluye <code>None</code> y ahora tienen un valor por defecto de <code>None</code>), necesitamos volver a declararlos.</p> <p>Realmente no necesitamos heredar de <code>HeroBase</code> porque estamos volviendo a declarar todos los campos. Lo dejar\u00e9 heredando solo por consistencia, pero esto no es necesario. Es m\u00e1s una cuesti\u00f3n de gusto personal. \ud83e\udd37</p> <p>Los campos de <code>HeroUpdate</code> son:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#crear-con-herocreate-y-devolver-un-heropublic","title":"Crear con <code>HeroCreate</code> y devolver un <code>HeroPublic</code>","text":"<p>Ahora que tenemos m\u00faltiples modelos, podemos actualizar las partes de la aplicaci\u00f3n que los usan.</p> <p>Recibimos en la request un modelo de datos <code>HeroCreate</code>, y a partir de \u00e9l, creamos un modelo de tabla <code>Hero</code>.</p> <p>Este nuevo modelo de tabla <code>Hero</code> tendr\u00e1 los campos enviados por el cliente, y tambi\u00e9n tendr\u00e1 un <code>id</code> generado por la base de datos.</p> <p>Luego devolvemos el mismo modelo de tabla <code>Hero</code> tal cual desde la funci\u00f3n. Pero como declaramos el <code>response_model</code> con el modelo de datos <code>HeroPublic</code>, ReadyAPI usar\u00e1 <code>HeroPublic</code> para validar y serializar los datos.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Consejo</p> <p>Ahora usamos <code>response_model=HeroPublic</code> en lugar de la anotaci\u00f3n de tipo de retorno <code>-&gt; HeroPublic</code> porque el valor que estamos devolviendo en realidad no es un <code>HeroPublic</code>.</p> <p>Si hubi\u00e9ramos declarado <code>-&gt; HeroPublic</code>, tu editor y linter se quejar\u00edan (con raz\u00f3n) de que est\u00e1s devolviendo un <code>Hero</code> en lugar de un <code>HeroPublic</code>.</p> <p>Al declararlo en <code>response_model</code> le estamos diciendo a ReadyAPI que haga lo suyo, sin interferir con las anotaciones de tipo y la ayuda de tu editor y otras herramientas.</p>"},{"location":"tutorial/sql-databases/#leer-heroes-con-heropublic","title":"Leer Heroes con <code>HeroPublic</code>","text":"<p>Podemos hacer lo mismo que antes para leer <code>Hero</code>s, nuevamente, usamos <code>response_model=list[HeroPublic]</code> para asegurar que los datos se validen y serialicen correctamente.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#leer-un-hero-con-heropublic","title":"Leer Un Hero con <code>HeroPublic</code>","text":"<p>Podemos leer un \u00fanico h\u00e9roe:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#actualizar-un-hero-con-heroupdate","title":"Actualizar un Hero con <code>HeroUpdate</code>","text":"<p>Podemos actualizar un h\u00e9roe. Para esto usamos una operaci\u00f3n HTTP <code>PATCH</code>.</p> <p>Y en el c\u00f3digo, obtenemos un <code>dict</code> con todos los datos enviados por el cliente, solo los datos enviados por el cliente, excluyendo cualquier valor que estar\u00eda all\u00ed solo por ser valores por defecto. Para hacerlo usamos <code>exclude_unset=True</code>. Este es el truco principal. \ud83e\ude84</p> <p>Luego usamos <code>hero_db.sqldev_update(hero_data)</code> para actualizar el <code>hero_db</code> con los datos de <code>hero_data</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#eliminar-un-hero-de-nuevo","title":"Eliminar un Hero de Nuevo","text":"<p>Eliminar un h\u00e9roe se mantiene pr\u00e1cticamente igual.</p> <p>No satisfaremos el deseo de refactorizar todo en este punto. \ud83d\ude05</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#ejecutar-la-app-de-nuevo","title":"Ejecutar la App de Nuevo","text":"<p>Puedes ejecutar la aplicaci\u00f3n de nuevo:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Si vas a la interfaz de <code>/docs</code> de la API, ver\u00e1s que ahora est\u00e1 actualizada, y no esperar\u00e1 recibir el <code>id</code> del cliente al crear un h\u00e9roe, etc.</p>"},{"location":"tutorial/sql-databases/#resumen","title":"Resumen","text":"<p>Puedes usar SQLDev para interactuar con una base de datos SQL y simplificar el c\u00f3digo con modelos de datos y modelos de tablas.</p> <p>Puedes aprender mucho m\u00e1s en la documentaci\u00f3n de SQLDev, hay un mini tutorial sobre el uso de SQLDev con ReadyAPI. \ud83d\ude80</p>"},{"location":"tutorial/static-files/","title":"Archivos Est\u00e1ticos","text":"<p>Puedes servir archivos est\u00e1ticos autom\u00e1ticamente desde un directorio utilizando <code>StaticFiles</code>.</p>"},{"location":"tutorial/static-files/#usa-staticfiles","title":"Usa <code>StaticFiles</code>","text":"<ul> <li>Importa <code>StaticFiles</code>.</li> <li>\"Monta\" una instance de <code>StaticFiles()</code> en un path espec\u00edfico.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre> <p>Detalles T\u00e9cnicos</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.staticfiles import StaticFiles</code>.</p> <p>ReadyAPI proporciona el mismo <code>starlette.staticfiles</code> como <code>readyapi.staticfiles</code> solo como una conveniencia para ti, el desarrollador. Pero en realidad viene directamente de Starlette.</p>"},{"location":"tutorial/static-files/#que-es-montar","title":"Qu\u00e9 es \"Montar\"","text":"<p>\"Montar\" significa agregar una aplicaci\u00f3n completa \"independiente\" en un path espec\u00edfico, que luego se encargar\u00e1 de manejar todos los sub-paths.</p> <p>Esto es diferente a usar un <code>APIRouter</code>, ya que una aplicaci\u00f3n montada es completamente independiente. El OpenAPI y la documentaci\u00f3n de tu aplicaci\u00f3n principal no incluir\u00e1n nada de la aplicaci\u00f3n montada, etc.</p> <p>Puedes leer m\u00e1s sobre esto en la Gu\u00eda de Usuario Avanzada.</p>"},{"location":"tutorial/static-files/#detalles","title":"Detalles","text":"<p>El primer <code>\"/static\"</code> se refiere al sub-path en el que esta \"sub-aplicaci\u00f3n\" ser\u00e1 \"montada\". Por lo tanto, cualquier path que comience con <code>\"/static\"</code> ser\u00e1 manejado por ella.</p> <p>El <code>directory=\"static\"</code> se refiere al nombre del directorio que contiene tus archivos est\u00e1ticos.</p> <p>El <code>name=\"static\"</code> le da un nombre que puede ser utilizado internamente por ReadyAPI.</p> <p>Todos estos par\u00e1metros pueden ser diferentes a \"<code>static</code>\", aj\u00fastalos seg\u00fan las necesidades y detalles espec\u00edficos de tu propia aplicaci\u00f3n.</p>"},{"location":"tutorial/static-files/#mas-info","title":"M\u00e1s info","text":"<p>Para m\u00e1s detalles y opciones revisa la documentaci\u00f3n de Starlette sobre Archivos Est\u00e1ticos.</p>"},{"location":"tutorial/testing/","title":"Testing","text":"<p>Gracias a Starlette, escribir pruebas para aplicaciones de ReadyAPI es f\u00e1cil y agradable.</p> <p>Est\u00e1 basado en HTTPX, que a su vez est\u00e1 dise\u00f1ado basado en Requests, por lo que es muy familiar e intuitivo.</p> <p>Con \u00e9l, puedes usar pytest directamente con ReadyAPI.</p>"},{"location":"tutorial/testing/#usando-testclient","title":"Usando <code>TestClient</code>","text":"<p>Informaci\u00f3n</p> <p>Para usar <code>TestClient</code>, primero instala <code>httpx</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install httpx\n</code></pre> <p>Importa <code>TestClient</code>.</p> <p>Crea un <code>TestClient</code> pas\u00e1ndole tu aplicaci\u00f3n de ReadyAPI.</p> <p>Crea funciones con un nombre que comience con <code>test_</code> (esta es la convenci\u00f3n est\u00e1ndar de <code>pytest</code>).</p> <p>Usa el objeto <code>TestClient</code> de la misma manera que con <code>httpx</code>.</p> <p>Escribe declaraciones <code>assert</code> simples con las expresiones est\u00e1ndar de Python que necesites revisar (otra vez, est\u00e1ndar de <code>pytest</code>).</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>Consejo</p> <p>Nota que las funciones de prueba son <code>def</code> normales, no <code>async def</code>.</p> <p>Y las llamadas al cliente tambi\u00e9n son llamadas normales, sin usar <code>await</code>.</p> <p>Esto te permite usar <code>pytest</code> directamente sin complicaciones.</p> <p>Nota T\u00e9cnica</p> <p>Tambi\u00e9n podr\u00edas usar <code>from starlette.testclient import TestClient</code>.</p> <p>ReadyAPI proporciona el mismo <code>starlette.testclient</code> como <code>readyapi.testclient</code> solo por conveniencia para ti, el desarrollador. Pero proviene directamente de Starlette.</p> <p>Consejo</p> <p>Si quieres llamar a funciones <code>async</code> en tus pruebas adem\u00e1s de enviar solicitudes a tu aplicaci\u00f3n ReadyAPI (por ejemplo, funciones asincr\u00f3nicas de bases de datos), echa un vistazo a las Pruebas Asincr\u00f3nicas en el tutorial avanzado.</p>"},{"location":"tutorial/testing/#separando-pruebas","title":"Separando pruebas","text":"<p>En una aplicaci\u00f3n real, probablemente tendr\u00edas tus pruebas en un archivo diferente.</p> <p>Y tu aplicaci\u00f3n de ReadyAPI tambi\u00e9n podr\u00eda estar compuesta de varios archivos/m\u00f3dulos, etc.</p>"},{"location":"tutorial/testing/#archivo-de-aplicacion-readyapi","title":"Archivo de aplicaci\u00f3n ReadyAPI","text":"<p>Digamos que tienes una estructura de archivos como se describe en Aplicaciones M\u00e1s Grandes:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n</code></pre> <p>En el archivo <code>main.py</code> tienes tu aplicaci\u00f3n de ReadyAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/testing/#archivo-de-prueba","title":"Archivo de prueba","text":"<p>Entonces podr\u00edas tener un archivo <code>test_main.py</code> con tus pruebas. Podr\u00eda estar en el mismo paquete de Python (el mismo directorio con un archivo <code>__init__.py</code>):</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Debido a que este archivo est\u00e1 en el mismo paquete, puedes usar importaciones relativas para importar el objeto <code>app</code> desde el m\u00f3dulo <code>main</code> (<code>main.py</code>):</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>...y tener el c\u00f3digo para las pruebas tal como antes.</p>"},{"location":"tutorial/testing/#pruebas-ejemplo-extendido","title":"Pruebas: ejemplo extendido","text":"<p>Ahora extiende este ejemplo y a\u00f1ade m\u00e1s detalles para ver c\u00f3mo escribir pruebas para diferentes partes.</p>"},{"location":"tutorial/testing/#archivo-de-aplicacion-readyapi-extendido","title":"Archivo de aplicaci\u00f3n ReadyAPI extendido","text":"<p>Continuemos con la misma estructura de archivos que antes:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Digamos que ahora el archivo <code>main.py</code> con tu aplicaci\u00f3n de ReadyAPI tiene algunas otras path operations.</p> <p>Tiene una operaci\u00f3n <code>GET</code> que podr\u00eda devolver un error.</p> <p>Tiene una operaci\u00f3n <code>POST</code> que podr\u00eda devolver varios errores.</p> <p>Ambas path operations requieren un <code>X-Token</code> header.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ sin AnotarPython 3.8+ sin Anotar <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre>"},{"location":"tutorial/testing/#archivo-de-prueba-extendido","title":"Archivo de prueba extendido","text":"<p>Podr\u00edas entonces actualizar <code>test_main.py</code> con las pruebas extendidas:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n</code></pre> <p>Cada vez que necesites que el cliente pase informaci\u00f3n en el request y no sepas c\u00f3mo, puedes buscar (Googlear) c\u00f3mo hacerlo en <code>httpx</code>, o incluso c\u00f3mo hacerlo con <code>requests</code>, dado que el dise\u00f1o de HTTPX est\u00e1 basado en el dise\u00f1o de Requests.</p> <p>Luego simplemente haces lo mismo en tus pruebas.</p> <p>Por ejemplo:</p> <ul> <li>Para pasar un par\u00e1metro de path o query, a\u00f1\u00e1delo a la URL misma.</li> <li>Para pasar un cuerpo JSON, pasa un objeto de Python (por ejemplo, un <code>dict</code>) al par\u00e1metro <code>json</code>.</li> <li>Si necesitas enviar Form Data en lugar de JSON, usa el par\u00e1metro <code>data</code> en su lugar.</li> <li>Para pasar headers, usa un <code>dict</code> en el par\u00e1metro <code>headers</code>.</li> <li>Para cookies, un <code>dict</code> en el par\u00e1metro <code>cookies</code>.</li> </ul> <p>Para m\u00e1s informaci\u00f3n sobre c\u00f3mo pasar datos al backend (usando <code>httpx</code> o el <code>TestClient</code>) revisa la documentaci\u00f3n de HTTPX.</p> <p>Informaci\u00f3n</p> <p>Ten en cuenta que el <code>TestClient</code> recibe datos que pueden ser convertidos a JSON, no modelos de Pydantic.</p> <p>Si tienes un modelo de Pydantic en tu prueba y quieres enviar sus datos a la aplicaci\u00f3n durante las pruebas, puedes usar el <code>jsonable_encoder</code> descrito en Codificador Compatible con JSON.</p>"},{"location":"tutorial/testing/#ejecutalo","title":"Ejec\u00fatalo","text":"<p>Despu\u00e9s de eso, solo necesitas instalar <code>pytest</code>.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo y luego instalarlo, por ejemplo:</p> <pre><code>$ pip install pytest\n\n---&gt; 100%\n</code></pre> <p>Detectar\u00e1 los archivos y pruebas autom\u00e1ticamente, ejecutar\u00e1 las mismas y te reportar\u00e1 los resultados.</p> <p>Ejecuta las pruebas con:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 6 items\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;......                            [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/dependencies/","title":"Dependencias","text":"<p>ReadyAPI tiene un sistema de Inyecci\u00f3n de Dependencias muy poderoso pero intuitivo.</p> <p>Est\u00e1 dise\u00f1ado para ser muy simple de usar, y para hacer que cualquier desarrollador integre otros componentes con ReadyAPI de forma muy sencilla.</p>"},{"location":"tutorial/dependencies/#que-es-la-inyeccion-de-dependencias","title":"Qu\u00e9 es la \"Inyecci\u00f3n de Dependencias\"","text":"<p>\"Inyecci\u00f3n de Dependencias\" significa, en programaci\u00f3n, que hay una manera para que tu c\u00f3digo (en este caso, tus path operation functions) declare las cosas que necesita para funcionar y utilizar: \"dependencias\".</p> <p>Y luego, ese sistema (en este caso ReadyAPI) se encargar\u00e1 de hacer lo que sea necesario para proporcionar a tu c\u00f3digo esas dependencias necesarias (\"inyectar\" las dependencias).</p> <p>Esto es muy \u00fatil cuando necesitas:</p> <ul> <li>Tener l\u00f3gica compartida (la misma l\u00f3gica de c\u00f3digo una y otra vez).</li> <li>Compartir conexiones a bases de datos.</li> <li>Imponer seguridad, autenticaci\u00f3n, requisitos de roles, etc.</li> <li>Y muchas otras cosas...</li> </ul> <p>Todo esto, mientras minimizas la repetici\u00f3n de c\u00f3digo.</p>"},{"location":"tutorial/dependencies/#primeros-pasos","title":"Primeros Pasos","text":"<p>Veamos un ejemplo muy simple. Ser\u00e1 tan simple que no es muy \u00fatil, por ahora.</p> <p>Pero de esta manera podemos enfocarnos en c\u00f3mo funciona el sistema de Inyecci\u00f3n de Dependencias.</p>"},{"location":"tutorial/dependencies/#crear-una-dependencia-o-dependable","title":"Crear una dependencia, o \"dependable\"","text":"<p>Primero enfoqu\u00e9monos en la dependencia.</p> <p>Es solo una funci\u00f3n que puede tomar todos los mismos par\u00e1metros que una path operation function puede tomar:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Eso es todo.</p> <p>2 l\u00edneas.</p> <p>Y tiene la misma forma y estructura que todas tus path operation functions.</p> <p>Puedes pensar en ella como una path operation function sin el \"decorador\" (sin el <code>@app.get(\"/some-path\")</code>).</p> <p>Y puede devolver lo que quieras.</p> <p>En este caso, esta dependencia espera:</p> <ul> <li>Un par\u00e1metro de query opcional <code>q</code> que es un <code>str</code>.</li> <li>Un par\u00e1metro de query opcional <code>skip</code> que es un <code>int</code>, y por defecto es <code>0</code>.</li> <li>Un par\u00e1metro de query opcional <code>limit</code> que es un <code>int</code>, y por defecto es <code>100</code>.</li> </ul> <p>Y luego solo devuelve un <code>dict</code> que contiene esos valores.</p> <p>Informaci\u00f3n</p> <p>ReadyAPI agreg\u00f3 soporte para <code>Annotated</code> (y comenz\u00f3 a recomendarlo) en la versi\u00f3n 0.95.0.</p> <p>Si tienes una versi\u00f3n anterior, obtendr\u00e1s errores al intentar usar <code>Annotated</code>.</p> <p>Aseg\u00farate de Actualizar la versi\u00f3n de ReadyAPI al menos a la 0.95.1 antes de usar <code>Annotated</code>.</p>"},{"location":"tutorial/dependencies/#importar-depends","title":"Importar <code>Depends</code>","text":"Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre>"},{"location":"tutorial/dependencies/#declarar-la-dependencia-en-el-dependant","title":"Declarar la dependencia, en el \"dependant\"","text":"<p>De la misma forma en que usas <code>Body</code>, <code>Query</code>, etc. con los par\u00e1metros de tu path operation function, usa <code>Depends</code> con un nuevo par\u00e1metro:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Aunque usas <code>Depends</code> en los par\u00e1metros de tu funci\u00f3n de la misma manera que usas <code>Body</code>, <code>Query</code>, etc., <code>Depends</code> funciona un poco diferente.</p> <p>Le das a <code>Depends</code> un solo par\u00e1metro.</p> <p>Este par\u00e1metro debe ser algo como una funci\u00f3n.</p> <p>No la llames directamente (no agregues los par\u00e9ntesis al final), solo p\u00e1sala como un par\u00e1metro a <code>Depends()</code>.</p> <p>Y esa funci\u00f3n toma par\u00e1metros de la misma manera que las path operation functions.</p> <p>Consejo</p> <p>Ver\u00e1s qu\u00e9 otras \"cosas\", adem\u00e1s de funciones, pueden usarse como dependencias en el pr\u00f3ximo cap\u00edtulo.</p> <p>Cada vez que llega un nuevo request, ReadyAPI se encargar\u00e1 de:</p> <ul> <li>Llamar a tu funci\u00f3n de dependencia (\"dependable\") con los par\u00e1metros correctos.</li> <li>Obtener el resultado de tu funci\u00f3n.</li> <li>Asignar ese resultado al par\u00e1metro en tu path operation function.</li> </ul> <pre><code>graph TB\n\ncommon_parameters([\"common_parameters\"])\nread_items[\"/items/\"]\nread_users[\"/users/\"]\n\ncommon_parameters --&gt; read_items\ncommon_parameters --&gt; read_users</code></pre> <p>De esta manera escribes c\u00f3digo compartido una vez y ReadyAPI se encarga de llamarlo para tus path operations.</p> <p>Revisa</p> <p>Nota que no tienes que crear una clase especial y pasarla en alg\u00fan lugar a ReadyAPI para \"registrarla\" o algo similar.</p> <p>Solo la pasas a <code>Depends</code> y ReadyAPI sabe c\u00f3mo hacer el resto.</p>"},{"location":"tutorial/dependencies/#compartir-dependencias-annotated","title":"Compartir dependencias <code>Annotated</code>","text":"<p>En los ejemplos anteriores, ves que hay un poquito de duplicaci\u00f3n de c\u00f3digo.</p> <p>Cuando necesitas usar la dependencia <code>common_parameters()</code>, tienes que escribir todo el par\u00e1metro con la anotaci\u00f3n de tipo y <code>Depends()</code>:</p> <pre><code>commons: Annotated[dict, Depends(common_parameters)]\n</code></pre> <p>Pero como estamos usando <code>Annotated</code>, podemos almacenar ese valor <code>Annotated</code> en una variable y usarlo en m\u00faltiples lugares:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <p>Consejo</p> <p>Esto es solo Python est\u00e1ndar, se llama un \"alias de tipo\", en realidad no es espec\u00edfico de ReadyAPI.</p> <p>Pero porque ReadyAPI est\u00e1 basado en los est\u00e1ndares de Python, incluido <code>Annotated</code>, puedes usar este truco en tu c\u00f3digo. \ud83d\ude0e</p> <p>Las dependencias seguir\u00e1n funcionando como se esperaba, y la mejor parte es que la informaci\u00f3n de tipo se preservar\u00e1, lo que significa que tu editor podr\u00e1 seguir proporcion\u00e1ndote autocompletado, errores en l\u00ednea, etc. Lo mismo para otras herramientas como <code>mypy</code>.</p> <p>Esto ser\u00e1 especialmente \u00fatil cuando lo uses en una gran base de c\u00f3digo donde uses las mismas dependencias una y otra vez en muchas path operations.</p>"},{"location":"tutorial/dependencies/#usar-async-o-no-usar-async","title":"Usar <code>async</code> o no usar <code>async</code>","text":"<p>Como las dependencias tambi\u00e9n ser\u00e1n llamadas por ReadyAPI (lo mismo que tus path operation functions), las mismas reglas aplican al definir tus funciones.</p> <p>Puedes usar <code>async def</code> o <code>def</code> normal.</p> <p>Y puedes declarar dependencias con <code>async def</code> dentro de path operation functions normales <code>def</code>, o dependencias <code>def</code> dentro de path operation functions <code>async def</code>, etc.</p> <p>No importa. ReadyAPI sabr\u00e1 qu\u00e9 hacer.</p> <p>Nota</p> <p>Si no lo sabes, revisa la secci\u00f3n Async: \"\u00bfCon prisa?\" sobre <code>async</code> y <code>await</code> en la documentaci\u00f3n.</p>"},{"location":"tutorial/dependencies/#integracion-con-openapi","title":"Integraci\u00f3n con OpenAPI","text":"<p>Todas las declaraciones de request, validaciones y requisitos de tus dependencias (y sub-dependencias) se integrar\u00e1n en el mismo esquema de OpenAPI.</p> <p>As\u00ed, la documentaci\u00f3n interactiva tendr\u00e1 toda la informaci\u00f3n de estas dependencias tambi\u00e9n:</p> <p></p>"},{"location":"tutorial/dependencies/#uso-simple","title":"Uso simple","text":"<p>Si lo ves, las path operation functions se declaran para ser usadas siempre que un path y una operaci\u00f3n coincidan, y luego ReadyAPI se encarga de llamar la funci\u00f3n con los par\u00e1metros correctos, extrayendo los datos del request.</p> <p>En realidad, todos (o la mayor\u00eda) de los frameworks web funcionan de esta misma manera.</p> <p>Nunca llamas directamente a esas funciones. Son llamadas por tu framework (en este caso, ReadyAPI).</p> <p>Con el sistema de Inyecci\u00f3n de Dependencias, tambi\u00e9n puedes decirle a ReadyAPI que tu path operation function tambi\u00e9n \"depende\" de algo m\u00e1s que debe ejecutarse antes que tu path operation function, y ReadyAPI se encargar\u00e1 de ejecutarlo e \"inyectar\" los resultados.</p> <p>Otros t\u00e9rminos comunes para esta misma idea de \"inyecci\u00f3n de dependencias\" son:</p> <ul> <li>recursos</li> <li>proveedores</li> <li>servicios</li> <li>inyectables</li> <li>componentes</li> </ul>"},{"location":"tutorial/dependencies/#plug-ins-de-readyapi","title":"Plug-ins de ReadyAPI","text":"<p>Las integraciones y \"plug-ins\" pueden construirse usando el sistema de Inyecci\u00f3n de Dependencias. Pero, de hecho, en realidad no hay necesidad de crear \"plug-ins\", ya que al usar dependencias es posible declarar una cantidad infinita de integraciones e interacciones que se vuelven disponibles para tus path operation functions.</p> <p>Y las dependencias se pueden crear de una manera muy simple e intuitiva que te permite simplemente importar los paquetes de Python que necesitas, e integrarlos con tus funciones de API en un par de l\u00edneas de c\u00f3digo, literalmente.</p> <p>Ver\u00e1s ejemplos de esto en los pr\u00f3ximos cap\u00edtulos, sobre bases de datos relacionales y NoSQL, seguridad, etc.</p>"},{"location":"tutorial/dependencies/#compatibilidad-de-readyapi","title":"Compatibilidad de ReadyAPI","text":"<p>La simplicidad del sistema de inyecci\u00f3n de dependencias hace que ReadyAPI sea compatible con:</p> <ul> <li>todas las bases de datos relacionales</li> <li>bases de datos NoSQL</li> <li>paquetes externos</li> <li>APIs externas</li> <li>sistemas de autenticaci\u00f3n y autorizaci\u00f3n</li> <li>sistemas de monitoreo de uso de la API</li> <li>sistemas de inyecci\u00f3n de datos de response</li> <li>etc.</li> </ul>"},{"location":"tutorial/dependencies/#simple-y-poderoso","title":"Simple y Poderoso","text":"<p>Aunque el sistema de inyecci\u00f3n de dependencias jer\u00e1rquico es muy simple de definir y usar, sigue siendo muy poderoso.</p> <p>Puedes definir dependencias que a su vez pueden definir dependencias ellas mismas.</p> <p>Al final, se construye un \u00e1rbol jer\u00e1rquico de dependencias, y el sistema de Inyecci\u00f3n de Dependencias se encarga de resolver todas estas dependencias por ti (y sus sub-dependencias) y proporcionar (inyectar) los resultados en cada paso.</p> <p>Por ejemplo, digamos que tienes 4 endpoints de API (path operations):</p> <ul> <li><code>/items/public/</code></li> <li><code>/items/private/</code></li> <li><code>/users/{user_id}/activate</code></li> <li><code>/items/pro/</code></li> </ul> <p>entonces podr\u00edas agregar diferentes requisitos de permiso para cada uno de ellos solo con dependencias y sub-dependencias:</p> <pre><code>graph TB\n\ncurrent_user([\"current_user\"])\nactive_user([\"active_user\"])\nadmin_user([\"admin_user\"])\npaying_user([\"paying_user\"])\n\npublic[\"/items/public/\"]\nprivate[\"/items/private/\"]\nactivate_user[\"/users/{user_id}/activate\"]\npro_items[\"/items/pro/\"]\n\ncurrent_user --&gt; active_user\nactive_user --&gt; admin_user\nactive_user --&gt; paying_user\n\ncurrent_user --&gt; public\nactive_user --&gt; private\nadmin_user --&gt; activate_user\npaying_user --&gt; pro_items</code></pre>"},{"location":"tutorial/dependencies/#integrado-con-openapi","title":"Integrado con OpenAPI","text":"<p>Todas estas dependencias, al declarar sus requisitos, tambi\u00e9n a\u00f1aden par\u00e1metros, validaciones, etc. a tus path operations.</p> <p>ReadyAPI se encargar\u00e1 de agregar todo al esquema de OpenAPI, para que se muestre en los sistemas de documentaci\u00f3n interactiva.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/","title":"Clases como dependencias","text":"<p>Antes de profundizar en el sistema de Inyecci\u00f3n de Dependencias, vamos a mejorar el ejemplo anterior.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#un-dict-del-ejemplo-anterior","title":"Un <code>dict</code> del ejemplo anterior","text":"<p>En el ejemplo anterior, est\u00e1bamos devolviendo un <code>dict</code> de nuestra dependencia (\"dependable\"):</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Pero luego obtenemos un <code>dict</code> en el par\u00e1metro <code>commons</code> de la path operation function.</p> <p>Y sabemos que los editores no pueden proporcionar mucho soporte (como autocompletado) para <code>dict</code>s, porque no pueden conocer sus claves y tipos de valor.</p> <p>Podemos hacerlo mejor...</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#que-hace-a-una-dependencia","title":"Qu\u00e9 hace a una dependencia","text":"<p>Hasta ahora has visto dependencias declaradas como funciones.</p> <p>Pero esa no es la \u00fanica forma de declarar dependencias (aunque probablemente sea la m\u00e1s com\u00fan).</p> <p>El factor clave es que una dependencia debe ser un \"callable\".</p> <p>Un \"callable\" en Python es cualquier cosa que Python pueda \"llamar\" como una funci\u00f3n.</p> <p>Entonces, si tienes un objeto <code>something</code> (que podr\u00eda no ser una funci\u00f3n) y puedes \"llamarlo\" (ejecutarlo) como:</p> <pre><code>something()\n</code></pre> <p>o</p> <pre><code>something(some_argument, some_keyword_argument=\"foo\")\n</code></pre> <p>entonces es un \"callable\".</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#clases-como-dependencias_1","title":"Clases como dependencias","text":"<p>Puedes notar que para crear una instance de una clase en Python, utilizas esa misma sintaxis.</p> <p>Por ejemplo:</p> <pre><code>class Cat:\n    def __init__(self, name: str):\n        self.name = name\n\n\nfluffy = Cat(name=\"Mr Fluffy\")\n</code></pre> <p>En este caso, <code>fluffy</code> es una instance de la clase <code>Cat</code>.</p> <p>Y para crear <code>fluffy</code>, est\u00e1s \"llamando\" a <code>Cat</code>.</p> <p>Entonces, una clase en Python tambi\u00e9n es un callable.</p> <p>Entonces, en ReadyAPI, podr\u00edas usar una clase de Python como una dependencia.</p> <p>Lo que ReadyAPI realmente comprueba es que sea un \"callable\" (funci\u00f3n, clase o cualquier otra cosa) y los par\u00e1metros definidos.</p> <p>Si pasas un \"callable\" como dependencia en ReadyAPI, analizar\u00e1 los par\u00e1metros de ese \"callable\", y los procesar\u00e1 de la misma manera que los par\u00e1metros de una path operation function. Incluyendo sub-dependencias.</p> <p>Eso tambi\u00e9n se aplica a los callables sin par\u00e1metros. Igual que ser\u00eda para path operation functions sin par\u00e1metros.</p> <p>Entonces, podemos cambiar la dependencia \"dependable\" <code>common_parameters</code> de arriba a la clase <code>CommonQueryParams</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Presta atenci\u00f3n al m\u00e9todo <code>__init__</code> usado para crear la instance de la clase:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...tiene los mismos par\u00e1metros que nuestros <code>common_parameters</code> anteriores:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Esos par\u00e1metros son los que ReadyAPI usar\u00e1 para \"resolver\" la dependencia.</p> <p>En ambos casos, tendr\u00e1:</p> <ul> <li>Un par\u00e1metro de query <code>q</code> opcional que es un <code>str</code>.</li> <li>Un par\u00e1metro de query <code>skip</code> que es un <code>int</code>, con un valor por defecto de <code>0</code>.</li> <li>Un par\u00e1metro de query <code>limit</code> que es un <code>int</code>, con un valor por defecto de <code>100</code>.</li> </ul> <p>En ambos casos, los datos ser\u00e1n convertidos, validados, documentados en el esquema de OpenAPI, etc.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#usalo","title":"\u00dasalo","text":"<p>Ahora puedes declarar tu dependencia usando esta clase.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>ReadyAPI llama a la clase <code>CommonQueryParams</code>. Esto crea una \"instance\" de esa clase y la instance ser\u00e1 pasada como el par\u00e1metro <code>commons</code> a tu funci\u00f3n.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#anotacion-de-tipos-vs-depends","title":"Anotaci\u00f3n de tipos vs <code>Depends</code>","text":"<p>Nota c\u00f3mo escribimos <code>CommonQueryParams</code> dos veces en el c\u00f3digo anterior:</p> Python 3.8+Python 3.8+ sin <code>Annotated</code> <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>El \u00faltimo <code>CommonQueryParams</code>, en:</p> <pre><code>... Depends(CommonQueryParams)\n</code></pre> <p>...es lo que ReadyAPI utilizar\u00e1 realmente para saber cu\u00e1l es la dependencia.</p> <p>Es a partir de este que ReadyAPI extraer\u00e1 los par\u00e1metros declarados y es lo que ReadyAPI realmente llamar\u00e1.</p> <p>En este caso, el primer <code>CommonQueryParams</code>, en:</p> Python 3.8+Python 3.8+ sin <code>Annotated</code> <pre><code>commons: Annotated[CommonQueryParams, ...\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons: CommonQueryParams ...\n</code></pre> <p>...no tiene ning\u00fan significado especial para ReadyAPI. ReadyAPI no lo usar\u00e1 para la conversi\u00f3n de datos, validaci\u00f3n, etc. (ya que est\u00e1 usando <code>Depends(CommonQueryParams)</code> para eso).</p> <p>De hecho, podr\u00edas escribir simplemente:</p> Python 3.8+Python 3.8+ sin <code>Annotated</code> <pre><code>commons: Annotated[Any, Depends(CommonQueryParams)]\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons = Depends(CommonQueryParams)\n</code></pre> <p>...como en:</p> Python 3.10+ <pre><code>from typing import Annotated, Any\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Any, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Pero declarar el tipo es recomendable, ya que de esa manera tu editor sabr\u00e1 lo que se pasar\u00e1 como el par\u00e1metro <code>commons</code>, y entonces podr\u00e1 ayudarte con el autocompletado, chequeo de tipos, etc:</p> <p></p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#atajo","title":"Atajo","text":"<p>Pero ves que estamos teniendo algo de repetici\u00f3n de c\u00f3digo aqu\u00ed, escribiendo <code>CommonQueryParams</code> dos veces:</p> Python 3.8+Python 3.8+ sin <code>Annotated</code> <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>ReadyAPI proporciona un atajo para estos casos, en donde la dependencia es espec\u00edficamente una clase que ReadyAPI \"llamar\u00e1\" para crear una instance de la clase misma.</p> <p>Para esos casos espec\u00edficos, puedes hacer lo siguiente:</p> <p>En lugar de escribir:</p> Python 3.8+Python 3.8+ sin <code>Annotated</code> <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>...escribes:</p> Python 3.8+Python 3.8 sin <code>Annotated</code> <pre><code>commons: Annotated[CommonQueryParams, Depends()]\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>commons: CommonQueryParams = Depends()\n</code></pre> <p>Declaras la dependencia como el tipo del par\u00e1metro, y usas <code>Depends()</code> sin ning\u00fan par\u00e1metro, en lugar de tener que escribir la clase completa otra vez dentro de <code>Depends(CommonQueryParams)</code>.</p> <p>El mismo ejemplo se ver\u00eda entonces as\u00ed:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...y ReadyAPI sabr\u00e1 qu\u00e9 hacer.</p> <p>Consejo</p> <p>Si eso parece m\u00e1s confuso que \u00fatil, ign\u00f3ralo, no lo necesitas.</p> <p>Es solo un atajo. Porque a ReadyAPI le importa ayudarte a minimizar la repetici\u00f3n de c\u00f3digo.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","title":"Dependencias en decoradores de path operation","text":"<p>En algunos casos realmente no necesitas el valor de retorno de una dependencia dentro de tu path operation function.</p> <p>O la dependencia no devuelve un valor.</p> <p>Pero a\u00fan necesitas que sea ejecutada/resuelta.</p> <p>Para esos casos, en lugar de declarar un par\u00e1metro de path operation function con <code>Depends</code>, puedes a\u00f1adir una <code>list</code> de <code>dependencies</code> al decorador de path operation.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#agregar-dependencies-al-decorador-de-path-operation","title":"Agregar <code>dependencies</code> al decorador de path operation","text":"<p>El decorador de path operation recibe un argumento opcional <code>dependencies</code>.</p> <p>Debe ser una <code>list</code> de <code>Depends()</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Estas dependencias ser\u00e1n ejecutadas/resueltas de la misma manera que las dependencias normales. Pero su valor (si devuelven alguno) no ser\u00e1 pasado a tu path operation function.</p> <p>Consejo</p> <p>Algunos editores revisan los par\u00e1metros de funci\u00f3n no usados y los muestran como errores.</p> <p>Usando estas <code>dependencies</code> en el decorador de path operation puedes asegurarte de que se ejecutan mientras evitas errores en editores/herramientas.</p> <p>Tambi\u00e9n puede ayudar a evitar confusiones para nuevos desarrolladores que vean un par\u00e1metro no usado en tu c\u00f3digo y puedan pensar que es innecesario.</p> <p>Informaci\u00f3n</p> <p>En este ejemplo usamos headers personalizados inventados <code>X-Key</code> y <code>X-Token</code>.</p> <p>Pero en casos reales, al implementar seguridad, obtendr\u00edas m\u00e1s beneficios usando las Utilidades de Seguridad integradas (el pr\u00f3ximo cap\u00edtulo).</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#errores-de-dependencias-y-valores-de-retorno","title":"Errores de dependencias y valores de retorno","text":"<p>Puedes usar las mismas funciones de dependencia que usas normalmente.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#requisitos-de-dependencia","title":"Requisitos de dependencia","text":"<p>Pueden declarar requisitos de request (como headers) u otras sub-dependencias:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#lanzar-excepciones","title":"Lanzar excepciones","text":"<p>Estas dependencias pueden <code>raise</code> excepciones, igual que las dependencias normales:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#valores-de-retorno","title":"Valores de retorno","text":"<p>Y pueden devolver valores o no, los valores no ser\u00e1n usados.</p> <p>As\u00ed que, puedes reutilizar una dependencia normal (que devuelve un valor) que ya uses en otro lugar, y aunque el valor no se use, la dependencia ser\u00e1 ejecutada:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencias-para-un-grupo-de-path-operations","title":"Dependencias para un grupo de path operations","text":"<p>M\u00e1s adelante, cuando leas sobre c\u00f3mo estructurar aplicaciones m\u00e1s grandes (Aplicaciones M\u00e1s Grandes - M\u00faltiples Archivos), posiblemente con m\u00faltiples archivos, aprender\u00e1s c\u00f3mo declarar un \u00fanico par\u00e1metro <code>dependencies</code> para un grupo de path operations.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencias-globales","title":"Dependencias Globales","text":"<p>A continuaci\u00f3n veremos c\u00f3mo a\u00f1adir dependencias a toda la aplicaci\u00f3n <code>ReadyAPI</code>, de modo que se apliquen a cada path operation.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/","title":"Dependencias con yield","text":"<p>ReadyAPI admite dependencias que realizan algunos pasos adicionales despu\u00e9s de finalizar.</p> <p>Para hacer esto, usa <code>yield</code> en lugar de <code>return</code> y escribe los pasos adicionales (c\u00f3digo) despu\u00e9s.</p> <p>Consejo</p> <p>Aseg\u00farate de usar <code>yield</code> una sola vez por dependencia.</p> <p>Nota t\u00e9cnica</p> <p>Cualquier funci\u00f3n que sea v\u00e1lida para usar con:</p> <ul> <li><code>@contextlib.contextmanager</code> o</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>ser\u00eda v\u00e1lida para usar como una dependencia en ReadyAPI.</p> <p>De hecho, ReadyAPI usa esos dos decoradores internamente.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#una-dependencia-de-base-de-datos-con-yield","title":"Una dependencia de base de datos con <code>yield</code>","text":"<p>Por ejemplo, podr\u00edas usar esto para crear una sesi\u00f3n de base de datos y cerrarla despu\u00e9s de finalizar.</p> <p>Solo el c\u00f3digo anterior e incluyendo la declaraci\u00f3n <code>yield</code> se ejecuta antes de crear un response:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>El valor generado es lo que se inyecta en path operations y otras dependencias:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>El c\u00f3digo posterior a la declaraci\u00f3n <code>yield</code> se ejecuta despu\u00e9s de crear el response pero antes de enviarla:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Consejo</p> <p>Puedes usar funciones <code>async</code> o regulares.</p> <p>ReadyAPI har\u00e1 lo correcto con cada una, igual que con dependencias normales.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#una-dependencia-con-yield-y-try","title":"Una dependencia con <code>yield</code> y <code>try</code>","text":"<p>Si usas un bloque <code>try</code> en una dependencia con <code>yield</code>, recibir\u00e1s cualquier excepci\u00f3n que se haya lanzado al usar la dependencia.</p> <p>Por ejemplo, si alg\u00fan c\u00f3digo en alg\u00fan punto intermedio, en otra dependencia o en una path operation, realiza un \"rollback\" en una transacci\u00f3n de base de datos o crea cualquier otro error, recibir\u00e1s la excepci\u00f3n en tu dependencia.</p> <p>Por lo tanto, puedes buscar esa excepci\u00f3n espec\u00edfica dentro de la dependencia con <code>except SomeException</code>.</p> <p>Del mismo modo, puedes usar <code>finally</code> para asegurarte de que los pasos de salida se ejecuten, sin importar si hubo una excepci\u00f3n o no.</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-with-yield/#sub-dependencias-con-yield","title":"Sub-dependencias con <code>yield</code>","text":"<p>Puedes tener sub-dependencias y \"\u00e1rboles\" de sub-dependencias de cualquier tama\u00f1o y forma, y cualquiera o todas ellas pueden usar <code>yield</code>.</p> <p>ReadyAPI se asegurar\u00e1 de que el \"c\u00f3digo de salida\" en cada dependencia con <code>yield</code> se ejecute en el orden correcto.</p> <p>Por ejemplo, <code>dependency_c</code> puede tener una dependencia de <code>dependency_b</code>, y <code>dependency_b</code> de <code>dependency_a</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Y todas ellas pueden usar <code>yield</code>.</p> <p>En este caso, <code>dependency_c</code>, para ejecutar su c\u00f3digo de salida, necesita que el valor de <code>dependency_b</code> (aqu\u00ed llamado <code>dep_b</code>) todav\u00eda est\u00e9 disponible.</p> <p>Y, a su vez, <code>dependency_b</code> necesita que el valor de <code>dependency_a</code> (aqu\u00ed llamado <code>dep_a</code>) est\u00e9 disponible para su c\u00f3digo de salida.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>De la misma manera, podr\u00edas tener algunas dependencias con <code>yield</code> y otras dependencias con <code>return</code>, y hacer que algunas de esas dependan de algunas de las otras.</p> <p>Y podr\u00edas tener una sola dependencia que requiera varias otras dependencias con <code>yield</code>, etc.</p> <p>Puedes tener cualquier combinaci\u00f3n de dependencias que quieras.</p> <p>ReadyAPI se asegurar\u00e1 de que todo se ejecute en el orden correcto.</p> <p>Nota t\u00e9cnica</p> <p>Esto funciona gracias a los Context Managers de Python.</p> <p>ReadyAPI los utiliza internamente para lograr esto.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-con-yield-y-httpexception","title":"Dependencias con <code>yield</code> y <code>HTTPException</code>","text":"<p>Viste que puedes usar dependencias con <code>yield</code> y tener bloques <code>try</code> que capturen excepciones.</p> <p>De la misma manera, podr\u00edas lanzar una <code>HTTPException</code> o similar en el c\u00f3digo de salida, despu\u00e9s del <code>yield</code>.</p> <p>Consejo</p> <p>Esta es una t\u00e9cnica algo avanzada, y en la mayor\u00eda de los casos realmente no lo necesitar\u00e1s, ya que puedes lanzar excepciones (incluyendo <code>HTTPException</code>) desde dentro del resto del c\u00f3digo de tu aplicaci\u00f3n, por ejemplo, en la path operation function.</p> <p>Pero est\u00e1 ah\u00ed para ti si la necesitas. \ud83e\udd13</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Una alternativa que podr\u00edas usar para capturar excepciones (y posiblemente tambi\u00e9n lanzar otra <code>HTTPException</code>) es crear un Manejador de Excepciones Personalizado.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-con-yield-y-except","title":"Dependencias con <code>yield</code> y <code>except</code>","text":"<p>Si capturas una excepci\u00f3n usando <code>except</code> en una dependencia con <code>yield</code> y no la lanzas nuevamente (o lanzas una nueva excepci\u00f3n), ReadyAPI no podr\u00e1 notar que hubo una excepci\u00f3n, al igual que suceder\u00eda con Python normal:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>En este caso, el cliente ver\u00e1 un response HTTP 500 Internal Server Error como deber\u00eda, dado que no estamos lanzando una <code>HTTPException</code> o similar, pero el servidor no tendr\u00e1 ning\u00fan registro ni ninguna otra indicaci\u00f3n de cu\u00e1l fue el error. \ud83d\ude31</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#siempre-raise-en-dependencias-con-yield-y-except","title":"Siempre <code>raise</code> en Dependencias con <code>yield</code> y <code>except</code>","text":"<p>Si capturas una excepci\u00f3n en una dependencia con <code>yield</code>, a menos que est\u00e9s lanzando otra <code>HTTPException</code> o similar, deber\u00edas volver a lanzar la excepci\u00f3n original.</p> <p>Puedes volver a lanzar la misma excepci\u00f3n usando <code>raise</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Ahora el cliente obtendr\u00e1 el mismo response HTTP 500 Internal Server Error, pero el servidor tendr\u00e1 nuestro <code>InternalError</code> personalizado en los registros. \ud83d\ude0e</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#ejecucion-de-dependencias-con-yield","title":"Ejecuci\u00f3n de dependencias con <code>yield</code>","text":"<p>La secuencia de ejecuci\u00f3n es m\u00e1s o menos como este diagrama. El tiempo fluye de arriba a abajo. Y cada columna es una de las partes que interact\u00faa o ejecuta c\u00f3digo.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,operation: Puede lanzar excepciones, incluyendo HTTPException\n    client -&gt;&gt; dep: Iniciar request\n    Note over dep: Ejecutar c\u00f3digo hasta yield\n    opt raise Exception\n        dep --&gt;&gt; handler: Lanzar Exception\n        handler --&gt;&gt; client: Response HTTP de error\n    end\n    dep -&gt;&gt; operation: Ejecutar dependencia, por ejemplo, sesi\u00f3n de BD\n    opt raise\n        operation --&gt;&gt; dep: Lanzar Exception (por ejemplo, HTTPException)\n        opt handle\n            dep --&gt;&gt; dep: Puede capturar excepci\u00f3n, lanzar una nueva HTTPException, lanzar otra excepci\u00f3n\n        end\n        handler --&gt;&gt; client: Response HTTP de error\n    end\n\n    operation -&gt;&gt; client: Devolver response al cliente\n    Note over client,operation: El response ya fue enviado, no se puede cambiar\n    opt Tasks\n        operation --&gt;&gt; tasks: Enviar tareas en background\n    end\n    opt Lanzar otra excepci\u00f3n\n        tasks --&gt;&gt; tasks: Manejar excepciones en el c\u00f3digo de la tarea en background\n    end</code></pre> <p>Informaci\u00f3n</p> <p>Solo un response ser\u00e1 enviado al cliente. Podr\u00eda ser uno de los responses de error o ser\u00e1 el response de la path operation.</p> <p>Despu\u00e9s de que se env\u00ede uno de esos responses, no se podr\u00e1 enviar ning\u00fan otro response.</p> <p>Consejo</p> <p>Este diagrama muestra <code>HTTPException</code>, pero tambi\u00e9n podr\u00edas lanzar cualquier otra excepci\u00f3n que captures en una dependencia con <code>yield</code> o con un Manejador de Excepciones Personalizado.</p> <p>Si lanzas alguna excepci\u00f3n, ser\u00e1 pasada a las dependencias con yield, incluyendo <code>HTTPException</code>. En la mayor\u00eda de los casos querr\u00e1s volver a lanzar esa misma excepci\u00f3n o una nueva desde la dependencia con <code>yield</code> para asegurarte de que se maneje correctamente.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-con-yield-httpexception-except-y-tareas-en-background","title":"Dependencias con <code>yield</code>, <code>HTTPException</code>, <code>except</code> y Tareas en Background","text":"<p>Advertencia</p> <p>Probablemente no necesites estos detalles t\u00e9cnicos, puedes omitir esta secci\u00f3n y continuar abajo.</p> <p>Estos detalles son \u00fatiles principalmente si estabas usando una versi\u00f3n de ReadyAPI anterior a 0.106.0 y usabas recursos de dependencias con <code>yield</code> en tareas en background.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-con-yield-y-except-detalles-tecnicos","title":"Dependencias con <code>yield</code> y <code>except</code>, Detalles T\u00e9cnicos","text":"<p>Antes de ReadyAPI 0.110.0, si usabas una dependencia con <code>yield</code>, y luego capturabas una excepci\u00f3n con <code>except</code> en esa dependencia, y no volv\u00edas a lanzar la excepci\u00f3n, la excepci\u00f3n se lanzar\u00eda autom\u00e1ticamente/transmitir\u00eda a cualquier manejador de excepciones o al manejador de errores interno del servidor.</p> <p>Esto se cambi\u00f3 en la versi\u00f3n 0.110.0 para corregir el consumo no gestionado de memoria de excepciones transmitidas sin un manejador (errores internos del servidor), y para que sea consistente con el comportamiento del c\u00f3digo regular de Python.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#tareas-en-background-y-dependencias-con-yield-detalles-tecnicos","title":"Tareas en Background y Dependencias con <code>yield</code>, Detalles T\u00e9cnicos","text":"<p>Antes de ReadyAPI 0.106.0, lanzar excepciones despu\u00e9s de <code>yield</code> no era posible, el c\u00f3digo de salida en dependencias con <code>yield</code> se ejecutaba despu\u00e9s de que el response se enviara, por lo que los Manejadores de Excepciones ya se habr\u00edan ejecutado.</p> <p>Esto se dise\u00f1\u00f3 de esta manera principalmente para permitir usar los mismos objetos \"extra\u00eddos\" por dependencias dentro de tareas en background, porque el c\u00f3digo de salida se ejecutar\u00eda despu\u00e9s de que las tareas en background terminaran.</p> <p>Sin embargo, ya que esto significar\u00eda esperar a que el response viaje a trav\u00e9s de la red mientras se retiene innecesariamente un recurso en una dependencia con yield (por ejemplo, una conexi\u00f3n a base de datos), esto se cambi\u00f3 en ReadyAPI 0.106.0.</p> <p>Consejo</p> <p>Adem\u00e1s, una tarea en background es normalmente un conjunto independiente de l\u00f3gica que deber\u00eda manejarse por separado, con sus propios recursos (por ejemplo, su propia conexi\u00f3n a base de datos).</p> <p>De esta manera probablemente tendr\u00e1s un c\u00f3digo m\u00e1s limpio.</p> <p>Si sol\u00edas depender de este comportamiento, ahora deber\u00edas crear los recursos para tareas en background dentro de la propia tarea en background, y usar internamente solo datos que no dependan de los recursos de las dependencias con <code>yield</code>.</p> <p>Por ejemplo, en lugar de usar la misma sesi\u00f3n de base de datos, crear\u00edas una nueva sesi\u00f3n de base de datos dentro de la tarea en background, y obtendr\u00edas los objetos de la base de datos usando esta nueva sesi\u00f3n. Y luego, en lugar de pasar el objeto de la base de datos como par\u00e1metro a la funci\u00f3n de tarea en background, pasar\u00edas el ID de ese objeto y luego obtendr\u00edas el objeto nuevamente dentro de la funci\u00f3n de tarea en background.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#context-managers","title":"Context Managers","text":""},{"location":"tutorial/dependencies/dependencies-with-yield/#que-son-los-context-managers","title":"Qu\u00e9 son los \"Context Managers\"","text":"<p>Los \"Context Managers\" son aquellos objetos de Python que puedes usar en una declaraci\u00f3n <code>with</code>.</p> <p>Por ejemplo, puedes usar <code>with</code> para leer un archivo:</p> <pre><code>with open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n</code></pre> <p>Internamente, <code>open(\"./somefile.txt\")</code> crea un objeto llamado \"Context Manager\".</p> <p>Cuando el bloque <code>with</code> termina, se asegura de cerrar el archivo, incluso si hubo excepciones.</p> <p>Cuando creas una dependencia con <code>yield</code>, ReadyAPI crear\u00e1 internamente un context manager para ella y lo combinar\u00e1 con algunas otras herramientas relacionadas.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#usando-context-managers-en-dependencias-con-yield","title":"Usando context managers en dependencias con <code>yield</code>","text":"<p>Advertencia</p> <p>Esto es, m\u00e1s o menos, una idea \"avanzada\".</p> <p>Si apenas est\u00e1s comenzando con ReadyAPI, podr\u00edas querer omitirlo por ahora.</p> <p>En Python, puedes crear Context Managers creando una clase con dos m\u00e9todos: <code>__enter__()</code> y <code>__exit__()</code>.</p> <p>Tambi\u00e9n puedes usarlos dentro de las dependencias de ReadyAPI con <code>yield</code> usando <code>with</code> o <code>async with</code> en la funci\u00f3n de dependencia:</p> Python 3.8+ <pre><code>class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n</code></pre> <p>Consejo</p> <p>Otra manera de crear un context manager es con:</p> <ul> <li><code>@contextlib.contextmanager</code> o</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>us\u00e1ndolos para decorar una funci\u00f3n con un solo <code>yield</code>.</p> <p>Eso es lo que ReadyAPI usa internamente para dependencias con <code>yield</code>.</p> <p>Pero no tienes que usar los decoradores para las dependencias de ReadyAPI (y no deber\u00edas).</p> <p>ReadyAPI lo har\u00e1 por ti internamente.</p>"},{"location":"tutorial/dependencies/global-dependencies/","title":"Dependencias Globales","text":"<p>Para algunos tipos de aplicaciones, podr\u00edas querer agregar dependencias a toda la aplicaci\u00f3n.</p> <p>Similar a como puedes agregar <code>dependencies</code> a los path operation decorators, puedes agregarlos a la aplicaci\u00f3n de <code>ReadyAPI</code>.</p> <p>En ese caso, se aplicar\u00e1n a todas las path operations en la aplicaci\u00f3n:</p> Python 3.9+ <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Y todas las ideas en la secci\u00f3n sobre agregar <code>dependencies</code> a los path operation decorators siguen aplic\u00e1ndose, pero en este caso, a todas las path operations en la app.</p>"},{"location":"tutorial/dependencies/global-dependencies/#dependencias-para-grupos-de-path-operations","title":"Dependencias para grupos de path operations","text":"<p>M\u00e1s adelante, al leer sobre c\u00f3mo estructurar aplicaciones m\u00e1s grandes (Aplicaciones M\u00e1s Grandes - M\u00faltiples Archivos), posiblemente con m\u00faltiples archivos, aprender\u00e1s c\u00f3mo declarar un solo par\u00e1metro de <code>dependencies</code> para un grupo de path operations.</p>"},{"location":"tutorial/dependencies/sub-dependencies/","title":"Sub-dependencias","text":"<p>Puedes crear dependencias que tengan sub-dependencias.</p> <p>Pueden ser tan profundas como necesites.</p> <p>ReadyAPI se encargar\u00e1 de resolverlas.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#primera-dependencia-dependable","title":"Primera dependencia \"dependable\"","text":"<p>Podr\u00edas crear una primera dependencia (\"dependable\") as\u00ed:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Declara un par\u00e1metro de query opcional <code>q</code> como un <code>str</code>, y luego simplemente lo devuelve.</p> <p>Esto es bastante simple (no muy \u00fatil), pero nos ayudar\u00e1 a centrarnos en c\u00f3mo funcionan las sub-dependencias.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#segunda-dependencia-dependable-y-dependant","title":"Segunda dependencia, \"dependable\" y \"dependant\"","text":"<p>Luego puedes crear otra funci\u00f3n de dependencia (un \"dependable\") que al mismo tiempo declare una dependencia propia (por lo que tambi\u00e9n es un \"dependant\"):</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Centr\u00e9monos en los par\u00e1metros declarados:</p> <ul> <li>Aunque esta funci\u00f3n es una dependencia (\"dependable\") en s\u00ed misma, tambi\u00e9n declara otra dependencia (depende de algo m\u00e1s).<ul> <li>Depende del <code>query_extractor</code>, y asigna el valor que devuelve al par\u00e1metro <code>q</code>.</li> </ul> </li> <li>Tambi\u00e9n declara una <code>last_query</code> cookie opcional, como un <code>str</code>.<ul> <li>Si el usuario no proporcion\u00f3 ning\u00fan query <code>q</code>, usamos el \u00faltimo query utilizado, que guardamos previamente en una cookie.</li> </ul> </li> </ul>"},{"location":"tutorial/dependencies/sub-dependencies/#usa-la-dependencia","title":"Usa la dependencia","text":"<p>Entonces podemos usar la dependencia con:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Informaci\u00f3n</p> <p>F\u00edjate que solo estamos declarando una dependencia en la path operation function, <code>query_or_cookie_extractor</code>.</p> <p>Pero ReadyAPI sabr\u00e1 que tiene que resolver <code>query_extractor</code> primero, para pasar los resultados de eso a <code>query_or_cookie_extractor</code> al llamarlo.</p> <pre><code>graph TB\n\nquery_extractor([\"query_extractor\"])\nquery_or_cookie_extractor([\"query_or_cookie_extractor\"])\n\nread_query[\"/items/\"]\n\nquery_extractor --&gt; query_or_cookie_extractor --&gt; read_query</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#usando-la-misma-dependencia-multiples-veces","title":"Usando la misma dependencia m\u00faltiples veces","text":"<p>Si una de tus dependencias se declara varias veces para la misma path operation, por ejemplo, m\u00faltiples dependencias tienen una sub-dependencia com\u00fan, ReadyAPI sabr\u00e1 llamar a esa sub-dependencia solo una vez por request.</p> <p>Y guardar\u00e1 el valor devuelto en un \"cache\" y lo pasar\u00e1 a todos los \"dependants\" que lo necesiten en ese request espec\u00edfico, en lugar de llamar a la dependencia varias veces para el mismo request.</p> <p>En un escenario avanzado donde sabes que necesitas que la dependencia se llame en cada paso (posiblemente varias veces) en el mismo request en lugar de usar el valor \"cache\", puedes establecer el par\u00e1metro <code>use_cache=False</code> al usar <code>Depends</code>:</p> Python 3.8+Python 3.8+ sin Anotaciones <pre><code>async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n</code></pre> <p>Consejo</p> <p>Prefiere usar la versi\u00f3n <code>Annotated</code> si es posible.</p> <pre><code>async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#resumen","title":"Resumen","text":"<p>Aparte de todas las palabras rimbombantes usadas aqu\u00ed, el sistema de Inyecci\u00f3n de Dependencias es bastante simple.</p> <p>Solo son funciones que se ven igual que las path operation functions.</p> <p>Pero aun as\u00ed, es muy potente y te permite declarar \"grafos\" de dependencia anidados arbitrariamente profundos (\u00e1rboles).</p> <p>Consejo</p> <p>Todo esto podr\u00eda no parecer tan \u00fatil con estos ejemplos simples.</p> <p>Pero ver\u00e1s lo \u00fatil que es en los cap\u00edtulos sobre seguridad.</p> <p>Y tambi\u00e9n ver\u00e1s la cantidad de c\u00f3digo que te ahorrar\u00e1.</p>"},{"location":"tutorial/security/","title":"Seguridad","text":"<p>Hay muchas formas de manejar la seguridad, autenticaci\u00f3n y autorizaci\u00f3n.</p> <p>Y normalmente es un tema complejo y \"dif\u00edcil\".</p> <p>En muchos frameworks y sistemas, solo manejar la seguridad y autenticaci\u00f3n requiere una gran cantidad de esfuerzo y c\u00f3digo (en muchos casos puede ser el 50% o m\u00e1s de todo el c\u00f3digo escrito).</p> <p>ReadyAPI proporciona varias herramientas para ayudarte a manejar la Seguridad de manera f\u00e1cil, r\u00e1pida y est\u00e1ndar, sin tener que estudiar y aprender todas las especificaciones de seguridad.</p> <p>Pero primero, vamos a revisar algunos peque\u00f1os conceptos.</p>"},{"location":"tutorial/security/#con-prisa","title":"\u00bfCon prisa?","text":"<p>Si no te importan ninguno de estos t\u00e9rminos y solo necesitas agregar seguridad con autenticaci\u00f3n basada en nombre de usuario y contrase\u00f1a ahora mismo, salta a los siguientes cap\u00edtulos.</p>"},{"location":"tutorial/security/#oauth2","title":"OAuth2","text":"<p>OAuth2 es una especificaci\u00f3n que define varias maneras de manejar la autenticaci\u00f3n y autorizaci\u00f3n.</p> <p>Es una especificaci\u00f3n bastante extensa y cubre varios casos de uso complejos.</p> <p>Incluye formas de autenticarse usando un \"tercero\".</p> <p>Eso es lo que todos los sistemas con \"iniciar sesi\u00f3n con Facebook, Google, Twitter, GitHub\" utilizan internamente.</p>"},{"location":"tutorial/security/#oauth-1","title":"OAuth 1","text":"<p>Hubo un OAuth 1, que es muy diferente de OAuth2, y m\u00e1s complejo, ya que inclu\u00eda especificaciones directas sobre c\u00f3mo encriptar la comunicaci\u00f3n.</p> <p>No es muy popular o usado hoy en d\u00eda.</p> <p>OAuth2 no especifica c\u00f3mo encriptar la comunicaci\u00f3n, espera que tengas tu aplicaci\u00f3n servida con HTTPS.</p> <p>Consejo</p> <p>En la secci\u00f3n sobre deployment ver\u00e1s c\u00f3mo configurar HTTPS de forma gratuita, usando Traefik y Let's Encrypt.</p>"},{"location":"tutorial/security/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect es otra especificaci\u00f3n, basada en OAuth2.</p> <p>Solo extiende OAuth2 especificando algunas cosas que son relativamente ambiguas en OAuth2, para intentar hacerla m\u00e1s interoperable.</p> <p>Por ejemplo, el login de Google usa OpenID Connect (que internamente usa OAuth2).</p> <p>Pero el login de Facebook no soporta OpenID Connect. Tiene su propia versi\u00f3n de OAuth2.</p>"},{"location":"tutorial/security/#openid-no-openid-connect","title":"OpenID (no \"OpenID Connect\")","text":"<p>Hubo tambi\u00e9n una especificaci\u00f3n \"OpenID\". Que intentaba resolver lo mismo que OpenID Connect, pero no estaba basada en OAuth2.</p> <p>Entonces, era un sistema completo adicional.</p> <p>No es muy popular o usado hoy en d\u00eda.</p>"},{"location":"tutorial/security/#openapi","title":"OpenAPI","text":"<p>OpenAPI (anteriormente conocido como Swagger) es la especificaci\u00f3n abierta para construir APIs (ahora parte de la Linux Foundation).</p> <p>ReadyAPI se basa en OpenAPI.</p> <p>Eso es lo que hace posible tener m\u00faltiples interfaces de documentaci\u00f3n interactiva autom\u00e1tica, generaci\u00f3n de c\u00f3digo, etc.</p> <p>OpenAPI tiene una forma de definir m\u00faltiples \"esquemas\" de seguridad.</p> <p>Al usarlos, puedes aprovechar todas estas herramientas basadas en est\u00e1ndares, incluidos estos sistemas de documentaci\u00f3n interactiva.</p> <p>OpenAPI define los siguientes esquemas de seguridad:</p> <ul> <li><code>apiKey</code>: una clave espec\u00edfica de la aplicaci\u00f3n que puede provenir de:</li> <li>Un par\u00e1metro de query.</li> <li>Un header.</li> <li>Una cookie.</li> <li><code>http</code>: sistemas de autenticaci\u00f3n HTTP est\u00e1ndar, incluyendo:</li> <li><code>bearer</code>: un header <code>Authorization</code> con un valor de <code>Bearer</code> m\u00e1s un token. Esto se hereda de OAuth2.</li> <li>Autenticaci\u00f3n b\u00e1sica HTTP.</li> <li>Digest HTTP, etc.</li> <li><code>oauth2</code>: todas las formas de OAuth2 para manejar la seguridad (llamadas \"flujos\").</li> <li>Varios de estos flujos son apropiados para construir un proveedor de autenticaci\u00f3n OAuth 2.0 (como Google, Facebook, Twitter, GitHub, etc.):<ul> <li><code>implicit</code></li> <li><code>clientCredentials</code></li> <li><code>authorizationCode</code></li> </ul> </li> <li>Pero hay un \"flujo\" espec\u00edfico que puede usarse perfectamente para manejar la autenticaci\u00f3n directamente en la misma aplicaci\u00f3n:<ul> <li><code>password</code>: algunos de los pr\u00f3ximos cap\u00edtulos cubrir\u00e1n ejemplos de esto.</li> </ul> </li> <li><code>openIdConnect</code>: tiene una forma de definir c\u00f3mo descubrir autom\u00e1ticamente los datos de autenticaci\u00f3n OAuth2.</li> <li>Este descubrimiento autom\u00e1tico es lo que se define en la especificaci\u00f3n de OpenID Connect.</li> </ul> <p>Consejo</p> <p>Integrar otros proveedores de autenticaci\u00f3n/autorizaci\u00f3n como Google, Facebook, Twitter, GitHub, etc. tambi\u00e9n es posible y relativamente f\u00e1cil.</p> <p>El problema m\u00e1s complejo es construir un proveedor de autenticaci\u00f3n/autorizaci\u00f3n como esos, pero ReadyAPI te da las herramientas para hacerlo f\u00e1cilmente, mientras hace el trabajo pesado por ti.</p>"},{"location":"tutorial/security/#utilidades-de-readyapi","title":"Utilidades de ReadyAPI","text":"<p>ReadyAPI proporciona varias herramientas para cada uno de estos esquemas de seguridad en el m\u00f3dulo <code>readyapi.security</code> que simplifican el uso de estos mecanismos de seguridad.</p> <p>En los siguientes cap\u00edtulos ver\u00e1s c\u00f3mo agregar seguridad a tu API usando esas herramientas proporcionadas por ReadyAPI.</p> <p>Y tambi\u00e9n ver\u00e1s c\u00f3mo se integra autom\u00e1ticamente en el sistema de documentaci\u00f3n interactiva.</p>"},{"location":"tutorial/security/first-steps/","title":"Seguridad - Primeros pasos","text":"<p>Imaginemos que tienes tu API de backend en alg\u00fan dominio.</p> <p>Y tienes un frontend en otro dominio o en un path diferente del mismo dominio (o en una aplicaci\u00f3n m\u00f3vil).</p> <p>Y quieres tener una forma para que el frontend se autentique con el backend, usando un username y password.</p> <p>Podemos usar OAuth2 para construir eso con ReadyAPI.</p> <p>Pero vamos a ahorrarte el tiempo de leer la larga especificaci\u00f3n completa solo para encontrar esos peque\u00f1os fragmentos de informaci\u00f3n que necesitas.</p> <p>Usemos las herramientas proporcionadas por ReadyAPI para manejar la seguridad.</p>"},{"location":"tutorial/security/first-steps/#como-se-ve","title":"C\u00f3mo se ve","text":"<p>Primero solo usemos el c\u00f3digo y veamos c\u00f3mo funciona, y luego volveremos para entender qu\u00e9 est\u00e1 sucediendo.</p>"},{"location":"tutorial/security/first-steps/#crea-mainpy","title":"Crea <code>main.py</code>","text":"<p>Copia el ejemplo en un archivo <code>main.py</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre>"},{"location":"tutorial/security/first-steps/#ejecutalo","title":"Ejec\u00fatalo","text":"<p>Informaci\u00f3n</p> <p>El paquete <code>python-multipart</code> se instala autom\u00e1ticamente con ReadyAPI cuando ejecutas el comando <code>pip install \"readyapi[standard]\"</code>.</p> <p>Sin embargo, si usas el comando <code>pip install readyapi</code>, el paquete <code>python-multipart</code> no se incluye por defecto.</p> <p>Para instalarlo manualmente, aseg\u00farate de crear un entorno virtual, activarlo, y luego instalarlo con:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Esto se debe a que OAuth2 utiliza \"form data\" para enviar el <code>username</code> y <code>password</code>.</p> <p>Ejecuta el ejemplo con:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/security/first-steps/#revisa","title":"Revisa","text":"<p>Ve a la documentaci\u00f3n interactiva en: http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s algo as\u00ed:</p> <p></p> <p>\u00a1Bot\u00f3n de autorizaci\u00f3n!</p> <p>Ya tienes un nuevo y brillante bot\u00f3n de \"Authorize\".</p> <p>Y tu path operation tiene un peque\u00f1o candado en la esquina superior derecha que puedes pulsar.</p> <p>Y si lo haces, tendr\u00e1s un peque\u00f1o formulario de autorizaci\u00f3n para escribir un <code>username</code> y <code>password</code> (y otros campos opcionales):</p> <p></p> <p>Nota</p> <p>No importa lo que escribas en el formulario, a\u00fan no funcionar\u00e1. Pero llegaremos all\u00ed.</p> <p>Esto por supuesto no es el frontend para los usuarios finales, pero es una gran herramienta autom\u00e1tica para documentar interactivamente toda tu API.</p> <p>Puede ser utilizada por el equipo de frontend (que tambi\u00e9n puedes ser t\u00fa mismo).</p> <p>Puede ser utilizada por aplicaciones y sistemas de terceros.</p> <p>Y tambi\u00e9n puede ser utilizada por ti mismo, para depurar, revisar y probar la misma aplicaci\u00f3n.</p>"},{"location":"tutorial/security/first-steps/#el-flujo-password","title":"El flujo <code>password</code>","text":"<p>Ahora retrocedamos un poco y entendamos qu\u00e9 es todo eso.</p> <p>El \"flujo\" <code>password</code> es una de las formas (\"flujos\") definidas en OAuth2, para manejar la seguridad y la autenticaci\u00f3n.</p> <p>OAuth2 fue dise\u00f1ado para que el backend o la API pudieran ser independientes del servidor que autentica al usuario.</p> <p>Pero en este caso, la misma aplicaci\u00f3n de ReadyAPI manejar\u00e1 la API y la autenticaci\u00f3n.</p> <p>As\u00ed que, revis\u00e9moslo desde ese punto de vista simplificado:</p> <ul> <li>El usuario escribe el <code>username</code> y <code>password</code> en el frontend, y presiona <code>Enter</code>.</li> <li>El frontend (ejecut\u00e1ndose en el navegador del usuario) env\u00eda ese <code>username</code> y <code>password</code> a una URL espec\u00edfica en nuestra API (declarada con <code>tokenUrl=\"token\"</code>).</li> <li>La API verifica ese <code>username</code> y <code>password</code>, y responde con un \"token\" (no hemos implementado nada de esto a\u00fan).<ul> <li>Un \"token\" es solo un string con alg\u00fan contenido que podemos usar luego para verificar a este usuario.</li> <li>Normalmente, un token se establece para que expire despu\u00e9s de alg\u00fan tiempo.<ul> <li>As\u00ed que, el usuario tendr\u00e1 que volver a iniciar sesi\u00f3n m\u00e1s adelante.</li> <li>Y si el token es robado, el riesgo es menor. No es como una llave permanente que funcionar\u00e1 para siempre (en la mayor\u00eda de los casos).</li> </ul> </li> </ul> </li> <li>El frontend almacena temporalmente ese token en alg\u00fan lugar.</li> <li>El usuario hace clic en el frontend para ir a otra secci\u00f3n de la aplicaci\u00f3n web frontend.</li> <li>El frontend necesita obtener m\u00e1s datos de la API.<ul> <li>Pero necesita autenticaci\u00f3n para ese endpoint espec\u00edfico.</li> <li>As\u00ed que, para autenticarse con nuestra API, env\u00eda un <code>header</code> <code>Authorization</code> con un valor de <code>Bearer</code> m\u00e1s el token.</li> <li>Si el token contiene <code>foobar</code>, el contenido del <code>header</code> <code>Authorization</code> ser\u00eda: <code>Bearer foobar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/security/first-steps/#oauth2passwordbearer-de-readyapi","title":"<code>OAuth2PasswordBearer</code> de ReadyAPI","text":"<p>ReadyAPI proporciona varias herramientas, en diferentes niveles de abstracci\u00f3n, para implementar estas funcionalidades de seguridad.</p> <p>En este ejemplo vamos a usar OAuth2, con el flujo Password, usando un token Bearer. Hacemos eso utilizando la clase <code>OAuth2PasswordBearer</code>.</p> <p>Informaci\u00f3n</p> <p>Un token \"bearer\" no es la \u00fanica opci\u00f3n.</p> <p>Pero es la mejor para nuestro caso de uso.</p> <p>Y podr\u00eda ser la mejor para la mayor\u00eda de los casos de uso, a menos que seas un experto en OAuth2 y sepas exactamente por qu\u00e9 hay otra opci\u00f3n que se adapta mejor a tus necesidades.</p> <p>En ese caso, ReadyAPI tambi\u00e9n te proporciona las herramientas para construirlo.</p> <p>Cuando creamos una instance de la clase <code>OAuth2PasswordBearer</code> pasamos el par\u00e1metro <code>tokenUrl</code>. Este par\u00e1metro contiene la URL que el cliente (el frontend corriendo en el navegador del usuario) usar\u00e1 para enviar el <code>username</code> y <code>password</code> a fin de obtener un token.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Consejo</p> <p>Aqu\u00ed <code>tokenUrl=\"token\"</code> se refiere a una URL relativa <code>token</code> que a\u00fan no hemos creado. Como es una URL relativa, es equivalente a <code>./token</code>.</p> <p>Porque estamos usando una URL relativa, si tu API estuviera ubicada en <code>https://example.com/</code>, entonces se referir\u00eda a <code>https://example.com/token</code>. Pero si tu API estuviera ubicada en <code>https://example.com/api/v1/</code>, entonces se referir\u00eda a <code>https://example.com/api/v1/token</code>.</p> <p>Usar una URL relativa es importante para asegurarse de que tu aplicaci\u00f3n siga funcionando incluso en un caso de uso avanzado como Detr\u00e1s de un Proxy.</p> <p>Este par\u00e1metro no crea ese endpoint / path operation, pero declara que la URL <code>/token</code> ser\u00e1 la que el cliente deber\u00e1 usar para obtener el token. Esa informaci\u00f3n se usa en OpenAPI, y luego en los sistemas de documentaci\u00f3n interactiva del API.</p> <p>Pronto tambi\u00e9n crearemos la verdadera path operation.</p> <p>Informaci\u00f3n</p> <p>Si eres un \"Pythonista\" muy estricto, tal vez no te guste el estilo del nombre del par\u00e1metro <code>tokenUrl</code> en lugar de <code>token_url</code>.</p> <p>Eso es porque est\u00e1 usando el mismo nombre que en la especificaci\u00f3n de OpenAPI. Para que si necesitas investigar m\u00e1s sobre cualquiera de estos esquemas de seguridad, puedas simplemente copiarlo y pegarlo para encontrar m\u00e1s informaci\u00f3n al respecto.</p> <p>La variable <code>oauth2_scheme</code> es una instance de <code>OAuth2PasswordBearer</code>, pero tambi\u00e9n es un \"callable\".</p> <p>Podr\u00eda ser llamada como:</p> <pre><code>oauth2_scheme(some, parameters)\n</code></pre> <p>As\u00ed que, puede usarse con <code>Depends</code>.</p>"},{"location":"tutorial/security/first-steps/#usalo","title":"\u00dasalo","text":"<p>Ahora puedes pasar ese <code>oauth2_scheme</code> en una dependencia con <code>Depends</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Esta dependencia proporcionar\u00e1 un <code>str</code> que se asigna al par\u00e1metro <code>token</code> de la path operation function.</p> <p>ReadyAPI sabr\u00e1 que puede usar esta dependencia para definir un \"security scheme\" en el esquema OpenAPI (y en los docs autom\u00e1ticos del API).</p> <p>Detalles t\u00e9cnicos</p> <p>ReadyAPI sabr\u00e1 que puede usar la clase <code>OAuth2PasswordBearer</code> (declarada en una dependencia) para definir el esquema de seguridad en OpenAPI porque hereda de <code>readyapi.security.oauth2.OAuth2</code>, que a su vez hereda de <code>readyapi.security.base.SecurityBase</code>.</p> <p>Todas las utilidades de seguridad que se integran con OpenAPI (y los docs autom\u00e1ticos del API) heredan de <code>SecurityBase</code>, as\u00ed es como ReadyAPI puede saber c\u00f3mo integrarlas en OpenAPI.</p>"},{"location":"tutorial/security/first-steps/#lo-que-hace","title":"Lo que hace","text":"<p>Ir\u00e1 y buscar\u00e1 en el request ese header <code>Authorization</code>, verificar\u00e1 si el valor es <code>Bearer</code> m\u00e1s alg\u00fan token, y devolver\u00e1 el token como un <code>str</code>.</p> <p>Si no ve un header <code>Authorization</code>, o el valor no tiene un token <code>Bearer</code>, responder\u00e1 directamente con un error de c\u00f3digo de estado 401 (<code>UNAUTHORIZED</code>).</p> <p>Ni siquiera tienes que verificar si el token existe para devolver un error. Puedes estar seguro de que si tu funci\u00f3n se ejecuta, tendr\u00e1 un <code>str</code> en ese token.</p> <p>Puedes probarlo ya en los docs interactivos:</p> <p></p> <p>Todav\u00eda no estamos verificando la validez del token, pero ya es un comienzo.</p>"},{"location":"tutorial/security/first-steps/#resumen","title":"Resumen","text":"<p>As\u00ed que, en solo 3 o 4 l\u00edneas adicionales, ya tienes alguna forma primitiva de seguridad.</p>"},{"location":"tutorial/security/get-current-user/","title":"Obtener Usuario Actual","text":"<p>En el cap\u00edtulo anterior, el sistema de seguridad (que se basa en el sistema de inyecci\u00f3n de dependencias) le estaba dando a la path operation function un <code>token</code> como un <code>str</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Pero eso a\u00fan no es tan \u00fatil. Vamos a hacer que nos d\u00e9 el usuario actual.</p>"},{"location":"tutorial/security/get-current-user/#crear-un-modelo-de-usuario","title":"Crear un modelo de usuario","text":"<p>Primero, vamos a crear un modelo de usuario con Pydantic.</p> <p>De la misma manera que usamos Pydantic para declarar cuerpos, podemos usarlo en cualquier otra parte:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#crear-una-dependencia-get_current_user","title":"Crear una dependencia <code>get_current_user</code>","text":"<p>Vamos a crear una dependencia <code>get_current_user</code>.</p> <p>\u00bfRecuerdas que las dependencias pueden tener sub-dependencias?</p> <p><code>get_current_user</code> tendr\u00e1 una dependencia con el mismo <code>oauth2_scheme</code> que creamos antes.</p> <p>De la misma manera que est\u00e1bamos haciendo antes en la path operation directamente, nuestra nueva dependencia <code>get_current_user</code> recibir\u00e1 un <code>token</code> como un <code>str</code> de la sub-dependencia <code>oauth2_scheme</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#obtener-el-usuario","title":"Obtener el usuario","text":"<p><code>get_current_user</code> usar\u00e1 una funci\u00f3n de utilidad (falsa) que creamos, que toma un token como un <code>str</code> y devuelve nuestro modelo de Pydantic <code>User</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#inyectar-al-usuario-actual","title":"Inyectar al usuario actual","text":"<p>Entonces ahora podemos usar el mismo <code>Depends</code> con nuestro <code>get_current_user</code> en la path operation:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Ten en cuenta que declaramos el tipo de <code>current_user</code> como el modelo de Pydantic <code>User</code>.</p> <p>Esto nos ayudar\u00e1 dentro de la funci\u00f3n con todo el autocompletado y chequeo de tipos.</p> <p>Consejo</p> <p>Tal vez recuerdes que los cuerpos de request tambi\u00e9n se declaran con modelos de Pydantic.</p> <p>Aqu\u00ed ReadyAPI no se confundir\u00e1 porque est\u00e1s usando <code>Depends</code>.</p> <p>Revisa</p> <p>El modo en que este sistema de dependencias est\u00e1 dise\u00f1ado nos permite tener diferentes dependencias (diferentes \"dependables\") que todas devuelven un modelo <code>User</code>.</p> <p>No estamos restringidos a tener solo una dependencia que pueda devolver ese tipo de datos.</p>"},{"location":"tutorial/security/get-current-user/#otros-modelos","title":"Otros modelos","text":"<p>Ahora puedes obtener el usuario actual directamente en las path operation functions y manejar los mecanismos de seguridad a nivel de Dependency Injection, usando <code>Depends</code>.</p> <p>Y puedes usar cualquier modelo o datos para los requisitos de seguridad (en este caso, un modelo de Pydantic <code>User</code>).</p> <p>Pero no est\u00e1s limitado a usar alg\u00fan modelo de datos, clase o tipo espec\u00edfico.</p> <p>\u00bfQuieres tener un <code>id</code> y <code>email</code> y no tener un <code>username</code> en tu modelo? Claro. Puedes usar estas mismas herramientas.</p> <p>\u00bfQuieres solo tener un <code>str</code>? \u00bfO solo un <code>dict</code>? \u00bfO un instance de clase modelo de base de datos directamente? Todo funciona de la misma manera.</p> <p>\u00bfEn realidad no tienes usuarios que inicien sesi\u00f3n en tu aplicaci\u00f3n sino robots, bots u otros sistemas, que solo tienen un token de acceso? Una vez m\u00e1s, todo funciona igual.</p> <p>Usa cualquier tipo de modelo, cualquier tipo de clase, cualquier tipo de base de datos que necesites para tu aplicaci\u00f3n. ReadyAPI te cubre con el sistema de inyecci\u00f3n de dependencias.</p>"},{"location":"tutorial/security/get-current-user/#tamano-del-codigo","title":"Tama\u00f1o del c\u00f3digo","text":"<p>Este ejemplo podr\u00eda parecer extenso. Ten en cuenta que estamos mezclando seguridad, modelos de datos, funciones de utilidad y path operations en el mismo archivo.</p> <p>Pero aqu\u00ed est\u00e1 el punto clave.</p> <p>El tema de seguridad e inyecci\u00f3n de dependencias se escribe una vez.</p> <p>Y puedes hacerlo tan complejo como desees. Y a\u00fan as\u00ed, tenerlo escrito solo una vez, en un solo lugar. Con toda la flexibilidad.</p> <p>Pero puedes tener miles de endpoints (path operations) usando el mismo sistema de seguridad.</p> <p>Y todos ellos (o cualquier porci\u00f3n de ellos que quieras) pueden aprovechar la reutilizaci\u00f3n de estas dependencias o cualquier otra dependencia que crees.</p> <p>Y todas estas miles de path operations pueden ser tan peque\u00f1as como 3 l\u00edneas:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#resumen","title":"Resumen","text":"<p>Ahora puedes obtener el usuario actual directamente en tu path operation function.</p> <p>Ya estamos a mitad de camino.</p> <p>Solo necesitamos agregar una path operation para que el usuario/cliente env\u00ede realmente el <code>username</code> y <code>password</code>.</p> <p>Eso es lo que viene a continuaci\u00f3n.</p>"},{"location":"tutorial/security/oauth2-jwt/","title":"OAuth2 con Password (y hashing), Bearer con tokens JWT","text":"<p>Ahora que tenemos todo el flujo de seguridad, hagamos que la aplicaci\u00f3n sea realmente segura, usando tokens JWT y hashing de contrase\u00f1as seguras.</p> <p>Este c\u00f3digo es algo que puedes usar realmente en tu aplicaci\u00f3n, guardar los hashes de las contrase\u00f1as en tu base de datos, etc.</p> <p>Vamos a empezar desde donde lo dejamos en el cap\u00edtulo anterior e incrementarlo.</p>"},{"location":"tutorial/security/oauth2-jwt/#acerca-de-jwt","title":"Acerca de JWT","text":"<p>JWT significa \"JSON Web Tokens\".</p> <p>Es un est\u00e1ndar para codificar un objeto JSON en un string largo y denso sin espacios. Se ve as\u00ed:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre> <p>No est\u00e1 encriptado, por lo que cualquiera podr\u00eda recuperar la informaci\u00f3n de los contenidos.</p> <p>Pero est\u00e1 firmado. As\u00ed que, cuando recibes un token que has emitido, puedes verificar que realmente lo emitiste.</p> <p>De esta manera, puedes crear un token con una expiraci\u00f3n de, digamos, 1 semana. Y luego, cuando el usuario regresa al d\u00eda siguiente con el token, sabes que el usuario todav\u00eda est\u00e1 registrado en tu sistema.</p> <p>Despu\u00e9s de una semana, el token estar\u00e1 expirado y el usuario no estar\u00e1 autorizado y tendr\u00e1 que iniciar sesi\u00f3n nuevamente para obtener un nuevo token. Y si el usuario (o un tercero) intenta modificar el token para cambiar la expiraci\u00f3n, podr\u00e1s descubrirlo, porque las firmas no coincidir\u00edan.</p> <p>Si quieres jugar con tokens JWT y ver c\u00f3mo funcionan, revisa https://jwt.io.</p>"},{"location":"tutorial/security/oauth2-jwt/#instalar-pyjwt","title":"Instalar <code>PyJWT</code>","text":"<p>Necesitamos instalar <code>PyJWT</code> para generar y verificar los tokens JWT en Python.</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo y luego instalar <code>pyjwt</code>:</p> <pre><code>$ pip install pyjwt\n\n---&gt; 100%\n</code></pre> <p>Informaci\u00f3n</p> <p>Si planeas usar algoritmos de firma digital como RSA o ECDSA, deber\u00edas instalar la dependencia del paquete de criptograf\u00eda <code>pyjwt[crypto]</code>.</p> <p>Puedes leer m\u00e1s al respecto en la documentaci\u00f3n de instalaci\u00f3n de PyJWT.</p>"},{"location":"tutorial/security/oauth2-jwt/#hashing-de-contrasenas","title":"Hashing de contrase\u00f1as","text":"<p>\"Hacer hashing\" significa convertir alg\u00fan contenido (una contrase\u00f1a en este caso) en una secuencia de bytes (solo un string) que parece un galimat\u00edas.</p> <p>Siempre que pases exactamente el mismo contenido (exactamente la misma contrase\u00f1a) obtienes exactamente el mismo galimat\u00edas.</p> <p>Pero no puedes convertir del galimat\u00edas de nuevo a la contrase\u00f1a.</p>"},{"location":"tutorial/security/oauth2-jwt/#por-que-usar-hashing-de-contrasenas","title":"Por qu\u00e9 usar hashing de contrase\u00f1as","text":"<p>Si tu base de datos es robada, el ladr\u00f3n no tendr\u00e1 las contrase\u00f1as en texto claro de tus usuarios, solo los hashes.</p> <p>Por lo tanto, el ladr\u00f3n no podr\u00e1 intentar usar esa contrase\u00f1a en otro sistema (como muchos usuarios usan la misma contrase\u00f1a en todas partes, esto ser\u00eda peligroso).</p>"},{"location":"tutorial/security/oauth2-jwt/#instalar-passlib","title":"Instalar <code>passlib</code>","text":"<p>PassLib es un gran paquete de Python para manejar hashes de contrase\u00f1as.</p> <p>Soporta muchos algoritmos de hashing seguros y utilidades para trabajar con ellos.</p> <p>El algoritmo recomendado es \"Bcrypt\".</p> <p>Aseg\u00farate de crear un entorno virtual, activarlo y luego instalar PassLib con Bcrypt:</p> <pre><code>$ pip install \"passlib[bcrypt]\"\n\n---&gt; 100%\n</code></pre> <p>Consejo</p> <p>Con <code>passlib</code>, incluso podr\u00edas configurarlo para poder leer contrase\u00f1as creadas por Django, un plug-in de seguridad de Flask u otros muchos.</p> <p>As\u00ed, podr\u00edas, por ejemplo, compartir los mismos datos de una aplicaci\u00f3n de Django en una base de datos con una aplicaci\u00f3n de ReadyAPI. O migrar gradualmente una aplicaci\u00f3n de Django usando la misma base de datos.</p> <p>Y tus usuarios podr\u00edan iniciar sesi\u00f3n desde tu aplicaci\u00f3n Django o desde tu aplicaci\u00f3n ReadyAPI, al mismo tiempo.</p>"},{"location":"tutorial/security/oauth2-jwt/#hash-y-verificacion-de-contrasenas","title":"Hash y verificaci\u00f3n de contrase\u00f1as","text":"<p>Importa las herramientas que necesitamos de <code>passlib</code>.</p> <p>Crea un \"contexto\" de PassLib. Este es el que se usar\u00e1 para hacer el hash y verificar las contrase\u00f1as.</p> <p>Consejo</p> <p>El contexto de PassLib tambi\u00e9n tiene funcionalidad para usar diferentes algoritmos de hashing, incluidos los antiguos obsoletos solo para permitir verificarlos, etc.</p> <p>Por ejemplo, podr\u00edas usarlo para leer y verificar contrase\u00f1as generadas por otro sistema (como Django) pero hacer hash de cualquier contrase\u00f1a nueva con un algoritmo diferente como Bcrypt.</p> <p>Y ser compatible con todos ellos al mismo tiempo.</p> <p>Crea una funci\u00f3n de utilidad para hacer el hash de una contrase\u00f1a que venga del usuario.</p> <p>Y otra utilidad para verificar si una contrase\u00f1a recibida coincide con el hash almacenado.</p> <p>Y otra m\u00e1s para autenticar y devolver un usuario.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Nota</p> <p>Si revisas la nueva (falsa) base de datos <code>fake_users_db</code>, ver\u00e1s c\u00f3mo se ve ahora la contrase\u00f1a con hash: <code>\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#manejo-de-tokens-jwt","title":"Manejo de tokens JWT","text":"<p>Importa los m\u00f3dulos instalados.</p> <p>Crea una clave secreta aleatoria que se usar\u00e1 para firmar los tokens JWT.</p> <p>Para generar una clave secreta segura al azar usa el comando:</p> <pre><code>$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n</code></pre> <p>Y copia el resultado a la variable <code>SECRET_KEY</code> (no uses la del ejemplo).</p> <p>Crea una variable <code>ALGORITHM</code> con el algoritmo usado para firmar el token JWT y config\u00faralo a <code>\"HS256\"</code>.</p> <p>Crea una variable para la expiraci\u00f3n del token.</p> <p>Define un Modelo de Pydantic que se usar\u00e1 en el endpoint de token para el response.</p> <p>Crea una funci\u00f3n de utilidad para generar un nuevo token de acceso.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#actualizar-las-dependencias","title":"Actualizar las dependencias","text":"<p>Actualiza <code>get_current_user</code> para recibir el mismo token que antes, pero esta vez, usando tokens JWT.</p> <p>Decodifica el token recibido, verif\u00edcalo y devuelve el usuario actual.</p> <p>Si el token es inv\u00e1lido, devuelve un error HTTP de inmediato.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#actualizar-la-path-operation-token","title":"Actualizar la path operation <code>/token</code>","text":"<p>Crea un <code>timedelta</code> con el tiempo de expiraci\u00f3n del token.</p> <p>Crea un verdadero token de acceso JWT y devu\u00e9lvelo.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#detalles-tecnicos-sobre-el-sujeto-sub-de-jwt","title":"Detalles t\u00e9cnicos sobre el \"sujeto\" <code>sub</code> de JWT","text":"<p>La especificaci\u00f3n de JWT dice que hay una clave <code>sub</code>, con el sujeto del token.</p> <p>Es opcional usarlo, pero ah\u00ed es donde pondr\u00edas la identificaci\u00f3n del usuario, por lo que lo estamos usando aqu\u00ed.</p> <p>JWT podr\u00eda ser usado para otras cosas aparte de identificar un usuario y permitirle realizar operaciones directamente en tu API.</p> <p>Por ejemplo, podr\u00edas identificar un \"coche\" o un \"art\u00edculo de blog\".</p> <p>Luego, podr\u00edas agregar permisos sobre esa entidad, como \"conducir\" (para el coche) o \"editar\" (para el blog).</p> <p>Y luego, podr\u00edas darle ese token JWT a un usuario (o bot), y ellos podr\u00edan usarlo para realizar esas acciones (conducir el coche, o editar el art\u00edculo del blog) sin siquiera necesitar tener una cuenta, solo con el token JWT que tu API gener\u00f3 para eso.</p> <p>Usando estas ideas, JWT puede ser utilizado para escenarios mucho m\u00e1s sofisticados.</p> <p>En esos casos, varias de esas entidades podr\u00edan tener el mismo ID, digamos <code>foo</code> (un usuario <code>foo</code>, un coche <code>foo</code>, y un art\u00edculo del blog <code>foo</code>).</p> <p>Entonces, para evitar colisiones de ID, cuando crees el token JWT para el usuario, podr\u00edas prefijar el valor de la clave <code>sub</code>, por ejemplo, con <code>username:</code>. As\u00ed, en este ejemplo, el valor de <code>sub</code> podr\u00eda haber sido: <code>username:johndoe</code>.</p> <p>Lo importante a tener en cuenta es que la clave <code>sub</code> deber\u00eda tener un identificador \u00fanico a lo largo de toda la aplicaci\u00f3n, y deber\u00eda ser un string.</p>"},{"location":"tutorial/security/oauth2-jwt/#revisa","title":"Revisa","text":"<p>Ejecuta el servidor y ve a la documentaci\u00f3n: http://127.0.0.1:8000/docs.</p> <p>Ver\u00e1s la interfaz de usuario como:</p> <p></p> <p>Autoriza la aplicaci\u00f3n de la misma manera que antes.</p> <p>Usando las credenciales:</p> <p>Usuario: <code>johndoe</code> Contrase\u00f1a: <code>secret</code></p> <p>Revisa</p> <p>Observa que en ninguna parte del c\u00f3digo est\u00e1 la contrase\u00f1a en texto claro \"<code>secret</code>\", solo tenemos la versi\u00f3n con hash.</p> <p></p> <p>Llama al endpoint <code>/users/me/</code>, obtendr\u00e1s el response como:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false\n}\n</code></pre> <p></p> <p>Si abres las herramientas de desarrollador, podr\u00edas ver c\u00f3mo los datos enviados solo incluyen el token, la contrase\u00f1a solo se env\u00eda en la primera petici\u00f3n para autenticar al usuario y obtener ese token de acceso, pero no despu\u00e9s:</p> <p></p> <p>Nota</p> <p>Observa el header <code>Authorization</code>, con un valor que comienza con <code>Bearer</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#uso-avanzado-con-scopes","title":"Uso avanzado con <code>scopes</code>","text":"<p>OAuth2 tiene la noci\u00f3n de \"scopes\".</p> <p>Puedes usarlos para agregar un conjunto espec\u00edfico de permisos a un token JWT.</p> <p>Luego, puedes darle este token directamente a un usuario o a un tercero, para interactuar con tu API con un conjunto de restricciones.</p> <p>Puedes aprender c\u00f3mo usarlos y c\u00f3mo est\u00e1n integrados en ReadyAPI m\u00e1s adelante en la Gu\u00eda de Usuario Avanzada.</p>"},{"location":"tutorial/security/oauth2-jwt/#resumen","title":"Resumen","text":"<p>Con lo que has visto hasta ahora, puedes configurar una aplicaci\u00f3n ReadyAPI segura usando est\u00e1ndares como OAuth2 y JWT.</p> <p>En casi cualquier framework el manejo de la seguridad se convierte en un tema bastante complejo r\u00e1pidamente.</p> <p>Muchos paquetes que lo simplifican tienen que hacer muchos compromisos con el modelo de datos, la base de datos y las funcionalidades disponibles. Y algunos de estos paquetes que simplifican las cosas demasiado en realidad tienen fallos de seguridad en el fondo.</p> <p>ReadyAPI no hace ning\u00fan compromiso con ninguna base de datos, modelo de datos o herramienta.</p> <p>Te da toda la flexibilidad para elegir aquellas que se ajusten mejor a tu proyecto.</p> <p>Y puedes usar directamente muchos paquetes bien mantenidos y ampliamente usados como <code>passlib</code> y <code>PyJWT</code>, porque ReadyAPI no requiere mecanismos complejos para integrar paquetes externos.</p> <p>Pero te proporciona las herramientas para simplificar el proceso tanto como sea posible sin comprometer la flexibilidad, la robustez o la seguridad.</p> <p>Y puedes usar e implementar protocolos seguros y est\u00e1ndar, como OAuth2 de una manera relativamente simple.</p> <p>Puedes aprender m\u00e1s en la Gu\u00eda de Usuario Avanzada sobre c\u00f3mo usar \"scopes\" de OAuth2, para un sistema de permisos m\u00e1s detallado, siguiendo estos mismos est\u00e1ndares. OAuth2 con scopes es el mecanismo utilizado por muchos grandes proveedores de autenticaci\u00f3n, como Facebook, Google, GitHub, Microsoft, Twitter, etc. para autorizar aplicaciones de terceros para interactuar con sus APIs en nombre de sus usuarios.</p>"},{"location":"tutorial/security/simple-oauth2/","title":"Simple OAuth2 con Password y Bearer","text":"<p>Ahora vamos a construir a partir del cap\u00edtulo anterior y agregar las partes faltantes para tener un flujo de seguridad completo.</p>"},{"location":"tutorial/security/simple-oauth2/#obtener-el-username-y-password","title":"Obtener el <code>username</code> y <code>password</code>","text":"<p>Vamos a usar las utilidades de seguridad de ReadyAPI para obtener el <code>username</code> y <code>password</code>.</p> <p>OAuth2 especifica que cuando se utiliza el \"password flow\" (que estamos usando), el cliente/usuario debe enviar campos <code>username</code> y <code>password</code> como form data.</p> <p>Y la especificaci\u00f3n dice que los campos deben llamarse as\u00ed. Por lo que <code>user-name</code> o <code>email</code> no funcionar\u00edan.</p> <p>Pero no te preocupes, puedes mostrarlo como quieras a tus usuarios finales en el frontend.</p> <p>Y tus modelos de base de datos pueden usar cualquier otro nombre que desees.</p> <p>Pero para la path operation de inicio de sesi\u00f3n, necesitamos usar estos nombres para ser compatibles con la especificaci\u00f3n (y poder, por ejemplo, utilizar el sistema de documentaci\u00f3n integrada de la API).</p> <p>La especificaci\u00f3n tambi\u00e9n establece que el <code>username</code> y <code>password</code> deben enviarse como form data (por lo que no hay JSON aqu\u00ed).</p>"},{"location":"tutorial/security/simple-oauth2/#scope","title":"<code>scope</code>","text":"<p>La especificaci\u00f3n tambi\u00e9n indica que el cliente puede enviar otro campo del formulario llamado \"<code>scope</code>\".</p> <p>El nombre del campo del formulario es <code>scope</code> (en singular), pero en realidad es un string largo con \"scopes\" separados por espacios.</p> <p>Cada \"scope\" es simplemente un string (sin espacios).</p> <p>Normalmente se utilizan para declarar permisos de seguridad espec\u00edficos, por ejemplo:</p> <ul> <li><code>users:read</code> o <code>users:write</code> son ejemplos comunes.</li> <li><code>instagram_basic</code> es usado por Facebook / Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> es usado por Google.</li> </ul> <p>Informaci\u00f3n</p> <p>En OAuth2 un \"scope\" es solo un string que declara un permiso espec\u00edfico requerido.</p> <p>No importa si tiene otros caracteres como <code>:</code> o si es una URL.</p> <p>Esos detalles son espec\u00edficos de la implementaci\u00f3n.</p> <p>Para OAuth2 son solo strings.</p>"},{"location":"tutorial/security/simple-oauth2/#codigo-para-obtener-el-username-y-password","title":"C\u00f3digo para obtener el <code>username</code> y <code>password</code>","text":"<p>Ahora vamos a usar las utilidades proporcionadas por ReadyAPI para manejar esto.</p>"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","title":"<code>OAuth2PasswordRequestForm</code>","text":"<p>Primero, importa <code>OAuth2PasswordRequestForm</code>, y \u00fasalo como una dependencia con <code>Depends</code> en la path operation para <code>/token</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p><code>OAuth2PasswordRequestForm</code> es una dependencia de clase que declara un body de formulario con:</p> <ul> <li>El <code>username</code>.</li> <li>El <code>password</code>.</li> <li>Un campo opcional <code>scope</code> como un string grande, compuesto por strings separados por espacios.</li> <li>Un <code>grant_type</code> opcional.</li> </ul> <p>Consejo</p> <p>La especificaci\u00f3n de OAuth2 en realidad requiere un campo <code>grant_type</code> con un valor fijo de <code>password</code>, pero <code>OAuth2PasswordRequestForm</code> no lo obliga.</p> <p>Si necesitas imponerlo, utiliza <code>OAuth2PasswordRequestFormStrict</code> en lugar de <code>OAuth2PasswordRequestForm</code>.</p> <ul> <li>Un <code>client_id</code> opcional (no lo necesitamos para nuestro ejemplo).</li> <li>Un <code>client_secret</code> opcional (no lo necesitamos para nuestro ejemplo).</li> </ul> <p>Informaci\u00f3n</p> <p><code>OAuth2PasswordRequestForm</code> no es una clase especial para ReadyAPI como lo es <code>OAuth2PasswordBearer</code>.</p> <p><code>OAuth2PasswordBearer</code> hace que ReadyAPI sepa que es un esquema de seguridad. As\u00ed que se a\u00f1ade de esa manera a OpenAPI.</p> <p>Pero <code>OAuth2PasswordRequestForm</code> es solo una dependencia de clase que podr\u00edas haber escrito t\u00fa mismo, o podr\u00edas haber declarado par\u00e1metros de <code>Form</code> directamente.</p> <p>Pero como es un caso de uso com\u00fan, se proporciona directamente por ReadyAPI, solo para facilitarlo.</p>"},{"location":"tutorial/security/simple-oauth2/#usa-el-form-data","title":"Usa el form data","text":"<p>Consejo</p> <p>La instance de la clase de dependencia <code>OAuth2PasswordRequestForm</code> no tendr\u00e1 un atributo <code>scope</code> con el string largo separado por espacios, en su lugar, tendr\u00e1 un atributo <code>scopes</code> con la lista real de strings para cada scope enviado.</p> <p>No estamos usando <code>scopes</code> en este ejemplo, pero la funcionalidad est\u00e1 ah\u00ed si la necesitas.</p> <p>Ahora, obt\u00e9n los datos del usuario desde la base de datos (falsa), usando el <code>username</code> del campo del form.</p> <p>Si no existe tal usuario, devolvemos un error diciendo \"Incorrect username or password\".</p> <p>Para el error, usamos la excepci\u00f3n <code>HTTPException</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#revisa-el-password","title":"Revisa el password","text":"<p>En este punto tenemos los datos del usuario de nuestra base de datos, pero no hemos revisado el password.</p> <p>Primero pongamos esos datos en el modelo <code>UserInDB</code> de Pydantic.</p> <p>Nunca deber\u00edas guardar passwords en texto plano, as\u00ed que, usaremos el sistema de hash de passwords (falso).</p> <p>Si los passwords no coinciden, devolvemos el mismo error.</p>"},{"location":"tutorial/security/simple-oauth2/#hashing-de-passwords","title":"Hashing de passwords","text":"<p>\"Hacer hash\" significa: convertir alg\u00fan contenido (un password en este caso) en una secuencia de bytes (solo un string) que parece un galimat\u00edas.</p> <p>Siempre que pases exactamente el mismo contenido (exactamente el mismo password) obtienes exactamente el mismo galimat\u00edas.</p> <p>Pero no puedes convertir del galimat\u00edas al password.</p>"},{"location":"tutorial/security/simple-oauth2/#por-que-usar-hashing-de-passwords","title":"Por qu\u00e9 usar hashing de passwords","text":"<p>Si tu base de datos es robada, el ladr\u00f3n no tendr\u00e1 los passwords en texto plano de tus usuarios, solo los hashes.</p> <p>Entonces, el ladr\u00f3n no podr\u00e1 intentar usar esos mismos passwords en otro sistema (como muchos usuarios usan el mismo password en todas partes, esto ser\u00eda peligroso).</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#sobre-user_dict","title":"Sobre <code>**user_dict</code>","text":"<p><code>UserInDB(**user_dict)</code> significa:</p> <p>Pasa las claves y valores de <code>user_dict</code> directamente como argumentos clave-valor, equivalente a:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    disabled = user_dict[\"disabled\"],\n    hashed_password = user_dict[\"hashed_password\"],\n)\n</code></pre> <p>Informaci\u00f3n</p> <p>Para una explicaci\u00f3n m\u00e1s completa de <code>**user_dict</code> revisa en la documentaci\u00f3n para Extra Models.</p>"},{"location":"tutorial/security/simple-oauth2/#devolver-el-token","title":"Devolver el token","text":"<p>El response del endpoint <code>token</code> debe ser un objeto JSON.</p> <p>Debe tener un <code>token_type</code>. En nuestro caso, como estamos usando tokens \"Bearer\", el tipo de token debe ser \"<code>bearer</code>\".</p> <p>Y debe tener un <code>access_token</code>, con un string que contenga nuestro token de acceso.</p> <p>Para este ejemplo simple, vamos a ser completamente inseguros y devolver el mismo <code>username</code> como el token.</p> <p>Consejo</p> <p>En el pr\u00f3ximo cap\u00edtulo, ver\u00e1s una implementaci\u00f3n segura real, con hashing de passwords y tokens JWT.</p> <p>Pero por ahora, enfoqu\u00e9monos en los detalles espec\u00edficos que necesitamos.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Consejo</p> <p>De acuerdo con la especificaci\u00f3n, deber\u00edas devolver un JSON con un <code>access_token</code> y un <code>token_type</code>, igual que en este ejemplo.</p> <p>Esto es algo que tienes que hacer t\u00fa mismo en tu c\u00f3digo, y asegurarte de usar esas claves JSON.</p> <p>Es casi lo \u00fanico que tienes que recordar hacer correctamente t\u00fa mismo, para ser compatible con las especificaciones.</p> <p>Para el resto, ReadyAPI lo maneja por ti.</p>"},{"location":"tutorial/security/simple-oauth2/#actualizar-las-dependencias","title":"Actualizar las dependencias","text":"<p>Ahora vamos a actualizar nuestras dependencias.</p> <p>Queremos obtener el <code>current_user</code> solo si este usuario est\u00e1 activo.</p> <p>Entonces, creamos una dependencia adicional <code>get_current_active_user</code> que a su vez utiliza <code>get_current_user</code> como dependencia.</p> <p>Ambas dependencias solo devolver\u00e1n un error HTTP si el usuario no existe, o si est\u00e1 inactivo.</p> <p>As\u00ed que, en nuestro endpoint, solo obtendremos un usuario si el usuario existe, fue autenticado correctamente, y est\u00e1 activo:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Informaci\u00f3n</p> <p>El header adicional <code>WWW-Authenticate</code> con el valor <code>Bearer</code> que estamos devolviendo aqu\u00ed tambi\u00e9n es parte de la especificaci\u00f3n.</p> <p>Cualquier c\u00f3digo de estado HTTP (error) 401 \"UNAUTHORIZED\" se supone que tambi\u00e9n debe devolver un header <code>WWW-Authenticate</code>.</p> <p>En el caso de tokens bearer (nuestro caso), el valor de ese header debe ser <code>Bearer</code>.</p> <p>De hecho, puedes omitir ese header extra y a\u00fan funcionar\u00eda.</p> <p>Pero se proporciona aqu\u00ed para cumplir con las especificaciones.</p> <p>Adem\u00e1s, podr\u00eda haber herramientas que lo esperen y lo usen (ahora o en el futuro) y eso podr\u00eda ser \u00fatil para ti o tus usuarios, ahora o en el futuro.</p> <p>Ese es el beneficio de los est\u00e1ndares...</p>"},{"location":"tutorial/security/simple-oauth2/#verlo-en-accion","title":"Verlo en acci\u00f3n","text":"<p>Abre la documentaci\u00f3n interactiva: http://127.0.0.1:8000/docs.</p>"},{"location":"tutorial/security/simple-oauth2/#autenticar","title":"Autenticar","text":"<p>Haz clic en el bot\u00f3n \"Authorize\".</p> <p>Usa las credenciales:</p> <p>Usuario: <code>johndoe</code></p> <p>Contrase\u00f1a: <code>secret</code></p> <p></p> <p>Despu\u00e9s de autenticarte en el sistema, lo ver\u00e1s as\u00ed:</p> <p></p>"},{"location":"tutorial/security/simple-oauth2/#obtener-tus-propios-datos-de-usuario","title":"Obtener tus propios datos de usuario","text":"<p>Ahora usa la operaci\u00f3n <code>GET</code> con la path <code>/users/me</code>.</p> <p>Obtendr\u00e1s los datos de tu usuario, como:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false,\n  \"hashed_password\": \"fakehashedsecret\"\n}\n</code></pre> <p></p> <p>Si haces clic en el icono de candado y cierras sesi\u00f3n, y luego intentas la misma operaci\u00f3n nuevamente, obtendr\u00e1s un error HTTP 401 de:</p> <pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#usuario-inactivo","title":"Usuario inactivo","text":"<p>Ahora prueba con un usuario inactivo, autent\u00edcate con:</p> <p>Usuario: <code>alice</code></p> <p>Contrase\u00f1a: <code>secret2</code></p> <p>Y trata de usar la operaci\u00f3n <code>GET</code> con la path <code>/users/me</code>.</p> <p>Obtendr\u00e1s un error de \"Usuario inactivo\", como:</p> <pre><code>{\n  \"detail\": \"Inactive user\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#recapitulacion","title":"Recapitulaci\u00f3n","text":"<p>Ahora tienes las herramientas para implementar un sistema de seguridad completo basado en <code>username</code> y <code>password</code> para tu API.</p> <p>Usando estas herramientas, puedes hacer que el sistema de seguridad sea compatible con cualquier base de datos y con cualquier modelo de usuario o de datos.</p> <p>El \u00fanico detalle que falta es que en realidad no es \"seguro\" a\u00fan.</p> <p>En el pr\u00f3ximo cap\u00edtulo ver\u00e1s c\u00f3mo usar un paquete de hashing de passwords seguro y tokens JWT.</p>"},{"location":"reference/","title":"Reference","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the ReadyAPI parts you can use in your applications.</p> <p>If you want to learn ReadyAPI you are much better off reading the ReadyAPI Tutorial.</p>"},{"location":"reference/readyapi/","title":"<code>ReadyAPI</code> class","text":"<p>Here's the reference information for the <code>ReadyAPI</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>ReadyAPI</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI","title":"readyapi.ReadyAPI","text":"<pre><code>ReadyAPI(\n    *,\n    debug=False,\n    routes=None,\n    title=\"ReadyAPI\",\n    summary=None,\n    description=\"\",\n    version=\"0.1.0\",\n    openapi_url=\"/openapi.json\",\n    openapi_tags=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    redirect_slashes=True,\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    swagger_ui_oauth2_redirect_url=\"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth=None,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    terms_of_service=None,\n    contact=None,\n    license_info=None,\n    openapi_prefix=\"\",\n    root_path=\"\",\n    root_path_in_servers=True,\n    responses=None,\n    callbacks=None,\n    webhooks=None,\n    deprecated=None,\n    include_in_schema=True,\n    swagger_ui_parameters=None,\n    generate_unique_id_function=Default(generate_unique_id),\n    separate_input_output_schemas=True,\n    **extra\n)\n</code></pre> <p>               Bases: <code>Starlette</code></p> <p><code>ReadyAPI</code> app class, the main entrypoint to use ReadyAPI.</p> <p>Read more in the ReadyAPI docs for First Steps.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n</code></pre> PARAMETER DESCRIPTION <code>debug</code> <p>Boolean indicating if debug tracebacks should be returned on server errors.</p> <p>Read more in the Starlette docs for Applications.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>routes</code> <p>You normally wouldn't use this parameter with ReadyAPI, it is inherited from Starlette and supported for compatibility.</p> <p>In ReadyAPI, you normally would use the path operation methods, like <code>app.get()</code>, <code>app.post()</code>, etc. Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>The title of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(title=\"ChimichangApp\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'ReadyAPI'</code> </p> <code>summary</code> <p>A short summary of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the API. Supports Markdown (using CommonMark syntax).</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    description=\"\"\"\n                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                ## Items\n\n                You can **read items**.\n\n                ## Users\n\n                You will be able to:\n\n                * **Create users** (_not implemented_).\n                * **Read users** (_not implemented_).\n\n                \"\"\"\n)\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>The version of the API.</p> <p>Note This is the version of your application, not the version of the OpenAPI specification nor the version of ReadyAPI being used.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(version=\"0.0.1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'0.1.0'</code> </p> <code>openapi_url</code> <p>The URL where the OpenAPI schema will be served from.</p> <p>If you set it to <code>None</code>, no OpenAPI schema will be served publicly, and the default automatic endpoints <code>/docs</code> and <code>/redoc</code> will also be disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/openapi.json'</code> </p> <code>openapi_tags</code> <p>A list of tags used by OpenAPI, these are the same <code>tags</code> you can set in the path operations, like:</p> <ul> <li><code>@app.get(\"/users/\", tags=[\"users\"])</code></li> <li><code>@app.get(\"/items/\", tags=[\"items\"])</code></li> </ul> <p>The order of the tags can be used to specify the order shown in tools like Swagger UI, used in the automatic path <code>/docs</code>.</p> <p>It's not required to specify all the tags used.</p> <p>The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</p> <p>The value of each item is a <code>dict</code> containing:</p> <ul> <li><code>name</code>: The name of the tag.</li> <li><code>description</code>: A short description of the tag.     CommonMark syntax MAY be used for rich     text representation.</li> <li><code>externalDocs</code>: Additional external documentation for this tag. If     provided, it would contain a <code>dict</code> with:<ul> <li><code>description</code>: A short description of the target documentation.     CommonMark syntax MAY be used for     rich text representation.</li> <li><code>url</code>: The URL for the target documentation. Value MUST be in     the form of a URL.</li> </ul> </li> </ul> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.khulnasoft.com/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>servers</code> <p>A <code>list</code> of <code>dict</code>s with connectivity information to a target server.</p> <p>You would use it, for example, if your application is served from different domains and you want to use the same Swagger UI in the browser to interact with each of them (instead of having multiple browser tabs open). Or if you want to leave fixed the possible URLs.</p> <p>If the servers <code>list</code> is not provided, or is an empty <code>list</code>, the default value would be a <code>dict</code> with a <code>url</code> value of <code>/</code>.</p> <p>Each item in the <code>list</code> is a <code>dict</code> containing:</p> <ul> <li><code>url</code>: A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</li> <li><code>description</code>: An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.</li> <li><code>variables</code>: A <code>dict</code> between a variable name and its value. The value     is used for substitution in the server's URL template.</li> </ul> <p>Read more in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Union[str, Any]]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of global dependencies, they will be applied to each path operation, including in sub-routers.</p> <p>Read more about it in the ReadyAPI docs for Global Dependencies.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import func_dep_1, func_dep_2\n\napp = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(redirect_slashes=True)  # the default\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>With this app, if a client goes to <code>/items</code> (without a trailing slash), they will be automatically redirected with an HTTP status code of 307 to <code>/items/</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>docs_url</code> <p>The path to the automatic interactive API documentation. It is handled in the browser by Swagger UI.</p> <p>The default URL is <code>/docs</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs'</code> </p> <code>redoc_url</code> <p>The path to the alternative automatic interactive API documentation provided by ReDoc.</p> <p>The default URL is <code>/redoc</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/redoc'</code> </p> <code>swagger_ui_oauth2_redirect_url</code> <p>The OAuth2 redirect endpoint for the Swagger UI.</p> <p>By default it is <code>/docs/oauth2-redirect</code>.</p> <p>This is only used if you use OAuth2 (with the \"Authorize\" button) with Swagger UI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs/oauth2-redirect'</code> </p> <code>swagger_ui_init_oauth</code> <p>OAuth2 configuration for the Swagger UI, by default shown at <code>/docs</code>.</p> <p>Read more about the available configuration options in the Swagger UI docs.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>middleware</code> <p>List of middleware to be added when creating the application.</p> <p>In ReadyAPI you would normally do this with <code>app.add_middleware()</code> instead.</p> <p>Read more in the ReadyAPI docs for Middleware.</p> <p> TYPE: <code>Optional[Sequence[Middleware]]</code> DEFAULT: <code>None</code> </p> <code>exception_handlers</code> <p>A dictionary with handlers for exceptions.</p> <p>In ReadyAPI, you would normally use the decorator <code>@app.exception_handler()</code>.</p> <p>Read more in the ReadyAPI docs for Handling Errors.</p> <p> TYPE: <code>Optional[Dict[Union[int, Type[Exception]], Callable[[Request, Any], Coroutine[Any, Any, Response]]]]</code> DEFAULT: <code>None</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[AppType]]</code> DEFAULT: <code>None</code> </p> <code>terms_of_service</code> <p>A URL to the Terms of Service for your API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact</code> <p>A dictionary with the contact information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) The name of the contact person/organization.</li> <li><code>url</code>: (<code>str</code>) A URL pointing to the contact information. MUST be in     the format of a URL.</li> <li><code>email</code>: (<code>str</code>) The email address of the contact person/organization.     MUST be in the format of an email address.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>license_info</code> <p>A dictionary with the license information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) REQUIRED (if a <code>license_info</code> is set). The     license name used for the API.</li> <li><code>identifier</code>: (<code>str</code>) An SPDX license expression     for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code>     field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</li> <li><code>url</code>: (<code>str</code>) A URL to the license used for the API. This MUST be     the format of a URL.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>openapi_prefix</code> <p>\"openapi_prefix\" has been deprecated in favor of \"root_path\", which follows more closely the ASGI standard, is simpler, and more automatic. A URL prefix for the OpenAPI URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path</code> <p>A path prefix handled by a proxy that is not seen by the application but is seen by external clients, which affects things like Swagger UI.</p> <p>Read more about it at the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path=\"/api/v1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path_in_servers</code> <p>To disable automatically generating the URLs in the <code>servers</code> field in the autogenerated OpenAPI using the <code>root_path</code>.</p> <p>Read more about it in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path_in_servers=False)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>webhooks</code> <p>Add OpenAPI webhooks. This is similar to <code>callbacks</code> but it doesn't depend on specific path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Note: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p> <p> TYPE: <code>Optional[APIRouter]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations as deprecated. You probably don't need it, but it's available.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>swagger_ui_parameters</code> <p>Parameters to configure Swagger UI, the autogenerated interactive API documentation (by default at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs about how to Configure Swagger UI.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> <code>separate_input_output_schemas</code> <p>Whether to generate separate OpenAPI schemas for request body and response body when the results would be more precise.</p> <p>This is particularly useful when automatically generating clients.</p> <p>For example, if you have a model like:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str] = []\n</code></pre> <p>When <code>Item</code> is used for input, a request body, <code>tags</code> is not required, the client doesn't have to provide it.</p> <p>But when using <code>Item</code> for output, for a response body, <code>tags</code> is always available because it has a default value, even if it's just an empty list. So, the client should be able to always expect it.</p> <p>In this case, there would be two different schemas, one for input and another one for output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**extra</code> <p>Extra keyword arguments to be stored in the app, not used by ReadyAPI anywhere.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The title of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(title=\"ChimichangApp\")\n            ```\n            \"\"\"\n        ),\n    ] = \"ReadyAPI\",\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A short summary of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            '''\n            A description of the API. Supports Markdown (using\n            [CommonMark syntax](https://commonmark.org/)).\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                description=\"\"\"\n                            ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                            ## Items\n\n                            You can **read items**.\n\n                            ## Users\n\n                            You will be able to:\n\n                            * **Create users** (_not implemented_).\n                            * **Read users** (_not implemented_).\n\n                            \"\"\"\n            )\n            ```\n            '''\n        ),\n    ] = \"\",\n    version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version of the API.\n\n            **Note** This is the version of your application, not the version of\n            the OpenAPI specification nor the version of ReadyAPI being used.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(version=\"0.0.1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"0.1.0\",\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            If you set it to `None`, no OpenAPI schema will be served publicly, and\n            the default automatic endpoints `/docs` and `/redoc` will also be\n            disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#openapi-url).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/openapi.json\",\n    openapi_tags: Annotated[\n        Optional[List[Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            A list of tags used by OpenAPI, these are the same `tags` you can set\n            in the *path operations*, like:\n\n            * `@app.get(\"/users/\", tags=[\"users\"])`\n            * `@app.get(\"/items/\", tags=[\"items\"])`\n\n            The order of the tags can be used to specify the order shown in\n            tools like Swagger UI, used in the automatic path `/docs`.\n\n            It's not required to specify all the tags used.\n\n            The tags that are not declared MAY be organized randomly or based\n            on the tools' logic. Each tag name in the list MUST be unique.\n\n            The value of each item is a `dict` containing:\n\n            * `name`: The name of the tag.\n            * `description`: A short description of the tag.\n                [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                text representation.\n            * `externalDocs`: Additional external documentation for this tag. If\n                provided, it would contain a `dict` with:\n                * `description`: A short description of the target documentation.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for\n                    rich text representation.\n                * `url`: The URL for the target documentation. Value MUST be in\n                    the form of a URL.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-tags).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            tags_metadata = [\n                {\n                    \"name\": \"users\",\n                    \"description\": \"Operations with users. The **login** logic is also here.\",\n                },\n                {\n                    \"name\": \"items\",\n                    \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                    \"externalDocs\": {\n                        \"description\": \"Items external docs\",\n                        \"url\": \"https://readyapi.khulnasoft.com/\",\n                    },\n                },\n            ]\n\n            app = ReadyAPI(openapi_tags=tags_metadata)\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [ReadyAPI docs for Global Dependencies](https://readyapi.khulnasoft.com/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            app = ReadyAPI(default_response_class=ORJSONResponse)\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the automatic interactive API documentation.\n            It is handled in the browser by Swagger UI.\n\n            The default URL is `/docs`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n            ```\n            \"\"\"\n        ),\n    ] = \"/docs\",\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the alternative automatic interactive API documentation\n            provided by ReDoc.\n\n            The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect endpoint for the Swagger UI.\n\n            By default it is `/docs/oauth2-redirect`.\n\n            This is only used if you use OAuth2 (with the \"Authorize\" button)\n            with Swagger UI.\n            \"\"\"\n        ),\n    ] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n            Read more about the available configuration options in the\n            [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n            \"\"\"\n        ),\n    ] = None,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In ReadyAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [ReadyAPI docs for Middleware](https://readyapi.khulnasoft.com/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In ReadyAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [ReadyAPI docs for Handling Errors](https://readyapi.khulnasoft.com/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    terms_of_service: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A URL to the Terms of Service for your API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    contact: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the contact information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) The name of the contact person/organization.\n            * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                the format of a URL.\n            * `email`: (`str`) The email address of the contact person/organization.\n                MUST be in the format of an email address.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                contact={\n                    \"name\": \"Deadpoolio the Amazing\",\n                    \"url\": \"http://x-force.example.com/contact/\",\n                    \"email\": \"dp@x-force.example.com\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    license_info: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the license information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                license name used for the API.\n            * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                for the API. The `identifier` field is mutually exclusive of the `url`\n                field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n            * `url`: (`str`) A URL to the license used for the API. This MUST be\n                the format of a URL.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.khulnasoft.com/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                license_info={\n                    \"name\": \"Apache 2.0\",\n                    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    openapi_prefix: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A URL prefix for the OpenAPI URL.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n            follows more closely the ASGI standard, is simpler, and more\n            automatic.\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A path prefix handled by a proxy that is not seen by the application\n            but is seen by external clients, which affects things like Swagger UI.\n\n            Read more about it at the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path=\"/api/v1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path_in_servers: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To disable automatically generating the URLs in the `servers` field\n            in the autogenerated OpenAPI using the `root_path`.\n\n            Read more about it in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.khulnasoft.com/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path_in_servers=False)\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.khulnasoft.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Parameters to configure Swagger UI, the autogenerated interactive API\n            documentation (by default at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs about how to Configure Swagger UI](https://readyapi.khulnasoft.com/how-to/configure-swagger-ui/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    separate_input_output_schemas: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to generate separate OpenAPI schemas for request body and\n            response body when the results would be more precise.\n\n            This is particularly useful when automatically generating clients.\n\n            For example, if you have a model like:\n\n            ```python\n            from pydantic import BaseModel\n\n            class Item(BaseModel):\n                name: str\n                tags: list[str] = []\n            ```\n\n            When `Item` is used for input, a request body, `tags` is not required,\n            the client doesn't have to provide it.\n\n            But when using `Item` for output, for a response body, `tags` is always\n            available because it has a default value, even if it's just an empty\n            list. So, the client should be able to always expect it.\n\n            In this case, there would be two different schemas, one for input and\n            another one for output.\n            \"\"\"\n        ),\n    ] = True,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by ReadyAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    self.debug = debug\n    self.title = title\n    self.summary = summary\n    self.description = description\n    self.version = version\n    self.terms_of_service = terms_of_service\n    self.contact = contact\n    self.license_info = license_info\n    self.openapi_url = openapi_url\n    self.openapi_tags = openapi_tags\n    self.root_path_in_servers = root_path_in_servers\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.swagger_ui_parameters = swagger_ui_parameters\n    self.servers = servers or []\n    self.separate_input_output_schemas = separate_input_output_schemas\n    self.extra = extra\n    self.openapi_version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version string of OpenAPI.\n\n            ReadyAPI will generate OpenAPI version 3.1.0, and will output that as\n            the OpenAPI version. But some tools, even though they might be\n            compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n            So you could override this value to trick those tools into using\n            the generated OpenAPI. Have in mind that this is a hack. But if you\n            avoid using features added in OpenAPI 3.1.0, it might work for your\n            use case.\n\n            This is not passed as a parameter to the `ReadyAPI` class to avoid\n            giving the false idea that ReadyAPI would generate a different OpenAPI\n            schema. It is only available as an attribute.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI()\n\n            app.openapi_version = \"3.0.2\"\n            ```\n            \"\"\"\n        ),\n    ] = \"3.1.0\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    # TODO: remove when discarding the openapi_prefix parameter\n    if openapi_prefix:\n        logger.warning(\n            '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n            \"follows more closely the ASGI standard, is simpler, and more \"\n            \"automatic. Check the docs at \"\n            \"https://readyapi.khulnasoft.com/advanced/sub-applications/\"\n        )\n    self.webhooks: Annotated[\n        routing.APIRouter,\n        Doc(\n            \"\"\"\n            The `app.webhooks` attribute is an `APIRouter` with the *path\n            operations* that will be used just for documentation of webhooks.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.khulnasoft.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = webhooks or routing.APIRouter()\n    self.root_path = root_path or openapi_prefix\n    self.state: Annotated[\n        State,\n        Doc(\n            \"\"\"\n            A state object for the application. This is the same object for the\n            entire application, it doesn't change from request to request.\n\n            You normally wouldn't use this in ReadyAPI, for most of the cases you\n            would instead use ReadyAPI dependencies.\n\n            This is simply inherited from Starlette.\n\n            Read more about it in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n            \"\"\"\n        ),\n    ] = State()\n    self.dependency_overrides: Annotated[\n        Dict[Callable[..., Any], Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A dictionary with overrides for the dependencies.\n\n            Each key is the original dependency callable, and the value is the\n            actual dependency that should be called.\n\n            This is for testing, to replace expensive dependencies with testing\n            versions.\n\n            Read more about it in the\n            [ReadyAPI docs for Testing Dependencies with Overrides](https://readyapi.khulnasoft.com/advanced/testing-dependencies/).\n            \"\"\"\n        ),\n    ] = {}\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        default_response_class=default_response_class,\n        dependencies=dependencies,\n        callbacks=callbacks,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        responses=responses,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    self.exception_handlers: Dict[\n        Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n    ] = {} if exception_handlers is None else dict(exception_handlers)\n    self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n    self.exception_handlers.setdefault(\n        RequestValidationError, request_validation_exception_handler\n    )\n    self.exception_handlers.setdefault(\n        WebSocketRequestValidationError,\n        # Starlette still has incorrect type specification for the handlers\n        websocket_request_validation_exception_handler,  # type: ignore\n    )\n\n    self.user_middleware: List[Middleware] = (\n        [] if middleware is None else list(middleware)\n    )\n    self.middleware_stack: Union[ASGIApp, None] = None\n    self.setup()\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi_version","title":"openapi_version  <code>instance-attribute</code>","text":"<pre><code>openapi_version = '3.1.0'\n</code></pre> <p>The version string of OpenAPI.</p> <p>ReadyAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.</p> <p>So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.</p> <p>This is not passed as a parameter to the <code>ReadyAPI</code> class to avoid giving the false idea that ReadyAPI would generate a different OpenAPI schema. It is only available as an attribute.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\napp.openapi_version = \"3.0.2\"\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.webhooks","title":"webhooks  <code>instance-attribute</code>","text":"<pre><code>webhooks = webhooks or APIRouter()\n</code></pre> <p>The <code>app.webhooks</code> attribute is an <code>APIRouter</code> with the path operations that will be used just for documentation of webhooks.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state = State()\n</code></pre> <p>A state object for the application. This is the same object for the entire application, it doesn't change from request to request.</p> <p>You normally wouldn't use this in ReadyAPI, for most of the cases you would instead use ReadyAPI dependencies.</p> <p>This is simply inherited from Starlette.</p> <p>Read more about it in the Starlette docs for Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.dependency_overrides","title":"dependency_overrides  <code>instance-attribute</code>","text":"<pre><code>dependency_overrides = {}\n</code></pre> <p>A dictionary with overrides for the dependencies.</p> <p>Each key is the original dependency callable, and the value is the actual dependency that should be called.</p> <p>This is for testing, to replace expensive dependencies with testing versions.</p> <p>Read more about it in the ReadyAPI docs for Testing Dependencies with Overrides.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi","title":"openapi","text":"<pre><code>openapi()\n</code></pre> <p>Generate the OpenAPI schema of the application. This is called by ReadyAPI internally.</p> <p>The first time it is called it stores the result in the attribute <code>app.openapi_schema</code>, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.</p> <p>If you need to modify the generated OpenAPI schema, you could modify it.</p> <p>Read more in the ReadyAPI docs for OpenAPI.</p> Source code in <code>readyapi/applications.py</code> <pre><code>def openapi(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Generate the OpenAPI schema of the application. This is called by ReadyAPI\n    internally.\n\n    The first time it is called it stores the result in the attribute\n    `app.openapi_schema`, and next times it is called, it just returns that same\n    result. To avoid the cost of generating the schema every time.\n\n    If you need to modify the generated OpenAPI schema, you could modify it.\n\n    Read more in the\n    [ReadyAPI docs for OpenAPI](https://readyapi.khulnasoft.com/how-to/extending-openapi/).\n    \"\"\"\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            summary=self.summary,\n            description=self.description,\n            terms_of_service=self.terms_of_service,\n            contact=self.contact,\n            license_info=self.license_info,\n            routes=self.routes,\n            webhooks=self.webhooks.routes,\n            tags=self.openapi_tags,\n            servers=self.servers,\n            separate_input_output_schemas=self.separate_input_output_schemas,\n        )\n    return self.openapi_schema\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI, WebSocket\n\napp = ReadyAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n\n    **Example**\n\n    ```python\n    from readyapi import ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n\n    @app.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path,\n            func,\n            name=name,\n            dependencies=dependencies,\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    responses=None,\n    deprecated=None,\n    include_in_schema=True,\n    default_response_class=Default(JSONResponse),\n    callbacks=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include an <code>APIRouter</code> in the same app.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\nfrom .users import users_router\n\napp = ReadyAPI()\n\napp.include_router(users_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_token_header\nfrom .internal import admin\n\napp = ReadyAPI()\n\napp.include_router(\n    admin.router,\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all the path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    deprecated=True,\n)\n</code></pre> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    include_in_schema=False,\n)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default_response_class</code> <p>Default response class to be used for the path operations in this router.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    default_response_class=ORJSONResponse,\n)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import get_token_header\n            from .internal import admin\n\n            app = ReadyAPI()\n\n            app.include_router(\n                admin.router,\n                dependencies=[Depends(get_token_header)],\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all the *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                deprecated=True,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                include_in_schema=False,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Default response class to be used for the *path operations* in this\n            router.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                default_response_class=ORJSONResponse,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include an `APIRouter` in the same app.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    from .users import users_router\n\n    app = ReadyAPI()\n\n    app.include_router(users_router)\n    ```\n    \"\"\"\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        default_response_class=default_response_class,\n        callbacks=callbacks,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n    ```\n    \"\"\"\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n    ```\n    \"\"\"\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n    ```\n    \"\"\"\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n    ```\n    \"\"\"\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n    ```\n    \"\"\"\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n@app.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Response\n\n    app = ReadyAPI()\n\n    @app.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n    ```\n    \"\"\"\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n    ```\n    \"\"\"\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n    ```\n    \"\"\"\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the application.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the application.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n    return self.router.on_event(event_type)\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware","title":"middleware","text":"<pre><code>middleware(middleware_type)\n</code></pre> <p>Add a middleware to the application.</p> <p>Read more about it in the ReadyAPI docs for Middleware.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware--example","title":"Example","text":"<pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> PARAMETER DESCRIPTION <code>middleware_type</code> <p>The type of middleware. Currently only supports <code>http</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def middleware(\n    self,\n    middleware_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of middleware. Currently only supports `http`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a middleware to the application.\n\n    Read more about it in the\n    [ReadyAPI docs for Middleware](https://readyapi.khulnasoft.com/tutorial/middleware/).\n\n    ## Example\n\n    ```python\n    import time\n\n    from readyapi import ReadyAPI, Request\n\n    app = ReadyAPI()\n\n\n    @app.middleware(\"http\")\n    async def add_process_time_header(request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc_class_or_status_code)\n</code></pre> <p>Add an exception handler to the app.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n</code></pre> PARAMETER DESCRIPTION <code>exc_class_or_status_code</code> <p>The Exception class this would handle, or a status code.</p> <p> TYPE: <code>Union[int, Type[Exception]]</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def exception_handler(\n    self,\n    exc_class_or_status_code: Annotated[\n        Union[int, Type[Exception]],\n        Doc(\n            \"\"\"\n            The Exception class this would handle, or a status code.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an exception handler to the app.\n\n    Read more about it in the\n    [ReadyAPI docs for Handling Errors](https://readyapi.khulnasoft.com/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Request\n    from readyapi.responses import JSONResponse\n\n\n    class UnicornException(Exception):\n        def __init__(self, name: str):\n            self.name = name\n\n\n    app = ReadyAPI()\n\n\n    @app.exception_handler(UnicornException)\n    async def unicorn_exception_handler(request: Request, exc: UnicornException):\n        return JSONResponse(\n            status_code=418,\n            content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n        )\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_exception_handler(exc_class_or_status_code, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/parameters/","title":"Request Parameters","text":"<p>Here's the reference information for the request parameters.</p> <p>These are the special functions that you can put in path operation function parameters or dependency functions with <code>Annotated</code> to get data from the request.</p> <p>It includes:</p> <ul> <li><code>Query()</code></li> <li><code>Path()</code></li> <li><code>Body()</code></li> <li><code>Cookie()</code></li> <li><code>Header()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>You can import them all directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Body, Cookie, File, Form, Header, Path, Query\n</code></pre>"},{"location":"reference/parameters/#readyapi.Query","title":"readyapi.Query","text":"<pre><code>Query(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Path","title":"readyapi.Path","text":"<pre><code>Path(\n    default=...,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> <p>Declare a path parameter for a path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Parameters and Numeric Validations.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Path\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n):\n    return {\"item_id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>...</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [ReadyAPI docs for Path Parameters and Numeric Validations](https://readyapi.khulnasoft.com/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import ReadyAPI, Path\n\n    app = ReadyAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Body","title":"readyapi.Body","text":"<pre><code>Body(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    embed=None,\n    media_type=\"application/json\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>embed</code> <p>When <code>embed</code> is <code>True</code>, the parameter will be expected in a JSON body as a key instead of being the JSON body itself.</p> <p>This happens automatically when more than one <code>Body</code> parameter is declared.</p> <p>Read more about it in the ReadyAPI docs for Body - Multiple Parameters.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/json'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [ReadyAPI docs for Body - Multiple Parameters](https://readyapi.khulnasoft.com/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Cookie","title":"readyapi.Cookie","text":"<pre><code>Cookie(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Header","title":"readyapi.Header","text":"<pre><code>Header(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    convert_underscores=True,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>convert_underscores</code> <p>Automatically convert underscores to hyphens in the parameter field name.</p> <p>Read more about it in the ReadyAPI docs for Header Parameters</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [ReadyAPI docs for Header Parameters](https://readyapi.khulnasoft.com/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Form","title":"readyapi.Form","text":"<pre><code>Form(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"application/x-www-form-urlencoded\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/x-www-form-urlencoded'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.File","title":"readyapi.File","text":"<pre><code>File(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"multipart/form-data\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'multipart/form-data'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.khulnasoft.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/status/","title":"Status Codes","text":"<p>You can import the <code>status</code> module from <code>readyapi</code>:</p> <pre><code>from readyapi import status\n</code></pre> <p><code>status</code> is provided directly by Starlette.</p> <p>It contains a group of named constants (variables) with integer status codes.</p> <p>For example:</p> <ul> <li>200: <code>status.HTTP_200_OK</code></li> <li>403: <code>status.HTTP_403_FORBIDDEN</code></li> <li>etc.</li> </ul> <p>It can be convenient to quickly access HTTP (and WebSocket) status codes in your app, using autocompletion for the name without having to remember the integer status codes by memory.</p> <p>Read more about it in the ReadyAPI docs about Response Status Code.</p>"},{"location":"reference/status/#example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n</code></pre>"},{"location":"reference/status/#readyapi.status","title":"readyapi.status","text":"<p>HTTP codes See HTTP Status Code Registry: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p>And RFC 2324 - https://tools.ietf.org/html/rfc2324</p>"},{"location":"reference/status/#readyapi.status.HTTP_100_CONTINUE","title":"HTTP_100_CONTINUE  <code>module-attribute</code>","text":"<pre><code>HTTP_100_CONTINUE = 100\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_101_SWITCHING_PROTOCOLS","title":"HTTP_101_SWITCHING_PROTOCOLS  <code>module-attribute</code>","text":"<pre><code>HTTP_101_SWITCHING_PROTOCOLS = 101\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_102_PROCESSING","title":"HTTP_102_PROCESSING  <code>module-attribute</code>","text":"<pre><code>HTTP_102_PROCESSING = 102\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_103_EARLY_HINTS","title":"HTTP_103_EARLY_HINTS  <code>module-attribute</code>","text":"<pre><code>HTTP_103_EARLY_HINTS = 103\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_200_OK","title":"HTTP_200_OK  <code>module-attribute</code>","text":"<pre><code>HTTP_200_OK = 200\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_201_CREATED","title":"HTTP_201_CREATED  <code>module-attribute</code>","text":"<pre><code>HTTP_201_CREATED = 201\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_202_ACCEPTED","title":"HTTP_202_ACCEPTED  <code>module-attribute</code>","text":"<pre><code>HTTP_202_ACCEPTED = 202\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_203_NON_AUTHORITATIVE_INFORMATION","title":"HTTP_203_NON_AUTHORITATIVE_INFORMATION  <code>module-attribute</code>","text":"<pre><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_204_NO_CONTENT","title":"HTTP_204_NO_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_204_NO_CONTENT = 204\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_205_RESET_CONTENT","title":"HTTP_205_RESET_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_205_RESET_CONTENT = 205\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_206_PARTIAL_CONTENT","title":"HTTP_206_PARTIAL_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_206_PARTIAL_CONTENT = 206\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_207_MULTI_STATUS","title":"HTTP_207_MULTI_STATUS  <code>module-attribute</code>","text":"<pre><code>HTTP_207_MULTI_STATUS = 207\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_208_ALREADY_REPORTED","title":"HTTP_208_ALREADY_REPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_208_ALREADY_REPORTED = 208\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_226_IM_USED","title":"HTTP_226_IM_USED  <code>module-attribute</code>","text":"<pre><code>HTTP_226_IM_USED = 226\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_300_MULTIPLE_CHOICES","title":"HTTP_300_MULTIPLE_CHOICES  <code>module-attribute</code>","text":"<pre><code>HTTP_300_MULTIPLE_CHOICES = 300\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_301_MOVED_PERMANENTLY","title":"HTTP_301_MOVED_PERMANENTLY  <code>module-attribute</code>","text":"<pre><code>HTTP_301_MOVED_PERMANENTLY = 301\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_302_FOUND","title":"HTTP_302_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_302_FOUND = 302\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_303_SEE_OTHER","title":"HTTP_303_SEE_OTHER  <code>module-attribute</code>","text":"<pre><code>HTTP_303_SEE_OTHER = 303\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_304_NOT_MODIFIED","title":"HTTP_304_NOT_MODIFIED  <code>module-attribute</code>","text":"<pre><code>HTTP_304_NOT_MODIFIED = 304\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_305_USE_PROXY","title":"HTTP_305_USE_PROXY  <code>module-attribute</code>","text":"<pre><code>HTTP_305_USE_PROXY = 305\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_306_RESERVED","title":"HTTP_306_RESERVED  <code>module-attribute</code>","text":"<pre><code>HTTP_306_RESERVED = 306\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_307_TEMPORARY_REDIRECT","title":"HTTP_307_TEMPORARY_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_307_TEMPORARY_REDIRECT = 307\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_308_PERMANENT_REDIRECT","title":"HTTP_308_PERMANENT_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_308_PERMANENT_REDIRECT = 308\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_400_BAD_REQUEST","title":"HTTP_400_BAD_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_400_BAD_REQUEST = 400\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_401_UNAUTHORIZED","title":"HTTP_401_UNAUTHORIZED  <code>module-attribute</code>","text":"<pre><code>HTTP_401_UNAUTHORIZED = 401\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_402_PAYMENT_REQUIRED","title":"HTTP_402_PAYMENT_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_402_PAYMENT_REQUIRED = 402\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_403_FORBIDDEN","title":"HTTP_403_FORBIDDEN  <code>module-attribute</code>","text":"<pre><code>HTTP_403_FORBIDDEN = 403\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_404_NOT_FOUND","title":"HTTP_404_NOT_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_404_NOT_FOUND = 404\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_405_METHOD_NOT_ALLOWED","title":"HTTP_405_METHOD_NOT_ALLOWED  <code>module-attribute</code>","text":"<pre><code>HTTP_405_METHOD_NOT_ALLOWED = 405\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_406_NOT_ACCEPTABLE","title":"HTTP_406_NOT_ACCEPTABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_406_NOT_ACCEPTABLE = 406\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_407_PROXY_AUTHENTICATION_REQUIRED","title":"HTTP_407_PROXY_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_408_REQUEST_TIMEOUT","title":"HTTP_408_REQUEST_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_408_REQUEST_TIMEOUT = 408\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_409_CONFLICT","title":"HTTP_409_CONFLICT  <code>module-attribute</code>","text":"<pre><code>HTTP_409_CONFLICT = 409\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_410_GONE","title":"HTTP_410_GONE  <code>module-attribute</code>","text":"<pre><code>HTTP_410_GONE = 410\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_411_LENGTH_REQUIRED","title":"HTTP_411_LENGTH_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_411_LENGTH_REQUIRED = 411\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_412_PRECONDITION_FAILED","title":"HTTP_412_PRECONDITION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_412_PRECONDITION_FAILED = 412\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_413_REQUEST_ENTITY_TOO_LARGE","title":"HTTP_413_REQUEST_ENTITY_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_414_REQUEST_URI_TOO_LONG","title":"HTTP_414_REQUEST_URI_TOO_LONG  <code>module-attribute</code>","text":"<pre><code>HTTP_414_REQUEST_URI_TOO_LONG = 414\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_415_UNSUPPORTED_MEDIA_TYPE","title":"HTTP_415_UNSUPPORTED_MEDIA_TYPE  <code>module-attribute</code>","text":"<pre><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE","title":"HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_417_EXPECTATION_FAILED","title":"HTTP_417_EXPECTATION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_417_EXPECTATION_FAILED = 417\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_418_IM_A_TEAPOT","title":"HTTP_418_IM_A_TEAPOT  <code>module-attribute</code>","text":"<pre><code>HTTP_418_IM_A_TEAPOT = 418\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_421_MISDIRECTED_REQUEST","title":"HTTP_421_MISDIRECTED_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_421_MISDIRECTED_REQUEST = 421\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_422_UNPROCESSABLE_ENTITY","title":"HTTP_422_UNPROCESSABLE_ENTITY  <code>module-attribute</code>","text":"<pre><code>HTTP_422_UNPROCESSABLE_ENTITY = 422\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_423_LOCKED","title":"HTTP_423_LOCKED  <code>module-attribute</code>","text":"<pre><code>HTTP_423_LOCKED = 423\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_424_FAILED_DEPENDENCY","title":"HTTP_424_FAILED_DEPENDENCY  <code>module-attribute</code>","text":"<pre><code>HTTP_424_FAILED_DEPENDENCY = 424\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_425_TOO_EARLY","title":"HTTP_425_TOO_EARLY  <code>module-attribute</code>","text":"<pre><code>HTTP_425_TOO_EARLY = 425\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_426_UPGRADE_REQUIRED","title":"HTTP_426_UPGRADE_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_426_UPGRADE_REQUIRED = 426\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_428_PRECONDITION_REQUIRED","title":"HTTP_428_PRECONDITION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_428_PRECONDITION_REQUIRED = 428\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_429_TOO_MANY_REQUESTS","title":"HTTP_429_TOO_MANY_REQUESTS  <code>module-attribute</code>","text":"<pre><code>HTTP_429_TOO_MANY_REQUESTS = 429\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE","title":"HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS  <code>module-attribute</code>","text":"<pre><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_500_INTERNAL_SERVER_ERROR","title":"HTTP_500_INTERNAL_SERVER_ERROR  <code>module-attribute</code>","text":"<pre><code>HTTP_500_INTERNAL_SERVER_ERROR = 500\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_501_NOT_IMPLEMENTED","title":"HTTP_501_NOT_IMPLEMENTED  <code>module-attribute</code>","text":"<pre><code>HTTP_501_NOT_IMPLEMENTED = 501\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_502_BAD_GATEWAY","title":"HTTP_502_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>HTTP_502_BAD_GATEWAY = 502\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_503_SERVICE_UNAVAILABLE","title":"HTTP_503_SERVICE_UNAVAILABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_503_SERVICE_UNAVAILABLE = 503\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_504_GATEWAY_TIMEOUT","title":"HTTP_504_GATEWAY_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_504_GATEWAY_TIMEOUT = 504\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_505_HTTP_VERSION_NOT_SUPPORTED","title":"HTTP_505_HTTP_VERSION_NOT_SUPPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_506_VARIANT_ALSO_NEGOTIATES","title":"HTTP_506_VARIANT_ALSO_NEGOTIATES  <code>module-attribute</code>","text":"<pre><code>HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_507_INSUFFICIENT_STORAGE","title":"HTTP_507_INSUFFICIENT_STORAGE  <code>module-attribute</code>","text":"<pre><code>HTTP_507_INSUFFICIENT_STORAGE = 507\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_508_LOOP_DETECTED","title":"HTTP_508_LOOP_DETECTED  <code>module-attribute</code>","text":"<pre><code>HTTP_508_LOOP_DETECTED = 508\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_510_NOT_EXTENDED","title":"HTTP_510_NOT_EXTENDED  <code>module-attribute</code>","text":"<pre><code>HTTP_510_NOT_EXTENDED = 510\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"HTTP_511_NETWORK_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n</code></pre> <p>WebSocket codes https://www.iana.org/assignments/websocket/websocket.xml#close-code-number https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent</p>"},{"location":"reference/status/#readyapi.status.WS_1000_NORMAL_CLOSURE","title":"WS_1000_NORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1000_NORMAL_CLOSURE = 1000\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1001_GOING_AWAY","title":"WS_1001_GOING_AWAY  <code>module-attribute</code>","text":"<pre><code>WS_1001_GOING_AWAY = 1001\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1002_PROTOCOL_ERROR","title":"WS_1002_PROTOCOL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1002_PROTOCOL_ERROR = 1002\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1003_UNSUPPORTED_DATA","title":"WS_1003_UNSUPPORTED_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1003_UNSUPPORTED_DATA = 1003\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1005_NO_STATUS_RCVD","title":"WS_1005_NO_STATUS_RCVD  <code>module-attribute</code>","text":"<pre><code>WS_1005_NO_STATUS_RCVD = 1005\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1006_ABNORMAL_CLOSURE","title":"WS_1006_ABNORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1006_ABNORMAL_CLOSURE = 1006\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1007_INVALID_FRAME_PAYLOAD_DATA","title":"WS_1007_INVALID_FRAME_PAYLOAD_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1007_INVALID_FRAME_PAYLOAD_DATA = 1007\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1008_POLICY_VIOLATION","title":"WS_1008_POLICY_VIOLATION  <code>module-attribute</code>","text":"<pre><code>WS_1008_POLICY_VIOLATION = 1008\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1009_MESSAGE_TOO_BIG","title":"WS_1009_MESSAGE_TOO_BIG  <code>module-attribute</code>","text":"<pre><code>WS_1009_MESSAGE_TOO_BIG = 1009\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1010_MANDATORY_EXT","title":"WS_1010_MANDATORY_EXT  <code>module-attribute</code>","text":"<pre><code>WS_1010_MANDATORY_EXT = 1010\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1011_INTERNAL_ERROR","title":"WS_1011_INTERNAL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1011_INTERNAL_ERROR = 1011\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1012_SERVICE_RESTART","title":"WS_1012_SERVICE_RESTART  <code>module-attribute</code>","text":"<pre><code>WS_1012_SERVICE_RESTART = 1012\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1013_TRY_AGAIN_LATER","title":"WS_1013_TRY_AGAIN_LATER  <code>module-attribute</code>","text":"<pre><code>WS_1013_TRY_AGAIN_LATER = 1013\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1014_BAD_GATEWAY","title":"WS_1014_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>WS_1014_BAD_GATEWAY = 1014\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1015_TLS_HANDSHAKE","title":"WS_1015_TLS_HANDSHAKE  <code>module-attribute</code>","text":"<pre><code>WS_1015_TLS_HANDSHAKE = 1015\n</code></pre>"},{"location":"reference/uploadfile/","title":"<code>UploadFile</code> class","text":"<p>You can define path operation function parameters to be of the type <code>UploadFile</code> to receive files from the request.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import UploadFile\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile","title":"readyapi.UploadFile","text":"<pre><code>UploadFile(file, *, size=None, filename=None, headers=None)\n</code></pre> <p>               Bases: <code>UploadFile</code></p> <p>A file uploaded in a request.</p> <p>Define it as a path operation function (or dependency) parameter.</p> <p>If you are using a regular <code>def</code> function, you can use the <code>upload_file.file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</p> <p>Read more about it in the ReadyAPI docs for Request Files.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, File, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> PARAMETER DESCRIPTION <code>file</code> <p> TYPE: <code>BinaryIO</code> </p> <code>size</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Headers | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/datastructures.py</code> <pre><code>def __init__(\n    self,\n    file: typing.BinaryIO,\n    *,\n    size: int | None = None,\n    filename: str | None = None,\n    headers: Headers | None = None,\n) -&gt; None:\n    self.filename = filename\n    self.file = file\n    self.size = size\n    self.headers = headers or Headers()\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file\n</code></pre> <p>The standard Python file object (non-async).</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename\n</code></pre> <p>The original file name.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size\n</code></pre> <p>The size of the file in bytes.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers\n</code></pre> <p>The headers of the request.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.content_type","title":"content_type  <code>instance-attribute</code>","text":"<pre><code>content_type\n</code></pre> <p>The content type of the request, from the headers.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.read","title":"read  <code>async</code>","text":"<pre><code>read(size=-1)\n</code></pre> <p>Read some bytes from the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>size</code> <p>The number of bytes to read from the file.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def read(\n    self,\n    size: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The number of bytes to read from the file.\n            \"\"\"\n        ),\n    ] = -1,\n) -&gt; bytes:\n    \"\"\"\n    Read some bytes from the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().read(size)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.write","title":"write  <code>async</code>","text":"<pre><code>write(data)\n</code></pre> <p>Write some bytes to the file.</p> <p>You normally wouldn't use this from a file you read in a request.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>data</code> <p>The bytes to write to the file.</p> <p> TYPE: <code>bytes</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def write(\n    self,\n    data: Annotated[\n        bytes,\n        Doc(\n            \"\"\"\n            The bytes to write to the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Write some bytes to the file.\n\n    You normally wouldn't use this from a file you read in a request.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().write(data)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.seek","title":"seek  <code>async</code>","text":"<pre><code>seek(offset)\n</code></pre> <p>Move to a position in the file.</p> <p>Any next read or write will be done from that position.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>offset</code> <p>The position in bytes to seek to in the file.</p> <p> TYPE: <code>int</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def seek(\n    self,\n    offset: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The position in bytes to seek to in the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Move to a position in the file.\n\n    Any next read or write will be done from that position.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().seek(offset)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().close()\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions - <code>HTTPException</code> and <code>WebSocketException</code>","text":"<p>These are the exceptions that you can raise to show errors to the client.</p> <p>When you raise an exception, as would happen with normal Python, the rest of the execution is aborted. This way you can raise these exceptions from anywhere in the code to abort a request and show the error to the client.</p> <p>You can use:</p> <ul> <li><code>HTTPException</code></li> <li><code>WebSocketException</code></li> </ul> <p>These exceptions can be imported directly from <code>readyapi</code>:</p> <pre><code>from readyapi import HTTPException, WebSocketException\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException","title":"readyapi.HTTPException","text":"<pre><code>HTTPException(status_code, detail=None, headers=None)\n</code></pre> <p>               Bases: <code>HTTPException</code></p> <p>An HTTP exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/exceptions/#readyapi.HTTPException--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, HTTPException\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre> PARAMETER DESCRIPTION <code>status_code</code> <p>HTTP status code to send to the client.</p> <p> TYPE: <code>int</code> </p> <code>detail</code> <p>Any data to be sent to the client in the <code>detail</code> key of the JSON response.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>Any headers to send to the client in the response.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    status_code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            HTTP status code to send to the client.\n            \"\"\"\n        ),\n    ],\n    detail: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Any data to be sent to the client in the `detail` key of the JSON\n            response.\n            \"\"\"\n        ),\n    ] = None,\n    headers: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            Any headers to send to the client in the response.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(status_code=status_code, detail=detail, headers=headers)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail = detail\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException","title":"readyapi.WebSocketException","text":"<pre><code>WebSocketException(code, reason=None)\n</code></pre> <p>               Bases: <code>WebSocketException</code></p> <p>A WebSocket exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p>"},{"location":"reference/exceptions/#readyapi.WebSocketException--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\n\napp = ReadyAPI()\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    item_id: str,\n):\n    if session is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Session cookie is: {session}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p>A closing code from the valid codes defined in the specification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason to close the WebSocket connection.</p> <p>It is UTF-8-encoded data. The interpretation of the reason is up to the application, it is not specified by the WebSocket specification.</p> <p>It could contain text that could be human-readable or interpretable by the client code, etc.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            A closing code from the\n            [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n            \"\"\"\n        ),\n    ],\n    reason: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            The reason to close the WebSocket connection.\n\n            It is UTF-8-encoded data. The interpretation of the reason is up to the\n            application, it is not specified by the WebSocket specification.\n\n            It could contain text that could be human-readable or interpretable\n            by the client code, etc.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(code=code, reason=reason)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/dependencies/","title":"Dependencies - <code>Depends()</code> and <code>Security()</code>","text":""},{"location":"reference/dependencies/#depends","title":"<code>Depends()</code>","text":"<p>Dependencies are handled mainly with the special function <code>Depends()</code> that takes a callable.</p> <p>Here is the reference for it and its parameters.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Depends\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Depends","title":"readyapi.Depends","text":"<pre><code>Depends(dependency=None, *, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI dependency.</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Dependencies.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Dependencies](https://readyapi.khulnasoft.com/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    app = ReadyAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n</code></pre>"},{"location":"reference/dependencies/#security","title":"<code>Security()</code>","text":"<p>For many scenarios, you can handle security (authorization, authentication, etc.) with dependencies, using <code>Depends()</code>.</p> <p>But when you want to also declare OAuth2 scopes, you can use <code>Security()</code> instead of <code>Depends()</code>.</p> <p>You can import <code>Security()</code> directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Security\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Security","title":"readyapi.Security","text":"<pre><code>Security(dependency=None, *, scopes=None, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI Security dependency.</p> <p>The only difference with a regular dependency is that it can declare OAuth2 scopes that will be integrated with OpenAPI and the automatic UI docs (by default at <code>/docs</code>).</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Security and in the ReadyAPI docs for OAuth2 scopes.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Security, ReadyAPI\n\nfrom .db import User\nfrom .security import get_current_active_user\n\napp = ReadyAPI()\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>OAuth2 scopes required for the path operation that uses this Security dependency.</p> <p>The term \"scope\" comes from the OAuth2 specification, it seems to be intentionally vague and interpretable. It normally refers to permissions, in cases to roles.</p> <p>These scopes are integrated with OpenAPI (and the API docs at <code>/docs</code>). So they are visible in the OpenAPI specification. )</p> <p> TYPE: <code>Optional[Sequence[str]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Security](https://readyapi.khulnasoft.com/tutorial/security/) and\n    in the\n    [ReadyAPI docs for OAuth2 scopes](https://readyapi.khulnasoft.com/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Security, ReadyAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = ReadyAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n</code></pre>"},{"location":"reference/apirouter/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import APIRouter\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter","title":"readyapi.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>               Bases: <code>Router</code></p> <p><code>APIRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>ReadyAPI</code> app, or in another <code>APIRouter</code> (ultimately included in the app).</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default</code> <p>Default function handler for this router. Used to handle 404 Not Found errors.</p> <p> TYPE: <code>Optional[ASGIApp]</code> DEFAULT: <code>None</code> </p> <code>dependency_overrides_provider</code> <p>Only used internally by ReadyAPI to handle dependency overrides.</p> <p>You shouldn't need to use it. It normally points to the <code>ReadyAPI</code> app object.</p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>route_class</code> <p>Custom route (path operation) class to be used by this router.</p> <p>Read more about it in the ReadyAPI docs for Custom Request and APIRoute class.</p> <p> TYPE: <code>Type[APIRoute]</code> DEFAULT: <code>APIRoute</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[Any]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in this router in the generated OpenAPI.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        Optional[ASGIApp],\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Optional[Any],\n        Doc(\n            \"\"\"\n            Only used internally by ReadyAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `ReadyAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        Type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Request and APIRoute class](https://readyapi.khulnasoft.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Optional[Lifespan[Any]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.khulnasoft.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    self.prefix = prefix\n    self.tags: List[Union[str, Enum]] = tags or []\n    self.dependencies = list(dependencies or [])\n    self.deprecated = deprecated\n    self.include_in_schema = include_in_schema\n    self.responses = responses or {}\n    self.callbacks = callbacks or []\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class\n    self.generate_unique_id_function = generate_unique_id_function\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI, WebSocket\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.khulnasoft.com/advanced/websockets/).\n\n    **Example**\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path, func, name=name, dependencies=dependencies\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include another <code>APIRouter</code> in the same current <code>APIRouter</code>.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\ninternal_router = APIRouter()\nusers_router = APIRouter()\n\n@users_router.get(\"/users/\")\ndef read_users():\n    return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\ninternal_router.include_router(users_router)\napp.include_router(internal_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.khulnasoft.com/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include another `APIRouter` in the same current `APIRouter`.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.khulnasoft.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    internal_router = APIRouter()\n    users_router = APIRouter()\n\n    @users_router.get(\"/users/\")\n    def read_users():\n        return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n    internal_router.include_router(users_router)\n    app.include_router(internal_router)\n    ```\n    \"\"\"\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")  # noqa: B009\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise ReadyAPIError(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            use_response_class = get_value_or_default(\n                route.response_class,\n                router.default_response_class,\n                default_response_class,\n                self.default_response_class,\n            )\n            current_tags = []\n            if tags:\n                current_tags.extend(tags)\n            if route.tags:\n                current_tags.extend(route.tags)\n            current_dependencies: List[params.Depends] = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            current_callbacks = []\n            if callbacks:\n                current_callbacks.extend(callbacks)\n            if route.callbacks:\n                current_callbacks.extend(route.callbacks)\n            current_generate_unique_id = get_value_or_default(\n                route.generate_unique_id_function,\n                router.generate_unique_id_function,\n                generate_unique_id_function,\n                self.generate_unique_id_function,\n            )\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=current_tags,\n                dependencies=current_dependencies,\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated or deprecated or self.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                response_model_exclude_defaults=route.response_model_exclude_defaults,\n                response_model_exclude_none=route.response_model_exclude_none,\n                include_in_schema=route.include_in_schema\n                and self.include_in_schema\n                and include_in_schema,\n                response_class=use_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=current_callbacks,\n                openapi_extra=route.openapi_extra,\n                generate_unique_id_function=current_generate_unique_id,\n            )\n        elif isinstance(route, routing.Route):\n            methods = list(route.methods or [])\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            current_dependencies = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            self.add_api_websocket_route(\n                prefix + route.path,\n                route.endpoint,\n                dependencies=current_dependencies,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n    self.lifespan_context = _merge_lifespan_context(\n        self.lifespan_context,\n        router.lifespan_context,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.get--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.put--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.post--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.options--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.head--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.khulnasoft.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.khulnasoft.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.khulnasoft.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.khulnasoft.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.khulnasoft.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.khulnasoft.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.khulnasoft.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.khulnasoft.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.khulnasoft.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.khulnasoft.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.trace(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the router.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the router.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.khulnasoft.com/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_event_handler(event_type, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/background/","title":"Background Tasks - <code>BackgroundTasks</code>","text":"<p>You can declare a parameter in a path operation function or dependency function with the type <code>BackgroundTasks</code>, and then you can use it to schedule the execution of background tasks after the response is sent.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import BackgroundTasks\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks","title":"readyapi.BackgroundTasks","text":"<pre><code>BackgroundTasks(tasks=None)\n</code></pre> <p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p>"},{"location":"reference/background/#readyapi.BackgroundTasks--example","title":"Example","text":"<pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> PARAMETER DESCRIPTION <code>tasks</code> <p> TYPE: <code>Sequence[BackgroundTask] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/background.py</code> <pre><code>def __init__(self, tasks: typing.Sequence[BackgroundTask] | None = None):\n    self.tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func = func\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.is_async","title":"is_async  <code>instance-attribute</code>","text":"<pre><code>is_async = is_async_callable(func)\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p> PARAMETER DESCRIPTION <code>func</code> <p>The function to call after the response is sent.</p> <p>It can be a regular <code>def</code> function or an <code>async def</code> function.</p> <p> TYPE: <code>Callable[P, Any]</code> </p> <code>*args</code> <p> TYPE: <code>args</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>kwargs</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n\n    Read more about it in the\n    [ReadyAPI docs for Background Tasks](https://readyapi.khulnasoft.com/tutorial/background-tasks/).\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/request/","title":"<code>Request</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Request</code> and then you can access the raw request object directly, without any validation, etc.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Request\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p>"},{"location":"reference/request/#readyapi.Request","title":"readyapi.Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> DEFAULT: <code>empty_receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> DEFAULT: <code>empty_send</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"reference/request/#readyapi.Request.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/request/#readyapi.Request.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/request/#readyapi.Request.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/request/#readyapi.Request.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/request/#readyapi.Request.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/request/#readyapi.Request.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/request/#readyapi.Request.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/request/#readyapi.Request.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/request/#readyapi.Request.method","title":"method  <code>property</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/request/#readyapi.Request.receive","title":"receive  <code>property</code>","text":"<pre><code>receive\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/request/#readyapi.Request.stream","title":"stream  <code>async</code>","text":"<pre><code>stream()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def stream(self) -&gt; typing.AsyncGenerator[bytes, None]:\n    if hasattr(self, \"_body\"):\n        yield self._body\n        yield b\"\"\n        return\n    if self._stream_consumed:\n        raise RuntimeError(\"Stream consumed\")\n    while not self._stream_consumed:\n        message = await self._receive()\n        if message[\"type\"] == \"http.request\":\n            body = message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                self._stream_consumed = True\n            if body:\n                yield body\n        elif message[\"type\"] == \"http.disconnect\":  # pragma: no branch\n            self._is_disconnected = True\n            raise ClientDisconnect()\n    yield b\"\"\n</code></pre>"},{"location":"reference/request/#readyapi.Request.body","title":"body  <code>async</code>","text":"<pre><code>body()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def body(self) -&gt; bytes:\n    if not hasattr(self, \"_body\"):\n        chunks: list[bytes] = []\n        async for chunk in self.stream():\n            chunks.append(chunk)\n        self._body = b\"\".join(chunks)\n    return self._body\n</code></pre>"},{"location":"reference/request/#readyapi.Request.json","title":"json  <code>async</code>","text":"<pre><code>json()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def json(self) -&gt; typing.Any:\n    if not hasattr(self, \"_json\"):  # pragma: no branch\n        body = await self.body()\n        self._json = json.loads(body)\n    return self._json\n</code></pre>"},{"location":"reference/request/#readyapi.Request.form","title":"form","text":"<pre><code>form(\n    *,\n    max_files=1000,\n    max_fields=1000,\n    max_part_size=1024 * 1024\n)\n</code></pre> PARAMETER DESCRIPTION <code>max_files</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_fields</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_part_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>1024 * 1024</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def form(\n    self,\n    *,\n    max_files: int | float = 1000,\n    max_fields: int | float = 1000,\n    max_part_size: int = 1024 * 1024,\n) -&gt; AwaitableOrContextManager[FormData]:\n    return AwaitableOrContextManagerWrapper(\n        self._get_form(max_files=max_files, max_fields=max_fields, max_part_size=max_part_size)\n    )\n</code></pre>"},{"location":"reference/request/#readyapi.Request.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def close(self) -&gt; None:\n    if self._form is not None:  # pragma: no branch\n        await self._form.close()\n</code></pre>"},{"location":"reference/request/#readyapi.Request.is_disconnected","title":"is_disconnected  <code>async</code>","text":"<pre><code>is_disconnected()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def is_disconnected(self) -&gt; bool:\n    if not self._is_disconnected:\n        message: Message = {}\n\n        # If message isn't immediately available, move on\n        with anyio.CancelScope() as cs:\n            cs.cancel()\n            message = await self._receive()\n\n        if message.get(\"type\") == \"http.disconnect\":\n            self._is_disconnected = True\n\n    return self._is_disconnected\n</code></pre>"},{"location":"reference/request/#readyapi.Request.send_push_promise","title":"send_push_promise  <code>async</code>","text":"<pre><code>send_push_promise(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>async def send_push_promise(self, path: str) -&gt; None:\n    if \"http.response.push\" in self.scope.get(\"extensions\", {}):\n        raw_headers: list[tuple[bytes, bytes]] = []\n        for name in SERVER_PUSH_HEADERS_TO_COPY:\n            for value in self.headers.getlist(name):\n                raw_headers.append((name.encode(\"latin-1\"), value.encode(\"latin-1\")))\n        await self._send({\"type\": \"http.response.push\", \"path\": path, \"headers\": raw_headers})\n</code></pre>"},{"location":"reference/websockets/","title":"WebSockets","text":"<p>When defining WebSockets, you normally declare a parameter of type <code>WebSocket</code> and with it you can read data from the client and send data to it.</p> <p>It is provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocket\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>When a client disconnects, a <code>WebSocketDisconnect</code> exception is raised, you can catch it.</p> <p>You can import it directly form <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocketDisconnect\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket","title":"readyapi.WebSocket","text":"<pre><code>WebSocket(scope, receive, send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n    super().__init__(scope)\n    assert scope[\"type\"] == \"websocket\"\n    self._receive = receive\n    self._send = send\n    self.client_state = WebSocketState.CONNECTING\n    self.application_state = WebSocketState.CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client_state","title":"client_state  <code>instance-attribute</code>","text":"<pre><code>client_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.application_state","title":"application_state  <code>instance-attribute</code>","text":"<pre><code>application_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive","title":"receive  <code>async</code>","text":"<pre><code>receive()\n</code></pre> <p>Receive ASGI websocket messages, ensuring valid state transitions.</p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive(self) -&gt; Message:\n    \"\"\"\n    Receive ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.client_state == WebSocketState.CONNECTING:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type != \"websocket.connect\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.connect\", but got {message_type!r}')\n        self.client_state = WebSocketState.CONNECTED\n        return message\n    elif self.client_state == WebSocketState.CONNECTED:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.receive\", \"websocket.disconnect\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.receive\" or \"websocket.disconnect\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.disconnect\":\n            self.client_state = WebSocketState.DISCONNECTED\n        return message\n    else:\n        raise RuntimeError('Cannot call \"receive\" once a disconnect message has been received.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send","title":"send  <code>async</code>","text":"<pre><code>send(message)\n</code></pre> <p>Send ASGI websocket messages, ensuring valid state transitions.</p> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send(self, message: Message) -&gt; None:\n    \"\"\"\n    Send ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.application_state == WebSocketState.CONNECTING:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.accept\", \"websocket.close\", \"websocket.http.response.start\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.accept\", \"websocket.close\" or \"websocket.http.response.start\", '\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        elif message_type == \"websocket.http.response.start\":\n            self.application_state = WebSocketState.RESPONSE\n        else:\n            self.application_state = WebSocketState.CONNECTED\n        await self._send(message)\n    elif self.application_state == WebSocketState.CONNECTED:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.send\", \"websocket.close\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.send\" or \"websocket.close\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        try:\n            await self._send(message)\n        except OSError:\n            self.application_state = WebSocketState.DISCONNECTED\n            raise WebSocketDisconnect(code=1006)\n    elif self.application_state == WebSocketState.RESPONSE:\n        message_type = message[\"type\"]\n        if message_type != \"websocket.http.response.body\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.http.response.body\", but got {message_type!r}')\n        if not message.get(\"more_body\", False):\n            self.application_state = WebSocketState.DISCONNECTED\n        await self._send(message)\n    else:\n        raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.accept","title":"accept  <code>async</code>","text":"<pre><code>accept(subprotocol=None, headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>subprotocol</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Iterable[tuple[bytes, bytes]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def accept(\n    self,\n    subprotocol: str | None = None,\n    headers: typing.Iterable[tuple[bytes, bytes]] | None = None,\n) -&gt; None:\n    headers = headers or []\n\n    if self.client_state == WebSocketState.CONNECTING:  # pragma: no branch\n        # If we haven't yet seen the 'connect' message, then wait for it first.\n        await self.receive()\n    await self.send({\"type\": \"websocket.accept\", \"subprotocol\": subprotocol, \"headers\": headers})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_text","title":"receive_text  <code>async</code>","text":"<pre><code>receive_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_text(self) -&gt; str:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(str, message[\"text\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_bytes","title":"receive_bytes  <code>async</code>","text":"<pre><code>receive_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_bytes(self) -&gt; bytes:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(bytes, message[\"bytes\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_json","title":"receive_json  <code>async</code>","text":"<pre><code>receive_json(mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_json(self, mode: str = \"text\") -&gt; typing.Any:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n\n    if mode == \"text\":\n        text = message[\"text\"]\n    else:\n        text = message[\"bytes\"].decode(\"utf-8\")\n    return json.loads(text)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_text","title":"iter_text  <code>async</code>","text":"<pre><code>iter_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_text(self) -&gt; typing.AsyncIterator[str]:\n    try:\n        while True:\n            yield await self.receive_text()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_bytes","title":"iter_bytes  <code>async</code>","text":"<pre><code>iter_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_bytes(self) -&gt; typing.AsyncIterator[bytes]:\n    try:\n        while True:\n            yield await self.receive_bytes()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_json","title":"iter_json  <code>async</code>","text":"<pre><code>iter_json()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_json(self) -&gt; typing.AsyncIterator[typing.Any]:\n    try:\n        while True:\n            yield await self.receive_json()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_text(self, data: str) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"text\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_bytes","title":"send_bytes  <code>async</code>","text":"<pre><code>send_bytes(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>bytes</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_bytes(self, data: bytes) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"bytes\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_json","title":"send_json  <code>async</code>","text":"<pre><code>send_json(data, mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>Any</code> </p> <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_json(self, data: typing.Any, mode: str = \"text\") -&gt; None:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n    if mode == \"text\":\n        await self.send({\"type\": \"websocket.send\", \"text\": text})\n    else:\n        await self.send({\"type\": \"websocket.send\", \"bytes\": text.encode(\"utf-8\")})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.close","title":"close  <code>async</code>","text":"<pre><code>close(code=1000, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def close(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    await self.send({\"type\": \"websocket.close\", \"code\": code, \"reason\": reason or \"\"})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect","title":"readyapi.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#websockets-additional-classes","title":"WebSockets - additional classes","text":"<p>Additional classes for handling WebSockets.</p> <p>Provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi.websockets import WebSocketDisconnect, WebSocketState\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect","title":"readyapi.websockets.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState","title":"readyapi.websockets.WebSocketState","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 0\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 3\n</code></pre>"},{"location":"reference/httpconnection/","title":"<code>HTTPConnection</code> class","text":"<p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>You can import it from <code>readyapi.requests</code>:</p> <pre><code>from readyapi.requests import HTTPConnection\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection","title":"readyapi.requests.HTTPConnection","text":"<pre><code>HTTPConnection(scope, receive=None)\n</code></pre> <p>               Bases: <code>Mapping[str, Any]</code></p> <p>A base class for incoming HTTP connections, that is used to provide any functionality that is common to both <code>Request</code> and <code>WebSocket</code>.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive | None = None) -&gt; None:\n    assert scope[\"type\"] in (\"http\", \"websocket\")\n    self.scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/response/","title":"<code>Response</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Response</code> and then you can set data for the response like headers or cookies.</p> <p>You can also use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Response\n</code></pre>"},{"location":"reference/response/#readyapi.Response","title":"readyapi.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/response/#readyapi.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/response/#readyapi.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/response/#readyapi.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/response/#readyapi.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/response/#readyapi.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/response/#readyapi.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/","title":"Custom Response Classes - File, HTML, Redirect, Streaming, etc.","text":"<p>There are several custom response classes you can use to create an instance and return them directly from your path operations.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>You can import them directly from <code>readyapi.responses</code>:</p> <pre><code>from readyapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n</code></pre>"},{"location":"reference/responses/#readyapi-responses","title":"ReadyAPI Responses","text":"<p>There are a couple of custom ReadyAPI response classes, you can use them to optimize JSON performance.</p>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse","title":"readyapi.responses.UJSONResponse","text":"<pre><code>UJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance ujson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n    return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse","title":"readyapi.responses.ORJSONResponse","text":"<pre><code>ORJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance orjson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n    return orjson.dumps(\n        content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#starlette-responses","title":"Starlette Responses","text":""},{"location":"reference/responses/#readyapi.responses.FileResponse","title":"readyapi.responses.FileResponse","text":"<pre><code>FileResponse(\n    path,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n    filename=None,\n    stat_result=None,\n    method=None,\n    content_disposition_type=\"attachment\",\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str | PathLike[str]</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result | None</code> DEFAULT: <code>None</code> </p> <code>method</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>content_disposition_type</code> <p> TYPE: <code>str</code> DEFAULT: <code>'attachment'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    path: str | os.PathLike[str],\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n    filename: str | None = None,\n    stat_result: os.stat_result | None = None,\n    method: str | None = None,\n    content_disposition_type: str = \"attachment\",\n) -&gt; None:\n    self.path = path\n    self.status_code = status_code\n    self.filename = filename\n    if method is not None:\n        warnings.warn(\n            \"The 'method' parameter is not used, and it will be removed.\",\n            DeprecationWarning,\n        )\n    if media_type is None:\n        media_type = guess_type(filename or path)[0] or \"text/plain\"\n    self.media_type = media_type\n    self.background = background\n    self.init_headers(headers)\n    self.headers.setdefault(\"accept-ranges\", \"bytes\")\n    if self.filename is not None:\n        content_disposition_filename = quote(self.filename)\n        if content_disposition_filename != self.filename:\n            content_disposition = f\"{content_disposition_type}; filename*=utf-8''{content_disposition_filename}\"\n        else:\n            content_disposition = f'{content_disposition_type}; filename=\"{self.filename}\"'\n        self.headers.setdefault(\"content-disposition\", content_disposition)\n    self.stat_result = stat_result\n    if stat_result is not None:\n        self.set_stat_headers(stat_result)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.chunk_size","title":"chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_size = 64 * 1024\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = media_type\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse","title":"readyapi.responses.HTMLResponse","text":"<pre><code>HTMLResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/html'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse","title":"readyapi.responses.JSONResponse","text":"<pre><code>JSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    return json.dumps(\n        content,\n        ensure_ascii=False,\n        allow_nan=False,\n        indent=None,\n        separators=(\",\", \":\"),\n    ).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse","title":"readyapi.responses.PlainTextResponse","text":"<pre><code>PlainTextResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/plain'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse","title":"readyapi.responses.RedirectResponse","text":"<pre><code>RedirectResponse(\n    url, status_code=307, headers=None, background=None\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str | URL</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>307</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    url: str | URL,\n    status_code: int = 307,\n    headers: typing.Mapping[str, str] | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content=b\"\", status_code=status_code, headers=headers, background=background)\n    self.headers[\"location\"] = quote(str(url), safe=\":/%#?=@[]!$&amp;'()*+,;\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response","title":"readyapi.responses.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse","title":"readyapi.responses.StreamingResponse","text":"<pre><code>StreamingResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>ContentStream</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, typing.AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body_iterator","title":"body_iterator  <code>instance-attribute</code>","text":"<pre><code>body_iterator\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = (\n    media_type if media_type is None else media_type\n)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/middleware/","title":"Middleware","text":"<p>There are several middlewares available provided by Starlette directly.</p> <p>Read more about them in the ReadyAPI docs for Middleware.</p> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.cors import CORSMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.gzip import GZipMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.trustedhost import TrustedHostMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.wsgi import WSGIMiddleware\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware","title":"readyapi.middleware.cors.CORSMiddleware","text":"<pre><code>CORSMiddleware(\n    app,\n    allow_origins=(),\n    allow_methods=(\"GET\",),\n    allow_headers=(),\n    allow_credentials=False,\n    allow_origin_regex=None,\n    expose_headers=(),\n    max_age=600,\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allow_origins</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_methods</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>('GET',)</code> </p> <code>allow_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_credentials</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_origin_regex</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>expose_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>max_age</code> <p> TYPE: <code>int</code> DEFAULT: <code>600</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allow_origins: typing.Sequence[str] = (),\n    allow_methods: typing.Sequence[str] = (\"GET\",),\n    allow_headers: typing.Sequence[str] = (),\n    allow_credentials: bool = False,\n    allow_origin_regex: str | None = None,\n    expose_headers: typing.Sequence[str] = (),\n    max_age: int = 600,\n) -&gt; None:\n    if \"*\" in allow_methods:\n        allow_methods = ALL_METHODS\n\n    compiled_allow_origin_regex = None\n    if allow_origin_regex is not None:\n        compiled_allow_origin_regex = re.compile(allow_origin_regex)\n\n    allow_all_origins = \"*\" in allow_origins\n    allow_all_headers = \"*\" in allow_headers\n    preflight_explicit_allow_origin = not allow_all_origins or allow_credentials\n\n    simple_headers = {}\n    if allow_all_origins:\n        simple_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    if allow_credentials:\n        simple_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    if expose_headers:\n        simple_headers[\"Access-Control-Expose-Headers\"] = \", \".join(expose_headers)\n\n    preflight_headers = {}\n    if preflight_explicit_allow_origin:\n        # The origin value will be set in preflight_response() if it is allowed.\n        preflight_headers[\"Vary\"] = \"Origin\"\n    else:\n        preflight_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    preflight_headers.update(\n        {\n            \"Access-Control-Allow-Methods\": \", \".join(allow_methods),\n            \"Access-Control-Max-Age\": str(max_age),\n        }\n    )\n    allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))\n    if allow_headers and not allow_all_headers:\n        preflight_headers[\"Access-Control-Allow-Headers\"] = \", \".join(allow_headers)\n    if allow_credentials:\n        preflight_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n    self.app = app\n    self.allow_origins = allow_origins\n    self.allow_methods = allow_methods\n    self.allow_headers = [h.lower() for h in allow_headers]\n    self.allow_all_origins = allow_all_origins\n    self.allow_all_headers = allow_all_headers\n    self.preflight_explicit_allow_origin = preflight_explicit_allow_origin\n    self.allow_origin_regex = compiled_allow_origin_regex\n    self.simple_headers = simple_headers\n    self.preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origins","title":"allow_origins  <code>instance-attribute</code>","text":"<pre><code>allow_origins = allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_methods","title":"allow_methods  <code>instance-attribute</code>","text":"<pre><code>allow_methods = allow_methods\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_headers","title":"allow_headers  <code>instance-attribute</code>","text":"<pre><code>allow_headers = [lower() for h in allow_headers]\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_origins","title":"allow_all_origins  <code>instance-attribute</code>","text":"<pre><code>allow_all_origins = allow_all_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_headers","title":"allow_all_headers  <code>instance-attribute</code>","text":"<pre><code>allow_all_headers = allow_all_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_explicit_allow_origin","title":"preflight_explicit_allow_origin  <code>instance-attribute</code>","text":"<pre><code>preflight_explicit_allow_origin = (\n    preflight_explicit_allow_origin\n)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origin_regex","title":"allow_origin_regex  <code>instance-attribute</code>","text":"<pre><code>allow_origin_regex = compiled_allow_origin_regex\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_headers","title":"simple_headers  <code>instance-attribute</code>","text":"<pre><code>simple_headers = simple_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_headers","title":"preflight_headers  <code>instance-attribute</code>","text":"<pre><code>preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.is_allowed_origin","title":"is_allowed_origin","text":"<pre><code>is_allowed_origin(origin)\n</code></pre> PARAMETER DESCRIPTION <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def is_allowed_origin(self, origin: str) -&gt; bool:\n    if self.allow_all_origins:\n        return True\n\n    if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):\n        return True\n\n    return origin in self.allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_response","title":"preflight_response","text":"<pre><code>preflight_response(request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def preflight_response(self, request_headers: Headers) -&gt; Response:\n    requested_origin = request_headers[\"origin\"]\n    requested_method = request_headers[\"access-control-request-method\"]\n    requested_headers = request_headers.get(\"access-control-request-headers\")\n\n    headers = dict(self.preflight_headers)\n    failures = []\n\n    if self.is_allowed_origin(origin=requested_origin):\n        if self.preflight_explicit_allow_origin:\n            # The \"else\" case is already accounted for in self.preflight_headers\n            # and the value would be \"*\".\n            headers[\"Access-Control-Allow-Origin\"] = requested_origin\n    else:\n        failures.append(\"origin\")\n\n    if requested_method not in self.allow_methods:\n        failures.append(\"method\")\n\n    # If we allow all headers, then we have to mirror back any requested\n    # headers in the response.\n    if self.allow_all_headers and requested_headers is not None:\n        headers[\"Access-Control-Allow-Headers\"] = requested_headers\n    elif requested_headers is not None:\n        for header in [h.lower() for h in requested_headers.split(\",\")]:\n            if header.strip() not in self.allow_headers:\n                failures.append(\"headers\")\n                break\n\n    # We don't strictly need to use 400 responses here, since its up to\n    # the browser to enforce the CORS policy, but its more informative\n    # if we do.\n    if failures:\n        failure_text = \"Disallowed CORS \" + \", \".join(failures)\n        return PlainTextResponse(failure_text, status_code=400, headers=headers)\n\n    return PlainTextResponse(\"OK\", status_code=200, headers=headers)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_response","title":"simple_response  <code>async</code>","text":"<pre><code>simple_response(scope, receive, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def simple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -&gt; None:\n    send = functools.partial(self.send, send=send, request_headers=request_headers)\n    await self.app(scope, receive, send)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.send","title":"send  <code>async</code>","text":"<pre><code>send(message, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def send(self, message: Message, send: Send, request_headers: Headers) -&gt; None:\n    if message[\"type\"] != \"http.response.start\":\n        await send(message)\n        return\n\n    message.setdefault(\"headers\", [])\n    headers = MutableHeaders(scope=message)\n    headers.update(self.simple_headers)\n    origin = request_headers[\"Origin\"]\n    has_cookie = \"cookie\" in request_headers\n\n    # If request includes any cookie headers, then we must respond\n    # with the specific origin instead of '*'.\n    if self.allow_all_origins and has_cookie:\n        self.allow_explicit_origin(headers, origin)\n\n    # If we only allow specific origins, then we have to mirror back\n    # the Origin header in the response.\n    elif not self.allow_all_origins and self.is_allowed_origin(origin=origin):\n        self.allow_explicit_origin(headers, origin)\n\n    await send(message)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_explicit_origin","title":"allow_explicit_origin  <code>staticmethod</code>","text":"<pre><code>allow_explicit_origin(headers, origin)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>MutableHeaders</code> </p> <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>@staticmethod\ndef allow_explicit_origin(headers: MutableHeaders, origin: str) -&gt; None:\n    headers[\"Access-Control-Allow-Origin\"] = origin\n    headers.add_vary_header(\"Origin\")\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware","title":"readyapi.middleware.gzip.GZipMiddleware","text":"<pre><code>GZipMiddleware(app, minimum_size=500, compresslevel=9)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>minimum_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> <code>compresslevel</code> <p> TYPE: <code>int</code> DEFAULT: <code>9</code> </p> Source code in <code>starlette/middleware/gzip.py</code> <pre><code>def __init__(self, app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9) -&gt; None:\n    self.app = app\n    self.minimum_size = minimum_size\n    self.compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.minimum_size","title":"minimum_size  <code>instance-attribute</code>","text":"<pre><code>minimum_size = minimum_size\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.compresslevel","title":"compresslevel  <code>instance-attribute</code>","text":"<pre><code>compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","title":"readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","text":"<pre><code>HTTPSRedirectMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> Source code in <code>starlette/middleware/httpsredirect.py</code> <pre><code>def __init__(self, app: ASGIApp) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware","title":"readyapi.middleware.trustedhost.TrustedHostMiddleware","text":"<pre><code>TrustedHostMiddleware(\n    app, allowed_hosts=None, www_redirect=True\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allowed_hosts</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>www_redirect</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/middleware/trustedhost.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allowed_hosts: typing.Sequence[str] | None = None,\n    www_redirect: bool = True,\n) -&gt; None:\n    if allowed_hosts is None:\n        allowed_hosts = [\"*\"]\n\n    for pattern in allowed_hosts:\n        assert \"*\" not in pattern[1:], ENFORCE_DOMAIN_WILDCARD\n        if pattern.startswith(\"*\") and pattern != \"*\":\n            assert pattern.startswith(\"*.\"), ENFORCE_DOMAIN_WILDCARD\n    self.app = app\n    self.allowed_hosts = list(allowed_hosts)\n    self.allow_any = \"*\" in allowed_hosts\n    self.www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allowed_hosts","title":"allowed_hosts  <code>instance-attribute</code>","text":"<pre><code>allowed_hosts = list(allowed_hosts)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allow_any","title":"allow_any  <code>instance-attribute</code>","text":"<pre><code>allow_any = '*' in allowed_hosts\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.www_redirect","title":"www_redirect  <code>instance-attribute</code>","text":"<pre><code>www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware","title":"readyapi.middleware.wsgi.WSGIMiddleware","text":"<pre><code>WSGIMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>Callable[..., Any]</code> </p> Source code in <code>starlette/middleware/wsgi.py</code> <pre><code>def __init__(self, app: typing.Callable[..., typing.Any]) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/openapi/","title":"OpenAPI","text":"<p>There are several utilities to handle OpenAPI.</p> <p>You normally don't need to use them unless you have a specific advanced use case that requires it.</p>"},{"location":"reference/openapi/docs/","title":"OpenAPI <code>docs</code>","text":"<p>Utilities to handle OpenAPI automatic UI documentation, including Swagger UI (by default at <code>/docs</code>) and ReDoc (by default at <code>/redoc</code>).</p>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_html","title":"readyapi.openapi.docs.get_swagger_ui_html","text":"<pre><code>get_swagger_ui_html(\n    *,\n    openapi_url,\n    title,\n    swagger_js_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url=\"https://readyapi.khulnasoft.com/img/favicon.png\",\n    oauth2_redirect_url=None,\n    init_oauth=None,\n    swagger_ui_parameters=None\n)\n</code></pre> <p>Generate and return the HTML  that loads Swagger UI for the interactive API docs (normally served at <code>/docs</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load Swagger UI's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Configure Swagger UI and the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that Swagger UI should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>swagger_js_url</code> <p>The URL to use to load the Swagger UI JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js'</code> </p> <code>swagger_css_url</code> <p>The URL to use to load the Swagger UI CSS.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css'</code> </p> <code>swagger_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.khulnasoft.com/img/favicon.png'</code> </p> <code>oauth2_redirect_url</code> <p>The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>init_oauth</code> <p>A dictionary with Swagger UI OAuth2 initialization configurations.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>swagger_ui_parameters</code> <p>Configuration parameters for Swagger UI.</p> <p>It defaults to swagger_ui_default_parameters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.khulnasoft.com/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_redoc_html","title":"readyapi.openapi.docs.get_redoc_html","text":"<pre><code>get_redoc_html(\n    *,\n    openapi_url,\n    title,\n    redoc_js_url=\"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url=\"https://readyapi.khulnasoft.com/img/favicon.png\",\n    with_google_fonts=True\n)\n</code></pre> <p>Generate and return the HTML response that loads ReDoc for the alternative API docs (normally served at <code>/redoc</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load ReDoc's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that ReDoc should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>redoc_js_url</code> <p>The URL to use to load the ReDoc JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js'</code> </p> <code>redoc_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.khulnasoft.com/img/favicon.png'</code> </p> <code>with_google_fonts</code> <p>Load and use Google Fonts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.khulnasoft.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.khulnasoft.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","title":"readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","text":"<pre><code>get_swagger_ui_oauth2_redirect_html()\n</code></pre> <p>Generate the HTML response with the OAuth2 redirection for Swagger UI.</p> <p>You normally don't need to use or change this.</p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.swagger_ui_default_parameters","title":"readyapi.openapi.docs.swagger_ui_default_parameters  <code>module-attribute</code>","text":"<pre><code>swagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>Default configurations for Swagger UI.</p> <p>You can use it as a template to add any other configurations needed.</p>"},{"location":"reference/openapi/models/","title":"OpenAPI <code>models</code>","text":"<p>OpenAPI Pydantic models used to generate and validate the generated OpenAPI.</p>"},{"location":"reference/openapi/models/#readyapi.openapi.models","title":"readyapi.openapi.models","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SchemaOrBool","title":"SchemaOrBool  <code>module-attribute</code>","text":"<pre><code>SchemaOrBool = Union[Schema, bool]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityScheme","title":"SecurityScheme  <code>module-attribute</code>","text":"<pre><code>SecurityScheme = Union[\n    APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer\n]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig","title":"BaseModelWithConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact","title":"Contact","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License","title":"License","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info","title":"Info","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.termsOfService","title":"termsOfService  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>termsOfService = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.contact","title":"contact  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable","title":"ServerVariable","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server","title":"Server","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference","title":"Reference","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator","title":"Discriminator","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.propertyName","title":"propertyName  <code>instance-attribute</code>","text":"<pre><code>propertyName\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.mapping","title":"mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mapping = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML","title":"XML","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.namespace","title":"namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>namespace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.attribute","title":"attribute  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribute = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.wrapped","title":"wrapped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrapped = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation","title":"ExternalDocumentation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema","title":"Schema","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='$schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.vocabulary","title":"vocabulary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>vocabulary = Field(default=None, alias='$vocabulary')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default=None, alias='$id')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anchor","title":"anchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anchor = Field(default=None, alias='$anchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicAnchor","title":"dynamicAnchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicAnchor = Field(default=None, alias='$dynamicAnchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicRef","title":"dynamicRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicRef = Field(default=None, alias='$dynamicRef')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.defs","title":"defs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defs = Field(default=None, alias='$defs')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment = Field(default=None, alias='$comment')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.allOf","title":"allOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anyOf","title":"anyOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anyOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.oneOf","title":"oneOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oneOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.not_","title":"not_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_ = Field(default=None, alias='not')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.if_","title":"if_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_ = Field(default=None, alias='if')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.then","title":"then  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>then = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.else_","title":"else_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>else_ = Field(default=None, alias='else')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentSchemas","title":"dependentSchemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentSchemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.prefixItems","title":"prefixItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefixItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.items","title":"items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>items = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contains","title":"contains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contains = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.patternProperties","title":"patternProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patternProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.additionalProperties","title":"additionalProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additionalProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.propertyNames","title":"propertyNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>propertyNames = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedItems","title":"unevaluatedItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedProperties","title":"unevaluatedProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.const","title":"const  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>const = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.multipleOf","title":"multipleOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multipleOf = Field(default=None, gt=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maximum","title":"maximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMaximum","title":"exclusiveMaximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMaximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minimum","title":"minimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMinimum","title":"exclusiveMinimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMinimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxLength","title":"maxLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minLength","title":"minLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxItems","title":"maxItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minItems","title":"minItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.uniqueItems","title":"uniqueItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniqueItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxContains","title":"maxContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minContains","title":"minContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxProperties","title":"maxProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minProperties","title":"minProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentRequired","title":"dependentRequired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentRequired = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentEncoding","title":"contentEncoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentEncoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentMediaType","title":"contentMediaType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentMediaType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentSchema","title":"contentSchema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentSchema = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.readOnly","title":"readOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>readOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.writeOnly","title":"writeOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>writeOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.discriminator","title":"discriminator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>discriminator = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.xml","title":"xml  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xml = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre> Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead."},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example","title":"Example","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.externalValue","title":"externalValue  <code>instance-attribute</code>","text":"<pre><code>externalValue\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType","title":"ParameterInType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = 'path'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding","title":"Encoding","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.contentType","title":"contentType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType","title":"MediaType","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.encoding","title":"encoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>encoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase","title":"ParameterBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter","title":"Parameter","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header","title":"Header","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody","title":"RequestBody","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link","title":"Link","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationRef","title":"operationRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationRef = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.server","title":"server  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response","title":"Response","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation","title":"Operation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem","title":"PathItem","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.head","title":"head  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>head = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType","title":"SecuritySchemeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.apiKey","title":"apiKey  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apiKey = 'apiKey'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'http'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.oauth2","title":"oauth2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oauth2 = 'oauth2'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.openIdConnect","title":"openIdConnect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openIdConnect = 'openIdConnect'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase","title":"SecurityBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn","title":"APIKeyIn","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey","title":"APIKey","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=apiKey, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase","title":"HTTPBase","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer","title":"HTTPBearer","text":"<p>               Bases: <code>HTTPBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'bearer'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.bearerFormat","title":"bearerFormat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bearerFormat = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow","title":"OAuthFlow","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit","title":"OAuthFlowImplicit","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword","title":"OAuthFlowPassword","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials","title":"OAuthFlowClientCredentials","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode","title":"OAuthFlowAuthorizationCode","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows","title":"OAuthFlows","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.clientCredentials","title":"clientCredentials  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clientCredentials = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.authorizationCode","title":"authorizationCode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authorizationCode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2","title":"OAuth2","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=oauth2, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect","title":"OpenIdConnect","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=openIdConnect, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.openIdConnectUrl","title":"openIdConnectUrl  <code>instance-attribute</code>","text":"<pre><code>openIdConnectUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components","title":"Components","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.schemas","title":"schemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.requestBodies","title":"requestBodies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBodies = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.securitySchemes","title":"securitySchemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>securitySchemes = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.pathItems","title":"pathItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pathItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag","title":"Tag","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI","title":"OpenAPI","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.openapi","title":"openapi  <code>instance-attribute</code>","text":"<pre><code>openapi\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.jsonSchemaDialect","title":"jsonSchemaDialect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jsonSchemaDialect = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.webhooks","title":"webhooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>webhooks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/security/","title":"Security Tools","text":"<p>When you need to declare dependencies with OAuth2 scopes you use <code>Security()</code>.</p> <p>But you still need to define what is the dependable, the callable that you pass as a parameter to <code>Depends()</code> or <code>Security()</code>.</p> <p>There are multiple tools that you can use to create those dependables, and they get integrated into OpenAPI so they are shown in the automatic docs UI, they can be used by automatically generated clients and SDKs, etc.</p> <p>You can import them from <code>readyapi.security</code>:</p> <pre><code>from readyapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n</code></pre>"},{"location":"reference/security/#api-key-security-schemes","title":"API Key Security Schemes","text":""},{"location":"reference/security/#readyapi.security.APIKeyCookie","title":"readyapi.security.APIKeyCookie","text":"<pre><code>APIKeyCookie(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a cookie.</p> <p>This defines the name of the cookie that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the cookie automatically and provides it as the dependency result. But it doesn't define how to set that cookie.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyCookie\n\napp = ReadyAPI()\n\ncookie_scheme = APIKeyCookie(name=\"session\")\n\n\n@app.get(\"/items/\")\nasync def read_items(session: str = Depends(cookie_scheme)):\n    return {\"session\": session}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Cookie name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the cookie is not provided, <code>APIKeyCookie</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the cookie is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a cookie or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Cookie name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the cookie is not provided, `APIKeyCookie` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the cookie is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a cookie or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": cookie}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader","title":"readyapi.security.APIKeyHeader","text":"<pre><code>APIKeyHeader(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a header.</p> <p>This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyHeader\n\napp = ReadyAPI()\n\nheader_scheme = APIKeyHeader(name=\"x-key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(key: str = Depends(header_scheme)):\n    return {\"key\": key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Header name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the header is not provided, <code>APIKeyHeader</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Header name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the header is not provided, `APIKeyHeader` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the header is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a header or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": header}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery","title":"readyapi.security.APIKeyQuery","text":"<pre><code>APIKeyQuery(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a query parameter.</p> <p>This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyQuery\n\napp = ReadyAPI()\n\nquery_scheme = APIKeyQuery(name=\"api_key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(query_scheme)):\n    return {\"api_key\": api_key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Query parameter name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the query parameter is not provided, <code>APIKeyQuery</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the query parameter is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a query parameter or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[\n        str,\n        Doc(\"Query parameter name.\"),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the query parameter is not provided, `APIKeyQuery` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the query parameter is not\n            available, instead of erroring out, the dependency result will be\n            `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a query\n            parameter or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": query}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#http-authentication-schemes","title":"HTTP Authentication Schemes","text":""},{"location":"reference/security/#readyapi.security.HTTPBasic","title":"readyapi.security.HTTPBasic","text":"<pre><code>HTTPBasic(\n    *,\n    scheme_name=None,\n    realm=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Basic authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPBasicCredentials</code> object containing the <code>username</code> and the <code>password</code>.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>realm</code> <p>HTTP Basic authentication realm.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Basic authentication is not provided (a header), <code>HTTPBasic</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    realm: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            HTTP Basic authentication realm.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Basic authentication is not provided (a\n            header), `HTTPBasic` will automatically cancel the request and send the\n            client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Basic authentication\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP Basic\n            authentication or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='basic', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.realm","title":"realm  <code>instance-attribute</code>","text":"<pre><code>realm = realm\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer","title":"readyapi.security.HTTPBearer","text":"<pre><code>HTTPBearer(\n    *,\n    bearerFormat=None,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Bearer token authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\napp = ReadyAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>bearerFormat</code> <p>Bearer token format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Bearer token is not provided (in an <code>Authorization</code> header), <code>HTTPBearer</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Bearer token is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in an HTTP Bearer token or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Bearer token is not provided (in an\n            `Authorization` header), `HTTPBearer` will automatically cancel the\n            request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Bearer token\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in an HTTP\n            Bearer token or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBearer(\n    bearerFormat=bearerFormat, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest","title":"readyapi.security.HTTPDigest","text":"<pre><code>HTTPDigest(\n    *, scheme_name=None, description=None, auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Digest authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\napp = ReadyAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Digest is not provided, <code>HTTPDigest</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Digest is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Digest is not provided, `HTTPDigest` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Digest is not\n            available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP\n            Digest or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='digest', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-credentials","title":"HTTP Credentials","text":""},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials","title":"readyapi.security.HTTPAuthorizationCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP authorization credentials in the result of using <code>HTTPBearer</code> or <code>HTTPDigest</code> in a dependency.</p> <p>The HTTP authorization header value is split by the first space.</p> <p>The first part is the <code>scheme</code>, the second part is the <code>credentials</code>.</p> <p>For example, in an HTTP Bearer token scheme, the client will send a header like:</p> <pre><code>Authorization: Bearer deadbeef12346\n</code></pre> <p>In this case:</p> <ul> <li><code>scheme</code> will have the value <code>\"Bearer\"</code></li> <li><code>credentials</code> will have the value <code>\"deadbeef12346\"</code></li> </ul>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre> <p>The HTTP authorization scheme extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.credentials","title":"credentials  <code>instance-attribute</code>","text":"<pre><code>credentials\n</code></pre> <p>The HTTP authorization credentials extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials","title":"readyapi.security.HTTPBasicCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP Basic credentials given as the result of using <code>HTTPBasic</code> in a dependency.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username\n</code></pre> <p>The HTTP Basic username.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password\n</code></pre> <p>The HTTP Basic password.</p>"},{"location":"reference/security/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"reference/security/#readyapi.security.OAuth2","title":"readyapi.security.OAuth2","text":"<pre><code>OAuth2(\n    *,\n    flows=OAuthFlows(),\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.</p> <p>You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.</p> <p>Read more about it in the ReadyAPI docs for Security.</p> PARAMETER DESCRIPTION <code>flows</code> <p>The dictionary of OAuth2 flows.</p> <p> TYPE: <code>Union[OAuthFlows, Dict[str, Dict[str, Any]]]</code> DEFAULT: <code>OAuthFlows()</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    flows: Annotated[\n        Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            The dictionary of OAuth2 flows.\n            \"\"\"\n        ),\n    ] = OAuthFlowsModel(),\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OAuth2Model(\n        flows=cast(OAuthFlowsModel, flows), description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer","title":"readyapi.security.OAuth2AuthorizationCodeBearer","text":"<pre><code>OAuth2AuthorizationCodeBearer(\n    authorizationUrl,\n    tokenUrl,\n    refreshUrl=None,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code flow. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>authorizationUrl</code> <p> TYPE: <code>str</code> </p> <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token.</p> <p> TYPE: <code>str</code> </p> <code>refreshUrl</code> <p>The URL to refresh the token and obtain a new one.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    authorizationUrl: str,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token.\n            \"\"\"\n        ),\n    ],\n    refreshUrl: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL to refresh the token and obtain a new one.\n            \"\"\"\n        ),\n    ] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        authorizationCode=cast(\n            Any,\n            {\n                \"authorizationUrl\": authorizationUrl,\n                \"tokenUrl\": tokenUrl,\n                \"refreshUrl\": refreshUrl,\n                \"scopes\": scopes,\n            },\n        )\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer","title":"readyapi.security.OAuth2PasswordBearer","text":"<pre><code>OAuth2PasswordBearer(\n    tokenUrl,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p> PARAMETER DESCRIPTION <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token. This would be the path operation that has <code>OAuth2PasswordRequestForm</code> as a dependency.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token. This would be the *path operation*\n            that has `OAuth2PasswordRequestForm` as a dependency.\n            \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#oauth2-password-form","title":"OAuth2 Password Form","text":""},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm","title":"readyapi.security.OAuth2PasswordRequestForm","text":"<pre><code>OAuth2PasswordRequestForm(\n    *,\n    grant_type=None,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None\n)\n</code></pre> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the <code>OAuth2PasswordRequestFormStrict</code> dependency.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    grant_type: Annotated[\n        Union[str, None],\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". Nevertheless, this dependency class is permissive and\n            allows not passing it. If you want to enforce it, use instead the\n            `OAuth2PasswordRequestFormStrict` dependency.\n            \"\"\"\n        ),\n    ] = None,\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.grant_type = grant_type\n    self.username = username\n    self.password = password\n    self.scopes = scope.split()\n    self.client_id = client_id\n    self.client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict","title":"readyapi.security.OAuth2PasswordRequestFormStrict","text":"<pre><code>OAuth2PasswordRequestFormStrict(\n    grant_type,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None,\n)\n</code></pre> <p>               Bases: <code>OAuth2PasswordRequestForm</code></p> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>The only difference between <code>OAuth2PasswordRequestFormStrict</code> and <code>OAuth2PasswordRequestForm</code> is that <code>OAuth2PasswordRequestFormStrict</code> requires the client to send the form field <code>grant_type</code> with the value <code>\"password\"</code>, which is required in the OAuth2 specification (it seems that for no particular reason), while for <code>OAuth2PasswordRequestForm</code> <code>grant_type</code> is optional.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> the OAuth2 spec says it is required and MUST be the fixed string \"password\". <p>This dependency is strict about it. If you want to be permissive, use instead the OAuth2PasswordRequestForm dependency class.</p> <p>username: username string. The OAuth2 spec requires the exact field name \"username\". password: password string. The OAuth2 spec requires the exact field name \"password\". scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.     \"items:read items:write users:read profile openid\" client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". This dependency is strict about it. If you want to be permissive, use instead the <code>OAuth2PasswordRequestForm</code> dependency class.</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    grant_type: Annotated[\n        str,\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". This dependency is strict about it. If you want to be\n            permissive, use instead the `OAuth2PasswordRequestForm` dependency\n            class.\n            \"\"\"\n        ),\n    ],\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    super().__init__(\n        grant_type=grant_type,\n        username=username,\n        password=password,\n        scope=scope,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#oauth2-security-scopes-in-dependencies","title":"OAuth2 Security Scopes in Dependencies","text":""},{"location":"reference/security/#readyapi.security.SecurityScopes","title":"readyapi.security.SecurityScopes","text":"<pre><code>SecurityScopes(scopes=None)\n</code></pre> <p>This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.</p> <p>This way, multiple dependencies can have different scopes, even when used in the same path operation. And with this, you can access all the scopes required in all those dependencies in a single place.</p> <p>Read more about it in the ReadyAPI docs for OAuth2 scopes.</p> PARAMETER DESCRIPTION <code>scopes</code> <p>This will be filled by ReadyAPI.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    scopes: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n            This will be filled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.scopes: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n            The list of all the scopes required by dependencies.\n            \"\"\"\n        ),\n    ] = scopes or []\n    self.scope_str: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            All the scopes required by all the dependencies in a single string\n            separated by spaces, as defined in the OAuth2 specification.\n            \"\"\"\n        ),\n    ] = \" \".join(self.scopes)\n</code></pre>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = scopes or []\n</code></pre> <p>The list of all the scopes required by dependencies.</p>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scope_str","title":"scope_str  <code>instance-attribute</code>","text":"<pre><code>scope_str = join(scopes)\n</code></pre> <p>All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.</p>"},{"location":"reference/security/#openid-connect","title":"OpenID Connect","text":""},{"location":"reference/security/#readyapi.security.OpenIdConnect","title":"readyapi.security.OpenIdConnect","text":"<pre><code>OpenIdConnect(\n    *,\n    openIdConnectUrl,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>OpenID Connect authentication class. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>openIdConnectUrl</code> <p>The OpenID Connect URL.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/open_id_connect_url.py</code> <pre><code>def __init__(\n    self,\n    *,\n    openIdConnectUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n        The OpenID Connect URL.\n        \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OpenID Connect authentication, it will automatically cancel the request\n            and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OpenID\n            Connect or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OpenIdConnectModel(\n        openIdConnectUrl=openIdConnectUrl, description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OpenIdConnect(\n    openIdConnectUrl=openIdConnectUrl,\n    description=description,\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/encoders/","title":"Encoders - <code>jsonable_encoder</code>","text":""},{"location":"reference/encoders/#readyapi.encoders.jsonable_encoder","title":"readyapi.encoders.jsonable_encoder","text":"<pre><code>jsonable_encoder(\n    obj,\n    include=None,\n    exclude=None,\n    by_alias=True,\n    exclude_unset=False,\n    exclude_defaults=False,\n    exclude_none=False,\n    custom_encoder=None,\n    sqlalchemy_safe=True,\n)\n</code></pre> <p>Convert any object to something that can be encoded in JSON.</p> <p>This is used internally by ReadyAPI to make sure anything you return can be encoded as JSON before it is sent to the client.</p> <p>You can also use it yourself, for example to convert objects before saving them in a database that supports only JSON.</p> <p>Read more about it in the ReadyAPI docs for JSON Compatible Encoder.</p> PARAMETER DESCRIPTION <code>obj</code> <p>The input object to convert to JSON.</p> <p> TYPE: <code>Any</code> </p> <code>include</code> <p>Pydantic's <code>include</code> parameter, passed to Pydantic models to set the fields to include.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Pydantic's <code>exclude</code> parameter, passed to Pydantic models to set the fields to exclude.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>by_alias</code> <p>Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to define if the output should use the alias names (when provided) or the Python attribute names. In an API, if you set an alias, it's probably because you want to use it in the result, so you probably want to leave this set to <code>True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>exclude_unset</code> <p>Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that were not explicitly set (and that only had their default values).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_defaults</code> <p>Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that had the same default value, even when they were explicitly set.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_none</code> <p>Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to define if it should exclude from the output any fields that have a <code>None</code> value.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>custom_encoder</code> <p>Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p> <p> TYPE: <code>Optional[Dict[Any, Callable[[Any], Any]]]</code> DEFAULT: <code>None</code> </p> <code>sqlalchemy_safe</code> <p>Exclude from the output any fields that start with the name <code>_sa</code>.</p> <p>This is mainly a hack for compatibility with SQLAlchemy objects, they store internal SQLAlchemy-specific state in attributes named with <code>_sa</code>, and those objects can't (and shouldn't be) serialized to JSON.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/encoders.py</code> <pre><code>def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by ReadyAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [ReadyAPI docs for JSON Compatible Encoder](https://readyapi.khulnasoft.com/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &amp;= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n</code></pre>"},{"location":"reference/staticfiles/","title":"Static Files - <code>StaticFiles</code>","text":"<p>You can use the <code>StaticFiles</code> class to serve static files, like JavaScript, CSS, images, etc.</p> <p>Read more about it in the ReadyAPI docs for Static Files.</p> <p>You can import it directly from <code>readyapi.staticfiles</code>:</p> <pre><code>from readyapi.staticfiles import StaticFiles\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles","title":"readyapi.staticfiles.StaticFiles","text":"<pre><code>StaticFiles(\n    *,\n    directory=None,\n    packages=None,\n    html=False,\n    check_dir=True,\n    follow_symlink=False\n)\n</code></pre> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>html</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>check_dir</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>follow_symlink</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def __init__(\n    self,\n    *,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n    html: bool = False,\n    check_dir: bool = True,\n    follow_symlink: bool = False,\n) -&gt; None:\n    self.directory = directory\n    self.packages = packages\n    self.all_directories = self.get_directories(directory, packages)\n    self.html = html\n    self.config_checked = False\n    self.follow_symlink = follow_symlink\n    if check_dir and directory is not None and not os.path.isdir(directory):\n        raise RuntimeError(f\"Directory '{directory}' does not exist\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = packages\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.all_directories","title":"all_directories  <code>instance-attribute</code>","text":"<pre><code>all_directories = get_directories(directory, packages)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.html","title":"html  <code>instance-attribute</code>","text":"<pre><code>html = html\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.config_checked","title":"config_checked  <code>instance-attribute</code>","text":"<pre><code>config_checked = False\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.follow_symlink","title":"follow_symlink  <code>instance-attribute</code>","text":"<pre><code>follow_symlink = follow_symlink\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_directories","title":"get_directories","text":"<pre><code>get_directories(directory=None, packages=None)\n</code></pre> <p>Given <code>directory</code> and <code>packages</code> arguments, return a list of all the directories that should be used for serving static files from.</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_directories(\n    self,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n) -&gt; list[PathLike]:\n    \"\"\"\n    Given `directory` and `packages` arguments, return a list of all the\n    directories that should be used for serving static files from.\n    \"\"\"\n    directories = []\n    if directory is not None:\n        directories.append(directory)\n\n    for package in packages or []:\n        if isinstance(package, tuple):\n            package, statics_dir = package\n        else:\n            statics_dir = \"statics\"\n        spec = importlib.util.find_spec(package)\n        assert spec is not None, f\"Package {package!r} could not be found.\"\n        assert spec.origin is not None, f\"Package {package!r} could not be found.\"\n        package_directory = os.path.normpath(os.path.join(spec.origin, \"..\", statics_dir))\n        assert os.path.isdir(package_directory), (\n            f\"Directory '{statics_dir!r}' in package {package!r} could not be found.\"\n        )\n        directories.append(package_directory)\n\n    return directories\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_path","title":"get_path","text":"<pre><code>get_path(scope)\n</code></pre> <p>Given the ASGI scope, return the <code>path</code> string to serve up, with OS specific path separators, and any '..', '.' components removed.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_path(self, scope: Scope) -&gt; str:\n    \"\"\"\n    Given the ASGI scope, return the `path` string to serve up,\n    with OS specific path separators, and any '..', '.' components removed.\n    \"\"\"\n    route_path = get_route_path(scope)\n    return os.path.normpath(os.path.join(*route_path.split(\"/\")))\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_response","title":"get_response  <code>async</code>","text":"<pre><code>get_response(path, scope)\n</code></pre> <p>Returns an HTTP response, given the incoming path, method and request headers.</p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def get_response(self, path: str, scope: Scope) -&gt; Response:\n    \"\"\"\n    Returns an HTTP response, given the incoming path, method and request headers.\n    \"\"\"\n    if scope[\"method\"] not in (\"GET\", \"HEAD\"):\n        raise HTTPException(status_code=405)\n\n    try:\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, path)\n    except PermissionError:\n        raise HTTPException(status_code=401)\n    except OSError as exc:\n        # Filename is too long, so it can't be a valid static file.\n        if exc.errno == errno.ENAMETOOLONG:\n            raise HTTPException(status_code=404)\n\n        raise exc\n\n    if stat_result and stat.S_ISREG(stat_result.st_mode):\n        # We have a static file to serve.\n        return self.file_response(full_path, stat_result, scope)\n\n    elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:\n        # We're in HTML mode, and have got a directory URL.\n        # Check if we have 'index.html' file to serve.\n        index_path = os.path.join(path, \"index.html\")\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, index_path)\n        if stat_result is not None and stat.S_ISREG(stat_result.st_mode):\n            if not scope[\"path\"].endswith(\"/\"):\n                # Directory URLs should redirect to always end in \"/\".\n                url = URL(scope=scope)\n                url = url.replace(path=url.path + \"/\")\n                return RedirectResponse(url=url)\n            return self.file_response(full_path, stat_result, scope)\n\n    if self.html:\n        # Check for '404.html' if we're in HTML mode.\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, \"404.html\")\n        if stat_result and stat.S_ISREG(stat_result.st_mode):\n            return FileResponse(full_path, stat_result=stat_result, status_code=404)\n    raise HTTPException(status_code=404)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.lookup_path","title":"lookup_path","text":"<pre><code>lookup_path(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def lookup_path(self, path: str) -&gt; tuple[str, os.stat_result | None]:\n    for directory in self.all_directories:\n        joined_path = os.path.join(directory, path)\n        if self.follow_symlink:\n            full_path = os.path.abspath(joined_path)\n            directory = os.path.abspath(directory)\n        else:\n            full_path = os.path.realpath(joined_path)\n            directory = os.path.realpath(directory)\n        if os.path.commonpath([full_path, directory]) != str(directory):\n            # Don't allow misbehaving clients to break out of the static files directory.\n            continue\n        try:\n            return full_path, os.stat(full_path)\n        except (FileNotFoundError, NotADirectoryError):\n            continue\n    return \"\", None\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.file_response","title":"file_response","text":"<pre><code>file_response(\n    full_path, stat_result, scope, status_code=200\n)\n</code></pre> PARAMETER DESCRIPTION <code>full_path</code> <p> TYPE: <code>PathLike</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def file_response(\n    self,\n    full_path: PathLike,\n    stat_result: os.stat_result,\n    scope: Scope,\n    status_code: int = 200,\n) -&gt; Response:\n    request_headers = Headers(scope=scope)\n\n    response = FileResponse(full_path, status_code=status_code, stat_result=stat_result)\n    if self.is_not_modified(response.headers, request_headers):\n        return NotModifiedResponse(response.headers)\n    return response\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.check_config","title":"check_config  <code>async</code>","text":"<pre><code>check_config()\n</code></pre> <p>Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.</p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def check_config(self) -&gt; None:\n    \"\"\"\n    Perform a one-off configuration check that StaticFiles is actually\n    pointed at a directory, so that we can raise loud errors rather than\n    just returning 404 responses.\n    \"\"\"\n    if self.directory is None:\n        return\n\n    try:\n        stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)\n    except FileNotFoundError:\n        raise RuntimeError(f\"StaticFiles directory '{self.directory}' does not exist.\")\n    if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):\n        raise RuntimeError(f\"StaticFiles path '{self.directory}' is not a directory.\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.is_not_modified","title":"is_not_modified","text":"<pre><code>is_not_modified(response_headers, request_headers)\n</code></pre> <p>Given the request and response headers, return <code>True</code> if an HTTP \"Not Modified\" response could be returned instead.</p> PARAMETER DESCRIPTION <code>response_headers</code> <p> TYPE: <code>Headers</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def is_not_modified(self, response_headers: Headers, request_headers: Headers) -&gt; bool:\n    \"\"\"\n    Given the request and response headers, return `True` if an HTTP\n    \"Not Modified\" response could be returned instead.\n    \"\"\"\n    try:\n        if_none_match = request_headers[\"if-none-match\"]\n        etag = response_headers[\"etag\"]\n        if etag in [tag.strip(\" W/\") for tag in if_none_match.split(\",\")]:\n            return True\n    except KeyError:\n        pass\n\n    try:\n        if_modified_since = parsedate(request_headers[\"if-modified-since\"])\n        last_modified = parsedate(response_headers[\"last-modified\"])\n        if if_modified_since is not None and last_modified is not None and if_modified_since &gt;= last_modified:\n            return True\n    except KeyError:\n        pass\n\n    return False\n</code></pre>"},{"location":"reference/templating/","title":"Templating - <code>Jinja2Templates</code>","text":"<p>You can use the <code>Jinja2Templates</code> class to render Jinja templates.</p> <p>Read more about it in the ReadyAPI docs for Templates.</p> <p>You can import it directly from <code>readyapi.templating</code>:</p> <pre><code>from readyapi.templating import Jinja2Templates\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates","title":"readyapi.templating.Jinja2Templates","text":"<pre><code>Jinja2Templates(\n    directory: (\n        str | PathLike[str] | Sequence[str | PathLike[str]]\n    ),\n    *,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None,\n    **env_options: Any\n)\n</code></pre><pre><code>Jinja2Templates(\n    *,\n    env: Environment,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None\n)\n</code></pre> <pre><code>Jinja2Templates(\n    directory=None,\n    *,\n    context_processors=None,\n    env=None,\n    **env_options\n)\n</code></pre> <p>templates = Jinja2Templates(\"templates\")</p> <p>return templates.TemplateResponse(\"index.html\", {\"request\": request})</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>str | PathLike[str] | Sequence[str | PathLike[str]] | None</code> DEFAULT: <code>None</code> </p> <code>context_processors</code> <p> TYPE: <code>list[Callable[[Request], dict[str, Any]]] | None</code> DEFAULT: <code>None</code> </p> <code>env</code> <p> TYPE: <code>Environment | None</code> DEFAULT: <code>None</code> </p> <code>**env_options</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None,\n    *,\n    context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n    **env_options: typing.Any,\n) -&gt; None:\n    if env_options:\n        warnings.warn(\n            \"Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.\",\n            DeprecationWarning,\n        )\n    assert jinja2 is not None, \"jinja2 must be installed to use Jinja2Templates\"\n    assert bool(directory) ^ bool(env), \"either 'directory' or 'env' arguments must be passed\"\n    self.context_processors = context_processors or []\n    if directory is not None:\n        self.env = self._create_env(directory, **env_options)\n    elif env is not None:  # pragma: no branch\n        self.env = env\n\n    self._setup_env_defaults(self.env)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.context_processors","title":"context_processors  <code>instance-attribute</code>","text":"<pre><code>context_processors = context_processors or []\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = _create_env(directory, **env_options)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.get_template","title":"get_template","text":"<pre><code>get_template(name)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def get_template(self, name: str) -&gt; jinja2.Template:\n    return self.env.get_template(name)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.TemplateResponse","title":"TemplateResponse","text":"<pre><code>TemplateResponse(\n    request: Request,\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre><pre><code>TemplateResponse(\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre> <pre><code>TemplateResponse(*args, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>*args</code> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def TemplateResponse(self, *args: typing.Any, **kwargs: typing.Any) -&gt; _TemplateResponse:\n    if args:\n        if isinstance(args[0], str):  # the first argument is template name (old style)\n            warnings.warn(\n                \"The `name` is not the first parameter anymore. \"\n                \"The first parameter should be the `Request` instance.\\n\"\n                'Replace `TemplateResponse(name, {\"request\": request})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n\n            name = args[0]\n            context = args[1] if len(args) &gt; 1 else kwargs.get(\"context\", {})\n            status_code = args[2] if len(args) &gt; 2 else kwargs.get(\"status_code\", 200)\n            headers = args[3] if len(args) &gt; 3 else kwargs.get(\"headers\")\n            media_type = args[4] if len(args) &gt; 4 else kwargs.get(\"media_type\")\n            background = args[5] if len(args) &gt; 5 else kwargs.get(\"background\")\n\n            if \"request\" not in context:\n                raise ValueError('context must include a \"request\" key')\n            request = context[\"request\"]\n        else:  # the first argument is a request instance (new style)\n            request = args[0]\n            name = args[1] if len(args) &gt; 1 else kwargs[\"name\"]\n            context = args[2] if len(args) &gt; 2 else kwargs.get(\"context\", {})\n            status_code = args[3] if len(args) &gt; 3 else kwargs.get(\"status_code\", 200)\n            headers = args[4] if len(args) &gt; 4 else kwargs.get(\"headers\")\n            media_type = args[5] if len(args) &gt; 5 else kwargs.get(\"media_type\")\n            background = args[6] if len(args) &gt; 6 else kwargs.get(\"background\")\n    else:  # all arguments are kwargs\n        if \"request\" not in kwargs:\n            warnings.warn(\n                \"The `TemplateResponse` now requires the `request` argument.\\n\"\n                'Replace `TemplateResponse(name, {\"context\": context})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n            if \"request\" not in kwargs.get(\"context\", {}):\n                raise ValueError('context must include a \"request\" key')\n\n        context = kwargs.get(\"context\", {})\n        request = kwargs.get(\"request\", context.get(\"request\"))\n        name = typing.cast(str, kwargs[\"name\"])\n        status_code = kwargs.get(\"status_code\", 200)\n        headers = kwargs.get(\"headers\")\n        media_type = kwargs.get(\"media_type\")\n        background = kwargs.get(\"background\")\n\n    context.setdefault(\"request\", request)\n    for context_processor in self.context_processors:\n        context.update(context_processor(request))\n\n    template = self.get_template(name)\n    return _TemplateResponse(\n        template,\n        context,\n        status_code=status_code,\n        headers=headers,\n        media_type=media_type,\n        background=background,\n    )\n</code></pre>"},{"location":"reference/testclient/","title":"Test Client - <code>TestClient</code>","text":"<p>You can use the <code>TestClient</code> class to test ReadyAPI applications without creating an actual HTTP and socket connection, just communicating directly with the ReadyAPI code.</p> <p>Read more about it in the ReadyAPI docs for Testing.</p> <p>You can import it directly from <code>readyapi.testclient</code>:</p> <pre><code>from readyapi.testclient import TestClient\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient","title":"readyapi.testclient.TestClient","text":"<pre><code>TestClient(\n    app,\n    base_url=\"http://testserver\",\n    raise_server_exceptions=True,\n    root_path=\"\",\n    backend=\"asyncio\",\n    backend_options=None,\n    cookies=None,\n    headers=None,\n    follow_redirects=True,\n    client=(\"testclient\", 50000),\n)\n</code></pre> <p>               Bases: <code>Client</code></p> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>base_url</code> <p> TYPE: <code>str</code> DEFAULT: <code>'http://testserver'</code> </p> <code>raise_server_exceptions</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>root_path</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>backend</code> <p> TYPE: <code>Literal['asyncio', 'trio']</code> DEFAULT: <code>'asyncio'</code> </p> <code>backend_options</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>client</code> <p> TYPE: <code>tuple[str, int]</code> DEFAULT: <code>('testclient', 50000)</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    base_url: str = \"http://testserver\",\n    raise_server_exceptions: bool = True,\n    root_path: str = \"\",\n    backend: typing.Literal[\"asyncio\", \"trio\"] = \"asyncio\",\n    backend_options: dict[str, typing.Any] | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = True,\n    client: tuple[str, int] = (\"testclient\", 50000),\n) -&gt; None:\n    self.async_backend = _AsyncBackend(backend=backend, backend_options=backend_options or {})\n    if _is_asgi3(app):\n        asgi_app = app\n    else:\n        app = typing.cast(ASGI2App, app)  # type: ignore[assignment]\n        asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]\n    self.app = asgi_app\n    self.app_state: dict[str, typing.Any] = {}\n    transport = _TestClientTransport(\n        self.app,\n        portal_factory=self._portal_factory,\n        raise_server_exceptions=raise_server_exceptions,\n        root_path=root_path,\n        app_state=self.app_state,\n        client=client,\n    )\n    if headers is None:\n        headers = {}\n    headers.setdefault(\"user-agent\", \"testclient\")\n    super().__init__(\n        base_url=base_url,\n        headers=headers,\n        transport=transport,\n        follow_redirects=follow_redirects,\n        cookies=cookies,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.headers","title":"headers  <code>property</code> <code>writable</code>","text":"<pre><code>headers\n</code></pre> <p>HTTP headers to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.follow_redirects","title":"follow_redirects  <code>instance-attribute</code>","text":"<pre><code>follow_redirects = follow_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.max_redirects","title":"max_redirects  <code>instance-attribute</code>","text":"<pre><code>max_redirects = max_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed\n</code></pre> <p>Check if the client being closed</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.trust_env","title":"trust_env  <code>property</code>","text":"<pre><code>trust_env\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.event_hooks","title":"event_hooks  <code>property</code> <code>writable</code>","text":"<pre><code>event_hooks\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.auth","title":"auth  <code>property</code> <code>writable</code>","text":"<pre><code>auth\n</code></pre> <p>Authentication class used when none is passed at the request-level.</p> <p>See also Authentication.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.base_url","title":"base_url  <code>property</code> <code>writable</code>","text":"<pre><code>base_url\n</code></pre> <p>Base URL to use when sending requests with relative URLs.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.cookies","title":"cookies  <code>property</code> <code>writable</code>","text":"<pre><code>cookies\n</code></pre> <p>Cookie values to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.params","title":"params  <code>property</code> <code>writable</code>","text":"<pre><code>params\n</code></pre> <p>Query parameters to include in the URL when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.portal","title":"portal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>portal = None\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.async_backend","title":"async_backend  <code>instance-attribute</code>","text":"<pre><code>async_backend = _AsyncBackend(\n    backend=backend, backend_options=backend_options or {}\n)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = asgi_app\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app_state","title":"app_state  <code>instance-attribute</code>","text":"<pre><code>app_state = {}\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.build_request","title":"build_request","text":"<pre><code>build_request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Build and return a request instance.</p> <ul> <li>The <code>params</code>, <code>headers</code> and <code>cookies</code> arguments are merged with any values set on the client.</li> <li>The <code>url</code> argument is merged with any <code>base_url</code> set on the client.</li> </ul> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def build_request(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; Request:\n    \"\"\"\n    Build and return a request instance.\n\n    * The `params`, `headers` and `cookies` arguments\n    are merged with any values set on the client.\n    * The `url` argument is merged with any `base_url` set on the client.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    url = self._merge_url(url)\n    headers = self._merge_headers(headers)\n    cookies = self._merge_cookies(cookies)\n    params = self._merge_queryparams(params)\n    extensions = {} if extensions is None else extensions\n    if \"timeout\" not in extensions:\n        timeout = (\n            self.timeout\n            if isinstance(timeout, UseClientDefault)\n            else Timeout(timeout)\n        )\n        extensions = dict(**extensions, timeout=timeout.as_dict())\n    return Request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.stream","title":"stream","text":"<pre><code>stream(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Alternative to <code>httpx.request()</code> that streams the response body instead of loading it into memory at once.</p> <p>Parameters: See <code>httpx.request</code>.</p> <p>See also: Streaming Responses</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Response</code> Source code in <code>httpx/_client.py</code> <pre><code>@contextmanager\ndef stream(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; typing.Iterator[Response]:\n    \"\"\"\n    Alternative to `httpx.request()` that streams the response body\n    instead of loading it into memory at once.\n\n    **Parameters**: See `httpx.request`.\n\n    See also: [Streaming Responses][0]\n\n    [0]: /quickstart#streaming-responses\n    \"\"\"\n    request = self.build_request(\n        method=method,\n        url=url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        timeout=timeout,\n        extensions=extensions,\n    )\n    response = self.send(\n        request=request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        stream=True,\n    )\n    try:\n        yield response\n    finally:\n        response.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.send","title":"send","text":"<pre><code>send(\n    request,\n    *,\n    stream=False,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT\n)\n</code></pre> <p>Send a request.</p> <p>The request is sent as-is, unmodified.</p> <p>Typically you'll want to build one with <code>Client.build_request()</code> so that any client-level configuration is merged into the request, but passing an explicit <code>httpx.Request()</code> is supported as well.</p> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>request</code> <p> TYPE: <code>Request</code> </p> <code>stream</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def send(\n    self,\n    request: Request,\n    *,\n    stream: bool = False,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n) -&gt; Response:\n    \"\"\"\n    Send a request.\n\n    The request is sent as-is, unmodified.\n\n    Typically you'll want to build one with `Client.build_request()`\n    so that any client-level configuration is merged into the request,\n    but passing an explicit `httpx.Request()` is supported as well.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    if self._state == ClientState.CLOSED:\n        raise RuntimeError(\"Cannot send a request, as the client has been closed.\")\n\n    self._state = ClientState.OPENED\n    follow_redirects = (\n        self.follow_redirects\n        if isinstance(follow_redirects, UseClientDefault)\n        else follow_redirects\n    )\n\n    self._set_timeout(request)\n\n    auth = self._build_request_auth(request, auth)\n\n    response = self._send_handling_auth(\n        request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        history=[],\n    )\n    try:\n        if not stream:\n            response.read()\n\n        return response\n\n    except BaseException as exc:\n        response.close()\n        raise exc\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close transport and proxies.</p> Source code in <code>httpx/_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close transport and proxies.\n    \"\"\"\n    if self._state != ClientState.CLOSED:\n        self._state = ClientState.CLOSED\n\n        self._transport.close()\n        for transport in self._mounts.values():\n            if transport is not None:\n                transport.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.request","title":"request","text":"<pre><code>request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def request(  # type: ignore[override]\n    self,\n    method: str,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    if timeout is not httpx.USE_CLIENT_DEFAULT:\n        warnings.warn(\n            \"You should not use the 'timeout' argument with the TestClient. \"\n            \"See https://github.com/encode/starlette/issues/1108 for more information.\",\n            DeprecationWarning,\n        )\n    url = self._merge_url(url)\n    return super().request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.get","title":"get","text":"<pre><code>get(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def get(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().get(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.options","title":"options","text":"<pre><code>options(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def options(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().options(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.head","title":"head","text":"<pre><code>head(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def head(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().head(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.post","title":"post","text":"<pre><code>post(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def post(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().post(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.put","title":"put","text":"<pre><code>put(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def put(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().put(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.patch","title":"patch","text":"<pre><code>patch(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def patch(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().patch(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.delete","title":"delete","text":"<pre><code>delete(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def delete(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().delete(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.websocket_connect","title":"websocket_connect","text":"<pre><code>websocket_connect(url, subprotocols=None, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str</code> </p> <code>subprotocols</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def websocket_connect(\n    self,\n    url: str,\n    subprotocols: typing.Sequence[str] | None = None,\n    **kwargs: typing.Any,\n) -&gt; WebSocketTestSession:\n    url = urljoin(\"ws://testserver\", url)\n    headers = kwargs.get(\"headers\", {})\n    headers.setdefault(\"connection\", \"upgrade\")\n    headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n    headers.setdefault(\"sec-websocket-version\", \"13\")\n    if subprotocols is not None:\n        headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n    kwargs[\"headers\"] = headers\n    try:\n        super().request(\"GET\", url, **kwargs)\n    except _Upgrade as exc:\n        session = exc.session\n    else:\n        raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover\n\n    return session\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def lifespan(self) -&gt; None:\n    scope = {\"type\": \"lifespan\", \"state\": self.app_state}\n    try:\n        await self.app(scope, self.stream_receive.receive, self.stream_send.send)\n    finally:\n        await self.stream_send.send(None)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_startup","title":"wait_startup  <code>async</code>","text":"<pre><code>wait_startup()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_startup(self) -&gt; None:\n    await self.stream_receive.send({\"type\": \"lifespan.startup\"})\n\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.startup.complete\",\n        \"lifespan.startup.failed\",\n    )\n    if message[\"type\"] == \"lifespan.startup.failed\":\n        await receive()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_shutdown","title":"wait_shutdown  <code>async</code>","text":"<pre><code>wait_shutdown()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_shutdown(self) -&gt; None:\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    await self.stream_receive.send({\"type\": \"lifespan.shutdown\"})\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.shutdown.complete\",\n        \"lifespan.shutdown.failed\",\n    )\n    if message[\"type\"] == \"lifespan.shutdown.failed\":\n        await receive()\n</code></pre>"},{"location":"readyapi-people/","title":"ReadyAPI People","text":"<p>ReadyAPI has an amazing community that welcomes people from all backgrounds.</p>"},{"location":"readyapi-people/#creator","title":"Creator","text":"<p>Hey! \ud83d\udc4b</p> <p>This is me:</p> @khulnasoft Answers: 1898Pull Requests: 734 <p>I'm the creator of ReadyAPI. You can read more about that in Help ReadyAPI - Get Help - Connect with the author.</p> <p>...But here I want to show you the community.</p> <p>ReadyAPI receives a lot of support from the community. And I want to highlight their contributions.</p> <p>These are the people that:</p> <ul> <li>Help others with questions in GitHub.</li> <li>Create Pull Requests.</li> <li>Review Pull Requests, especially important for translations.</li> <li>Help manage the repository (team members).</li> </ul> <p>All these tasks help maintain the repository.</p> <p>A round of applause to them. \ud83d\udc4f \ud83d\ude47</p>"},{"location":"readyapi-people/#team","title":"Team","text":"<p>This is the current list of team members. \ud83d\ude0e</p> <p>They have different levels of involvement and permissions, they can perform repository management tasks and together we  manage the ReadyAPI repository.</p> @khulnasoft @Kludex @alejsdev @svlandeg @YuriiMotov @patrick91 @luzzodev <p>Although the team members have the permissions to perform privileged tasks, all the help from others maintaining ReadyAPI is very much appreciated! \ud83d\ude47\u200d\u2642\ufe0f</p>"},{"location":"readyapi-people/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>These are the users that have been helping others the most with questions in GitHub. \ud83d\ude47</p> <p>They have proven to be ReadyAPI Experts by helping many others. \u2728</p> <p>Tip</p> <p>You could become an official ReadyAPI Expert too!</p> <p>Just help others with questions in GitHub. \ud83e\udd13</p> <p>You can see the ReadyAPI Experts for:</p> <ul> <li>Last Month \ud83e\udd13</li> <li>3 Months \ud83d\ude0e</li> <li>6 Months \ud83e\uddd0</li> <li>1 Year \ud83e\uddd1\u200d\ud83d\udd2c</li> <li>All Time \ud83e\uddd9</li> </ul>"},{"location":"readyapi-people/#readyapi-experts-last-month","title":"ReadyAPI Experts - Last Month","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last month. \ud83e\udd13</p> @YuriiMotov Questions replied: 9 @luzzodev Questions replied: 8 @alv2017 Questions replied: 3 @sachinh35 Questions replied: 2 @KianAnbarestani Questions replied: 2"},{"location":"readyapi-people/#readyapi-experts-3-months","title":"ReadyAPI Experts - 3 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 3 months. \ud83d\ude0e</p> @luzzodev Questions replied: 25 @YuriiMotov Questions replied: 24 @alv2017 Questions replied: 22 @jgould22 Questions replied: 13 @Kludex Questions replied: 10 @yauhen-sobaleu Questions replied: 9 @JavierSanchezCastro Questions replied: 7 @sachinh35 Questions replied: 3 @SobikXexe Questions replied: 3"},{"location":"readyapi-people/#readyapi-experts-6-months","title":"ReadyAPI Experts - 6 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 6 months. \ud83e\uddd0</p> @luzzodev Questions replied: 57 @YuriiMotov Questions replied: 56 @Kludex Questions replied: 34 @alv2017 Questions replied: 25 @jgould22 Questions replied: 17 @sehraramiz Questions replied: 11 @JavierSanchezCastro Questions replied: 9 @yauhen-sobaleu Questions replied: 9 @estebanx64 Questions replied: 7 @yvallois Questions replied: 7"},{"location":"readyapi-people/#readyapi-experts-1-year","title":"ReadyAPI Experts - 1 Year","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last year. \ud83e\uddd1\u200d\ud83d\udd2c</p> @YuriiMotov Questions replied: 172 @Kludex Questions replied: 63 @luzzodev Questions replied: 61 @sinisaos Questions replied: 41 @JavierSanchezCastro Questions replied: 33 @jgould22 Questions replied: 27 @alv2017 Questions replied: 25 @ceb10n Questions replied: 15 @estebanx64 Questions replied: 13 @n8sty Questions replied: 13 @Kfir-G Questions replied: 13 @sehraramiz Questions replied: 11 @PhysicallyActive Questions replied: 11 @mattmess1221 Questions replied: 11 @yauhen-sobaleu Questions replied: 9 @AIdjis Questions replied: 8 @yvallois Questions replied: 7 @hasansezertasan Questions replied: 5 @gustavosett Questions replied: 5"},{"location":"readyapi-people/#readyapi-experts-all-time","title":"ReadyAPI Experts - All Time","text":"<p>Here are the all time ReadyAPI Experts. \ud83e\udd13\ud83e\udd2f</p> <p>These are the users that have helped others the most with questions in GitHub through all time. \ud83e\uddd9</p> @Kludex Questions replied: 655 @jgould22 Questions replied: 263 @YuriiMotov Questions replied: 247 @dmontagu Questions replied: 240 @Mause Questions replied: 219 @ycd Questions replied: 217 @JarroVGIT Questions replied: 192 @euri10 Questions replied: 153 @iudeen Questions replied: 128 @phy25 Questions replied: 126 @JavierSanchezCastro Questions replied: 91 @raphaelauv Questions replied: 83 @ghandic Questions replied: 71 @ArcLightSlavik Questions replied: 71 @n8sty Questions replied: 67 @luzzodev Questions replied: 61 @falkben Questions replied: 59 @acidjunk Questions replied: 50 @yinziyan1206 Questions replied: 49 @sm-Fifteen Questions replied: 49 @adriangb Questions replied: 46 @insomnes Questions replied: 45 @Dustyposa Questions replied: 45 @odiseo0 Questions replied: 43 @frankie567 Questions replied: 43 @sinisaos Questions replied: 41 @includeamin Questions replied: 40 @chbndrhnns Questions replied: 37 @STeveShary Questions replied: 37 @krishnardt Questions replied: 35 @panla Questions replied: 32 @prostomarkeloff Questions replied: 28 @hasansezertasan Questions replied: 27 @dbanty Questions replied: 26 @alv2017 Questions replied: 25 @wshayes Questions replied: 25 @SirTelemak Questions replied: 23 @connebs Questions replied: 22 @nymous Questions replied: 22 @chrisK824 Questions replied: 22 @rafsaf Questions replied: 21 @ebottos94 Questions replied: 20 @nsidnev Questions replied: 20 @chris-allnutt Questions replied: 20 @estebanx64 Questions replied: 19 @zoliknemet Questions replied: 18 @sehraramiz Questions replied: 18 @retnikt Questions replied: 18"},{"location":"readyapi-people/#top-contributors","title":"Top Contributors","text":"<p>Here are the Top Contributors. \ud83d\udc77</p> <p>These users have created the most Pull Requests that have been merged.</p> <p>They have contributed source code, documentation, etc. \ud83d\udce6</p> @alejsdev Pull Requests: 47 @Kludex Pull Requests: 23 @dmontagu Pull Requests: 17 @euri10 Pull Requests: 13 @kantandane Pull Requests: 13 @nilslindemann Pull Requests: 11 @zhaohan-dong Pull Requests: 11 @mariacamilagl Pull Requests: 9 @handabaldeep Pull Requests: 9 @vishnuvskvkl Pull Requests: 8 @svlandeg Pull Requests: 7 @alissadb Pull Requests: 6 @wshayes Pull Requests: 5 @samuelcolvin Pull Requests: 5 @waynerv Pull Requests: 5 @krishnamadhavan Pull Requests: 5 @alv2017 Pull Requests: 5 @jekirl Pull Requests: 4 @hitrust Pull Requests: 4 @ShahriyarR Pull Requests: 4 @adriangb Pull Requests: 4 @iudeen Pull Requests: 4 @philipokiokio Pull Requests: 4 @AlexWendland Pull Requests: 4 @divums Pull Requests: 3 @prostomarkeloff Pull Requests: 3 @nsidnev Pull Requests: 3 @pawamoy Pull Requests: 3 @patrickmckenna Pull Requests: 3 @hukkin Pull Requests: 3 @marcosmmb Pull Requests: 3 @Serrones Pull Requests: 3 @uriyyo Pull Requests: 3 @andrew222651 Pull Requests: 3 @rkbeatss Pull Requests: 3 @asheux Pull Requests: 3 @n25a Pull Requests: 3 @ghandic Pull Requests: 3 @TeoZosa Pull Requests: 3 @graingert Pull Requests: 3 @jaystone776 Pull Requests: 3 @zanieb Pull Requests: 3 @MicaelJarniac Pull Requests: 3 @papb Pull Requests: 3 @musicinmybrain Pull Requests: 3 @gitworkflows Pull Requests: 3 <p>There are hundreds of other contributors, you can see them all in the ReadyAPI GitHub Contributors page. \ud83d\udc77</p>"},{"location":"readyapi-people/#top-translators","title":"Top Translators","text":"<p>These are the Top Translators. \ud83c\udf10</p> <p>These users have created the most Pull Requests with translations to other languages that have been merged.</p> @nilslindemann Translations: 120 @jaystone776 Translations: 46 @ceb10n Translations: 27 @tokusumi Translations: 23 @SwftAlpc Translations: 23 @hasansezertasan Translations: 22 @waynerv Translations: 20 @valentinDruzhinin Translations: 18 @AlertRED Translations: 16 @hard-coders Translations: 15 @Joao-Pedro-P-Holanda Translations: 14 @codingjenny Translations: 14 @Xewus Translations: 13 @Zhongheng-Cheng Translations: 13 @Smlep Translations: 11 @marcelomarkus Translations: 11 @KaniKim Translations: 10 @Vincy1230 Translations: 9 @rjNemo Translations: 8 @xzmeng Translations: 8 @pablocm83 Translations: 8 @ptt3199 Translations: 7 @batlopes Translations: 6 @lucasbalieiro Translations: 6 @Alexandrhub Translations: 6 @Serrones Translations: 5 @RunningIkkyu Translations: 5 @Attsun1031 Translations: 5 @NinaHwang Translations: 5 @rostik1410 Translations: 5 @alv2017 Translations: 5 @komtaki Translations: 4 @JulianMaurin Translations: 4 @stlucasgarcia Translations: 4 @ComicShrimp Translations: 4 @BilalAlpaslan Translations: 4 @axel584 Translations: 4 @tamtam-fitness Translations: 4 @Limsunoh Translations: 4 @kwang1215 Translations: 4 @k94-ishi Translations: 4 @jfunez Translations: 3 @ycd Translations: 3 @mariacamilagl Translations: 3 @maoyibo Translations: 3 @blt232018 Translations: 3 @magiskboy Translations: 3 @luccasmmg Translations: 3 @lbmendes Translations: 3"},{"location":"readyapi-people/#top-translation-reviewers","title":"Top Translation Reviewers","text":"<p>These users are the Top Translation Reviewers. \ud83d\udd75\ufe0f</p> <p>I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages.</p> @s111d Reviews: 147 @Xewus Reviews: 140 @sodaMelon Reviews: 124 @ceb10n Reviews: 112 @tokusumi Reviews: 104 @hasansezertasan Reviews: 95 @hard-coders Reviews: 92 @alv2017 Reviews: 88 @nazarepiedady Reviews: 83 @AlertRED Reviews: 81 @Alexandrhub Reviews: 68 @waynerv Reviews: 63 @cassiobotaro Reviews: 62 @mattwang44 Reviews: 59 @Laineyzhang55 Reviews: 48 @Kludex Reviews: 47 @komtaki Reviews: 45 @rostik1410 Reviews: 42 @svlandeg Reviews: 42 @alperiox Reviews: 42 @Rishat-F Reviews: 42 @Winand Reviews: 40 @solomein-sv Reviews: 38 @JavierSanchezCastro Reviews: 38 @stlucasgarcia Reviews: 36 @SwftAlpc Reviews: 36 @alejsdev Reviews: 36 @timothy-jeong Reviews: 36 @nilslindemann Reviews: 35 @rjNemo Reviews: 34 @codingjenny Reviews: 34 @mezgoodle Reviews: 33 @akarev0 Reviews: 33 @romashevchenko Reviews: 32 @LorhanSohaky Reviews: 30 @Vincy1230 Reviews: 30 @black-redoc Reviews: 29 @pedabraham Reviews: 28 @Smlep Reviews: 28 @dedkot01 Reviews: 28 @hsuanchi Reviews: 28 @dpinezich Reviews: 28 @maoyibo Reviews: 27 @0417taehyun Reviews: 27 @BilalAlpaslan Reviews: 26 @junah201 Reviews: 26 @zy7y Reviews: 25 @mycaule Reviews: 25 @Aruelius Reviews: 24"},{"location":"readyapi-people/#sponsors","title":"Sponsors","text":"<p>These are the Sponsors. \ud83d\ude0e</p> <p>They are supporting my work with ReadyAPI (and others), mainly through GitHub Sponsors.</p>"},{"location":"readyapi-people/#gold-sponsors","title":"Gold Sponsors","text":""},{"location":"readyapi-people/#silver-sponsors","title":"Silver Sponsors","text":""},{"location":"readyapi-people/#bronze-sponsors","title":"Bronze Sponsors","text":""},{"location":"readyapi-people/#individual-sponsors","title":"Individual Sponsors","text":"@coderabbitai @Nixtla @permitio @mercedes-benz @marvin-robot @Ponte-Energy-Partners @LambdaTest-Inc @BoostryJP @acsone @Trivie @takashi-yoneya @mainframeindustries @yasyf @alixlahuec @primer-io @upciti @f4rk4sh @freddiev4 @samuelcolvin @vincentkoc @otosky @ramonalmeidam @ashi-agrawal @sepsi77 @RaamEEIL @ehaca @raphaellaude @timlrx @Leay15 @ProteinQure @roboflow @kaoru0310 @DelfinaCare @Karine-Bauch @eruditis @jugeeem @logic-automation @dudikbender @patsatsia @anthonycepeda @patricioperezv @chickenandstats @dodo5522 @knallgelb @dblackrun @zsinx6 @kennywakeland @aacayaco @anomaly @gorhack @Ryandaydev @jaredtrog @jstanden @paulcwatts @andreaso @robintw @pamelafox @ericof @wshayes @gaetanBloch @koxudaxi @falkben @mintuhouse @oliverxchen @TrevorBenson @wdwinslow @catherinenelson1 @jsoques @joeds13 @dannywade @khadrawy @mjohnsey @ternaus @eseglem @FernandoCelmer @simw @Rehket @hiancdtrsnm @jpizquierdo @pawamoy @bnkc @petercool @siavashyj @mobyw @ArtyomVancyan @caviri @hgalytoby @joshuatz @SebTota @nisutec @hoenie-ams @joerambo @rlnchow @dvlpjrs @engineerjoe440 @conservative-dude @CR1337 @PunRabbit @PelicanQ @tochikuji @browniebroke @miguelgr @WillHogan @my3 @leobiscassi @Alisa-lisa @ddanier @bryanculbertson @slafs @ceb10n @moonape1226 @msehnout @xncbf @DMantis @hard-coders @supdann @mntolia @pheanex @Zuzah @artempronevskiy @TheR1D @danielunderwood @rangulvers @sdevkota @brizzbuzz @Baghdady92 @KentShikama @katnoria @harsh183 @hcristea @larsyngvelundin @andrecorumba @rwxd @morzan1001 @sadikkuzu @Olegt0rr @Miles-Arts @sandeepsalwan1 @fabioantonioastore @zhandos256 @one-st-one @Toothwitch @ssbarnea @andreagrandi"},{"location":"readyapi-people/#about-the-data-technical-details","title":"About the data - technical details","text":"<p>The main intention of this page is to highlight the effort of the community to help others.</p> <p>Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.</p> <p>The data is calculated each month, you can read the source code here.</p> <p>Here I'm also highlighting contributions from sponsors.</p> <p>I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>First, you might want to see the basic ways to help ReadyAPI and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the readyapi repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual environment","text":"<p>Follow the instructions to create and activate a virtual environment for the internal code of <code>readyapi</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install requirements using pip","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local ReadyAPI in your local environment.</p>"},{"location":"contributing/#using-your-local-readyapi","title":"Using your local ReadyAPI","text":"<p>If you create a Python file that imports and uses ReadyAPI, and run it with the Python from your local environment, it will use your cloned local ReadyAPI source code.</p> <p>And if you update that local ReadyAPI source code when you run that Python file again, it will use the fresh version of ReadyAPI you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>Technical Details</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install readyapi</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of ReadyAPI is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format-the-code","title":"Format the code","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the main docs in English it's at <code>docs/en/</code>:</p> <pre><code>$ cd docs/en/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#cligenius-cli-optional","title":"Cligenius CLI (optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Cligenius CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Cligenius CLI, you can install completion with:</p> <pre><code>$ cligenius --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place to handle translations in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs/en/</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./docs_src/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"contributing/#apps-and-docs-at-the-same-time","title":"Apps and docs at the same time","text":"<p>If you run the examples with, e.g.:</p> <pre><code>$ readyapi dev tutorial001.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>as Uvicorn by default will use the port <code>8000</code>, the documentation on port <code>8008</code> won't clash.</p>"},{"location":"contributing/#translations","title":"Translations","text":"<p>Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80</p> <p>Here are the steps to help with translations.</p>"},{"location":"contributing/#tips-and-guidelines","title":"Tips and guidelines","text":"<ul> <li> <p>Check the currently existing pull requests for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is <code>lang-es</code>.</p> </li> <li> <p>Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.</p> </li> </ul> <p>Tip</p> <p>You can add comments with change suggestions to existing pull requests.</p> <p>Check the docs about adding a pull request review to approve it or request changes.</p> <ul> <li> <p>Check if there's a GitHub Discussion to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.</p> </li> <li> <p>If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.</p> </li> <li> <p>To check the 2-letter code for the language you want to translate, you can use the table List of ISO 639-1 codes.</p> </li> </ul>"},{"location":"contributing/#existing-language","title":"Existing language","text":"<p>Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.</p> <p>In the case of Spanish, the 2-letter code is <code>es</code>. So, the directory for Spanish translations is located at <code>docs/es/</code>.</p> <p>Tip</p> <p>The main (\"official\") language is English, located at <code>docs/en/</code>.</p> <p>Now run the live server for the docs in Spanish:</p> <pre><code>// Use the command \"live\" and pass the language code as a CLI argument\n$ python ./scripts/docs.py live es\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the Spanish translations it's at <code>docs/es/</code>:</p> <pre><code>$ cd docs/es/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre> <p>Now you can go to http://127.0.0.1:8008 and see your changes live.</p> <p>You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.</p> <p>Now let's say that you want to add a translation for the section Features.</p> <ul> <li>Copy the file at:</li> </ul> <pre><code>docs/en/docs/features.md\n</code></pre> <ul> <li>Paste it in exactly the same location but for the language you want to translate, e.g.:</li> </ul> <pre><code>docs/es/docs/features.md\n</code></pre> <p>Tip</p> <p>Notice that the only change in the path and file name is the language code, from <code>en</code> to <code>es</code>.</p> <p>If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). \ud83c\udf89</p> <p>Now you can translate it all and see how it looks as you save the file.</p>"},{"location":"contributing/#dont-translate-these-pages","title":"Don't Translate these Pages","text":"<p>\ud83d\udea8 Don't translate:</p> <ul> <li>Files under <code>reference/</code></li> <li><code>release-notes.md</code></li> <li><code>readyapi-people.md</code></li> <li><code>external-links.md</code></li> <li><code>newsletter.md</code></li> <li><code>management-tasks.md</code></li> <li><code>management.md</code></li> <li><code>contributing.md</code></li> </ul> <p>Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.</p>"},{"location":"contributing/#new-language","title":"New Language","text":"<p>Let's say that you want to add translations for a language that is not yet translated, not even some pages.</p> <p>Let's say you want to add translations for Creole, and it's not yet there in the docs.</p> <p>Checking the link from above, the code for \"Creole\" is <code>ht</code>.</p> <p>The next step is to run the script to generate a new translation directory:</p> <pre><code>// Use the command new-lang, pass the language code as a CLI argument\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\n</code></pre> <p>Now you can check in your code editor the newly created directory <code>docs/ht/</code>.</p> <p>That command created a file <code>docs/ht/mkdocs.yml</code> with a simple config that inherits everything from the <code>en</code> version:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>Tip</p> <p>You could also simply create that file with those contents manually.</p> <p>That command also created a dummy file <code>docs/ht/index.md</code> for the main page, you can start by translating that one.</p> <p>You can continue with the previous instructions for an \"Existing Language\" for that process.</p> <p>You can make the first pull request with those two files, <code>docs/ht/mkdocs.yml</code> and <code>docs/ht/index.md</code>. \ud83c\udf89</p>"},{"location":"contributing/#preview-the-result","title":"Preview the result","text":"<p>As already mentioned above, you can use the <code>./scripts/docs.py</code> with the <code>live</code> command to preview the results (or <code>mkdocs serve</code>).</p> <p>Once you are done, you can also test it all as it would look online, including all the other languages.</p> <p>To do that, first build all the docs:</p> <pre><code>// Use the command \"build-all\", this will take a bit\n$ python ./scripts/docs.py build-all\n\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\n</code></pre> <p>This builds all those independent MkDocs sites for each language, combines them, and generates the final output at <code>./site/</code>.</p> <p>Then you can serve that with the command <code>serve</code>:</p> <pre><code>// Use the command \"serve\" after running \"build-all\"\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#translation-specific-tips-and-guidelines","title":"Translation specific tips and guidelines","text":"<ul> <li> <p>Translate only the Markdown documents (<code>.md</code>). Do not translate the code examples at <code>./docs_src</code>.</p> </li> <li> <p>In code blocks within the Markdown document, translate comments (<code># a comment</code>), but leave the rest unchanged.</p> </li> <li> <p>Do not change anything enclosed in \"``\" (inline code).</p> </li> <li> <p>In lines starting with <code>///</code> translate only the text part after <code>|</code>. Leave the rest unchanged.</p> </li> <li> <p>You can translate info boxes like <code>/// warning</code> with for example <code>/// warning | Achtung</code>. But do not change the word immediately after the <code>///</code>, it determines the color of the info box.</p> </li> <li> <p>Do not change the paths in links to images, code files, Markdown documents.</p> </li> <li> <p>However, when a Markdown document is translated, the <code>#hash-parts</code> in links to its headings may change. Update these links if possible.</p> <ul> <li>Search for such links in the translated document using the regex <code>#[^# ]</code>.</li> <li>Search in all documents already translated into your language for <code>your-translated-document.md</code>. For example VS Code has an option \"Edit\" -&gt; \"Find in Files\".</li> <li>When translating a document, do not \"pre-translate\" <code>#hash-parts</code> that link to headings in untranslated documents.</li> </ul> </li> </ul>"},{"location":"external-links/","title":"External Links and Articles","text":"<p>ReadyAPI has a great community constantly growing.</p> <p>There are many posts, articles, tools, and projects, related to ReadyAPI.</p> <p>Here's an incomplete list of some of them.</p> <p>Tip</p> <p>If you have an article, project, tool, or anything related to ReadyAPI that is not yet listed here, create a Pull Request adding it.</p>"},{"location":"external-links/#articles","title":"Articles","text":""},{"location":"external-links/#english","title":"English","text":"<ul> <li> <p>How to profile a ReadyAPI asynchronous request by Balthazar Rouberol.</p> </li> <li> <p>Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale by Stephen Siegert - Neon.</p> </li> <li> <p>Building a Machine Learning Microservice with ReadyAPI by Kurtis Pykes - NVIDIA.</p> </li> <li> <p>Booking Appointments with Twilio, Notion, and ReadyAPI by Ravgeet Dhillon - Twilio.</p> </li> <li> <p>Write a Python data layer with Azure Cosmos DB and ReadyAPI by Abhinav Tripathi - Microsoft Blogs.</p> </li> <li> <p>10 Tips for adding SQLAlchemy to ReadyAPI by Donny Peeters.</p> </li> <li> <p>Tips on migrating from Flask to ReadyAPI and vice-versa by Jessica Temporal.</p> </li> <li> <p>Explore How to Effectively Use JWT With ReadyAPI by Ankit Anchlia.</p> </li> <li> <p>Instrument ReadyAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo. by Nicol\u00f3 Lino.</p> </li> <li> <p>ML serving and monitoring with ReadyAPI and Evidently by Mikhail Rozhkov, Elena Samuylova.</p> </li> <li> <p>ReadyAPI Tutorial in Visual Studio Code by Visual Studio Code Team.</p> </li> <li> <p>ReadyAPI application monitoring made easy by Apitally.</p> </li> <li> <p>Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included by John Philip.</p> </li> <li> <p>Building a CRUD API with ReadyAPI and Supabase by Keshav Malik.</p> </li> <li> <p>Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI by Adejumo Ridwan Suleiman.</p> </li> <li> <p>ReadyAPI lambda container: serverless simplified by Raf Rasenberg.</p> </li> <li> <p>Authorization on ReadyAPI with Casbin by Teresa N. Fontanella De Santis.</p> </li> <li> <p>How to monitor ReadyAPI application performance using Python agent by New Relic.</p> </li> <li> <p>Building the Poll App From Django Tutorial With ReadyAPI And React by Jean-Baptiste Rocher.</p> </li> <li> <p>Seamless ReadyAPI Configuration with ConfZ by Silvan Melchior.</p> </li> <li> <p>5 Advanced Features of ReadyAPI You Should Try by Kaustubh Gupta.</p> </li> <li> <p>Deploying ML Models as API Using ReadyAPI and Heroku by Kaustubh Gupta.</p> </li> <li> <p>Using GitHub Actions to Deploy a ReadyAPI Project to Heroku by Somraj Saha.</p> </li> <li> <p>How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI by @pystar.</p> </li> <li> <p>Building a realtime ticket booking solution with Kafka, ReadyAPI, and Ably by Ben Gamble.</p> </li> <li> <p>Building simple E-Commerce with NuxtJS and ReadyAPI by Shahriyar(Shako) Rzayev.</p> </li> <li> <p>Serve a machine learning model using Sklearn, ReadyAPI and Docker by Rodrigo Arenas.</p> </li> <li> <p>Building an API with ReadyAPI and Supabase and Deploying on Deta by Yashasvi Singh.</p> </li> <li> <p>Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao.</p> </li> <li> <p>Python Facebook messenger webhook with ReadyAPI on Glitch by Patrick Ladon.</p> </li> <li> <p>Deploy a dockerized ReadyAPI application to AWS by Valon Januzaj.</p> </li> <li> <p>ReadyAPI for Flask Users by Amit Chaudhary.</p> </li> <li> <p>How to monitor your ReadyAPI service by Louis Guitton.</p> </li> <li> <p>Creating a CRUD App with ReadyAPI (Part one) by Precious Ndubueze.</p> </li> <li> <p>Build And Host Fast Data Science Applications Using ReadyAPI by Farhad Malik.</p> </li> <li> <p>Deploy ReadyAPI on Azure App Service by Navule Pavan Kumar Rao.</p> </li> <li> <p>Machine learning model serving in Python using ReadyAPI and streamlit by Davide Fiocco.</p> </li> <li> <p>Introducing Dispatch by Netflix.</p> </li> <li> <p>Using ReadyAPI with Django by Stavros Korokithakis.</p> </li> <li> <p>Build a Secure Twilio Webhook with Python and ReadyAPI by Twilio.</p> </li> <li> <p>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</p> </li> <li> <p>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</p> </li> <li> <p>Microservice in Python using ReadyAPI by Paurakh Sharma Humagain.</p> </li> <li> <p>Real-time Notifications with Python and Postgres by Guillermo Cruz.</p> </li> <li> <p>Create and Deploy ReadyAPI app to Heroku without using Docker by Navule Pavan Kumar Rao.</p> </li> <li> <p>Another Boilerplate to ReadyAPI: Azure Pipeline CI + Pytest by Arthur Henrique.</p> </li> <li> <p>Deploy Machine Learning Models with Keras, ReadyAPI, Redis and Docker by Shane Soh.</p> </li> <li> <p>Towards Data Science: Deploying Iris Classifications with ReadyAPI and Docker by Mandy Gu.</p> </li> <li> <p>TestDriven.io: Developing and Testing an Asynchronous API with ReadyAPI and Pytest by Michael Herman.</p> </li> <li> <p>How To Deploy Tensorflow 2.0 Models As An API Service With ReadyAPI &amp; Docker by Bernard Brenyah.</p> </li> <li> <p>Why I'm Leaving Flask by Dylan Anthony.</p> </li> <li> <p>Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz.</p> </li> <li> <p>A ReadyAPI and Swagger UI visual cheatsheet by @euri10.</p> </li> <li> <p>Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a ReadyAPI server] by Uber Engineering.</p> </li> <li> <p>How to Deploy a Machine Learning Model by Maarten Grootendorst.</p> </li> <li> <p>JWT Authentication with ReadyAPI and AWS Cognito by Johannes Gontrum.</p> </li> <li> <p>Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur.</p> </li> <li> <p>Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann.</p> </li> <li> <p>ReadyAPI authentication revisited: Enabling API key authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale.</p> </li> <li> <p>Introduction to the readyapi python framework by Errieta Kostala.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin.</p> </li> <li> <p>ReadyAPI/Starlette debug vs prod by William Hayes.</p> </li> <li> <p>Developing ReadyAPI Application using K8s &amp; AWS by Mukul Mantosh.</p> </li> <li> <p>Readyapi, Docker(Docker compose) and Postgres by KrishNa.</p> </li> <li> <p>Deployment using Docker, Lambda, Aurora, CDK &amp; GH Actions by Devon Ray.</p> </li> <li> <p>Mastering Soft Delete: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> <li> <p>Role based row filtering: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> </ul>"},{"location":"external-links/#german","title":"German","text":"<ul> <li> <p>Domain-driven Design mit Python und ReadyAPI by Marcel Sander (actidoo).</p> </li> <li> <p>Inbetriebnahme eines scikit-learn-Modells mit ONNX und ReadyAPI by Nico Axtmann.</p> </li> <li> <p>REST-API Programmieren mittels Python und dem ReadyAPI Modul by Felix Sch\u00fcrmeyer.</p> </li> </ul>"},{"location":"external-links/#japanese","title":"Japanese","text":"<ul> <li> <p>[ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b by @bee2.</p> </li> <li> <p>Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) by @bee2.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b4\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u7ba1\u7406\u8005\u200b\u30da\u30fc\u30b8\u200b\u6539\u826f\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b3\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u8a8d\u200b\u8a3c\u200b\u30fb\u30e6\u30fc\u30b6\u200b\u767b\u200b\u9332\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b2\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b1\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u74b0\u5883\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u200b\u958b\u200b\u767a\u200b\u8005\u200b\u5411\u200b\u3051\u306eDocker\u306b\u3088\u308bPython\u200b\u958b\u200b\u767a\u200b\u74b0\u200b\u5883\u200b\u69cb\u200b\u7bc9\u200b by Hikaru Takahashi.</p> </li> <li> <p>ReadyAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u200b\u53d7\u200b\u3051\u200b\u53d6\u200b\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3092MySQL\u3068\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066Docker\u3067\u200b\u7ba1\u7406\u200b\u3057\u3066\u307f\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3067CORS\u3092\u200b\u56de\u907f\u200b by @angel_katayoku.</p> </li> <li> <p>python\u200b\u88fd\u200b\u306e\u200b\u6700\u65b0\u200bAPI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI \u3092\u200b\u89e6\u200b\u3063\u3066\u307f\u305f by @ryoryomaru.</p> </li> <li> <p>ReadyAPI\uff5cDB\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066CRUD\u3059\u308bPython\u200b\u88fd\u200bAPI\u30b5\u30fc\u30d0\u30fc\u3092\u200b\u69cb\u7bc9\u200b by @mtitg.</p> </li> </ul>"},{"location":"external-links/#portuguese","title":"Portuguese","text":"<ul> <li> <p>ReadyAPI do ZERO by Eduardo Mendes.</p> </li> <li> <p>Dicas para migrar uma aplica\u00e7\u00e3o de Flask para ReadyAPI e vice-versa by Jessica Temporal.</p> </li> </ul>"},{"location":"external-links/#russian","title":"Russian","text":"<ul> <li> <p>ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler.</p> </li> <li> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI? by prostomarkeloff.</p> </li> <li> <p>\u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 ReadyAPI by Andrey Korchak.</p> </li> </ul>"},{"location":"external-links/#vietnamese","title":"Vietnamese","text":"<ul> <li>READYAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n.</li> </ul>"},{"location":"external-links/#taiwanese","title":"Taiwanese","text":"<ul> <li>Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b by Leon.</li> </ul>"},{"location":"external-links/#spanish","title":"Spanish","text":"<ul> <li>Tutorial de ReadyAPI, \u00bfel mejor framework de Python? by Eduardo Zepeda.</li> </ul>"},{"location":"external-links/#podcasts","title":"Podcasts","text":""},{"location":"external-links/#english_1","title":"English","text":"<ul> <li> <p>Starting With ReadyAPI and Examining Python's Import System - Episode 72 by Real Python.</p> </li> <li> <p>Do you dare to press \".\"? - Episode 247 - Dan #6: SQLDev - use the same models for SQL and ReadyAPI by Python Bytes FM.</p> </li> <li> <p>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</p> </li> <li> <p>ReadyAPI on PythonBytes by Python Bytes FM.</p> </li> </ul>"},{"location":"external-links/#talks","title":"Talks","text":""},{"location":"external-links/#english_2","title":"English","text":"<ul> <li> <p>PyCon AU 2023: Testing asynchronous applications with ReadyAPI and pytest by Jeny Sadadia.</p> </li> <li> <p>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyCon UK 2019: ReadyAPI from the ground up by Chris Withers.</p> </li> </ul>"},{"location":"external-links/#taiwanese_1","title":"Taiwanese","text":"<ul> <li>PyCon TW 2024: \u200b\u5168\u65b9\u4f4d\u200b\u5f37\u5316\u200b Python \u200b\u670d\u52d9\u200b\u53ef\u89c0\u200b\u6e2c\u6027\u200b\uff1a\u200b\u4ee5\u200b ReadyAPI \u200b\u548c\u200b Grafana Stack \u200b\u70ba\u4f8b\u200b by Blueswen.</li> </ul>"},{"location":"external-links/#github-repositories","title":"GitHub Repositories","text":"<p>Most starred GitHub repositories with the topic <code>readyapi</code>:</p> <p>\u2605 32337 - full-stack-readyapi-template by @readyapi.</p> <p>\u2605 29833 - Hello-Python by @mouredev.</p> <p>\u2605 21544 - serve by @jina-ai.</p> <p>\u2605 15799 - sqldev by @readyapi.</p> <p>\u2605 15676 - HivisionIDPhotos by @Zeyi-Lin.</p> <p>\u2605 12183 - Douyin_TikTok_Download_API by @Evil0ctal.</p> <p>\u2605 11594 - readyapi-best-practices by @zhanymkanov.</p> <p>\u2605 9586 - awesome-readyapi by @mjhea0.</p> <p>\u2605 8804 - FastUI by @pydantic.</p> <p>\u2605 6688 - nonebot2 by @nonebot.</p> <p>\u2605 6502 - FileCodeBox by @vastsa.</p> <p>\u2605 5720 - serge by @serge-chat.</p> <p>\u2605 5515 - hatchet by @hatchet-dev.</p> <p>\u2605 5162 - readyapi-users by @readyapi-users.</p> <p>\u2605 5119 - polar by @polarsource.</p> <p>\u2605 4302 - chatgpt-web-share by @chatpire.</p> <p>\u2605 4244 - strawberry by @strawberry-graphql.</p> <p>\u2605 4178 - readyapi_mcp by @tadata-org.</p> <p>\u2605 4112 - atrilabs-engine by @Atri-Labs.</p> <p>\u2605 3985 - dynaconf by @dynaconf.</p> <p>\u2605 3918 - poem by @poem-web.</p> <p>\u2605 3287 - farfalle by @rashadphz.</p> <p>\u2605 3192 - readyapi-admin by @readyapi-admin.</p> <p>\u2605 3141 - datamodel-code-generator by @koxudaxi.</p> <p>\u2605 3116 - opyrator by @ml-tooling.</p> <p>\u2605 3088 - LitServe by @Lightning-AI.</p> <p>\u2605 3059 - logfire by @pydantic.</p> <p>\u2605 3052 - docarray by @docarray.</p> <p>\u2605 3025 - huma by @danielgtaylor.</p> <p>\u2605 2883 - readyapi-realworld-example-app by @nsidnev.</p> <p>\u2605 2756 - uvicorn-gunicorn-readyapi-docker by @khulnasoft.</p> <p>\u2605 2587 - tracecat by @TracecatHQ.</p> <p>\u2605 2502 - best-of-web-python by @ml-tooling.</p> <p>\u2605 2500 - Kokoro-ReadyAPI by @remsky.</p> <p>\u2605 2419 - RasaGPT by @paulpierre.</p> <p>\u2605 2350 - readyapi-react by @Buuntu.</p> <p>\u2605 2277 - nextpy by @dot-agent.</p> <p>\u2605 2273 - ReadyAPI-template by @s3rius.</p> <p>\u2605 2183 - 30-Days-of-Python by @codingforentrepreneurs.</p> <p>\u2605 2141 - sqladmin by @aminalaee.</p> <p>\u2605 2070 - langserve by @langchain-ai.</p> <p>\u2605 2063 - readyapi-utils by @readyapiutils.</p> <p>\u2605 2028 - solara by @widgetti.</p> <p>\u2605 1996 - supabase-py by @supabase.</p> <p>\u2605 1870 - mangum by @Kludex.</p> <p>\u2605 1827 - python-week-2022 by @rochacbruno.</p> <p>\u2605 1763 - SurfSense by @MODSetter.</p> <p>\u2605 1743 - manage-readyapi by @ycd.</p> <p>\u2605 1741 - agentkit by @BCG-X-Official.</p> <p>\u2605 1730 - ormar by @collerek.</p> <p>\u2605 1631 - langchain-serve by @jina-ai.</p> <p>\u2605 1610 - termpair by @cs01.</p> <p>\u2605 1588 - piccolo by @piccolo-orm.</p> <p>\u2605 1587 - coronavirus-tracker-api by @ExpDev07.</p> <p>\u2605 1552 - readyapi-cache by @long2ice.</p> <p>\u2605 1536 - openapi-python-client by @openapi-generators.</p> <p>\u2605 1491 - readyapi-crudrouter by @awtkns.</p> <p>\u2605 1450 - slowapi by @laurentS.</p> <p>\u2605 1443 - awesome-readyapi-projects by @Kludex.</p> <p>\u2605 1387 - awesome-python-resources by @DjangoEx.</p> <p>\u2605 1341 - budgetml by @ebhy.</p> <p>\u2605 1331 - readyapi-pagination by @uriyyo.</p> <p>\u2605 1299 - readyapi-boilerplate by @teamhide.</p> <p>\u2605 1235 - readyapi-amis-admin by @amisadmin.</p> <p>\u2605 1222 - readyapi-tutorial by @liaogx.</p> <p>\u2605 1190 - vue-readyapi-admin by @mizhexiaoxiao.</p> <p>\u2605 1180 - readyapi-code-generator by @koxudaxi.</p> <p>\u2605 1166 - bolt-python by @slackapi.</p> <p>\u2605 1134 - readyapi_production_template by @zhanymkanov.</p> <p>\u2605 1127 - langchain-extract by @langchain-ai.</p> <p>\u2605 1115 - odmantic by @art049.</p> <p>\u2605 1112 - prometheus-readyapi-instrumentator by @trallnag.</p> <p>\u2605 1107 - bedrock-chat by @aws-samples.</p> <p>\u2605 1094 - readyapi-alembic-sqldev-async by @jonra1993.</p> <p>\u2605 1041 - restish by @rest-sh.</p> <p>\u2605 1036 - fastcrud by @igorbenav.</p> <p>\u2605 1022 - runhouse by @run-house.</p> <p>\u2605 997 - readyapi_best_architecture by @readyapi-practices.</p> <p>\u2605 990 - lanarky by @ajndkr.</p> <p>\u2605 990 - autollm by @viddexa.</p> <p>\u2605 932 - secure by @TypeError.</p> <p>\u2605 925 - langcorn by @msoedov.</p> <p>\u2605 925 - ReadyAPI-boilerplate by @igorbenav.</p> <p>\u2605 913 - authx by @yezz123.</p> <p>\u2605 907 - energy-forecasting by @iusztinpaul.</p> <p>\u2605 873 - titiler by @developmentseed.</p> <p>\u2605 850 - httpdbg by @cle-b.</p> <p>\u2605 844 - marker-api by @adithya-s-k.</p> <p>\u2605 842 - ludic by @getludic.</p> <p>\u2605 805 - flock by @Onelevenvy.</p> <p>\u2605 797 - readyapi-observability by @blueswen.</p> <p>\u2605 786 - readyapi-do-zero by @dunossauro.</p> <p>\u2605 781 - readyapi-mail by @sabuhish.</p> <p>\u2605 764 - starlette-admin by @jowilf.</p> <p>\u2605 759 - lccn_predictor by @baoliay2008.</p> <p>\u2605 741 - KonomiTV by @tsukumijima.</p> <p>\u2605 734 - ReadyAPI-Backend-Template by @Aeternalis-Ingenium.</p> <p>\u2605 731 - learn-generative-ai by @panaverse.</p> <p>\u2605 730 - annotated-py-projects by @hhstore.</p>"},{"location":"newsletter/","title":"ReadyAPI and friends newsletter","text":""},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the ReadyAPI repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of ReadyAPI? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help ReadyAPI - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@khulnasoft) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> <li>For translations use the <code>\ud83c\udf10</code> emoji (\"globe with meridians\").</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> <li>When the PR is for a translation, start with the <code>\ud83c\udf10</code> and then <code>Add {language} translation for</code> and then the translated file path. For example:</li> </ul> <pre><code>\ud83c\udf10 Add Spanish translation for `docs/es/docs/teleporting.md`\n</code></pre> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>lang-all</code>: Translations<ul> <li>Use this for translations. You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/{some lang}/docs</code> but not <code>docs/en/docs</code>. For example, <code>docs/es/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#add-labels-to-translation-prs","title":"Add Labels to Translation PRs","text":"<p>When there's a PR for a translation, apart from adding the <code>lang-all</code> label, also add a label for the language.</p> <p>There will be a label for each language using the language code, like <code>lang-{lang code}</code>, for example, <code>lang-es</code> for Spanish, <code>lang-fr</code> for French, etc.</p> <ul> <li>Add the specific language label.</li> <li>Add the label <code>awaiting-review</code>.</li> </ul> <p>The label <code>awaiting-review</code> is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.</p> <p>Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the <code>awaiting-review</code> label, and add the <code>approved-1</code> label.</p> <p>This way, we can notice when there are new translations ready, because they have the <code>approved-1</code> label.</p>"},{"location":"management-tasks/#merge-translation-prs","title":"Merge Translation PRs","text":"<p>For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.</p> <p>For the other languages, confirm that:</p> <ul> <li>The title is correct following the instructions above.</li> <li>It has the labels <code>lang-all</code> and <code>lang-{lang code}</code>.</li> <li>The PR changes only one Markdown file adding a translation.<ul> <li>Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.</li> <li>If it's the first translation for that language, it will have additional <code>mkdocs.yml</code> files, for those cases follow the instructions below.</li> </ul> </li> <li>The PR doesn't add any additional or extraneous files.</li> <li>The translation seems to have a similar structure as the original English file.</li> <li>The translation doesn't seem to change the original content, for example with obvious additional documentation sections.</li> <li>The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.</li> <li>The \"admonition\" sections, like <code>tip</code>, <code>info</code>, etc. are not changed or translated. For example:</li> </ul> <pre><code>/// tip\n\nThis is a tip.\n\n///\n</code></pre> <p>looks like this:</p> <p>Tip</p> <p>This is a tip.</p> <p>...it could be translated as:</p> <pre><code>/// tip\n\nEsto es un consejo.\n\n///\n</code></pre> <p>...but needs to keep the exact <code>tip</code> keyword. If it was translated to <code>consejo</code>, like:</p> <pre><code>/// consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>it would change the style to the default one, it would look like:</p> <p>/// consejo</p> <p>Esto es un consejo.</p> <p>///</p> <p>Those don't have to be translated, but if they are, they need to be written as:</p> <pre><code>/// tip | consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>Which looks like:</p> <p>consejo</p> <p>Esto es un consejo.</p>"},{"location":"management-tasks/#first-translation-pr","title":"First Translation PR","text":"<p>When there's a first translation for a language, it will have a <code>docs/{lang code}/docs/index.md</code> translated file and a <code>docs/{lang code}/mkdocs.yml</code>.</p> <p>For example, for Bosnian, it would be:</p> <ul> <li><code>docs/bs/docs/index.md</code></li> <li><code>docs/bs/mkdocs.yml</code></li> </ul> <p>The <code>mkdocs.yml</code> file will have only the following content:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>The language code would normally be in the ISO 639-1 list of language codes.</p> <p>In any case, the language code should be in the file docs/language_names.yml.</p> <p>There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a <code>lang-bs</code>. Before creating the label and adding it to the PR, create the GitHub Discussion:</p> <ul> <li>Go to the Translations GitHub Discussions</li> <li>Create a new discussion with the title <code>Bosnian Translations</code> (or the language name in English)</li> <li>A description of:</li> </ul> <pre><code>## Bosnian translations\n\nThis is the issue to track translations of the docs to Bosnian. \ud83d\ude80\n\nHere are the [PRs to review with the label `lang-bs`](https://github.com/readyapi/readyapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). \ud83e\udd13\n</code></pre> <p>Update \"Bosnian\" with the new language.</p> <p>And update the search link to point to the new language label that will be created, like <code>lang-bs</code>.</p> <p>Create and add the label to that new Discussion just created, like <code>lang-bs</code>.</p> <p>Then go back to the PR, and add the label, like <code>lang-bs</code>, and <code>lang-all</code> and <code>awaiting-review</code>.</p> <p>Now the GitHub action will automatically detect the label <code>lang-bs</code> and will post in that Discussion that this PR is waiting to be reviewed.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#readyapi-people-prs","title":"ReadyAPI People PRs","text":"<p>Every month, a GitHub Action updates the ReadyAPI People data. Those PRs look like this one: \ud83d\udc65 Update ReadyAPI People.</p> <p>If the tests are passing, you can merge it right away.</p>"},{"location":"management-tasks/#external-links-prs","title":"External Links PRs","text":"<p>When people add external links they edit this file external_links.yml.</p> <ul> <li>Make sure the new link is in the correct category (e.g. \"Podcasts\") and language (e.g. \"Japanese\").</li> <li>A new link should be at the top of its list.</li> <li>The link URL should work (it should not return a 404).</li> <li>The content of the link should be about ReadyAPI.</li> <li>The new addition should have these fields:<ul> <li><code>author</code>: The name of the author.</li> <li><code>link</code>: The URL with the content.</li> <li><code>title</code>: The title of the link (the title of the article, podcast, etc).</li> </ul> </li> </ul> <p>After checking all these things and ensuring the PR has the right labels, you can merge it.</p>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the ReadyAPI repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @khulnasoft, am the creator and owner of the ReadyAPI repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>You can see the current team members in ReadyAPI People - Team.</p> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p>"},{"location":"management/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>The people that help others the most in GitHub Discussions can become ReadyAPI Experts.</p> <p>This is normally the best way to contribute to the project.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain ReadyAPI.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ReDoc to version 2.x. PR #9700 by @joakimnordling.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update Drawio diagrams SVGs, single file per diagram, sans-serif font. PR #13706 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for \"Help ReadyAPI\", simplify and reduce \"sponsor\" section. PR #13670 by @khulnasoft.</li> <li>\ud83d\udcdd Remove unnecessary bullet from docs. PR #13641 by @Adamowoc.</li> <li>\u270f\ufe0f Fix syntax error in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #13623 by @gsheni.</li> <li>\ud83d\udcdd Fix typo in documentation. PR #13599 by @Taoup.</li> <li>\ud83d\udcdd Fix liblab client generation doc link. PR #13571 by @EFord36.</li> <li>\u270f\ufe0f Fix talk information typo. PR #13544 by @blueswen.</li> <li>\ud83d\udcdd Add External Link: Taiwanese talk on ReadyAPI with observability . PR #13527 by @blueswen.</li> </ul>"},{"location":"release-notes/#translations","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-param-models.md</code>. PR #13526 by @minaton-ru.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/index.md</code>. PR #13374 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #13324 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #13292 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #13348 by @Zhongheng-Cheng.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: add Subtotal. PR #13701 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove deepset / Haystack. PR #13700 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13688 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13671 by @khulnasoft.</li> <li>\u2b06 Bump cligenius from 0.12.5 to 0.15.3. PR #13666 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.23 to 0.0.24. PR #13665 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Sponsors: Zuplo logo and alt text. PR #13645 by @martyndavies.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13667 by @khulnasoft.</li> <li>\ud83d\udd27 Update links for LinkedIn and bottom. PR #13669 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove Bump.sh and Coherence. PR #13668 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13664 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13662 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13656 by @pre-commit-ci[bot].</li> <li>\u2705 Use <code>inline-snapshot</code> to support different Pydantic versions in the test suite. PR #12534 by @15r10nk.</li> <li>\u2b06 Bump astral-sh/setup-uv from 5 to 6. PR #13648 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13634 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13619 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13594 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13568 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13565 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13559 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13558 by @khulnasoft.</li> <li>\u2b06 Bump dirty-equals from 0.8.0 to 0.9.0. PR #13561 by @dependabot[bot].</li> <li>\ud83d\udd27 Clean up <code>docs/en/mkdocs.yml</code> configuration file. PR #13542 by @svlandeg.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12986 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#011512","title":"0.115.12","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>convert_underscores=False</code> for header Pydantic models. PR #13515 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/middleware.md</code>. PR #13444 by @Rishat-F.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13493 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_1","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/metadata.md</code> page. PR #13459 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/response-status-code.md</code> page. PR #13462 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-param-models.md</code> page. PR #13460 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-param-models.md</code> page. PR #13461 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/virtual-environments.md</code>. PR #13304 by @k94-ishi.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/oauth2-jwt.md</code>. PR #13333 by @yes0ng.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/cloud.md</code>. PR #13407 by @ptt3199.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2b06 Bump pydantic-ai from 0.0.15 to 0.0.30. PR #13438 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.22 to 0.0.23. PR #13437 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.10.0 to 25.1.0. PR #13436 by @dependabot[bot].</li> <li>\u2b06 Bump ruff to 0.9.4. PR #13299 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: pause TestDriven. PR #13446 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011511","title":"0.115.11","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add docs examples and tests (support) for <code>Annotated</code> custom validations, like <code>AfterValidator</code>, revert #13440. PR #13442 by @khulnasoft.<ul> <li>New docs: Query Parameters and String Validations - Custom Validation.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_2","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for  <code>docs/ru/docs/tutorial/middleware.md</code>. PR #13412 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13439 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13432 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13433 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011510","title":"0.115.10","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Update internal annotation usage for compatibility with Pydantic 2.11. PR #13314 by @Viicos.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.46.0: <code>&gt;=0.40.0,&lt;0.47.0</code>. PR #13426 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#translations_3","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/debugging.md</code>. PR #13370 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/query-params.md</code>. PR #13362 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/path-params.md</code>. PR #13354 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/cookie-param-models.md</code>. PR #13330 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-multiple-params.md</code>. PR #13408 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/query-param-models.md</code>. PR #13323 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-nested-models.md</code>. PR #13409 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/versions.md</code>. PR #13406 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/index.md</code>. PR #13405 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms.md</code>. PR #13383 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/testing.md</code>. PR #13371 by @valentinDruzhinin.</li> </ul>"},{"location":"release-notes/#01159","title":"0.115.9","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ensure that <code>HTTPDigest</code> only raises an exception when <code>auto_error is True</code>. PR #2939 by @arthurio.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for <code>query_params_str_validations</code>. PR #13218 by @alv2017.</li> <li>\u2705 Simplify tests for <code>app_testing</code>. PR #13220 by @alv2017.</li> <li>\u2705 Simplify tests for <code>dependency_testing</code>. PR #13223 by @alv2017.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update sponsors: CodeRabbit logo. PR #13424 by @khulnasoft.</li> <li>\ud83e\ude7a Unify the badges across all tutorial translations. PR #13329 by @svlandeg.</li> <li>\ud83d\udcdd Fix typos in virtual environments documentation. PR #13396 by @bullet-ant.</li> <li>\ud83d\udc1b Fix issue with Swagger theme change example in the official tutorial. PR #13289 by @Zerohertz.</li> <li>\ud83d\udcdd Add more precise description of HTTP status code range in docs. PR #13347 by @DanielYang59.</li> <li>\ud83d\udd25 Remove manual type annotations in JWT tutorial to avoid typing expectations (JWT doesn't provide more types). PR #13378 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for Query Params and String Validations, remove obsolete Ellipsis docs (<code>...</code>). PR #13377 by @khulnasoft.</li> <li>\u270f\ufe0f Remove duplicate title in docs <code>body-multiple-params</code>. PR #13345 by @DanielYang59.</li> <li>\ud83d\udcdd Fix test badge. PR #13313 by @esadek.</li> </ul>"},{"location":"release-notes/#translations_4","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-params.md</code>. PR #13381 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-files.md</code>. PR #13395 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-form-models.md</code>. PR #13384 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms-and-files.md</code>. PR #13386 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #13262 by @Zerohertz.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/custom-response.md</code>. PR #13265 by @11kkw.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #13335 by @yes0ng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/response-cookies.md</code>. PR #13327 by @Stepakinoyan.</li> <li>\ud83c\udf10  Add Vietnamese translation for <code>docs/vi/docs/tutorial/static-files.md</code>. PR #11291 by @ptt3199.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #13257 by @11kkw.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/virtual-environments.md</code>. PR #13282 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/static-files.md</code>. PR #13285 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/environment-variables.md</code>. PR #13287 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/readyapi-cli.md</code>. PR #13294 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/features.md</code>. PR #13308 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/learn/index.md</code>. PR #13306 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/deployment/https.md</code>. PR #13317 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/index.md</code>. PR #13328 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/websockets.md</code>. PR #13279 by @Rishat-F.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2705 Fix a minor bug in the test <code>tests/test_modules_same_name_body/test_main.py</code>. PR #13411 by @alv2017.</li> <li>\ud83d\udc77 Use <code>wrangler-action</code> v3. PR #13415 by @joakimnordling.</li> <li>\ud83d\udd27 Update sponsors: add CodeRabbit. PR #13402 by @khulnasoft.</li> <li>\ud83d\udd27 Update team: Add Ludovico. PR #13390 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: Add LambdaTest. PR #13389 by @khulnasoft.</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.13 to 3.14. PR #13350 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.18 to 9.6.1. PR #13301 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 11.0.0 to 11.1.0. PR #13300 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13295 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13302 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13293 by @khulnasoft.</li> <li>\u2b06 Bump inline-snapshot from 0.18.1 to 0.19.3. PR #13298 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, add Permit. PR #13288 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01158","title":"0.115.8","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>OAuth2PasswordRequestForm</code> and <code>OAuth2PasswordRequestFormStrict</code> fixed <code>grant_type</code> \"password\" RegEx. PR #9783 by @skarfie123.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for body_multiple_params . PR #13237 by @alejsdev.</li> <li>\u267b\ufe0f Move duplicated code portion to a static method in the <code>APIKeyBase</code> super class. PR #3142 by @ShahriyarR.</li> <li>\u2705 Simplify tests for request_files. PR #13182 by @alejsdev.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Change the word \"unwrap\" to \"unpack\" in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #13061 by @timothy-jeong.</li> <li>\ud83d\udcdd Update Request Body's <code>tutorial002</code> to deal with <code>tax=0</code> case. PR #13230 by @togogh.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13269 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_5","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/environment-variables.md</code>. PR #13226 by @k94-ishi.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/async-tests.md</code>. PR #13227 by @Rishat-F.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #13252 by @Rishat-F.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/bigger-applications.md</code>. PR #13154 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.13. PR #13274 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade AnyIO max version for tests, new range: <code>&gt;=3.2.1,&lt;5.0.0</code>. PR #13273 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsors badges. PR #13271 by @khulnasoft.</li> <li>\u267b\ufe0f Fix <code>notify_translations.py</code> empty env var handling for PR label events vs workflow_dispatch. PR #13272 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and move <code>scripts/notify_translations.py</code>, no need for a custom GitHub Action. PR #13270 by @khulnasoft.</li> <li>\ud83d\udd28 Update ReadyAPI People Experts script, refactor and optimize data fetching to handle rate limits. PR #13267 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4. PR #13251 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01157","title":"0.115.7","text":""},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade <code>python-multipart</code> to &gt;=0.0.18. PR #13219 by @DanielKusyDev.</li> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.45.0: <code>&gt;=0.40.0,&lt;0.46.0</code>. PR #13117 by @Kludex.</li> <li>\u2b06\ufe0f Upgrade <code>jinja2</code> to &gt;=3.1.5. PR #13194 by @DanielKusyDev.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for websockets. PR #13202 by @alejsdev.</li> <li>\u2705 Simplify tests for request_form_models . PR #13183 by @alejsdev.</li> <li>\u2705 Simplify tests for separate_openapi_schemas. PR #13201 by @alejsdev.</li> <li>\u2705 Simplify tests for security. PR #13200 by @alejsdev.</li> <li>\u2705 Simplify tests for schema_extra_example. PR #13197 by @alejsdev.</li> <li>\u2705 Simplify tests for request_model. PR #13195 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms_and_files. PR #13185 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms. PR #13184 by @alejsdev.</li> <li>\u2705 Simplify tests for path_query_params. PR #13181 by @alejsdev.</li> <li>\u2705 Simplify tests for path_operation_configurations. PR #13180 by @alejsdev.</li> <li>\u2705 Simplify tests for header_params. PR #13179 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_models. PR #13178 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_data_types. PR #13177 by @alejsdev.</li> <li>\u2705 Simplify tests for cookie_params. PR #13176 by @alejsdev.</li> <li>\u2705 Simplify tests for dependencies. PR #13174 by @alejsdev.</li> <li>\u2705 Simplify tests for body_updates. PR #13172 by @alejsdev.</li> <li>\u2705 Simplify tests for body_nested_models. PR #13171 by @alejsdev.</li> <li>\u2705 Simplify tests for body_multiple_params. PR #13170 by @alejsdev.</li> <li>\u2705 Simplify tests for body_fields. PR #13169 by @alejsdev.</li> <li>\u2705 Simplify tests for body. PR #13168 by @alejsdev.</li> <li>\u2705 Simplify tests for bigger_applications. PR #13167 by @alejsdev.</li> <li>\u2705 Simplify tests for background_tasks. PR #13166 by @alejsdev.</li> <li>\u2705 Simplify tests for additional_status_codes. PR #13149 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Update Strawberry integration docs. PR #13155 by @kinuax.</li> <li>\ud83d\udd25 Remove unused Peewee tutorial files. PR #13158 by @alejsdev.</li> <li>\ud83d\udcdd Update image in body-nested-model docs. PR #11063 by @untilhamza.</li> <li>\ud83d\udcdd Update <code>readyapi-cli</code> UI examples in docs. PR #13107 by @Zhongheng-Cheng.</li> <li>\ud83d\udc77 Add new GitHub Action to update contributors, translators, and translation reviewers. PR #13136 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/virtual-environments.md</code>. PR #13124 by @khulnasoft.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/contributing.md</code>. PR #12899 by @kingsubin.</li> <li>\ud83d\udcdd Minor corrections in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #13081 by @alv2017.</li> <li>\ud83d\udcdd Update includes in <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12994 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in README installation instructions. PR #13011 by @dave-hay.</li> <li>\ud83d\udcdd Update docs for <code>readyapi-cli</code>. PR #13031 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_6","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #13216 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #13209 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/oauth2-jwt.md</code>. PR #13205 by @ceb10n.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/index.md</code>. PR #13191 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/static-files.md</code>. PR #13092 by @guspan-tanadi.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/get-current-user.md</code>. PR #13188 by @ceb10n.</li> <li>\ud83c\udf10 Remove Wrong Portuguese translations location for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #13187 by @ceb10n.</li> <li>\ud83c\udf10 Update Portuguese translations. PR #13156 by @nillvitor.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #13159 by @Yarous.</li> <li>\u270f\ufe0f Delete unnecessary backspace in <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #12238 by @FakeDocument.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #13102 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add new Spanish translations for all docs with new LLM-assisted system using PydanticAI. PR #13122 by @khulnasoft.</li> <li>\ud83c\udf10 Update existing Spanish translations using the new LLM-assisted system using PydanticAI. PR #13118 by @khulnasoft.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #13110 by @ChenPu2002.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/path-params.md</code>. PR #13086 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/sql-databases.md</code>. PR #13093 by @GeumBinLee.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/async.md</code>. PR #13095 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-webhooks.md</code>. PR #13091 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-tests.md</code>. PR #13074 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-cli.md</code>. PR #13020 by @ykertytsky.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #12512 by @ZhibangYue.</li> <li>\ud83c\udf10 Add Russian translation for <code>/docs/ru/docs/tutorial/sql-databases.md</code>. PR #13079 by @alv2017.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #13066 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #13075 by @codingjenny.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #13051 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #12928 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/header-param-models.md</code>. PR #13040 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #12926 by @Vincy1230.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #12923 by @Vincy1230.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #13048 by @anklav24.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/generate-clients.md</code>. PR #13030 by @vitumenezes.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/first-steps.md</code>. PR #13042 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/cookie-param-models.md</code>. PR #13038 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/request-form-models.md</code>. PR #13045 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/virtual-environments.md</code>. PR #13026 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/testing.md</code>. PR #12968 by @jts8257.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/async-test.md</code>. PR #12918 by @icehongssii.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/oauth2-jwt.md</code>. PR #10601 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/simple-oauth2.md</code>. PR #10599 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/get-current-user.md</code>. PR #10594 by @AlertRED.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/features.md</code>. PR #12441 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/virtual-environments.md</code>. PR #12791 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/templates.md</code>. PR #12726 by @Heumhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-cli.md</code>. PR #13041 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/cookie-param-models.md</code>. PR #13000 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/header-param-models.md</code>. PR #13001 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-form-models.md</code>. PR #13002 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-forms.md</code>. PR #13003 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/resources/index.md</code>. PR #13004 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/configure-swagger-ui.md</code>. PR #12898 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation to <code>docs/ko/docs/advanced/additional-status-codes.md</code>. PR #12715 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/first-steps.md</code>. PR #12467 by @codingjenny.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Pydantic 2 trove classifier. PR #13199 by @johnthagen.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13231 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor ReadyAPI People Sponsors to use 2 tokens. PR #13228 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for ReadyAPI People - Sponsors. PR #13225 by @khulnasoft.</li> <li>\ud83d\udc77 Add independent CI automation for ReadyAPI People - Sponsors. PR #13221 by @khulnasoft.</li> <li>\ud83d\udc77 Add retries to Smokeshow. PR #13151 by @khulnasoft.</li> <li>\ud83d\udd27 Update Speakeasy sponsor graphic. PR #13147 by @chailandau.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13146 by @khulnasoft.</li> <li>\ud83d\udc77\u200d\u2640\ufe0f Add script for GitHub Topic Repositories and update External Links. PR #13135 by @alejsdev.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13145 by @khulnasoft.</li> <li>\u2b06 Bump markdown-include-variants from 0.0.3 to 0.0.4. PR #13129 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.14.0 to 0.18.1. PR #13132 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-macros-plugin from 1.0.5 to 1.3.7. PR #13133 by @dependabot[bot].</li> <li>\ud83d\udd28 Add internal scripts to generate language translations with PydanticAI, include Spanish prompt. PR #13123 by @khulnasoft.</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #13096 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: rename CryptAPI to BlockBee. PR #13078 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR #13055 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.7.0.1 to 5.10.0.20240515. PR #13018 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.3.0 to 24.10.0. PR #13014 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.13.0 to 0.14.0. PR #13017 by @dependabot[bot].</li> <li>\u2b06 Bump dirty-equals from 0.6.0 to 0.8.0. PR #13015 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.12 to 3.13. PR #12996 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #12982 by @dependabot[bot].</li> <li>\ud83d\udd27 Remove duplicate actions/checkout in <code>notify-translations.yml</code>. PR #12915 by @tinyboxvk.</li> <li>\ud83d\udd27 Update team members. PR #13033 by @khulnasoft.</li> <li>\ud83d\udcdd Update sponsors: remove Codacy. PR #13032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01156","title":"0.115.6","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Preserve traceback when an exception is raised in sync dependency with <code>yield</code>. PR #5823 by @sombek.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update tests and internals for compatibility with Pydantic &gt;=2.10. PR #12971 by @tamird.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes format in docs with an automated script. PR #12950 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #12685 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #12689 by @alissadb.</li> </ul>"},{"location":"release-notes/#translations_7","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/async.md</code>. PR #12990 by @ILoveSorasakiHina.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/query-param-models.md</code>. PR #12932 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-dependencies.md</code>. PR #12992 by @Limsunoh.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/websockets.md</code>. PR #12991 by @kwang1215.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-model.md</code>. PR #12933 by @AndreBBM.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/middlewares.md</code>. PR #12753 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/openapi-webhooks.md</code>. PR #12752 by @saeye.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/query-param-models.md</code>. PR #12931 by @Vincy1230.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12445 by @gitgernit.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-param-models.md</code>. PR #12940 by @jts8257.</li> <li>\ud83d\udd25 Remove obsolete tutorial translation to Chinese for <code>docs/zh/docs/tutorial/sql-databases.md</code>, it references files that are no longer on the repo. PR #12949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12954 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01155","title":"0.115.5","text":""},{"location":"release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update internal checks to support Pydantic 2.10. PR #12914 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body.md</code>. PR #12757 by @gsheni.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/testing-dependencies.md</code>. PR #12647 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/metadata.md</code>. PR #12773 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12045 by @xuvjso.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/global-dependencies.md</code>. PR #12653 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body-updates.md</code>. PR #12712 by @davioc.</li> <li>\ud83d\udcdd Remove mention of Celery in the project generators. PR #12742 by @david-caro.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/header-param-models.md</code>. PR #12814 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update <code>contributing.md</code> docs, include note to not translate this page. PR #12841 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-forms.md</code>. PR #12648 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-form-models.md</code>. PR #12649 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #12650 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/vi/docs/tutorial/first-steps.md</code>. PR #12754 by @MxPy.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/advanced/wsgi.md</code>. PR #12769 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #12815 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #12813 by @handabaldeep.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12819 by @alejsdev.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/get-current-user.md</code>. PR #12645 by @OCE1960.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #12643 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/additional-responses.md</code>. PR #12821 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/generate-clients.md</code>. PR #12642 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Fix admonition double quotes with new syntax. PR #12835 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #12828 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #12825 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/testing-websockets.md</code>. PR #12761 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/using-request-directly.md</code>. PR #12760 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/advanced/wsgi.md</code>. PR #12758 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/middleware.md</code>. PR #12729 by @paintdog.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #12822 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/additional-responses.md</code>. PR #12634 by @fegmorte.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12633 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/response-directly.md</code>. PR #12632 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/header-params.md</code>. PR #12640 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/cookie-param-models.md</code>. PR #12639 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/extra-models.md</code>. PR #12638 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/cors.md</code>. PR #12637 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #12810 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #12812 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-operation-configuration.md</code>. PR #12809 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-files.md</code>. PR #12818 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/query-param-models.md</code>. PR #12817 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params.md</code>. PR #12811 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-model.md</code>. PR #12621 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/websockets.md</code>. PR #12606 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Updates include for <code>docs/en/docs/tutorial/cookie-params.md</code>. PR #12808 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12807 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/sub-applications.md</code>. PR #12806 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-headers.md</code>. PR #12805 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/first-steps.md</code>. PR #12594 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-cookies.md</code>. PR #12804 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12802 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/response-directly.md</code>. PR #12803 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #12798 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #12699 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/em/docs/tutorial/body-updates.md</code>. PR #12799 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/response-change-status-code.md</code>. PR #12801 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/openapi-callbacks.md</code>. PR #12800 by @handabaldeep.</li> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #12598 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #12593 by @Tashanam-Shahbaz.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #12736 by @bhunao.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/custom-response.md</code>. PR #12797 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/python-types.md</code>. PR #12671 by @ceb10n.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/python-types.md</code>. PR #12660 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #12658 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params.md</code>. PR #12592 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #12690 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/security/oauth2-scopes.md</code>. PR #12572 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/conditional-openapi.md</code>. PR #12624 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #12615 by @bharara.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-status-code.md</code>. PR #12620 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12623 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/openapi-webhooks.md</code>. PR #12605 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/events.md</code>. PR #12604 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #12603 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #12602 by @antonyare93.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #12601 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/background-tasks.md</code>. PR #12600 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/encoder.md</code>. PR #12597 by @tonyjly.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12557 by @philipokiokio.</li> <li>\ud83c\udfa8 Adjust spacing. PR #12635 by @alejsdev.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-request-and-route.md</code>. PR #12560 by @philipokiokio.</li> </ul>"},{"location":"release-notes/#translations_8","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-websockets.md</code>. PR #12739 by @Limsunoh.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/environment-variables.md</code>. PR #12785 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/environment-variables.md</code>. PR #12784 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>ko/docs/advanced/response-headers.md</code>. PR #12740 by @kwang1215.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/virtual-environments.md</code>. PR #12790 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/environment-variables.md</code>. PR #12526 by @Tolerblanc.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/history-design-future.md</code>. PR #12646 by @saeye.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/advanced-dependencies.md</code>. PR #12675 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/conditional-openapi.md</code>. PR #12731 by @sptcnl.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/using_request_directly.md</code>. PR #12738 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-events.md</code>. PR #12741 by @9zimin9.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/security/index.md</code>. PR #12743 by @kim-sangah.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12762 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/wsgi.md</code>. PR #12659 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/websockets.md</code>. PR #12703 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/simple-oauth2.md</code>. PR #12520 by @LidiaDomingos.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/response-directly.md</code>. PR #12674 by @9zimin9.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/middleware.md</code>. PR #12704 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-callbacks.md</code>. PR #12705 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-files.md</code>. PR #12706 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese Translation for <code>docs/pt/docs/advanced/custom-response.md</code>. PR #12631 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/metadata.md</code>. PR #12538 by @LinkolnR.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/metadata.md</code>. PR #12541 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-cookies.md</code>. PR #12546 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/readyapi-cli.md</code>. PR #12515 by @dhdld.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-change-status-code.md</code>. PR #12547 by @9zimin9.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12907 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs preview script to show previous version and English version. PR #12856 by @khulnasoft.</li> <li>\u2b06 Bump khulnasoft/latest-changes from 0.3.1 to 0.3.2. PR #12794 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.0 to 1.12.2. PR #12788 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.0. PR #12781 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.11 to 3.12. PR #12777 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12766 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.11.0. PR #12721 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;4.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;5.0.0. PR #12749 by @dependabot[bot].</li> <li>\u2b06 Bump cligenius from 0.12.3 to 0.12.5. PR #12748 by @dependabot[bot].</li> <li>\u2b06 Update flask requirement from &lt;3.0.0,&gt;=1.1.2 to &gt;=1.1.2,&lt;4.0.0. PR #12747 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.4.0 to 11.0.0. PR #12746 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from &lt;8.0.0,&gt;=7.1.3 to &gt;=7.1.3,&lt;9.0.0. PR #12745 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: add Render. PR #12733 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12707 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01154","title":"0.115.4","text":""},{"location":"release-notes/#refactors_5","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update logic to import and check <code>python-multipart</code> for compatibility with newer version. PR #12627 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body.md</code>. PR #12596 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/debugging.md</code>. PR #12595 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #12591 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params.md</code>. PR #12589 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/tutorial/body-fields.md</code>. PR #12588 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #12585 by @abejaranoh.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body.md</code>. PR #12586 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #12583 by @imjuanleonard.</li> <li>\ud83d\udcdd Update includes syntax for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #12584 by @sebkozlo.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/middleware.md</code>. PR #12582 by @montanarograziano.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-status-codes.md</code>. PR #12577 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/advanced-dependencies.md</code>. PR #12578 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-responses.md</code>. PR #12576 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/static-files.md</code>. PR #12575 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/async-tests.md</code>. PR #12568 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #12563 by @asmioglou.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #12561 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/background-tasks.md</code>. PR #12559 by @FarhanAliRaza.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/python-types.md</code>. PR #12558 by @Ismailtlem.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/graphql.md</code>. PR #12564 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/extending-openapi.md</code>. PR #12562 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/configure-swagger-ui.md</code>. PR #12556 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/separate-openapi-schemas.md</code>. PR #12555 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/security/http-basic-auth.md</code>. PR #12553 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/first-steps.md</code>. PR #12552 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/python-types.md</code>. PR #12551 by @khulnasoft.</li> <li>\ud83d\udcdd Fix link in OAuth2 docs. PR #12550 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI do Zero. PR #12533 by @rennerocha.</li> <li>\ud83d\udcdd Fix minor typos. PR #12516 by @kkirsche.</li> <li>\ud83c\udf10 Fix rendering issue in translations. PR #12509 by @alejsdev.</li> </ul>"},{"location":"release-notes/#translations_9","title":"Translations","text":"<ul> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/async-tests.md</code>. PR #12567 by @imjuanleonard.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/sql-databases.md</code>. PR #12530 by @ilacftemp.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/benchmarks.md</code>. PR #12540 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/separate-openapi-schemas.md</code>. PR #12518 by @ilacftemp.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12521 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12522 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12523 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12524 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12468 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12466 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-param-models.md</code>. PR #12437 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/extending-openapi.md</code>. PR #12470 by @ilacftemp.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/dataclasses.md</code>. PR #12475 by @leoscarlato.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-request-and-route.md</code>. PR #12483 by @devfernandoa.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Bump cloudflare/wrangler-action from 3.9 to 3.11. PR #12544 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action to deploy docs previews to handle missing deploy comments. PR #12527 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12505 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01153","title":"0.115.3","text":""},{"location":"release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.40.0,&lt;0.42.0</code>. PR #12469 by @defnull.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix broken link in docs. PR #12495 by @eltonjncorreia.</li> </ul>"},{"location":"release-notes/#translations_10","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-cli.md</code>. PR #12444 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12439 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/testing-database.md</code>. PR #12472 by @GuilhermeRameh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-docs-ui-assets.md</code>. PR #12473 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-headers.md</code>. PR #12458 by @leonardopaloschi.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12440 by @codingjenny.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/python-types.md</code>. PR #12428 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/environment-variables.md</code>. PR #12436 by @wisderfin.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/resources/index.md</code>. PR #12443 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/about/index.md</code>. PR #12438 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-param-models.md</code>. PR #12414 by @ceb10n.</li> <li>\ud83c\udf10 Remove Portuguese translation for <code>docs/pt/docs/deployment.md</code>. PR #12427 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-updates.md</code>. PR #12381 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-cookies.md</code>. PR #12417 by @Paulofalcao2002.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update issue manager workflow . PR #12457 by @alejsdev.</li> <li>\ud83d\udd27 Update team, include YuriiMotov \ud83d\ude80. PR #12453 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor label-approved, make it an internal script instead of an external GitHub Action. PR #12280 by @khulnasoft.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #12434 by @khulnasoft.</li> <li>\ud83d\udc77 Use uv in CI. PR #12281 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.25.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.28.0. PR #11509 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01152","title":"0.115.2","text":""},{"location":"release-notes/#upgrades_4","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.37.2,&lt;0.41.0</code>. PR #12431 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01151","title":"0.115.1","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix openapi generation with responses kwarg. PR #10895 by @flxdot.</li> <li>\ud83d\udc1b Remove <code>Required</code> shadowing from readyapi using Pydantic v2. PR #12197 by @pachewise.</li> </ul>"},{"location":"release-notes/#refactors_6","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update type annotations for improved <code>python-multipart</code>. PR #12407 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\u2728 Add new tutorial for SQL databases with SQLDev. PR #12285 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: How to profile a ReadyAPI asynchronous request. PR #12389 by @brouberol.</li> <li>\ud83d\udd27 Remove <code>base_path</code> for <code>mdx_include</code> Markdown extension in MkDocs. PR #12391 by @khulnasoft.</li> <li>\ud83d\udcdd Update link to Swagger UI configuration docs. PR #12264 by @makisukurisu.</li> <li>\ud83d\udcdd Adding links for Playwright and Vite in <code>docs/project-generation.md</code>. PR #12274 by @kayqueGovetri.</li> <li>\ud83d\udcdd Fix small typos in the documentation. PR #12213 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_11","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-param-models.md</code>. PR #12298 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/graphql.md</code>. PR #12215 by @AnandaCampelo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/oauth2-scopes.md</code>. PR #12263 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/concepts.md</code>. PR #12219 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/conditional-openapi.md</code>. PR #12221 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-directly.md</code>. PR #12266 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #12297 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #12278 by @kkotipy.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12275 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/cloud.md</code>. PR #12217 by @marcelomarkus.</li> <li>\u270f\ufe0f Fix typo in <code>docs/es/docs/python-types.md</code>. PR #12235 by @JavierSanchezCastro.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/environment-variables.md</code>. PR #12200 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/manually.md</code>. PR #12210 by @JoaoGustavoRogel.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/server-workers.md</code>. PR #12220 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/configure-swagger-ui.md</code>. PR #12222 by @marcelomarkus.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12396 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Add script to generate variants of files. PR #12405 by @khulnasoft.</li> <li>\ud83d\udd27 Add speakeasy-api to <code>sponsors_badge.yml</code>. PR #12404 by @khulnasoft.</li> <li>\u2795 Add docs dependency: markdown-include-variants. PR #12399 by @khulnasoft.</li> <li>\ud83d\udcdd Fix extra mdx-base-path paths. PR #12397 by @khulnasoft.</li> <li>\ud83d\udc77 Tweak labeler to not override custom labels. PR #12398 by @khulnasoft.</li> <li>\ud83d\udc77 Update worfkow deploy-docs-notify URL. PR #12392 by @khulnasoft.</li> <li>\ud83d\udc77 Update Cloudflare GitHub Action. PR #12387 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.3. PR #12386 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.25.1 to 0.26.1. PR #12371 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.6 to 0.2.7. PR #12370 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12331 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update sponsors, remove Fine.dev. PR #12271 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12253 by @pre-commit-ci[bot].</li> <li>\u270f\ufe0f Fix docstring typos in http security. PR #12223 by @albertvillanova.</li> </ul>"},{"location":"release-notes/#01150","title":"0.115.0","text":""},{"location":"release-notes/#highlights","title":"Highlights","text":"<p>Now you can declare <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters with Pydantic models. \ud83c\udf89</p>"},{"location":"release-notes/#query-parameter-models","title":"<code>Query</code> Parameter Models","text":"<p>Use Pydantic models for <code>Query</code> parameters:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Read the new docs: Query Parameter Models.</p>"},{"location":"release-notes/#header-parameter-models","title":"<code>Header</code> Parameter Models","text":"<p>Use Pydantic models for <code>Header</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Header\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Read the new docs: Header Parameter Models.</p>"},{"location":"release-notes/#cookie-parameter-models","title":"<code>Cookie</code> Parameter Models","text":"<p>Use Pydantic models for <code>Cookie</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Read the new docs: Cookie Parameter Models.</p>"},{"location":"release-notes/#forbid-extra-query-cookie-header-parameters","title":"Forbid Extra Query (Cookie, Header) Parameters","text":"<p>Use Pydantic models to restrict extra values for <code>Query</code> parameters (also applies to <code>Header</code> and <code>Cookie</code> parameters).</p> <p>To achieve it, use Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>This applies to <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters, read the new docs:</p> <ul> <li>Forbid Extra Query Parameters</li> <li>Forbid Extra Headers</li> <li>Forbid Extra Cookies</li> </ul>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models for parameters using <code>Query</code>, <code>Cookie</code>, <code>Header</code>. PR #12199 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_12","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12195 by @ceb10n.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12204 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01142","title":"0.114.2","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix form field regression with <code>alias</code>. PR #12194 by @Wurstnase.</li> </ul>"},{"location":"release-notes/#translations_13","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-form-models.md</code>. PR #12175 by @ceb10n.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #12170 by @waketzheng.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/python-types.md</code>. PR #12158 by @maxscheijen.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udca1 Add comments with instructions for Playwright screenshot scripts. PR #12193 by @khulnasoft.</li> <li>\u2795 Add inline-snapshot for tests. PR #12189 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01141","title":"0.114.1","text":""},{"location":"release-notes/#refactors_7","title":"Refactors","text":"<ul> <li>\u26a1\ufe0f Improve performance in request body parsing with a cache for internal model fields. PR #12184 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Remove duplicate line in docs for <code>docs/en/docs/environment-variables.md</code>. PR #12169 by @prometek.</li> </ul>"},{"location":"release-notes/#translations_14","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/virtual-environments.md</code>. PR #12163 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/environment-variables.md</code>. PR #12162 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/testing.md</code>. PR #12164 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/debugging.md</code>. PR #12165 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/project-generation.md</code>. PR #12157 by @BORA040126.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\u2b06 Bump khulnasoft/issue-manager from 0.5.0 to 0.5.1. PR #12173 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12176 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #12159 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/params.py</code>. PR #12143 by @surreal30.</li> </ul>"},{"location":"release-notes/#01140","title":"0.114.0","text":"<p>You can restrict form fields to only include those declared in a Pydantic model and forbid any extra field sent in the request using Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models - Forbid Extra Form Fields.</p>"},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add support for forbidding extra form fields with Pydantic models. PR #12134 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs, Form Models section title, to match config name. PR #12152 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\u2705 Update internal tests for latest Pydantic, including CI tweaks to install the latest Pydantic. PR #12147 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01130","title":"0.113.0","text":"<p>Now you can declare form fields with Pydantic models:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12129 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_15","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: Coherence link. PR #12130 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01124","title":"0.112.4","text":"<p>This release is mainly a big internal refactor to enable adding support for Pydantic models for <code>Form</code> fields, but that feature comes in the next release.</p> <p>This release shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. It's just a checkpoint. \ud83e\udd13</p>"},{"location":"release-notes/#refactors_8","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor deciding if <code>embed</code> body fields, do not overwrite fields, compute once per router, refactor internals in preparation for Pydantic models in <code>Form</code>, <code>Query</code> and others. PR #12117 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_16","title":"Internal","text":"<ul> <li>\u23ea\ufe0f Temporarily revert \"\u2728 Add support for Pydantic models in <code>Form</code> parameters\" to make a checkpoint release. PR #12128 by @khulnasoft. Restored by PR #12129.</li> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12127 by @khulnasoft. Reverted by PR #12128 to make a checkpoint release with only refactors. Restored by PR #12129.</li> </ul>"},{"location":"release-notes/#01123","title":"0.112.3","text":"<p>This release is mainly internal refactors, it shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. There are a few bigger releases coming right after. \ud83d\ude80</p>"},{"location":"release-notes/#refactors_9","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor internal <code>check_file_field()</code>, rename to <code>ensure_multipart_is_installed()</code> to clarify its purpose. PR #12106 by @khulnasoft.</li> <li>\u267b\ufe0f Rename internal <code>create_response_field()</code> to <code>create_model_field()</code> as it's used for more than response models. PR #12103 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal data from <code>solve_dependencies()</code> using dataclasses. PR #12100 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal <code>analyze_param()</code> to structure data with dataclasses instead of tuple. PR #12099 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify dependencies data structures with dataclasses. PR #12098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Techniques and applications of SQLAlchemy global filters in ReadyAPI. PR #12109 by @TheShubhendra.</li> <li>\ud83d\udcdd Add note about <code>time.perf_counter()</code> in middlewares. PR #12095 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak middleware code sample <code>time.time()</code> to <code>time.perf_counter()</code>. PR #11957 by @domdent.</li> <li>\ud83d\udd27 Update sponsors: Coherence. PR #12093 by @khulnasoft.</li> <li>\ud83d\udcdd Fix async test example not to trigger DeprecationWarning. PR #12084 by @marcinsulikowski.</li> <li>\ud83d\udcdd Update <code>docs_src/path_params_numeric_validations/tutorial006.py</code>. PR #11478 by @MuhammadAshiqAmeer.</li> <li>\ud83d\udcdd Update comma in <code>docs/en/docs/async.md</code>. PR #12062 by @Alec-Gillis.</li> <li>\ud83d\udcdd Update docs about serving ReadyAPI: ASGI servers, Docker containers, etc.. PR #12069 by @khulnasoft.</li> <li>\ud83d\udcdd Clarify <code>response_class</code> parameter, validations, and returning a response directly. PR #12067 by @khulnasoft.</li> <li>\ud83d\udcdd Fix minor typos and issues in the documentation. PR #12063 by @svlandeg.</li> <li>\ud83d\udcdd Add note in Docker docs about ensuring graceful shutdowns and lifespan events with <code>CMD</code> exec form. PR #11960 by @GPla.</li> </ul>"},{"location":"release-notes/#translations_15","title":"Translations","text":"<ul> <li>\ud83c\udf10  Add Dutch translation for <code>docs/nl/docs/features.md</code>. PR #12101 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-events.md</code>. PR #12108 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/index.md</code>. PR #12114 by @ceb10n.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/index.md</code>. PR #12042 by @svlandeg.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/how-to/index.md</code>. PR #12070 by @synthpop123.</li> </ul>"},{"location":"release-notes/#internal_17","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12115 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.0 to 1.10.1. PR #12120 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.3.0 to 10.4.0. PR #12105 by @dependabot[bot].</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #12118 by @svlandeg.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.0. PR #12112 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors link: Coherence. PR #12097 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler config to handle sponsorships data. PR #12096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Kong. PR #12085 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12076 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #12073 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01122","title":"0.112.2","text":""},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>allow_inf_nan</code> option for Param and Body classes. PR #11867 by @giunio-prc.</li> <li>\ud83d\udc1b Ensure that <code>app.include_router</code> merges nested lifespans. PR #9630 by @Lancetnik.</li> </ul>"},{"location":"release-notes/#refactors_10","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Fix typing annotation for semi-internal <code>ReadyAPI.add_api_route()</code>. PR #10240 by @ordinary-jamie.</li> <li>\u2b06\ufe0f Upgrade version of Ruff and reformat. PR #12032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_13","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix a typo in <code>docs/en/docs/virtual-environments.md</code>. PR #12064 by @aymenkrifa.</li> <li>\ud83d\udcdd Add docs about Environment Variables and Virtual Environments. PR #12054 by @khulnasoft.</li> <li>\ud83d\udcdd Add Asyncer mention in async docs. PR #12037 by @khulnasoft.</li> <li>\ud83d\udcdd Move the Features docs to the top level to improve the main page menu. PR #12036 by @khulnasoft.</li> <li>\u270f\ufe0f Fix import typo in reference example for <code>Security</code>. PR #11168 by @0shah0.</li> <li>\ud83d\udcdd Highlight correct line in tutorial <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11978 by @svlandeg.</li> <li>\ud83d\udd25 Remove Sentry link from Advanced Middleware docs. PR #12031 by @alejsdev.</li> <li>\ud83d\udcdd Clarify management tasks for translations, multiples files in one PR. PR #12030 by @khulnasoft.</li> <li>\ud83d\udcdd Edit the link to the OpenAPI \"Responses Object\" and \"Response Object\" sections in the \"Additional Responses in OpenAPI\" section. PR #11996 by @VaitoSoi.</li> <li>\ud83d\udd28 Specify <code>email-validator</code> dependency with dash. PR #11515 by @jirikuncar.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/project-generation.md</code>. PR #11947 by @alejsdev.</li> <li>\ud83d\udcdd Fix minor typo. PR #12026 by @MicaelJarniac.</li> <li>\ud83d\udcdd Several docs improvements, tweaks, and clarifications. PR #11390 by @nilslindemann.</li> <li>\ud83d\udcdd Add missing <code>compresslevel</code> parameter on docs for <code>GZipMiddleware</code>. PR #11350 by @junah201.</li> <li>\ud83d\udcdd Fix inconsistent response code when item already exists in docs for testing. PR #11818 by @lokomilo.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/body.md</code> with Python 3.10 union type example. PR #11415 by @rangzen.</li> </ul>"},{"location":"release-notes/#translations_16","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request_file.md</code>. PR #12018 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/learn/index.md</code>. PR #11592 by @ukwhatn.</li> <li>\ud83d\udcdd Update Spanish translation docs for consistency. PR #12044 by @alejsdev.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12028 by @xuvjso.</li> <li>\ud83d\udcdd Update ReadyAPI People, do not translate to have the most recent info. PR #12034 by @khulnasoft.</li> <li>\ud83c\udf10 Update Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #10046 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_18","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12046 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update coverage config files. PR #12035 by @khulnasoft.</li> <li>\ud83d\udd28 Standardize shebang across shell scripts. PR #11942 by @gitworkflows.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;1.4.43,&gt;=1.3.18 to &gt;=1.3.18,&lt;2.0.33. PR #11979 by @dependabot[bot].</li> <li>\ud83d\udd0a Remove old ignore warnings. PR #11950 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade griffe-typingdoc for the docs. PR #12029 by @khulnasoft.</li> <li>\ud83d\ude48 Add .coverage* to <code>.gitignore</code>. PR #11940 by @gitworkflows.</li> <li>\u2699\ufe0f Record and show test coverage contexts (what test covers which line). PR #11518 by @slafs.</li> </ul>"},{"location":"release-notes/#01121","title":"0.112.1","text":""},{"location":"release-notes/#upgrades_5","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Allow Starlette 0.38.x, update the pin to <code>&gt;=0.37.2,&lt;0.39.0</code>. PR #11876 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#docs_14","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs section about \"Don't Translate these Pages\". PR #12022 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for non-translated pages and scripts to verify them. PR #12020 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs about discussions questions. PR #11985 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_17","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/bigger-applications.md</code>. PR #11971 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-websockets.md</code>. PR #11994 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-dependencies.md</code>. PR #11995 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/using-request-directly.md</code>. PR #11956 by @ceb10n.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #11796 by @pe-brian.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11557 by @caomingpei.</li> <li>\ud83c\udf10 Update typo in Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #11944 by @bestony.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/sub-applications.md</code> and <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #11856 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cors.md</code> and <code>docs/pt/docs/tutorial/middleware.md</code>. PR #11916 by @wesinalves.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #11788 by @pe-brian.</li> </ul>"},{"location":"release-notes/#internal_19","title":"Internal","text":"<ul> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0. PR #11727 by @dependabot[bot].</li> <li>\ud83d\udd27 Add changelog URL to <code>pyproject.toml</code>, shows in PyPI. PR #11152 by @Pierre-VF.</li> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #12024 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Update Labeler GitHub Actions. PR #12019 by @khulnasoft.</li> <li>\ud83d\udd27 Update configs for MkDocs for languages and social cards. PR #12016 by @khulnasoft.</li> <li>\ud83d\udc77 Update permissions and config for labeler GitHub Action. PR #12008 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add GitHub Action label-checker. PR #12005 by @khulnasoft.</li> <li>\ud83d\udc77 Add label checker GitHub Action. PR #12004 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action add-to-project. PR #12002 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler GitHub Action. PR #12001 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #12000 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #11999 by @khulnasoft.</li> <li>\ud83d\udcdd Update admonitions in docs missing. PR #11998 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR #11986 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs instant previews. PR #11982 by @khulnasoft.</li> <li>\ud83d\udc1b Fix deploy docs previews script to handle mkdocs.yml files. PR #11984 by @khulnasoft.</li> <li>\ud83d\udca1 Add comment about custom Termynal line-height. PR #11976 by @khulnasoft.</li> <li>\ud83d\udc77 Add alls-green for test-redistribute. PR #11974 by @khulnasoft.</li> <li>\ud83d\udc77 Update docs-previews to handle no docs changes. PR #11975 by @khulnasoft.</li> <li>\ud83d\udd28 Refactor script <code>deploy_docs_status.py</code> to account for deploy URLs with or without trailing slash. PR #11965 by @khulnasoft.</li> <li>\ud83d\udd12\ufe0f Update permissions for deploy-docs action. PR #11964 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add deploy docs status and preview links to PRs. PR #11961 by @khulnasoft.</li> <li>\ud83d\udd27 Update docs setup with latest configs and plugins. PR #11953 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore warning from attrs in Trio. PR #11949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01120","title":"0.112.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\u267b\ufe0f Add support for <code>pip install \"readyapi[standard]\"</code> with standard dependencies and <code>python -m readyapi</code>. PR #11935 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#summary","title":"Summary","text":"<p>Install with:</p> <pre><code>pip install \"readyapi[standard]\"\n</code></pre>"},{"location":"release-notes/#other-changes","title":"Other Changes","text":"<ul> <li>This adds support for calling the CLI as:</li> </ul> <pre><code>python -m readyapi\n</code></pre> <ul> <li>And it upgrades <code>readyapi-cli[standard] &gt;=0.0.5</code>.</li> </ul>"},{"location":"release-notes/#technical-details","title":"Technical Details","text":"<p>Before this, <code>readyapi</code> would include the standard dependencies, with Uvicorn and the <code>readyapi-cli</code>, etc.</p> <p>And <code>readyapi-slim</code> would not include those standard dependencies.</p> <p>Now <code>readyapi</code> doesn't include those standard dependencies unless you install with <code>pip install \"readyapi[standard]\"</code>.</p> <p>Before, you would install <code>pip install readyapi</code>, now you should include the <code>standard</code> optional dependencies (unless you want to exclude one of those): <code>pip install \"readyapi[standard]\"</code>.</p> <p>This change is because having the standard optional dependencies installed by default was being inconvenient to several users, and having to install instead <code>readyapi-slim</code> was not being a feasible solution.</p> <p>Discussed here: #11522 and here: #11525</p>"},{"location":"release-notes/#docs_15","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typos in docs. PR #11926 by @jianghuyiyuan.</li> <li>\ud83d\udcdd Tweak management docs. PR #11918 by @khulnasoft.</li> <li>\ud83d\ude9a Rename GitHub links from khulnasoft/readyapi to readyapi/readyapi. PR #11913 by @khulnasoft.</li> <li>\ud83d\udcdd Add docs about ReadyAPI team and project management. PR #11908 by @khulnasoft.</li> <li>\ud83d\udcdd Re-structure docs main menu. PR #11904 by @khulnasoft.</li> <li>\ud83d\udcdd Update Speakeasy URL. PR #11871 by @ndimares.</li> </ul>"},{"location":"release-notes/#translations_18","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/alternatives.md</code>. PR #11931 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10515 by @AlertRED.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-change-status-code.md</code>. PR #11863 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/background.md</code>. PR #11849 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #11848 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/apirouter.md</code>. PR #11843 by @lucasbalieiro.</li> </ul>"},{"location":"release-notes/#internal_20","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: add liblab. PR #11934 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action label-approved permissions. PR #11933 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor GitHub Action to comment docs deployment URLs and update token. PR #11925 by @khulnasoft.</li> <li>\ud83d\udc77 Update tokens for GitHub Actions. PR #11924 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions to comment deployment URL in docs. PR #11917 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions for GitHub Actions. PR #11915 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Actions token usage. PR #11914 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action to notify translations with label <code>approved-1</code>. PR #11907 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Reflex. PR #11875 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove TalkPython. PR #11861 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #11854 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01111","title":"0.111.1","text":""},{"location":"release-notes/#upgrades_6","title":"Upgrades","text":"<ul> <li>\u2796 Remove <code>orjson</code> and <code>ujson</code> from default dependencies. PR #11842 by @khulnasoft.<ul> <li>These dependencies are still installed when you install with <code>pip install \"readyapi[all]\"</code>. But they are not included in <code>pip install readyapi</code>.</li> </ul> </li> <li>\ud83d\udcdd Restored Swagger-UI links to use the latest version possible. PR #11459 by @UltimateLobster.</li> </ul>"},{"location":"release-notes/#docs_16","title":"Docs","text":"<ul> <li>\u270f\ufe0f Rewording in <code>docs/en/docs/readyapi-cli.md</code>. PR #11716 by @alejsdev.</li> <li>\ud83d\udcdd Update Hypercorn links in all the docs. PR #11744 by @kittydoor.</li> <li>\ud83d\udcdd  Update docs with Ariadne reference from Starlette to ReadyAPI. PR #11797 by @DamianCzajkowski.</li> <li>\ud83d\udcdd Update readyapi instrumentation external link. PR #11317 by @softwarebloat.</li> <li>\u270f\ufe0f Fix links to alembic example repo in docs. PR #11628 by @augiwan.</li> <li>\u270f\ufe0f Update <code>docs/en/docs/readyapi-cli.md</code>. PR #11715 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links . PR #11500 by @devon2018.</li> <li>\ud83d\udcdd Add External Link: Tutorial de ReadyAPI, \u00bfel mejor framework de Python?. PR #11618 by @EduardoZepeda.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11698 by @mwb-u.</li> <li>\ud83d\udcdd Add External Link: Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale. PR #11633 by @ananis25.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11674 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11673 by @alejsdev.</li> <li>\ud83d\udcdd Update note in <code>path-params-numeric-validations.md</code>. PR #11672 by @alejsdev.</li> <li>\ud83d\udcdd Tweak intro docs about <code>Annotated</code> and <code>Query()</code> params. PR #11664 by @khulnasoft.</li> <li>\ud83d\udcdd Update JWT auth documentation to use PyJWT instead of pyhon-jose. PR #11589 by @estebanx64.</li> <li>\ud83d\udcdd Update docs. PR #11603 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo: convert every 're-use' to 'reuse'.. PR #11598 by @hasansezertasan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/applications.py</code>. PR #11593 by @petarmaric.</li> <li>\u270f\ufe0f Fix link in <code>readyapi-cli.md</code>. PR #11524 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_19","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/how-to/graphql.md</code>. PR #11697 by @camigomezdev.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/index.md</code>. PR #11840 by @lucasbalieiro.</li> <li>\ud83c\udf10 Fix link in German translation. PR #11836 by @anitahammer.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #11792 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/request-forms.md</code>. PR #11553 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/exceptions.md</code>. PR #11834 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11826 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/general.md</code>. PR #11825 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/async-tests.md</code>. PR #11808 by @ceb10n.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/first-steps.md</code>. PR #11809 by @vkhoroshchak.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-operators.md</code>. PR #11804 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #11786 by @logan2d5.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-webhooks.md</code>. PR #11791 by @ceb10n.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #11781 by @logan2d5.</li> <li>\ud83d\udcdd Fix image missing in French translation for <code>docs/fr/docs/async.md</code> . PR #11787 by @pe-brian.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/advanced-dependencies.md</code>. PR #11775 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #11768 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10  Add Portuguese translation for <code>docs/pt/docs/advanced/additional-status-codes.md</code>. PR #11753 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/index.md</code>. PR #11757 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #11739 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/learn/index.md</code>. PR #11712 by @benjaminvandammeholberton.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/index.md</code>. PR #11731 by @vhsenna.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/additional-responses.md</code>. PR #11736 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #11713 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/response-status-code.md</code>. PR #11718 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/extra-data-types.md</code>. PR #11711 by @nayeonkinn.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #11710 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/readyapi-cli.md</code>. PR #11641 by @ayr-ton.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-people.md</code>. PR #11639 by @hsuanchi.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/index.md</code>. PR #11606 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/cloud.md</code>. PR #11610 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/security/index.md</code>. PR #11609 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/testing-websockets.md</code>. PR #11608 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/general.md</code>. PR #11607 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #11620 by @chaoless.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/index.md</code>. PR #11605 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/static-files.md</code>. PR #11599 by @hasansezertasan.</li> <li>\ud83c\udf10 Polish translation for <code>docs/pl/docs/readyapi-people.md</code>. PR #10196 by @isulim.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/wsgi.md</code>. PR #11575 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/cookie-params.md</code>. PR #11561 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/about/index.md</code>. PR #10961 by @s111d.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #11539 by @chaoless.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/configure-swagger-ui.md</code>. PR #11501 by @Lucas-lyh.</li> <li>\ud83c\udf10 Update Chinese translation for <code>/docs/advanced/security/http-basic-auth.md</code>. PR #11512 by @nick-cjyx9.</li> </ul>"},{"location":"release-notes/#internal_21","title":"Internal","text":"<ul> <li>\u267b\ufe0f Simplify internal docs script. PR #11777 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Fine. PR #11784 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11765 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11764 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Stainless. PR #11763 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Zuplo. PR #11729 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor link: Coherence. PR #11730 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11669 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Kong. PR #11662 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow, fix sync download artifact and smokeshow configs. PR #11563 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #11562 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub actions to download and upload artifacts to v4, for docs and coverage. PR #11550 by @tamird.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #11549 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11511 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01110","title":"0.111.0","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add ReadyAPI CLI, the new <code>readyapi</code> command. PR #11522 by @khulnasoft.<ul> <li>New docs: ReadyAPI CLI.</li> </ul> </li> </ul> <p>Try it out with:</p> <pre><code>$ pip install --upgrade readyapi\n\n$ readyapi dev main.py\n\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"release-notes/#refactors_11","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add configs and setup for <code>readyapi-slim</code> including optional extras <code>readyapi-slim[standard]</code>, and <code>readyapi</code> including by default the same <code>standard</code> extras. PR #11503 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01103","title":"0.110.3","text":""},{"location":"release-notes/#docs_17","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update references to Python version, ReadyAPI supports all the current versions, no need to make the version explicit. PR #11496 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/api_key.py</code>. PR #11481 by @ch33zer.</li> <li>\u270f\ufe0f Fix typo in <code>security/http.py</code>. PR #11455 by @omarmoo5.</li> </ul>"},{"location":"release-notes/#translations_20","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/benchmarks.md</code>. PR #11484 by @KNChiu.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-people.md</code>. PR #11476 by @billzhong.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/index.md</code> and <code>docs/zh/docs/how-to/general.md</code>. PR #11443 by @billzhong.</li> <li>\ud83c\udf10 Add Spanish translation for cookie-params <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #11410 by @fabianfalon.</li> </ul>"},{"location":"release-notes/#internal_22","title":"Internal","text":"<ul> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.24.3. PR #11469 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #11499 by @khulnasoft.</li> <li>\ud83d\udd27 Migrate from Hatch to PDM for the internal build. PR #11498 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material and re-enable cards. PR #11466 by @khulnasoft.</li> <li>\u2b06 Bump pillow from 10.2.0 to 10.3.0. PR #11403 by @dependabot[bot].</li> <li>\ud83d\udd27 Ungroup dependabot updates. PR #11465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01102","title":"0.110.2","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for query parameters with list types, handle JSON encoding Pydantic <code>UndefinedType</code>. PR #9929 by @arjwilliams.</li> </ul>"},{"location":"release-notes/#refactors_12","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Simplify Pydantic configs in OpenAPI models in <code>readyapi/openapi/models.py</code>. PR #10886 by @JoeTanto2.</li> <li>\u2728 Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR #11461 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_18","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix types in examples under <code>docs_src/extra_data_types</code>. PR #10535 by @nilslindemann.</li> <li>\ud83d\udcdd Update references to UJSON. PR #11464 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs and translations links, typos, format. PR #11389 by @nilslindemann.</li> <li>\ud83d\udcdd Fix typo in <code>docs/es/docs/async.md</code>. PR #11400 by @fabianfalon.</li> <li>\ud83d\udcdd Update OpenAPI client generation docs to use <code>@hey-api/openapi-ts</code>. PR #11339 by @jordanshatford.</li> </ul>"},{"location":"release-notes/#translations_21","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/index.html</code>. PR #11430 by @waketzheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11411 by @anton2yakovlev.</li> <li>\ud83c\udf10 Add Portuguese translations for <code>learn/index.md</code> <code>resources/index.md</code> <code>help/index.md</code> <code>about/index.md</code>. PR #10807 by @nazarepiedady.</li> <li>\ud83c\udf10 Update Russian translations for deployments docs. PR #11271 by @Lufa1u.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/python-types.md</code>. PR #11376 by @imtiaz101325.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #5744 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #4139 by @kty4119.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/events.md</code>. PR #5087 by @pers0n4.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-operation-configuration.md</code>. PR #1954 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/request-forms-and-files.md</code>. PR #1946 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10532 by @AlertRED.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/debugging.md</code>. PR #5695 by @JungWooGeon.</li> </ul>"},{"location":"release-notes/#internal_23","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade version of cligenius for docs. PR #11393 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01101","title":"0.110.1","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix parameterless <code>Depends()</code> with generics. PR #9479 by @nzig.</li> </ul>"},{"location":"release-notes/#refactors_13","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update mypy. PR #11049 by @k0t3n.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/applications.py</code>. PR #11335 by @igeni.</li> </ul>"},{"location":"release-notes/#upgrades_7","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.37.2,&lt;0.38.0, remove Starlette filterwarning for internal tests. PR #11266 by @nothielf.</li> </ul>"},{"location":"release-notes/#docs_19","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links and remove old docs translations. PR #11381 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #11368 by @shandongbinzhou.</li> <li>\ud83d\udcdd Update links to Pydantic docs to point to new website. PR #11328 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #11329 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>project-generation.md</code>. PR #11326 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links. PR #11327 by @alejsdev.</li> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, on other i18n pages.. PR #11224 by @hirotoKirimaru.</li> <li>\u270f\ufe0f Fix typos in docstrings. PR #11295 by @davidhuser.</li> <li>\ud83d\udee0\ufe0f Improve Node.js script in docs to generate TypeScript clients. PR #11293 by @alejsdev.</li> <li>\ud83d\udcdd Update examples for tests to replace \"inexistent\" for \"nonexistent\". PR #11220 by @Homesteady.</li> <li>\ud83d\udcdd Update <code>python-multipart</code> GitHub link in all docs from <code>https://andrew-d.github.io/python-multipart/</code> to <code>https://github.com/Kludex/python-multipart</code>. PR #11239 by @joshjhans.</li> </ul>"},{"location":"release-notes/#translations_22","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #10357 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #3480 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/body.md</code>. PR #3481 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #3479 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/body-fields.md</code>. PR #3496 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/extra-models.md</code>. PR #3497 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/metadata.md</code>. PR #2667 by @tokusumi.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/contributing.md</code>. PR #10487 by @nilslindemann.</li> <li>\ud83c\udf10 Update Japanese translation of <code>docs/ja/docs/tutorial/query-params.md</code>. PR #10808 by @urushio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/security/get-current-user.md</code>. PR #3842 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-callbacks.md</code>. PR #3825 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/extending-openapi.md</code>. PR #3823 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #3819 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/custom-request-and-route.md</code>. PR #3816 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/external-links.md</code>. PR #3833 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #3812 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/sub-applications.md</code>. PR #3811 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-sql-databases.md</code>. PR #3805 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/middleware.md</code>. PR #3804 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/dataclasses.md</code>. PR #3803 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/using-request-directly.md</code>. PR #3802 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/http-basic-auth.md</code>. PR #3801 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #3800 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/cookie-params.md</code>. PR #3486 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/header-params.md</code>. PR #3487 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/response-status-code.md</code>. PR #3498 by @jaystone776.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/first-steps.md</code>. PR #10432 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/events.md</code>. PR #10693 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/cloud.md</code>. PR #10746 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/behind-a-proxy.md</code>. PR #10675 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/help-readyapi.md</code>. PR #10455 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/python-types.md</code>. PR #10287 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params.md</code>. PR #10290 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/handling-errors.md</code>. PR #10379 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/index.md</code>. PR #10283 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #10651 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/bigger-applications.md</code>. PR #10554 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10612 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/static-files.md</code>. PR #10584 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/oauth2-jwt.md</code>. PR #10522 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-model.md</code>. PR #10345 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-models.md</code>. PR #10351 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-updates.md</code>. PR #10396 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/alternatives.md</code>. PR #10855 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/templates.md</code>. PR #10678 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/oauth2-scopes.md</code>. PR #10643 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/async-tests.md</code>. PR #10708 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/metadata.md</code>. PR #10581 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/testing.md</code>. PR #10586 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/schema-extra-example.md</code>. PR #10597 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/index.md</code>. PR #10611 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-directly.md</code>. PR #10618 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-responses.md</code>. PR #10626 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-cookies.md</code>. PR #10627 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-headers.md</code>. PR #10628 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-change-status-code.md</code>. PR #10632 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/advanced-dependencies.md</code>. PR #10633 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/index.md</code>. PR #10635 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #10653 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #10667 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/middleware.md</code>. PR #10668 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/sub-applications.md</code>. PR #10671 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/websockets.md</code>. PR #10687 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-websockets.md</code>. PR #10703 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-events.md</code>. PR #10704 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-dependencies.md</code>. PR #10706 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-callbacks.md</code>. PR #10710 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/settings.md</code>. PR #10709 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/wsgi.md</code>. PR #10713 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/index.md</code>. PR #10733 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/https.md</code>. PR #10737 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/manually.md</code>. PR #10738 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/concepts.md</code>. PR #10744 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/features.md</code>. PR #10284 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/server-workers.md</code>. PR #10747 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/docker.md</code>. PR #10759 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/index.md</code>. PR #10769 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/general.md</code>. PR #10770 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/graphql.md</code>. PR #10788 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-request-and-route.md</code>. PR #10789 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #10790 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/separate-openapi-schemas.md</code>. PR #10796 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #10804 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-docs-ui-assets.md</code>. PR #10803 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/parameters.md</code>. PR #10814 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/status.md</code>. PR #10815 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/uploadfile.md</code>. PR #10816 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/exceptions.md</code>. PR #10817 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/dependencies.md</code>. PR #10818 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/apirouter.md</code>. PR #10819 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/websockets.md</code>. PR #10822 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/httpconnection.md</code>. PR #10823 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/response.md</code>. PR #10824 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/middleware.md</code>. PR #10837 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/openapi/*.md</code>. PR #10838 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/security/index.md</code>. PR #10839 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/staticfiles.md</code>. PR #10841 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/testclient.md</code>. PR #10843 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/project-generation.md</code>. PR #10851 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/history-design-future.md</code>. PR #10865 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10422 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/global-dependencies.md</code>. PR #10420 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/readyapi-people.md</code>. PR #10285 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10409 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/index.md</code>. PR #10429 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10411 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-data-types.md</code>. PR #10534 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/simple-oauth2.md</code>. PR #10504 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/get-current-user.md</code>. PR #10439 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms-and-files.md</code>. PR #10368 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/encoder.md</code>. PR #10385 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms.md</code>. PR #10361 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/versions.md</code>. PR #10491 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/async.md</code>. PR #10449 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/cookie-params.md</code>. PR #10323 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10407 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/index.md</code>. PR #10399 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/header-params.md</code>. PR #10326 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params-numeric-validations.md</code>. PR #10307 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params-str-validations.md</code>. PR #10304 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-files.md</code>. PR #10364 by @nilslindemann.</li> <li>:globe_with_meridians: Add Portuguese translation for <code>docs/pt/docs/advanced/templates.md</code>. PR #11338 by @SamuelBFavarin.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/learn/index.md</code>. PR #11337 by @imtiaz101325.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #11296 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/about/index.md</code>. PR #11299 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/index.md</code>. PR #9613 by @ElliottLarsen.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/extending-openapi.md</code>. PR #10794 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/metadata.md</code>. PR #11286 by @jackleeio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/contributing.md</code>. PR #10887 by @Aruelius.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/readyapi-people.md</code>. PR #11195 by @vusallyv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/index.md</code>. PR #11223 by @kohiry.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11242 by @jackleeio.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/learn/index.md</code>. PR #11192 by @vusallyv.</li> </ul>"},{"location":"release-notes/#internal_24","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11387 by @khulnasoft.</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #10988 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.14. PR #11318 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.2.0. PR #11011 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #11325 by @dependabot[bot].</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #11377 by @estebanx64.</li> <li>\u2795 Replace mkdocs-markdownextradata-plugin with mkdocs-macros-plugin. PR #11383 by @khulnasoft.</li> <li>\ud83d\udc77 Disable MkDocs insiders social plugin while an issue in MkDocs Material is handled. PR #11373 by @khulnasoft.</li> <li>\ud83d\udc77 Fix logic for when to install and use MkDocs Insiders. PR #11372 by @khulnasoft.</li> <li>\ud83d\udc77 Do not use Python packages cache for publish. PR #11366 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI to test sdists for redistribution (e.g. Linux distros). PR #11365 by @khulnasoft.</li> <li>\ud83d\udc77 Update build-docs GitHub Action path filter. PR #11354 by @khulnasoft.</li> <li>\ud83d\udd27 Update Ruff config, add extra ignore rule from SQLDev. PR #11353 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade configuration for Ruff v0.2.0. PR #11075 by @charliermarsh.</li> <li>\ud83d\udd27 Update sponsors, add MongoDB. PR #11346 by @khulnasoft.</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #11028 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.0.0 to 3.1.4. PR #11310 by @dependabot[bot].</li> <li>\u267b\ufe0f Refactor computing ReadyAPI People, include 3 months, 6 months, 1 year, based on comment date, not discussion date. PR #11304 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11228 by @khulnasoft.</li> <li>\ud83d\udd25 Remove Jina AI QA Bot from the docs. PR #11268 by @nan-wang.</li> <li>\ud83d\udd27 Update sponsors, remove Jina, remove Powens, move TestDriven.io. PR #11213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01100","title":"0.110.0","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix unhandled growing memory for internal server errors, refactor dependencies with <code>yield</code> and <code>except</code> to require raising again as in regular Python. PR #11191 by @khulnasoft.<ul> <li>This is a breaking change (and only slightly) if you used dependencies with <code>yield</code>, used <code>except</code> in those dependencies, and didn't raise again.</li> <li>This was reported internally by @rushilsrivastava as a memory leak when the server had unhandled exceptions that would produce internal server errors, the memory allocated before that point would not be released.</li> <li>Read the new docs: Dependencies with <code>yield</code> and <code>except</code>.</li> </ul> </li> </ul> <p>In short, if you had dependencies that looked like:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        pass\n</code></pre> <p>Now you need to make sure you raise again after <code>except</code>, just as you would in regular Python:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        raise\n</code></pre>"},{"location":"release-notes/#docs_20","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix minor typos in <code>docs/ko/docs/</code>. PR #11126 by @KaniKim.</li> <li>\u270f\ufe0f Fix minor typo in <code>readyapi/applications.py</code>. PR #11099 by @JacobHayes.</li> </ul>"},{"location":"release-notes/#translations_23","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/background.md</code>. PR #10820 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/templating.md</code>. PR #10842 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/external-links.md</code>. PR #10852 by @nilslindemann.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11162 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/encoders.md</code>. PR #10840 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/responses.md</code>. PR #10825 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/request.md</code>. PR #10821 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11078 by @emrhnsyts.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/readyapi.md</code>. PR #10813 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/newsletter.md</code>. PR #10853 by @nilslindemann.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/learn/index.md</code>. PR #11142 by @hsuanchi.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11123 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11124 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/schema-extra-example.md</code>. PR #11121 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body-fields.md</code>. PR #11112 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/cookie-params.md</code>. PR #11118 by @riroan.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/dependencies/index.md</code>. PR #11114 by @KaniKim.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/deployment/docker.md</code>. PR #11113 by @KaniKim.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/first-steps.md</code>. PR #11094 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/security/index.md</code>. PR #2278 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-headers.md</code>. PR #2276 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/deployment/index.md</code> and <code>~/deployment/versions.md</code>. PR #9669 by @pabloperezmoya.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/benchmarks.md</code>. PR #10928 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-change-status-code.md</code>. PR #11100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01092","title":"0.109.2","text":""},{"location":"release-notes/#upgrades_8","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade version of Starlette to <code>&gt;= 0.36.3</code>. PR #11086 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_24","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/readyapi-people.md</code>. PR #10547 by @alperiox.</li> </ul>"},{"location":"release-notes/#internal_25","title":"Internal","text":"<ul> <li>\ud83c\udf71 Add new ReadyAPI logo. PR #11090 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01091","title":"0.109.1","text":""},{"location":"release-notes/#security-fixes","title":"Security fixes","text":"<ul> <li>\u2b06\ufe0f Upgrade minimum version of <code>python-multipart</code> to <code>&gt;=0.0.7</code> to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade <code>python-multipart</code>.</li> </ul> <p>Read more in the advisory: Content-Type Header ReDoS.</p>"},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728  Include HTTP 205 in status codes with no body. PR #10969 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_14","title":"Refactors","text":"<ul> <li>\u2705 Refactor tests for duplicate operation ID generation for compatibility with other tools running the ReadyAPI test suite. PR #10876 by @emmettbutler.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/utils.py</code>. PR #10576 by @eukub.</li> <li>\ud83d\udd27 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR #10893 by @jiridanek.</li> <li>\u2705 Re-enable test in <code>tests/test_tutorial/test_header_params/test_tutorial003.py</code> after fix in Starlette. PR #10904 by @ooknimm.</li> </ul>"},{"location":"release-notes/#docs_21","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak wording in <code>help-readyapi.md</code>. PR #11040 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs for Behind a Proxy. PR #11038 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: 10 Tips for adding SQLAlchemy to ReadyAPI. PR #11036 by @Donnype.</li> <li>\ud83d\udcdd Add External Link: Tips on migrating from Flask to ReadyAPI and vice-versa. PR #11029 by @jtemporal.</li> <li>\ud83d\udcdd Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR #10979 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #10972 by @RafalSkolasinski.</li> <li>\ud83d\udcdd Update <code>HTTPException</code> details in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #5418 by @papb.</li> <li>\u270f\ufe0f A few tweaks in <code>docs/de/docs/tutorial/first-steps.md</code>. PR #10959 by @nilslindemann.</li> <li>\u270f\ufe0f Fix link in <code>docs/en/docs/advanced/async-tests.md</code>. PR #10960 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typos for Spanish documentation. PR #10957 by @jlopezlira.</li> <li>\ud83d\udcdd Add warning about lifespan functions and backwards compatibility with events. PR #10734 by @jacob-indigo.</li> <li>\u270f\ufe0f Fix broken link in <code>docs/tutorial/sql-databases.md</code> in several languages. PR #10716 by @theoohoho.</li> <li>\u270f\ufe0f Remove broken links from <code>external_links.yml</code>. PR #10943 by @Torabek.</li> <li>\ud83d\udcdd Update template docs with more info about <code>url_for</code>. PR #5937 by @EzzEddin.</li> <li>\ud83d\udcdd Update usage of Token model in security docs. PR #9313 by @piotrszacilowski.</li> <li>\u270f\ufe0f Update highlighted line in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #5490 by @papb.</li> <li>\ud83d\udcdd Add External Link: Explore How to Effectively Use JWT With ReadyAPI. PR #10212 by @aanchlia.</li> <li>\ud83d\udcdd Add hyperlink to <code>docs/en/docs/tutorial/static-files.md</code>. PR #10243 by @hungtsetse.</li> <li>\ud83d\udcdd Add External Link: Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR #9440 by @softwarebloat.</li> <li>\ud83d\udcdd Review and rewording of <code>en/docs/contributing.md</code>. PR #10480 by @nilslindemann.</li> <li>\ud83d\udcdd Add External Link: ML serving and monitoring with ReadyAPI and Evidently. PR #9701 by @mnrozhkov.</li> <li>\ud83d\udcdd Reword in docs, from \"have in mind\" to \"keep in mind\". PR #10376 by @malicious.</li> <li>\ud83d\udcdd Add External Link: Talk by Jeny Sadadia. PR #10265 by @JenySadadia.</li> <li>\ud83d\udcdd Add location info to <code>tutorial/bigger-applications.md</code>. PR #10552 by @nilslindemann.</li> <li>\u270f\ufe0f Fix Pydantic method name in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10826 by @ahmedabdou14.</li> </ul>"},{"location":"release-notes/#translations_25","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/external-links.md</code>. PR #10933 by @pablocm83.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/first-steps.md</code>, <code>docs/ko/docs/tutorial/index.md</code>, <code>docs/ko/docs/tutorial/path-params.md</code>, and <code>docs/ko/docs/tutorial/query-params.md</code>. PR #4218 by @SnowSuno.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10870 by @zhiquanchi.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/concepts.md</code>. PR #10282 by @xzmeng.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/index.md</code>. PR #11047 by @aykhans.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/middleware.md</code>. PR #2829 by @JeongHyeongKim.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-nested-models.md</code>. PR #10313 by @nilslindemann.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/middleware.md</code>. PR #9695 by @mojtabapaso.</li> <li>\ud83c\udf10 Update Farsi translation for <code>docs/fa/docs/index.md</code>. PR #10216 by @theonlykingpin.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-fields.md</code>. PR #10310 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body.md</code>. PR #10295 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #10308 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/get-current-user.md</code>. PR #2681 by @sh0nk.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/advanced-dependencies.md</code>. PR #3798 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #3815 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/behind-a-proxy.md</code>. PR #3820 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-events.md</code>. PR #3818 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-websockets.md</code>. PR #3817 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-database.md</code>. PR #3821 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/deta.md</code>. PR #3837 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/history-design-future.md</code>. PR #3832 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #3831 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/docker.md</code>. PR #10296 by @xzmeng.</li> <li>\ud83c\udf10 Update Spanish translation for <code>docs/es/docs/features.md</code>. PR #10884 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/newsletter.md</code>. PR #10922 by @pablocm83.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/background-tasks.md</code>. PR #5910 by @junah201.</li> <li>:globe_with_meridians: Add Turkish translation for <code>docs/tr/docs/alternatives.md</code>. PR #10502 by @alperiox.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/index.md</code>. PR #10989 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body.md</code>. PR #11000 by @KaniKim.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/schema-extra-example.md</code>. PR #4065 by @luccasmmg.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/history-design-future.md</code>. PR #11012 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/resources/index.md</code>. PR #11020 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/index.md</code>. PR #11021 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params.md</code>. PR #10293 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/benchmarks.md</code>. PR #10866 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/learn/index.md</code>. PR #11014 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/security/index.md</code>. PR #9945 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/help/index.md</code>. PR #11013 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/about/index.md</code>. PR #11006 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/benchmarks.md</code>. PR #11005 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Italian translation for <code>docs/it/docs/index.md</code>. PR #5233 by @matteospanio.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help/index.md</code>. PR #10983 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/features.md</code>. PR #10976 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/get-current-user.md</code>. PR #5737 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #10541 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/handling-errors.md</code>. PR #10375 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/encoder.md</code>. PR #10374 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-updates.md</code>. PR #10373 by @AlertRED.</li> <li>\ud83c\udf10 Russian translation: updated <code>readyapi-people.md</code>.. PR #10255 by @NiKuma0.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/index.md</code>. PR #5798 by @3w36zj6.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/generate-clients.md</code>. PR #10725 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-webhooks.md</code>. PR #10712 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/custom-response.md</code>. PR #10624 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-status-codes.md</code>. PR #10617 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/middleware.md</code>. PR #10391 by @JohannesJungbluth.</li> <li>\ud83c\udf10 Add German translation for introduction documents. PR #10497 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/encoder.md</code>. PR #1955 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-data-types.md</code>. PR #1932 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/async.md</code>. PR #5191 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/project-generation.md</code>. PR #5192 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/docker.md</code>. PR #5657 by @nearnear.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/server-workers.md</code>. PR #4935 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/index.md</code>. PR #4561 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/path-operation-configuration.md</code>. PR #3639 by @jungsu-kwon.</li> <li>\ud83c\udf10 Modify the description of <code>zh</code> - Traditional Chinese. PR #10889 by @cherinyy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/static-files.md</code>. PR #2957 by @jeesang7.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/response-model.md</code>. PR #2766 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-multiple-params.md</code>. PR #2461 by @PandaHun.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-params-str-validations.md</code>. PR #2415 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/python-types.md</code>. PR #2267 by @jrim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #2506 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/learn/index.md</code>. PR #10977 by @KaniKim.</li> <li>\ud83c\udf10 Initialize translations for Traditional Chinese. PR #10505 by @hsuanchi.</li> <li>\u270f\ufe0f Tweak the german translation of <code>docs/de/docs/tutorial/index.md</code>. PR #10962 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo error in <code>docs/ko/docs/tutorial/path-params.md</code>. PR #10758 by @2chanhaeng.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #1961 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #1960 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #1959 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/background-tasks.md</code>. PR #2668 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/index.md</code> and <code>docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #1958 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-model.md</code>. PR #1938 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-multiple-params.md</code>. PR #1903 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #1902 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/python-types.md</code>. PR #1899 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/handling-errors.md</code>. PR #1953 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-status-code.md</code>. PR #1942 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-models.md</code>. PR #1941 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese tranlsation for <code>docs/ja/docs/tutorial/schema-extra-example.md</code>. PR #1931 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-nested-models.md</code>. PR #1930 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-fields.md</code>. PR #1923 by @SwftAlpc.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/index.md</code>. PR #9502 by @fhabers21.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/background-tasks.md</code>. PR #10566 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo in <code>docs/ru/docs/index.md</code>. PR #10672 by @Delitel-WEB.</li> <li>\u270f\ufe0f Fix typos in <code>docs/zh/docs/tutorial/extra-data-types.md</code>. PR #10727 by @HiemalBeryl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10410 by @AlertRED.</li> </ul>"},{"location":"release-notes/#internal_26","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11074 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: add Coherence. PR #11066 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action issue-manager. PR #11056 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors: TalkPython badge. PR #11052 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: TalkPython badge image. PR #11048 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Deta. PR #11041 by @khulnasoft.</li> <li>\ud83d\udc84 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR #11039 by @khulnasoft.</li> <li>\ud83d\udd27 Add Italian to <code>mkdocs.yml</code>. PR #11016 by @alejsdev.</li> <li>\ud83d\udd28 Verify <code>mkdocs.yml</code> languages in CI, update <code>docs.py</code>. PR #11009 by @khulnasoft.</li> <li>\ud83d\udd27 Update config in <code>label-approved.yml</code> to accept translations with 1 reviewer. PR #11007 by @alejsdev.</li> <li>\ud83d\udc77 Add changes-requested handling in GitHub Action issue manager. PR #10971 by @khulnasoft.</li> <li>\ud83d\udd27  Group dependencies on dependabot updates. PR #10952 by @Kludex.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #10764 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR #10731 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR #10777 by @dependabot[bot].</li> <li>\ud83d\udd27  Add support for translations to languages with a longer code name, like <code>zh-hant</code>. PR #10950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01090","title":"0.109.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12. PR #10666 by @Jamim.</li> </ul>"},{"location":"release-notes/#upgrades_9","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.35.0,&lt;0.36.0. PR #10938 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_22","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/alternatives.md</code>. PR #10931 by @s111d.</li> <li>\ud83d\udcdd Replace <code>email</code> with <code>username</code> in <code>docs_src/security/tutorial007</code> code examples. PR #10649 by @nilslindemann.</li> <li>\ud83d\udcdd Add VS Code tutorial link. PR #10592 by @nilslindemann.</li> <li>\ud83d\udcdd Add notes about Pydantic v2's new <code>.model_dump()</code>. PR #10929 by @khulnasoft.</li> <li>\ud83d\udcdd Fix broken link in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #10765 by @HurSungYun.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI application monitoring made easy. PR #10917 by @khulnasoft.</li> <li>\u2728 Generate automatic language names for docs translations. PR #5354 by @jakul.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/alternatives.md</code> and <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #10906 by @s111d.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10834 by @Molkree.</li> <li>\ud83d\udcdd Add article: \"Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included\". PR #9733 by @dxphilo.</li> <li>\ud83d\udcdd Add warning about lifecycle events with <code>AsyncClient</code>. PR #4167 by @andrew-chang-dewitt.</li> <li>\u270f\ufe0f Fix typos in <code>/docs/reference/exceptions.md</code> and <code>/en/docs/reference/status.md</code>. PR #10809 by @clarencepenz.</li> <li>\u270f\ufe0f Fix typo in <code>openapi-callbacks.md</code>. PR #10673 by @kayjan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/routing.py</code> . PR #10520 by @sepsh.</li> <li>\ud83d\udcdd Replace HTTP code returned in case of existing user error in docs for testing. PR #4482 by @TristanMarion.</li> <li>\ud83d\udcdd Add blog for ReadyAPI &amp; Supabase. PR #6018 by @theinfosecguy.</li> <li>\ud83d\udcdd Update example source files for SQL databases with SQLAlchemy. PR #9508 by @s-mustafa.</li> <li>\ud83d\udcdd Update code examples in docs for body, replace name <code>create_item</code> with <code>update_item</code> when appropriate. PR #5913 by @OttoAndrey.</li> <li>\u270f\ufe0f Fix typo in dependencies with yield source examples. PR #10847 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_26","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Bengali translation for <code>docs/bn/docs/index.md</code>. PR #9177 by @Fahad-Md-Kamal.</li> <li>\u270f\ufe0f Update Python version in <code>index.md</code> in several languages. PR #10711 by @tamago3keran.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms-and-files.md</code>. PR #10347 by @AlertRED.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/index.md</code>. PR #10362 by @rostik1410.</li> <li>\u270f\ufe0f  Update Python version in <code>docs/ko/docs/index.md</code>. PR #10680 by @Eeap.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/features.md</code>. PR #5887 by @amirilf.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #10325 by @ShuibeiC.</li> <li>\ud83c\udf10 Fix typos in Russian translations for <code>docs/ru/docs/tutorial/background-tasks.md</code>, <code>docs/ru/docs/tutorial/body-nested-models.md</code>, <code>docs/ru/docs/tutorial/debugging.md</code>, <code>docs/ru/docs/tutorial/testing.md</code>. PR #10311 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-files.md</code>. PR #10332 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #10292 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/cloud.md</code>. PR #10291 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #10279 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/https.md</code>. PR #10277 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/index.md</code>. PR #10275 by @xzmeng.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/first-steps.md</code>. PR #9530 by @fhabers21.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/index.md</code>. PR #10444 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/learn/index.md</code>. PR #10479 by @KAZAMA-DREAM.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/learn/index.md</code>. PR #10539 by @AlertRED.</li> <li>\ud83c\udf10 Update SQLAlchemy instruction in Chinese translation <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #9712 by @Royc30ne.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/external-links.md</code>. PR #10549 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/learn/index.md</code>. PR #10885 by @pablocm83.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-fields.md</code>. PR #10670 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Add Hungarian translation for <code>/docs/hu/docs/index.md</code>. PR #10812 by @takacs.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/newsletter.md</code>. PR #10550 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/help/index.md</code>. PR #10907 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/about/index.md</code>. PR #10908 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/resources/index.md</code>. PR #10909 by @pablocm83.</li> </ul>"},{"location":"release-notes/#internal_27","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10871 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade custom GitHub Action comment-docs-preview-in-pr. PR #10916 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action latest-changes. PR #10915 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action label-approved. PR #10913 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action label-approved. PR #10905 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01080","title":"0.108.0","text":""},{"location":"release-notes/#upgrades_10","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.29.0,&lt;0.33.0</code>, update docs and usage of templates with new Starlette arguments. Remove pin of AnyIO <code>&gt;=3.7.1,&lt;4.0.0</code>, add support for AnyIO 4.x.x. PR #10846 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01070","title":"0.107.0","text":""},{"location":"release-notes/#upgrades_11","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.28.0. PR #9636 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_23","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs: Node.js script alternative to update OpenAPI for generated clients. PR #10845 by @alejsdev.</li> <li>\ud83d\udcdd Restructure Docs section in Contributing page. PR #10844 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01060","title":"0.106.0","text":""},{"location":"release-notes/#breaking-changes_2","title":"Breaking Changes","text":"<p>Using resources from dependencies with <code>yield</code> in background tasks is no longer supported.</p> <p>This change is what supports the new features, read below. \ud83e\udd13</p>"},{"location":"release-notes/#dependencies-with-yield-httpexception-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code> and Background Tasks","text":"<p>Dependencies with <code>yield</code> now can raise <code>HTTPException</code> and other exceptions after <code>yield</code>. \ud83c\udf89</p> <p>Read the new docs here: Dependencies with <code>yield</code> and <code>HTTPException</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p> <p>The sequence of execution before ReadyAPI 0.106.0 was like this diagram:</p> <p>Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>The new execution flow can be found in the docs: Execution of dependencies with <code>yield</code>.</p>"},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for raising exceptions (including <code>HTTPException</code>) in dependencies with <code>yield</code> in the exit code, do not support them in background tasks. PR #10831 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_28","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10567 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01050","title":"0.105.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Add support for multiple Annotated annotations, e.g. <code>Annotated[str, Field(), Query()]</code>. PR #10773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_15","title":"Refactors","text":"<ul> <li>\ud83d\udd25 Remove unused NoneType. PR #10774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_24","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak default suggested configs for generating clients. PR #10736 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_29","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Scalar. PR #10728 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add PropelAuth. PR #10760 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs, verify README on CI. PR #10750 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Fern. PR #10729 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Codacy. PR #10677 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Reflex. PR #10676 by @khulnasoft.</li> <li>\ud83d\udcdd Update release notes, move and check latest-changes. PR #10588 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #10587 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01041","title":"0.104.1","text":""},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR #10529 by @alejandraklachquin.<ul> <li>This is not really a bug in ReadyAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the Swagger UI side.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_25","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update data structure and render for external-links. PR #10495 by @khulnasoft.</li> <li>\u270f\ufe0f Fix link to SPDX license identifier in <code>docs/en/docs/tutorial/metadata.md</code>. PR #10433 by @worldworm.</li> <li>\ud83d\udcdd Update example validation error from Pydantic v1 to match Pydantic v2 in <code>docs/en/docs/tutorial/path-params.md</code>. PR #10043 by @giuliowaitforitdavide.</li> <li>\u270f\ufe0f Fix typos in emoji docs and in some source examples. PR #10438 by @afuetterer.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/dependencies.md</code>. PR #10465 by @suravshresth.</li> <li>\u270f\ufe0f Fix typos and rewordings in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #10468 by @yogabonito.</li> <li>\ud83d\udcdd Update docs, remove references to removed <code>pydantic.Required</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #10469 by @yogabonito.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/index.md</code>. PR #10467 by @tarsil.</li> <li>\ud83d\udd25 Remove unnecessary duplicated docstrings. PR #10484 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_30","title":"Internal","text":"<ul> <li>\u270f\ufe0f Update Pydantic links to dotenv support. PR #10511 by @White-Mask.</li> <li>\u270f\ufe0f Update links in <code>docs/en/docs/async.md</code> and <code>docs/zh/docs/async.md</code> to make them relative. PR #10498 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix links in <code>docs/em/docs/async.md</code>. PR #10507 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/em/docs/index.md</code>, Python 3.8. PR #10521 by @kerriop.</li> <li>\u2b06 Bump pillow from 9.5.0 to 10.1.0. PR #10446 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from &lt;9.0.0,&gt;=8.1.4 to &gt;=8.1.4,&lt;10.0.0. PR #5862 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.21 to 9.4.7. PR #10545 by @dependabot[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #10544 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges, Databento. PR #10519 by @khulnasoft.</li> <li>\ud83d\udc77 Adopt Ruff format. PR #10517 by @khulnasoft.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #10496 by @khulnasoft.</li> <li>\ud83d\udc1b Fix overriding MKDocs theme lang in hook. PR #10490 by @khulnasoft.</li> <li>\ud83d\udd25 Drop/close Gitter chat. Questions should go to GitHub Discussions, free conversations to Discord.. PR #10485 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01040","title":"0.104.0","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Add reference (code API) docs with PEP 727, add subclass with custom docstrings for <code>BackgroundTasks</code>, refactor docs structure. PR #10392 by @khulnasoft. New docs at ReadyAPI Reference - Code API.</li> </ul>"},{"location":"release-notes/#upgrades_12","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Drop support for Python 3.7, require Python 3.8 or above. PR #10442 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_31","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.27.0 to 2.28.0. PR #10268 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #10208 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.10. PR #10061 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, Bump.sh images. PR #10381 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #10363 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01032","title":"0.103.2","text":""},{"location":"release-notes/#refactors_16","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade compatibility with Pydantic v2.4, new renamed functions and JSON Schema input/output models with default values. PR #10344 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_27","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/extra-data-types.md</code>. PR #10132 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Fix typos in French translations for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>, <code>docs/fr/docs/alternatives.md</code>, <code>docs/fr/docs/async.md</code>, <code>docs/fr/docs/features.md</code>, <code>docs/fr/docs/help-readyapi.md</code>, <code>docs/fr/docs/index.md</code>, <code>docs/fr/docs/python-types.md</code>, <code>docs/fr/docs/tutorial/body.md</code>, <code>docs/fr/docs/tutorial/first-steps.md</code>, <code>docs/fr/docs/tutorial/query-params.md</code>. PR #10154 by @s-rigaud.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/async.md</code>. PR #5591 by @mkdir700.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/simple-oauth2.md</code>. PR #3844 by @jaystone776.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/cloud.md</code>. PR #10191 by @Sion99.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/https.md</code>. PR #10298 by @tamtam-fitness.</li> <li>\ud83c\udf10 Fix typo in Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #10224 by @AlertRED.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/help-readyapi.md</code>. PR #10121 by @romabozhanovgithub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-params.md</code>. PR #10226 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/versions.md</code>. PR #10276 by @xzmeng.</li> </ul>"},{"location":"release-notes/#internal_32","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, remove Flint. PR #10349 by @khulnasoft.</li> <li>\ud83d\udd27 Rename label \"awaiting review\" to \"awaiting-review\" to simplify search queries. PR #10343 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Svix (revert #10228). PR #10253 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Svix. PR #10228 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Bump.sh. PR #10227 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01031","title":"0.103.1","text":""},{"location":"release-notes/#fixes_12","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin AnyIO to &lt; 4.0.0 to handle an incompatibility while upgrading to Starlette 0.31.1. PR #10194 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_26","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix validation parameter name in docs, from <code>regex</code> to <code>pattern</code>. PR #10085 by @pablodorrio.</li> <li>\u270f\ufe0f Fix indent format in <code>docs/en/docs/deployment/server-workers.md</code>. PR #10066 by @tamtam-fitness.</li> <li>\u270f\ufe0f Fix Pydantic examples in tutorial for Python types. PR #9961 by @rahulsalgare.</li> <li>\u270f\ufe0f Fix link to Pydantic docs in <code>docs/en/docs/tutorial/extra-data-types.md</code>. PR #10155 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #10170 by @poupapaa.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10172 by @ragul-kachiappan.</li> </ul>"},{"location":"release-notes/#translations_28","title":"Translations","text":"<ul> <li>\ud83c\udf10 Remove duplicate line in translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #10126 by @LecoOliveira.</li> <li>\ud83c\udf10 Add Yoruba translation for <code>docs/yo/docs/index.md</code>. PR #10033 by @AfolabiOlaoluwa.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/python-types.md</code>. PR #10080 by @rostik1410.</li> <li>\ud83c\udf10 Add Vietnamese translations for <code>docs/vi/docs/tutorial/first-steps.md</code> and <code>docs/vi/docs/tutorial/index.md</code>. PR #10088 by @magiskboy.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/alternatives.md</code>. PR #10060 by @whysage.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/index.md</code>. PR #10079 by @rostik1410.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/how-to/separate-openapi-schemas.md</code> and <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #10189 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/generate-clients.md</code>. PR #9883 by @funny-cat-happy.</li> </ul>"},{"location":"release-notes/#refactors_17","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typos in comment in <code>readyapi/applications.py</code>. PR #10045 by @AhsanSheraz.</li> <li>\u2705 Add missing test for OpenAPI examples, it was missing in coverage. PR #10188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_33","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10186 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01030","title":"0.103.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for <code>openapi_examples</code> in all ReadyAPI parameters. PR #10152 by @khulnasoft.<ul> <li>New docs: OpenAPI-specific examples.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_27","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note to docs about Separate Input and Output Schemas with ReadyAPI version. PR #10150 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01020","title":"0.102.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for disabling the separation of input and output JSON Schemas in OpenAPI with Pydantic v2 with <code>separate_input_output_schemas=False</code>. PR #10145 by @khulnasoft.<ul> <li>New docs Separate OpenAPI Schemas for Input and Output or Not.</li> <li>This PR also includes a new setup (internal tools) for generating screenshots for the docs.</li> </ul> </li> </ul>"},{"location":"release-notes/#refactors_18","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor tests for new Pydantic 2.2.1. PR #10115 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_28","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add new docs section, How To - Recipes, move docs that don't have to be read by everyone to How To. PR #10114 by @khulnasoft.</li> <li>\ud83d\udcdd Update Advanced docs, add links to sponsor courses. PR #10113 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for generating clients. PR #10112 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak MkDocs and add redirects. PR #10111 by @khulnasoft.</li> <li>\ud83d\udcdd Restructure docs for cloud providers, include links to sponsors. PR #10110 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_34","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Speakeasy. PR #10098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01011","title":"0.101.1","text":""},{"location":"release-notes/#fixes_13","title":"Fixes","text":"<ul> <li>\u2728 Add <code>ResponseValidationError</code> printable details, to show up in server error logs. PR #10078 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_19","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typo in deprecation warnings in <code>readyapi/params.py</code>. PR #9854 by @russbiggs.</li> <li>\u270f\ufe0f Fix typos in comments on internal code in <code>readyapi/concurrency.py</code> and <code>readyapi/routing.py</code>. PR #9590 by @ElliottLarsen.</li> </ul>"},{"location":"release-notes/#docs_29","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in release notes. PR #9835 by @francisbergin.</li> <li>\ud83d\udcdd Add external article: Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI. PR #9847 by @adejumoridwan.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/contributing.md</code>. PR #9878 by @VicenteMerino.</li> <li>\ud83d\udcdd Fix code highlighting in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #9806 by @theonlykingpin.</li> </ul>"},{"location":"release-notes/#translations_29","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/concepts.md</code>. PR #10062 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/server-workers.md</code>. PR #10064 by @tamtam-fitness.</li> <li>\ud83c\udf10 Update Japanese translation for <code>docs/ja/docs/deployment/docker.md</code>. PR #10073 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-people.md</code>. PR #10059 by @rostik1410.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-params.md</code>. PR #10032 by @rostik1410.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #9971 by @Xewus.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/python-types.md</code>. PR #10047 by @magiskboy.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/global-dependencies.md</code>. PR #9970 by @dudyaosuplayer.</li> <li>\ud83c\udf10 Add Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #9974 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_35","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Porter. PR #10051 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Jina back as bronze sponsor. PR #10050 by @khulnasoft.</li> <li>\u2b06 Bump mypy from 1.4.0 to 1.4.1. PR #9756 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.17 to 9.1.21. PR #9960 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01010","title":"0.101.0","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>\u2728 Enable Pydantic's serialization mode for responses, add support for Pydantic's <code>computed_field</code>, better OpenAPI for response models, proper required attributes, better generated clients. PR #10011 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_20","title":"Refactors","text":"<ul> <li>\u2705 Fix tests for compatibility with pydantic 2.1.1. PR #9943 by @dmontagu.</li> <li>\u2705 Fix test error in Windows for <code>jsonable_encoder</code>. PR #9840 by @iudeen.</li> </ul>"},{"location":"release-notes/#upgrades_13","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Do not allow Pydantic 2.1.0 that breaks (require 2.1.1). PR #10012 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_30","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/index.md</code>. PR #9963 by @eVery1337.</li> <li>\ud83c\udf10 Remove Vietnamese note about missing translation. PR #9957 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_36","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Actions step dump context to debug external failures. PR #10008 by @khulnasoft.</li> <li>\ud83d\udd27 Restore MkDocs Material pin after the fix. PR #10001 by @khulnasoft.</li> <li>\ud83d\udd27 Update the Question template to ask for the Pydantic version. PR #10000 by @khulnasoft.</li> <li>\ud83d\udccd Update MkDocs Material dependencies. PR #9986 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9999 by @khulnasoft.</li> <li>\ud83d\udc33 Update Dockerfile with compatibility versions, to upgrade later. PR #9998 by @khulnasoft.</li> <li>\u2795 Add pydantic-settings to ReadyAPI People dependencies. PR #9988 by @khulnasoft.</li> <li>\u267b\ufe0f Update ReadyAPI People logic with new Pydantic. PR #9985 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors, Fern badge. PR #9982 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare Pages. PR #9978 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsor Fern. PR #9979 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #9977 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01001","title":"0.100.1","text":""},{"location":"release-notes/#fixes_14","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Replace <code>MultHostUrl</code> to <code>AnyUrl</code> for compatibility with older versions of Pydantic v1. PR #9852 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_30","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links for self-hosted Swagger UI, point to v5, for OpenAPI 31.0. PR #9834 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_31","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body.md</code>. PR #4574 by @ss-o-furda.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/features.md</code> and <code>docs/vi/docs/index.md</code>. PR #3006 by @magiskboy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/async.md</code>. PR #4179 by @NinaHwang.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #9812 by @wdh99.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #4075 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/index.md</code>. PR #2234 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/contributing.md</code>. PR #2132 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/benchmarks.md</code>. PR #2155 by @clemsau.</li> <li>\ud83c\udf10 Update Chinese translations with new source files. PR #9738 by @mahone3297.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms.md</code>. PR #9841 by @dedkot01.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/handling-errors.md</code>. PR #9485 by @Creat55.</li> </ul>"},{"location":"release-notes/#internal_37","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Fern. PR #9956 by @khulnasoft.</li> <li>\ud83d\udc77 Update ReadyAPI People token. PR #9844 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9775 by @khulnasoft.</li> <li>\ud83d\udc77 Update MkDocs Material token. PR #9843 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #9842 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01000","title":"0.100.0","text":"<p>\u2728 Support for Pydantic v2 \u2728</p> <p>Pydantic version 2 has the core re-written in Rust and includes a lot of improvements and features, for example:</p> <ul> <li>Improved correctness in corner cases.</li> <li>Safer types.</li> <li>Better performance and less energy consumption.</li> <li>Better extensibility.</li> <li>etc.</li> </ul> <p>...all this while keeping the same Python API. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. \ud83d\ude80</p> <p>In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more. \ud83e\udd2f</p> <p>When you use ReadyAPI, there's a lot more going on, processing the request and response, handling dependencies, executing your own code, and particularly, waiting for the network. But you will probably still get some nice performance improvements just from the upgrade.</p> <p>The focus of this release is compatibility with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then performance improvements. Some third-party early beta testers that ran benchmarks on the beta releases of ReadyAPI reported improvements of 2x - 3x. Which is not bad for just doing <code>pip install --upgrade readyapi pydantic</code>. This was not an official benchmark and I didn't check it myself, but it's a good sign.</p>"},{"location":"release-notes/#migration","title":"Migration","text":"<p>Check out the Pydantic migration guide.</p> <p>For the things that need changes in your Pydantic models, the Pydantic team built <code>bump-pydantic</code>.</p> <p>A command line tool that will process your code and update most of the things automatically for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.</p>"},{"location":"release-notes/#pydantic-v1","title":"Pydantic v1","text":"<p>This version of ReadyAPI still supports Pydantic v1. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.</p> <p>This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest ReadyAPI.</p> <p>There are tests for both Pydantic v1 and v2, and test coverage is kept at 100%.</p>"},{"location":"release-notes/#changes","title":"Changes","text":"<ul> <li> <p>There are new parameter fields supported by Pydantic <code>Field()</code> for:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> </li> <li> <p>The new parameter fields are:</p> <ul> <li><code>default_factory</code></li> <li><code>alias_priority</code></li> <li><code>validation_alias</code></li> <li><code>serialization_alias</code></li> <li><code>discriminator</code></li> <li><code>strict</code></li> <li><code>multiple_of</code></li> <li><code>allow_inf_nan</code></li> <li><code>max_digits</code></li> <li><code>decimal_places</code></li> <li><code>json_schema_extra</code></li> </ul> </li> </ul> <p>...you can read about them in the Pydantic docs.</p> <ul> <li>The parameter <code>regex</code> has been deprecated and replaced by <code>pattern</code>.<ul> <li>You can read more about it in the docs for Query Parameters and String Validations: Add regular expressions.</li> </ul> </li> <li>New Pydantic models use an improved and simplified attribute <code>model_config</code> that takes a simple dict instead of an internal class <code>Config</code> for their configuration.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>The attribute <code>schema_extra</code> for the internal class <code>Config</code> has been replaced by the key <code>json_schema_extra</code> in the new <code>model_config</code> dict.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>When you install <code>\"readyapi[all]\"</code> it now also includes:<ul> <li><code>pydantic-settings</code> - for settings management.</li> <li><code>pydantic-extra-types</code> - for extra types to be used with Pydantic.</li> </ul> </li> <li> <p>Now Pydantic Settings is an additional optional package (included in <code>\"readyapi[all]\"</code>). To use settings you should now import <code>from pydantic_settings import BaseSettings</code> instead of importing from <code>pydantic</code> directly.</p> <ul> <li>You can read more about it in the docs for Settings and Environment Variables.</li> </ul> </li> <li> <p>PR #9816 by @khulnasoft, included all the work done (in multiple PRs) on the beta branch (<code>main-pv2</code>).</p> </li> </ul>"},{"location":"release-notes/#0991","title":"0.99.1","text":""},{"location":"release-notes/#fixes_15","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema accepting bools as valid JSON Schemas, e.g. <code>additionalProperties: false</code>. PR #9781 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_31","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update source examples to use new JSON Schema examples field. PR #9776 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0990","title":"0.99.0","text":""},{"location":"release-notes/#features_12","title":"Features","text":"<ul> <li> <p>\u2728 Add support for OpenAPI 3.1.0. PR #9770 by @khulnasoft.</p> <ul> <li>New support for documenting webhooks, read the new docs here: Advanced User Guide: OpenAPI Webhooks.</li> <li>Upgrade OpenAPI 3.1.0, this uses JSON Schema 2020-12.</li> <li>Upgrade Swagger UI to version 5.x.x, that supports OpenAPI 3.1.0.</li> <li>Updated <code>examples</code> field in <code>Query()</code>, <code>Cookie()</code>, <code>Body()</code>, etc. based on the latest JSON Schema and OpenAPI. Now it takes a list of examples and they are included directly in the JSON Schema, not outside. Read more about it (including the historical technical details) in the updated docs: Tutorial: Declare Request Example Data.</li> </ul> </li> <li> <p>\u2728 Add support for <code>deque</code> objects and children in <code>jsonable_encoder</code>. PR #9433 by @cranium.</p> </li> </ul>"},{"location":"release-notes/#docs_32","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix form for the ReadyAPI and friends newsletter. PR #9749 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_32","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/advanced/sub-applications.md</code>. PR #9692 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-model.md</code>. PR #9675 by @glsglsgls.</li> </ul>"},{"location":"release-notes/#internal_38","title":"Internal","text":"<ul> <li>\ud83d\udd28 Enable linenums in MkDocs Material during local live development to simplify highlighting code. PR #9769 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.24.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.25.0. PR #9724 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.16 to 9.1.17. PR #9746 by @dependabot[bot].</li> <li>\ud83d\udd25 Remove missing translation dummy pages, no longer necessary. PR #9751 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #9259 by @pre-commit-ci[bot].</li> <li>\u2728 Add Material for MkDocs Insiders features and cards. PR #9748 by @khulnasoft.</li> <li>\ud83d\udd25 Remove languages without translations. PR #9743 by @khulnasoft.</li> <li>\u2728 Refactor docs for building scripts, use MkDocs hooks, simplify (remove) configs for languages. PR #9742 by @khulnasoft.</li> <li>\ud83d\udd28 Add MkDocs hook that renames sections based on the first index file. PR #9737 by @khulnasoft.</li> <li>\ud83d\udc77 Make cron jobs run only on main repo, not on forks, to avoid error notifications from missing tokens. PR #9735 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs for other languages. PR #9734 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor Docs CI, run in multiple workers with a dynamic matrix to optimize speed. PR #9732 by @khulnasoft.</li> <li>\ud83d\udd25 Remove old internal GitHub Action watch-previews that is no longer needed. PR #9730 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs and MkDocs Material. PR #9729 by @khulnasoft.</li> <li>\ud83d\udc77 Build and deploy docs only on docs changes. PR #9728 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0980","title":"0.98.0","text":""},{"location":"release-notes/#features_13","title":"Features","text":"<ul> <li>\u2728 Allow disabling <code>redirect_slashes</code> at the ReadyAPI app level. PR #3432 by @cyberlis.</li> </ul>"},{"location":"release-notes/#docs_33","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs on Pydantic using ujson internally. PR #5804 by @mvasilkov.</li> <li>\u270f Rewording in <code>docs/en/docs/tutorial/debugging.md</code>. PR #9581 by @ivan-abc.</li> <li>\ud83d\udcdd Add german blog post (Domain-driven Design mit Python und ReadyAPI). PR #9261 by @msander.</li> <li>\u270f\ufe0f Tweak wording in <code>docs/en/docs/tutorial/security/index.md</code>. PR #9561 by @jyothish-mohan.</li> <li>\ud83d\udcdd Update <code>Annotated</code> notes in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #9620 by @Alexandrhub.</li> <li>\u270f\ufe0f Fix typo <code>Annotation</code> -&gt; <code>Annotated</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9625 by @mccricardo.</li> <li>\ud83d\udcdd Use in memory database for testing SQL in docs. PR #1223 by @HarshaLaxman.</li> </ul>"},{"location":"release-notes/#translations_33","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/metadata.md</code>. PR #9681 by @TabarakoAkula.</li> <li>\ud83c\udf10 Fix typo in Spanish translation for <code>docs/es/docs/tutorial/first-steps.md</code>. PR #9571 by @lilidl-nft.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/path-operation-configuration.md</code>. PR #9696 by @TabarakoAkula.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/index.md</code>. PR #9666 by @lordqyxz.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/settings.md</code>. PR #9652 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/websockets.md</code>. PR #9651 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/testing.md</code>. PR #9641 by @wdh99.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/extra-models.md</code>. PR #9619 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/cors.md</code>. PR #9608 by @ivan-abc.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/features.md</code>. PR #5348 by @mbroton.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-nested-models.md</code>. PR #9605 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_39","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.0.272 to 0.0.275. PR #9721 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.21.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.23.0. PR #9463 by @dependabot[bot].</li> <li>\u2b06 Bump mypy from 1.3.0 to 1.4.0. PR #9719 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;3.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;4.0.0. PR #9251 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6. PR #9482 by @dependabot[bot].</li> <li>\u270f\ufe0f Fix tooltips for light/dark theme toggler in docs. PR #9588 by @pankaj1707k.</li> <li>\ud83d\udd27 Set minimal hatchling version needed to build the package. PR #9240 by @mgorny.</li> <li>\ud83d\udcdd Add repo link to PyPI. PR #9559 by @JacobCoffee.</li> <li>\u270f\ufe0f Fix typos in data for tests. PR #4958 by @ryanrussell.</li> <li>\ud83d\udd27 Update sponsors, add Flint. PR #9699 by @khulnasoft.</li> <li>\ud83d\udc77 Lint in CI only once, only with one version of Python, run tests with all of them. PR #9686 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0970","title":"0.97.0","text":""},{"location":"release-notes/#features_14","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dependencies</code> in WebSocket routes. PR #4534 by @paulo-raca.</li> <li>\u2728 Add exception handler for <code>WebSocketRequestValidationError</code> (which also allows to override it). PR #6030 by @kristjanvalur.</li> </ul>"},{"location":"release-notes/#refactors_21","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade and fully migrate to Ruff, remove isort, includes a couple of tweaks suggested by the new version of Ruff. PR #9660 by @khulnasoft.</li> <li>\u267b\ufe0f Update internal type annotations and upgrade mypy. PR #9658 by @khulnasoft.</li> <li>\u267b\ufe0f Simplify <code>AsyncExitStackMiddleware</code> as without Python 3.6 <code>AsyncExitStack</code> is always available. PR #9657 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_14","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Black. PR #9661 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_40","title":"Internal","text":"<ul> <li>\ud83d\udc9a Update CI cache to fix installs when dependencies change. PR #9659 by @khulnasoft.</li> <li>\u2b07\ufe0f Separate requirements for development into their own requirements.txt files, they shouldn't be extras. PR #9655 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0961","title":"0.96.1","text":""},{"location":"release-notes/#fixes_16","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>HTTPException</code> header type annotations. PR #9648 by @khulnasoft.</li> <li>\ud83d\udc1b Fix OpenAPI model fields int validations, <code>gte</code> to <code>ge</code>. PR #9635 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_15","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Update minimum version of Pydantic to &gt;=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR #9567 by @Kludex.</li> </ul>"},{"location":"release-notes/#refactors_22","title":"Refactors","text":"<ul> <li>\u267b Remove <code>media_type</code> from <code>ORJSONResponse</code> as it's inherited from the parent class. PR #5805 by @Kludex.</li> <li>\u267b Instantiate <code>HTTPException</code> only when needed, optimization refactor. PR #5356 by @pawamoy.</li> </ul>"},{"location":"release-notes/#docs_34","title":"Docs","text":"<ul> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, as it was removed there. PR #5811 by @Kludex.</li> </ul>"},{"location":"release-notes/#translations_34","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix spelling in Indonesian translation of <code>docs/id/docs/tutorial/index.md</code>. PR #5635 by @purwowd.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/index.md</code>. PR #5896 by @Wilidon.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/response-change-status-code.md</code> and <code>docs/zh/docs/advanced/response-headers.md</code>. PR #9544 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/schema-extra-example.md</code>. PR #9621 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_41","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Platform.sh. PR #9650 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR #9646 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom tokens for GitHub Actions to avoid rate limits. PR #9647 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0960","title":"0.96.0","text":""},{"location":"release-notes/#features_15","title":"Features","text":"<ul> <li>\u26a1 Update <code>create_cloned_field</code> to use a global cache and improve startup performance. PR #4645 by @madkinsz and previous original PR by @huonw.</li> </ul>"},{"location":"release-notes/#docs_35","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Deta deployment tutorial for compatibility with Deta Space. PR #6004 by @mikBighne98.</li> <li>\u270f\ufe0f Fix typo in Deta deployment tutorial. PR #9501 by @lemonyte.</li> </ul>"},{"location":"release-notes/#translations_35","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/body.md</code>. PR #3885 by @solomein-sv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/static-files.md</code>. PR #9580 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params.md</code>. PR #9584 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/first-steps.md</code>. PR #9471 by @AGolicyn.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/debugging.md</code>. PR #9579 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params.md</code>. PR #9519 by @AGolicyn.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/static-files.md</code>. PR #9436 by @wdh99.</li> <li>\ud83c\udf10 Update Spanish translation including new illustrations in <code>docs/es/docs/async.md</code>. PR #9483 by @andresbermeoq.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params-numeric-validations.md</code>. PR #9563 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/concepts.md</code>. PR #9577 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-multiple-params.md</code>. PR #9586 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_42","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #9602 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, remove InvestSuite. PR #9612 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0952","title":"0.95.2","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>&gt;=0.27.0</code> for a security release. PR #9541 by @khulnasoft. Details on Starlette's security advisory.</li> </ul>"},{"location":"release-notes/#translations_36","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/events.md</code>. PR #9326 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/manually.md</code>. PR #9417 by @Xewus.</li> <li>\ud83c\udf10 Add setup for translations to Lao. PR #9396 by @TheBrown.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/testing.md</code>. PR #9403 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/https.md</code>. PR #9428 by @Xewus.</li> <li>\u270f Fix command to install requirements in Windows. PR #9445 by @MariiaRomanuik.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/response-directly.md</code>. PR #9415 by @axel584.</li> <li>\ud83c\udf10 Initiate Czech translation setup. PR #9288 by @3p1463k.</li> <li>\u270f Fix typo in Portuguese docs for <code>docs/pt/docs/index.md</code>. PR #9337 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-status-code.md</code>. PR #9370 by @nadia3373.</li> </ul>"},{"location":"release-notes/#internal_43","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix <code>flask.escape</code> warning for internal tests. PR #9468 by @samuelcolvin.</li> <li>\u2705 Refactor 2 tests, for consistency and simplification. PR #9504 by @khulnasoft.</li> <li>\u2705 Refactor OpenAPI tests, prepare for Pydantic v2. PR #9503 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR #9394 by @dependabot[bot].</li> <li>\ud83d\udc9a Disable setup-python pip cache in CI. PR #9438 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR #9346 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0951","title":"0.95.1","text":""},{"location":"release-notes/#fixes_17","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix using <code>Annotated</code> in routers or path operations decorated multiple times. PR #9315 by @sharonyogev.</li> </ul>"},{"location":"release-notes/#docs_36","title":"Docs","text":"<ul> <li>\ud83c\udf10 \ud83d\udd20 \ud83d\udcc4 \ud83d\udc22 Translate docs to Emoji \ud83e\udd73 \ud83c\udf89 \ud83d\udca5 \ud83e\udd2f \ud83e\udd2f. PR #5385 by @LeeeeT.</li> <li>\ud83d\udcdd Add notification message warning about old versions of ReadyAPI not supporting <code>Annotated</code>. PR #9298 by @grdworkin.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #5681 by @Leommjr.</li> <li>\u270f Fix wrong import from typing module in Persian translations for <code>docs/fa/docs/index.md</code>. PR #6083 by @Kimiaattaei.</li> <li>\u270f\ufe0f Fix format, remove unnecessary asterisks in <code>docs/en/docs/help-readyapi.md</code>. PR #9249 by @armgabrielyan.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9272 by @nicornk.</li> <li>\u270f Fix typo/bug in inline code example in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9273 by @tim-habitat.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #9282 by @aadarsh977.</li> <li>\u270f Fix typo: 'wll' to 'will' in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9380 by @dasstyxx.</li> </ul>"},{"location":"release-notes/#translations_37","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/index.md</code>. PR #5673 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-nested-models.md</code>. PR #4053 by @luccasmmg.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/alternatives.md</code>. PR #5994 by @Xewus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/extra-models.md</code>. PR #5912 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-operation-configuration.md</code>. PR #5936 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #6002 by @stigsanek.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #9176 by @sehwan505.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/project-generation.md</code>. PR #9243 by @Xewus.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/index.md</code>. PR #9265 by @frabc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params-str-validations.md</code>. PR #9267 by @dedkot01.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/benchmarks.md</code>. PR #9271 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_44","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: remove Jina. PR #9388 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add databento, remove Ines's course and StriveWorks. PR #9351 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0950","title":"0.95.0","text":""},{"location":"release-notes/#highlights_1","title":"Highlights","text":"<p>This release adds support for dependencies and parameters using <code>Annotated</code> and recommends its usage. \u2728</p> <p>This has several benefits, one of the main ones is that now the parameters of your functions with <code>Annotated</code> would not be affected at all.</p> <p>If you call those functions in other places in your code, the actual default values will be kept, your editor will help you notice missing required arguments, Python will require you to pass required arguments at runtime, you will be able to use the same functions for different things and with different libraries (e.g. Cligenius will soon support <code>Annotated</code> too, then you could use the same function for an API and a CLI), etc.</p> <p>Because <code>Annotated</code> is standard Python, you still get all the benefits from editors and tools, like autocompletion, inline errors, etc.</p> <p>One of the biggest benefits is that now you can create <code>Annotated</code> dependencies that are then shared by multiple path operation functions, this will allow you to reduce a lot of code duplication in your codebase, while keeping all the support from editors and tools.</p> <p>For example, you could have code like this:</p> <pre><code>def get_current_user(token: str):\n    # authenticate user\n    return User()\n\n\n@app.get(\"/items/\")\ndef read_items(user: User = Depends(get_current_user)):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(*, user: User = Depends(get_current_user), item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n</code></pre> <p>There's a bit of code duplication for the dependency:</p> <pre><code>user: User = Depends(get_current_user)\n</code></pre> <p>...the bigger the codebase, the more noticeable it is.</p> <p>Now you can create an annotated dependency once, like this:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n</code></pre> <p>And then you can reuse this <code>Annotated</code> dependency:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n@app.get(\"/items/\")\ndef read_items(user: CurrentUser):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(user: CurrentUser, item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(user: CurrentUser, item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(user: CurrentUser, item_id: int):\n    ...\n</code></pre> <p>...and <code>CurrentUser</code> has all the typing information as <code>User</code>, so your editor will work as expected (autocompletion and everything), and ReadyAPI will be able to understand the dependency defined in <code>Annotated</code>. \ud83d\ude0e</p> <p>Roughly all the docs have been rewritten to use <code>Annotated</code> as the main way to declare parameters and dependencies. All the examples in the docs now include a version with <code>Annotated</code> and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80</p> <p>The key updated docs are:</p> <ul> <li>Python Types Intro:<ul> <li>Type Hints with Metadata Annotations.</li> </ul> </li> <li>Tutorial:<ul> <li>Query Parameters and String Validations - Additional validation<ul> <li>Advantages of <code>Annotated</code></li> </ul> </li> <li>Path Parameters and Numeric Validations - Order the parameters as you need, tricks<ul> <li>Better with <code>Annotated</code></li> </ul> </li> <li>Dependencies - First Steps - Share <code>Annotated</code> dependencies</li> </ul> </li> </ul> <p>Special thanks to @nzig for the core implementation and to @adriangb for the inspiration and idea with Xpresso! \ud83d\ude80</p>"},{"location":"release-notes/#features_16","title":"Features","text":"<ul> <li>\u2728Add support for PEP-593 <code>Annotated</code> for specifying dependencies and parameters. PR #4871 by @nzig.</li> </ul>"},{"location":"release-notes/#docs_37","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak tip recommending <code>Annotated</code> in docs. PR #9270 by @khulnasoft.</li> <li>\ud83d\udcdd Update order of examples, latest Python version first, and simplify version tab names. PR #9269 by @khulnasoft.</li> <li>\ud83d\udcdd Update all docs to use <code>Annotated</code> as the main recommendation, with new examples and tests. PR #9268 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0941","title":"0.94.1","text":""},{"location":"release-notes/#fixes_18","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix types for lifespan, upgrade Starlette to 0.26.1. PR #9245 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0940","title":"0.94.0","text":""},{"location":"release-notes/#upgrades_16","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade python-multipart to support 0.0.6. PR #9212 by @musicinmybrain.</li> <li>\u2b06\ufe0f Upgrade Starlette version, support new <code>lifespan</code> with state. PR #9239 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_38","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Sentry link in docs. PR #9218 by @smeubank.</li> </ul>"},{"location":"release-notes/#translations_38","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/history-design-future.md</code>. PR #5986 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_45","title":"Internal","text":"<ul> <li>\u2795 Add <code>pydantic</code> to PyPI classifiers. PR #5914 by @yezz123.</li> <li>\u2b06 Bump black from 22.10.0 to 23.1.0. PR #5953 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR #6027 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR #6034 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5709 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0930","title":"0.93.0","text":""},{"location":"release-notes/#features_17","title":"Features","text":"<ul> <li>\u2728 Add support for <code>lifespan</code> async context managers (superseding <code>startup</code> and <code>shutdown</code> events). Initial PR #2944 by @uSpike.</li> </ul> <p>Now, instead of using independent <code>startup</code> and <code>shutdown</code> events, you can define that logic in a single function with <code>yield</code> decorated with <code>@asynccontextmanager</code> (an async context manager).</p> <p>For example:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Note: This is the recommended way going forward, instead of using <code>startup</code> and <code>shutdown</code> events.</p> <p>Read more about it in the new docs: Advanced User Guide: Lifespan Events.</p>"},{"location":"release-notes/#docs_39","title":"Docs","text":"<ul> <li>\u270f Fix formatting in <code>docs/en/docs/tutorial/metadata.md</code> for <code>ReDoc</code>. PR #6005 by @eykamp.</li> </ul>"},{"location":"release-notes/#translations_39","title":"Translations","text":"<ul> <li>\ud83c\udf10 Tamil translations - initial setup. PR #5564 by @gusty1g.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #9221 by @axel584.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/debugging.md</code>. PR #9175 by @frabc.</li> <li>\ud83c\udf10 Initiate Armenian translation setup. PR #5844 by @har8.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/manually.md</code>. PR #3693 by @rjNemo.</li> </ul>"},{"location":"release-notes/#internal_46","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update translation bot messages. PR #9206 by @khulnasoft.</li> <li>\ud83d\udc77 Update translations bot to use Discussions, and notify when a PR is done. PR #9183 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors-badges. PR #9182 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9181 by @github-actions[bot].</li> <li>\ud83d\udd0a Log GraphQL errors in ReadyAPI People, because it returns 200, with a payload with an error. PR #9171 by @khulnasoft.</li> <li>\ud83d\udc9a Fix/workaround GitHub Actions in Docker with git for ReadyAPI People. PR #9169 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor ReadyAPI Experts to use only discussions now that questions are migrated. PR #9165 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #6025 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade and re-enable installing Cligenius-CLI. PR #6008 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0920","title":"0.92.0","text":"<p>\ud83d\udea8 This is a security fix. Please upgrade as soon as possible.</p>"},{"location":"release-notes/#upgrades_17","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.25.0. PR #5996 by @khulnasoft.<ul> <li>This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.</li> <li>Only applications using forms (e.g. file uploads) could be affected.</li> <li>For most cases, upgrading won't have any breaking changes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0910","title":"0.91.0","text":""},{"location":"release-notes/#upgrades_18","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>0.24.0</code> and refactor internals for compatibility. PR #5985 by @khulnasoft.<ul> <li>This can solve nuanced errors when using middlewares. Before Starlette <code>0.24.0</code>, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks @adriangb! Starlette PR #2017). Now the middleware class instances are created once, right before the first request (the first time the app is called).</li> <li>If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.</li> </ul> </li> </ul>"},{"location":"release-notes/#0901","title":"0.90.1","text":""},{"location":"release-notes/#upgrades_19","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette range to allow 0.23.1. PR #5980 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_40","title":"Docs","text":"<ul> <li>\u270f Tweak wording to clarify <code>docs/en/docs/project-generation.md</code>. PR #5930 by @chandra-deb.</li> <li>\u270f Update Pydantic GitHub URLs. PR #5952 by @yezz123.</li> <li>\ud83d\udcdd Add opinion from Cisco. PR #5981 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_40","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/cookie-params.md</code>. PR #5890 by @bnzone.</li> </ul>"},{"location":"release-notes/#internal_47","title":"Internal","text":"<ul> <li>\u270f Update <code>zip-docs.sh</code> internal script, remove extra space. PR #5931 by @JuanPerdomo00.</li> </ul>"},{"location":"release-notes/#0900","title":"0.90.0","text":""},{"location":"release-notes/#upgrades_20","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette from 0.22.0 to 0.23.0. Initial PR #5739 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_41","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add article \"Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b\" to External Links. PR #5496 by @Leon0824.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5954 by @github-actions[bot].</li> <li>\ud83d\udcdd Micro-tweak help docs. PR #5960 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to direct to GitHub Discussions. PR #5948 by @khulnasoft.</li> <li>\ud83d\udcdd Recommend GitHub Discussions for questions. PR #5944 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_41","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #5898 by @simatheone.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/help-readyapi.md</code>. PR #5970 by @khulnasoft.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/static-files.md</code>. PR #5858 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/encoder.md</code>. PR #5525 by @felipebpl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #5870 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_48","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ubuntu version for docs workflow. PR #5971 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges. PR #5943 by @khulnasoft.</li> <li>\u2728 Compute ReadyAPI Experts including GitHub Discussions. PR #5941 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade isort and update pre-commit. PR #5940 by @khulnasoft.</li> <li>\ud83d\udd27 Add template for questions in Discussions. PR #5920 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor Budget Insight to Powens. PR #5916 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Sponsors badge data. PR #5915 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0891","title":"0.89.1","text":""},{"location":"release-notes/#fixes_19","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ignore Response classes on return annotation. PR #5855 by @Kludex. See the new docs in the PR below.</li> </ul>"},{"location":"release-notes/#docs_42","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR #5873 by @khulnasoft. New docs at Response Model - Return Type: Other Return Type Annotations.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI lambda container: serverless simplified. PR #5784 by @rafrasenberg.</li> </ul>"},{"location":"release-notes/#translations_42","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/first_steps.md</code>. PR #5691 by @Kadermiyanyedi.</li> </ul>"},{"location":"release-notes/#0890","title":"0.89.0","text":""},{"location":"release-notes/#features_18","title":"Features","text":"<ul> <li>\u2728 Add support for function return type annotations to declare the <code>response_model</code>. Initial PR #1436 by @uriyyo.</li> </ul> <p>Now you can declare the return type / <code>response_model</code> in the function return type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use the return type annotation to perform:</p> <ul> <li>Data validation</li> <li>Automatic documentation<ul> <li>It could power automatic client generators</li> </ul> </li> <li>Data filtering</li> </ul> <p>Before this version it was only supported via the <code>response_model</code> parameter.</p> <p>Read more about it in the new docs: Response Model - Return Type.</p>"},{"location":"release-notes/#docs_43","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Authorization on ReadyAPI with Casbin. PR #5712 by @Xhy-5000.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #5785 by @Kingdageek.</li> <li>\u270f Fix typo in <code>docs/en/docs/deployment/concepts.md</code>. PR #5824 by @kelbyfaessler.</li> </ul>"},{"location":"release-notes/#translations_43","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-people.md</code>. PR #5577 by @Xewus.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/benchmarks.md</code>. PR #4269 by @15027668g.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/cors.md</code>. PR #3764 by @NinaHwang.</li> </ul>"},{"location":"release-notes/#internal_49","title":"Internal","text":"<ul> <li>\u2b06 Update coverage[toml] requirement from &lt;7.0,&gt;=6.5.0 to &gt;=6.5.0,&lt;8.0. PR #5801 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.19.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.21.0 for development. PR #5795 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.24.3. PR #5842 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5825 by @github-actions[bot].</li> <li>\u2b06 Bump types-ujson from 5.5.0 to 5.6.0.0. PR #5735 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.2 to 1.6.4. PR #5750 by @dependabot[bot].</li> <li>\ud83d\udc77 Add GitHub Action gate/check. PR #5492 by @webknjaz.</li> <li>\ud83d\udd27 Update sponsors, add Svix. PR #5848 by @khulnasoft.</li> <li>\ud83d\udd27 Remove Doist sponsor. PR #5847 by @khulnasoft.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;=1.4.41,&gt;=1.3.18 to &gt;=1.3.18,&lt;1.4.43. PR #5540 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #5757 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #5793 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2. PR #5714 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5722 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, disable course bundle. PR #5713 by @khulnasoft.</li> <li>\u2b06 Update cligenius[all] requirement from &lt;0.7.0,&gt;=0.6.1 to &gt;=0.6.1,&lt;0.8.0. PR #5639 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0880","title":"0.88.0","text":""},{"location":"release-notes/#upgrades_21","title":"Upgrades","text":"<ul> <li>\u2b06 Bump Starlette to version <code>0.22.0</code> to fix bad encoding for query parameters in new <code>TestClient</code>. PR #5659 by @azogue.</li> </ul>"},{"location":"release-notes/#docs_44","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in docs for <code>docs/en/docs/advanced/middleware.md</code>. PR #5376 by @rifatrakib.</li> </ul>"},{"location":"release-notes/#translations_44","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/docker.md</code>. PR #5663 by @ayr-ton.</li> </ul>"},{"location":"release-notes/#internal_50","title":"Internal","text":"<ul> <li>\ud83d\udc77 Tweak build-docs to improve CI performance. PR #5699 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5566 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Ruff. PR #5698 by @khulnasoft.</li> <li>\ud83d\udc77 Remove pip cache for Smokeshow as it depends on a requirements.txt. PR #5700 by @khulnasoft.</li> <li>\ud83d\udc9a Fix pip cache for Smokeshow. PR #5697 by @khulnasoft.</li> <li>\ud83d\udc77 Fix and tweak CI cache handling. PR #5696 by @khulnasoft.</li> <li>\ud83d\udc77 Update <code>setup-python</code> action in tests to use new caching feature. PR #5680 by @madkinsz.</li> <li>\u2b06 Bump black from 22.8.0 to 22.10.0. PR #5569 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0870","title":"0.87.0","text":"<p>Highlights of this release:</p> <ul> <li>Upgraded Starlette<ul> <li>Now the <code>TestClient</code> is based on HTTPX instead of Requests. \ud83d\ude80</li> <li>There are some possible breaking changes in the <code>TestClient</code> usage, but @Kludex built bump-testclient to help you automatize migrating your tests. Make sure you are using Git and that you can undo any unnecessary changes (false positive changes, etc) before using <code>bump-testclient</code>.</li> </ul> </li> <li>New WebSocketException (and docs), re-exported from Starlette.</li> <li>Upgraded and relaxed dependencies for package extras <code>all</code> (including new Uvicorn version), when you install <code>\"readyapi[all]\"</code>.</li> <li>New docs about how to Help Maintain ReadyAPI.</li> </ul>"},{"location":"release-notes/#features_19","title":"Features","text":"<ul> <li>\u2b06\ufe0f Upgrade and relax dependencies for extras \"all\". PR #5634 by @khulnasoft.</li> <li>\u2728 Re-export Starlette's <code>WebSocketException</code> and add it to docs. PR #5629 by @khulnasoft.</li> <li>\ud83d\udcdd Update references to Requests for tests to HTTPX, and add HTTPX to extras. PR #5628 by @khulnasoft.</li> <li>\u2b06 Upgrade Starlette to <code>0.21.0</code>, including the new <code>TestClient</code> based on HTTPX. PR #5471 by @pawelrubin.</li> </ul>"},{"location":"release-notes/#docs_45","title":"Docs","text":"<ul> <li>\u270f\ufe0f Tweak Help ReadyAPI from PR review after merging. PR #5633 by @khulnasoft.</li> <li>\u270f\ufe0f  Clarify docs on CORS. PR #5627 by @paxcodes.</li> <li>\ud83d\udcdd Update Help ReadyAPI: Help Maintain ReadyAPI. PR #5632 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_45","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix highlight lines for Japanese translation for <code>docs/tutorial/query-params.md</code>. PR #2969 by @ftnext.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/additional-status-code.md</code>. PR #5477 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms-and-files.md</code>. PR #5579 by @batlopes.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/websockets.md</code>. PR #4983 by @xryuseix.</li> </ul>"},{"location":"release-notes/#internal_51","title":"Internal","text":"<ul> <li>\u2728 Use Ruff for linting. PR #5630 by @khulnasoft.</li> <li>\ud83d\udee0 Add Arabic issue number to Notify Translations GitHub Action. PR #5610 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #5609 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.1. PR #5603 by @dependabot[bot].</li> <li>\ud83d\udcdd Update coverage badge to use Samuel Colvin's Smokeshow. PR #5585 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0860","title":"0.86.0","text":""},{"location":"release-notes/#features_20","title":"Features","text":"<ul> <li>\u2b06 Add Python 3.11 to the officially supported versions. PR #5587 by @khulnasoft.</li> <li>\u2705 Enable tests for Python 3.11. PR #4881 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_20","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Close FormData (uploaded files) after the request is done. PR #5465 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_46","title":"Docs","text":"<ul> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #5584 by @vivekashok1221.</li> </ul>"},{"location":"release-notes/#translations_46","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update wording in Chinese translation for <code>docs/zh/docs/python-types.md</code>. PR #5416 by @supercaizehua.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/index.md</code>. PR #5336 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3846 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_52","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update ReadyAPI People to exclude bots: pre-commit-ci, dependabot. PR #5586 by @khulnasoft.</li> <li>\ud83c\udfa8 Format OpenAPI JSON in <code>test_starlette_exception.py</code>. PR #5379 by @iudeen.</li> <li>\ud83d\udc77 Switch from Codecov to Smokeshow plus pytest-cov to pure coverage for internal tests. PR #5583 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5571 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0852","title":"0.85.2","text":""},{"location":"release-notes/#docs_47","title":"Docs","text":"<ul> <li>\u270f Fix grammar and add helpful links to dependencies in <code>docs/en/docs/async.md</code>. PR #5432 by @pamelafox.</li> <li>\u270f Fix broken link in <code>alternatives.md</code>. PR #5455 by @su-shubham.</li> <li>\u270f Fix typo in docs about contributing, for compatibility with <code>pip</code> in Zsh. PR #5523 by @zhangbo2012.</li> <li>\ud83d\udcdd Fix typo in docs with examples for Python 3.10 instead of 3.9. PR #5545 by @feliciss.</li> </ul>"},{"location":"release-notes/#translations_47","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #4934 by @batlopes.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #4971 by @Zssaer.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/deta.md</code>. PR #3692 by @rjNemo.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #5255 by @hjlarry.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #4999 by @Zssaer.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/wsgi.md</code>. PR #4505 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-multiple-params.md</code>. PR #4111 by @lbmendes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-params-numeric-validations.md</code>. PR #4099 by @lbmendes.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/versions.md</code>. PR #3690 by @rjNemo.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/help-readyapi.md</code>. PR #2233 by @JulianMaurin.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/tutorial/security/first-steps.md</code>. PR #5530 by @yuki1sntSnow.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-status-code.md</code>. PR #4922 by @batlopes.</li> <li>\ud83d\udd27 Add config for Tamil translations. PR #5563 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_53","title":"Internal","text":"<ul> <li>\u2b06 Bump internal dependency mypy from 0.971 to 0.982. PR #5541 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.3 to 1.2.4. PR #5507 by @dependabot[bot].</li> <li>\u2b06 Bump internal dependency types-ujson from 5.4.0 to 5.5.0. PR #5537 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.23.0 to 2.24.0. PR #5508 by @dependabot[bot].</li> <li>\u2b06 Update internal dependency pytest-cov requirement from &lt;4.0.0,&gt;=2.12.0 to &gt;=2.12.0,&lt;5.0.0. PR #5539 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5536 by @pre-commit-ci[bot].</li> <li>\ud83d\udc1b Fix internal Trio test warnings. PR #5547 by @samuelcolvin.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5408 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Cligenius to include Rich in scripts for docs. PR #5502 by @khulnasoft.</li> <li>\ud83d\udc1b Fix calling <code>mkdocs</code> for languages as a subprocess to fix/enable MkDocs Material search plugin. PR #5501 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0851","title":"0.85.1","text":""},{"location":"release-notes/#fixes_21","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for strings in OpenAPI status codes: <code>default</code>, <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, <code>5XX</code>. PR #5187 by @JarroVGIT.</li> </ul>"},{"location":"release-notes/#docs_48","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add WayScript x ReadyAPI Tutorial to External Links section. PR #5407 by @moneeka.</li> </ul>"},{"location":"release-notes/#internal_54","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5447 by @github-actions[bot].</li> <li>\ud83d\udd27 Disable Material for MkDocs search plugin. PR #5495 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore Trio warning in tests for CI. PR #5483 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0850","title":"0.85.0","text":""},{"location":"release-notes/#features_21","title":"Features","text":"<ul> <li>\u2b06 Upgrade version required of Starlette from <code>0.19.1</code> to <code>0.20.4</code>. Initial PR #4820 by @Kludex.<ul> <li>This includes several bug fixes in Starlette.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Uvicorn max version in public extras: all. From <code>&gt;=0.12.0,&lt;0.18.0</code> to <code>&gt;=0.12.0,&lt;0.19.0</code>. PR #5401 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_55","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade dependencies for doc and dev internal extras: Cligenius, Uvicorn. PR #5400 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade test dependencies: Black, HTTPX, databases, types-ujson. PR #5399 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade mypy and tweak internal type annotations. PR #5398 by @khulnasoft.</li> <li>\ud83d\udd27 Update test dependencies, upgrade Pytest, move dependencies from dev to test. PR #5396 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0840","title":"0.84.0","text":""},{"location":"release-notes/#breaking-changes_3","title":"Breaking Changes","text":"<p>This version of ReadyAPI drops support for Python 3.6. \ud83d\udd25 Please upgrade to a supported version of Python (3.7 or above), Python 3.6 reached the end-of-life a long time ago. \ud83d\ude05\u2620</p> <ul> <li>\ud83d\udd27 Update package metadata, drop support for Python 3.6, move build internals from Flit to Hatch. PR #5240 by @ofek.</li> </ul>"},{"location":"release-notes/#0830","title":"0.83.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_22","title":"Features","text":"<ul> <li>\u2728 Add support in <code>jsonable_encoder</code> for include and exclude with dataclasses. PR #4923 by @DCsunset.</li> </ul>"},{"location":"release-notes/#fixes_22","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>RuntimeError</code> raised when <code>HTTPException</code> has a status code with no content. PR #5365 by @iudeen.</li> <li>\ud83d\udc1b Fix empty reponse body when default <code>status_code</code> is empty but the a <code>Response</code> parameter with <code>response.status_code</code> is set. PR #5360 by @tmeckel.</li> </ul>"},{"location":"release-notes/#docs_49","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>SECURITY.md</code>. PR #5377 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_56","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5352 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0820","title":"0.82.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_23","title":"Features","text":"<ul> <li>\u2728 Export <code>WebSocketState</code> in <code>readyapi.websockets</code>. PR #4376 by @matiuszka.</li> <li>\u2728 Support Python internal description on Pydantic model's docstring. PR #3032 by @Kludex.</li> <li>\u2728 Update <code>ORJSONResponse</code> to support non <code>str</code> keys and serializing Numpy arrays. PR #3892 by @baby5.</li> </ul>"},{"location":"release-notes/#fixes_23","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Allow exit code for dependencies with <code>yield</code> to always execute, by removing capacity limiter for them, to e.g. allow closing DB connections without deadlocks. PR #5122 by @adriangb.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action: set HTTPX timeout for GraphQL query request. PR #5222 by @iudeen.</li> <li>\ud83d\udc1b Make sure a parameter defined as required is kept required in OpenAPI even if defined as optional in another dependency. PR #4319 by @cd17822.</li> <li>\ud83d\udc1b Fix support for path parameters in WebSockets. PR #3879 by @davidbrochart.</li> </ul>"},{"location":"release-notes/#docs_50","title":"Docs","text":"<ul> <li>\u270f Update Hypercorn link, now pointing to GitHub. PR #5346 by @baconfield.</li> <li>\u270f Tweak wording in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #3698 by @pfackeldey.</li> <li>\ud83d\udcdd Add note about Python 3.10 <code>X | Y</code> operator in explanation about Response Models. PR #5307 by @MendyLanda.</li> <li>\ud83d\udcdd Add link to New Relic article: \"How to monitor ReadyAPI application performance using Python agent\". PR #5260 by @sjyothi54.</li> <li>\ud83d\udcdd Update docs for <code>ORJSONResponse</code> with details about improving performance. PR #2615 by @falkben.</li> <li>\ud83d\udcdd Add docs for creating a custom Response class. PR #5331 by @khulnasoft.</li> <li>\ud83d\udcdd Add tip about using alias for form data fields. PR #5329 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_48","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/features.md</code>. PR #5315 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/request-files.md</code>. PR #4529 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/encoder.md</code>. PR #4969 by @Zssaer.</li> <li>\ud83c\udf10 Fix MkDocs file line for Portuguese translation of <code>background-task.md</code>. PR #5242 by @ComicShrimp.</li> </ul>"},{"location":"release-notes/#internal_57","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5347 by @github-actions[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.22.0 to 2.23.0. PR #5321 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5318 by @pre-commit-ci[bot].</li> <li>\u270f Fix a small code highlight line error. PR #5256 by @hjlarry.</li> <li>\u267b Internal small refactor, move <code>operation_id</code> parameter position in delete method for consistency with the code. PR #4474 by @hiel.</li> <li>\ud83d\udd27 Update sponsors, disable ImgWhale. PR #5338 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0810","title":"0.81.0","text":""},{"location":"release-notes/#features_24","title":"Features","text":"<ul> <li>\u2728 Add ReDoc <code>&lt;noscript&gt;</code> warning when JS is disabled. PR #5074 by @evroon.</li> <li>\u2728 Add support for <code>FrozenSet</code> in parameters (e.g. query). PR #2938 by @juntatalor.</li> <li>\u2728 Allow custom middlewares to raise <code>HTTPException</code>s and propagate them. PR #2036 by @ghandic.</li> <li>\u2728 Preserve <code>json.JSONDecodeError</code> information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR #4057 by @UKnowWhoIm.</li> </ul>"},{"location":"release-notes/#fixes_24","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> for dataclasses with pydantic-compatible fields. PR #3607 by @himbeles.</li> <li>\ud83d\udc1b Fix support for extending <code>openapi_extras</code> with parameter lists. PR #4267 by @orilevari.</li> </ul>"},{"location":"release-notes/#docs_51","title":"Docs","text":"<ul> <li>\u270f Fix a simple typo in <code>docs/en/docs/python-types.md</code>. PR #5193 by @GlitchingCore.</li> <li>\u270f Fix typos in <code>tests/test_schema_extra_examples.py</code>. PR #5126 by @supraaxdd.</li> <li>\u270f Fix typos in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #5142 by @invisibleroads.</li> <li>\ud83d\udcdd Add step about upgrading pip in the venv to avoid errors when installing dependencies <code>docs/en/docs/contributing.md</code>. PR #5181 by @edisnake.</li> <li>\u270f Reword and clarify text in tutorial <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #5169 by @papb.</li> <li>\u270f Fix minor typo in <code>docs/en/docs/features.md</code>. PR #5206 by @OtherBarry.</li> <li>\u270f Fix minor typos in <code>docs/en/docs/async.md</code>. PR #5125 by @Ksenofanex.</li> <li>\ud83d\udcdd Add external link to docs: \"Readyapi, Docker(Docker compose) and Postgres\". PR #5033 by @krishnardt.</li> <li>\ud83d\udcdd Simplify example for docs for Additional Responses, remove unnecessary <code>else</code>. PR #4693 by @adriangb.</li> <li>\ud83d\udcdd Update docs, compare enums with identity instead of equality. PR #4905 by @MicaelJarniac.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #4886 by @MicaelJarniac.</li> <li>\ud83c\udfa8 Fix syntax highlighting in docs for OpenAPI Callbacks. PR #4368 by @xncbf.</li> <li>\u270f Reword confusing sentence in docs file <code>typo-fix-path-params-numeric-validations.md</code>. PR #3219 by @ccrenfroe.</li> <li>\ud83d\udcdd Update docs for handling HTTP Basic Auth with <code>secrets.compare_digest()</code> to account for non-ASCII characters. PR #3536 by @lewoudar.</li> <li>\ud83d\udcdd Update docs for testing, fix examples with relative imports. PR #5302 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_49","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/index.md</code>. PR #5289 by @impocode.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/versions.md</code>. PR #4985 by @emp7yhead.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-params.md</code>. PR #4921 by @batlopes.</li> <li>\ud83c\udf10 Update <code>ko/mkdocs.yml</code> for a missing link. PR #5020 by @dalinaum.</li> </ul>"},{"location":"release-notes/#internal_58","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR #5258 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5196 by @pre-commit-ci[bot].</li> <li>\ud83d\udd25 Delete duplicated tests in <code>tests/test_tutorial/test_sql_databases/test_sql_databases.py</code>. PR #5040 by @raccoonyy.</li> <li>\u267b Simplify internal RegEx in <code>readyapi/utils.py</code>. PR #5057 by @pylounge.</li> <li>\ud83d\udd27 Fix Type hint of <code>auto_error</code> which does not need to be <code>Optional[bool]</code>. PR #4933 by @DavidKimDY.</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #4605 by @michaeloliverx.</li> <li>\u267b Change a <code>dict()</code> for <code>{}</code> in <code>readyapi/utils.py</code>. PR #3138 by @ShahriyarR.</li> <li>\u267b Move internal variable for errors in <code>jsonable_encoder</code> to put related code closer. PR #4560 by @GuilleQP.</li> <li>\u267b Simplify conditional assignment in <code>readyapi/dependencies/utils.py</code>. PR #4597 by @cikay.</li> <li>\u2b06 Upgrade version pin accepted for Flake8, for internal code, to <code>flake8 &gt;=3.8.3,&lt;6.0.0</code>. PR #4097 by @jamescurtin.</li> <li>\ud83c\udf71 Update Jina banner, fix typo. PR #5301 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0800","title":"0.80.0","text":""},{"location":"release-notes/#breaking-changes-fixes","title":"Breaking Changes - Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>response_model</code> not invalidating <code>None</code>. PR #2725 by @hukkin.</li> </ul> <p>If you are using <code>response_model</code> with some type that doesn't include <code>None</code> but the function is returning <code>None</code>, it will now raise an internal server error, because you are returning invalid data that violates the contract in <code>response_model</code>. Before this release it would allow breaking that contract returning <code>None</code>.</p> <p>For example, if you have an app like this:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n</code></pre> <p>...calling the path <code>/items/invalidnone</code> will raise an error, because <code>None</code> is not a valid type for the <code>response_model</code> declared with <code>Item</code>.</p> <p>You could also be implicitly returning <code>None</code> without realizing, for example:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    if flag:\n        return {\"name\": \"foo\"}\n    # if flag is False, at this point the function will implicitly return None\n</code></pre> <p>If you have path operations using <code>response_model</code> that need to be allowed to return <code>None</code>, make it explicit in <code>response_model</code> using <code>Union[Something, None]</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Union[Item, None])\ndef get_invalid_none():\n    return None\n</code></pre> <p>This way the data will be correctly validated, you won't have an internal server error, and the documentation will also reflect that this path operation could return <code>None</code> (or <code>null</code> in JSON).</p>"},{"location":"release-notes/#fixes_25","title":"Fixes","text":"<ul> <li>\u2b06 Upgrade Swagger UI copy of <code>oauth2-redirect.html</code> to include fixes for flavors of authorization code flows in Swagger UI. PR #3439 initial PR by @koonpeng.</li> <li>\u267b Strip empty whitespace from description extracted from docstrings. PR #2821 by @and-semakin.</li> <li>\ud83d\udc1b Fix cached dependencies when using a dependency in <code>Security()</code> and other places (e.g. <code>Depends()</code>) with different OAuth2 scopes. PR #2945 by @laggardkernel.</li> <li>\ud83c\udfa8 Update type annotations for <code>response_model</code>, allow things like <code>Union[str, None]</code>. PR #5294 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_50","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix typos in German translation for <code>docs/de/docs/features.md</code>. PR #4533 by @0xflotus.</li> <li>\ud83c\udf10 Add missing navigator for <code>encoder.md</code> in Korean translation. PR #5238 by @joonas-yoon.</li> <li>(Empty PR merge by accident) #4913.</li> </ul>"},{"location":"release-notes/#0791","title":"0.79.1","text":""},{"location":"release-notes/#fixes_26","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> using <code>include</code> and <code>exclude</code> parameters for non-Pydantic objects. PR #2606 by @xaviml.</li> <li>\ud83d\udc1b Fix edge case with repeated aliases names not shown in OpenAPI. PR #2351 by @klaa97.</li> <li>\ud83d\udcdd Add misc dependency installs to tutorial docs. PR #2126 by @TeoZosa.</li> </ul>"},{"location":"release-notes/#docs_52","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note giving credit for illustrations to Ketrina Thompson. PR #5284 by @khulnasoft.</li> <li>\u270f Fix typo in <code>python-types.md</code>. PR #5116 by @Kludex.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #5007 by @atiabbz.</li> <li>\ud83d\udcdd Remove unneeded Django/Flask references from async topic intro. PR #5280 by @carltongibson.</li> <li>\u2728 Add illustrations for Concurrent burgers and Parallel burgers. PR #5277 by @khulnasoft. Updated docs at: Concurrency and Burgers.</li> </ul>"},{"location":"release-notes/#translations_51","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-params.md</code>. PR #4775 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/first-steps.md</code>. PR #4954 by @FLAIR7.</li> <li>\ud83c\udf10 Add translation for <code>docs/zh/docs/advanced/response-cookies.md</code>. PR #4638 by @zhangbo2012.</li> <li>\ud83c\udf10  Add French translation for <code>docs/fr/docs/deployment/index.md</code>. PR #3689 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>tutorial/handling-errors.md</code>. PR #4769 by @frnsimoes.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/history-design-future.md</code>. PR #3451 by @rjNemo.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/background-tasks.md</code>. PR #4854 by @AdmiralDesu.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/security/first-steps.md</code>. PR #3841 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/nosql-databases.md</code>. PR #4205 by @sUeharaE4.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/index.md</code>. PR #4705 by @bas-baskara.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/index.md</code> and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi.</li> </ul>"},{"location":"release-notes/#internal_59","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update Jina sponsorship. PR #5283 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsorship. PR #5272 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0790","title":"0.79.0","text":""},{"location":"release-notes/#fixes-breaking-changes","title":"Fixes - Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @khulnasoft.<ul> <li>Setting <code>status_code</code> to <code>204</code>, <code>304</code>, or any code below <code>200</code> (1xx) will remove the body from the response.</li> <li>This fixes an error in Uvicorn that otherwise would be thrown: <code>RuntimeError: Response content longer than Content-Length</code>.</li> <li>This removes <code>readyapi.openapi.constants.STATUS_CODES_WITH_NO_BODY</code>, it is replaced by a function in utils.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_52","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh.</li> <li>\ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @khulnasoft.</li> <li>\ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/index.md</code>. PR #5043 by @wakabame.</li> <li>\ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #5024 by @Valaraucoo.</li> </ul>"},{"location":"release-notes/#internal_60","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot commit message. PR #5156 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors badge configs. PR #5155 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5154 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsor badges. PR #5151 by @khulnasoft.</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot].</li> <li>\ud83d\udc77 Add Dependabot. PR #5128 by @khulnasoft.</li> <li>\u267b\ufe0f Move from <code>Optional[X]</code> to <code>Union[X, None]</code> for internal utils. PR #5124 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0780","title":"0.78.0","text":""},{"location":"release-notes/#features_25","title":"Features","text":"<ul> <li> <p>\u2728 Add support for omitting <code>...</code> as default value when declaring required parameters with:</p> </li> <li> <p><code>Path()</code></p> </li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>New docs at Tutorial - Query Parameters and String Validations - Make it required. PR #4906 by @khulnasoft.</p> <p>Up to now, declaring a required parameter while adding additional validation or metadata needed using <code>...</code> (Ellipsis).</p> <p>For example:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(default=..., gt=0),\n    query: str = Query(default=..., max_length=10),\n    session: str = Cookie(default=..., min_length=3),\n    x_trace: str = Header(default=..., title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>...all these parameters are required because the default value is <code>...</code> (Ellipsis).</p> <p>But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required.</p> <p>\u2728 For example, this is now supported:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: str = Query(max_length=10),\n    session: str = Cookie(min_length=3),\n    x_trace: str = Header(title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>To declare parameters as optional (not required), you can set a default value as always, for example using <code>None</code>:</p> <pre><code>from typing import Union\nfrom readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: Union[str, None] = Query(default=None, max_length=10),\n    session: Union[str, None] = Cookie(default=None, min_length=3),\n    x_trace: Union[str, None] = Header(default=None, title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"release-notes/#docs_53","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs recommending <code>Union</code> over <code>Optional</code> and migrate source examples. New docs at Python Types Intro - Using <code>Union</code> or <code>Optional</code>. PR #4908 by @khulnasoft.</li> <li>\ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz.</li> <li>\ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord.</li> <li>\u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust.</li> <li>\u270f Fix links to Pydantic docs. PR #4670 by @kinuax.</li> <li>\ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin.</li> <li>\ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With ReadyAPI And React. PR #4778 by @jbrocher.</li> <li>\ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs.</li> </ul>"},{"location":"release-notes/#translations_53","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix code examples in Japanese translation for <code>docs/ja/docs/tutorial/testing.md</code>. PR #4623 by @hirotoKirimaru.</li> </ul>"},{"location":"release-notes/#internal_61","title":"Internal","text":"<ul> <li>\u267b Refactor dict value extraction to minimize key lookups <code>readyapi/utils.py</code>. PR #3139 by @ShahriyarR.</li> <li>\u2705 Add tests for required nonable parameters and body fields. PR #4907 by @khulnasoft.</li> <li>\ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @khulnasoft.</li> <li>\ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp.</li> <li>\ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @khulnasoft.</li> <li>\ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @khulnasoft.</li> <li>\ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus.</li> </ul>"},{"location":"release-notes/#0771","title":"0.77.1","text":""},{"location":"release-notes/#upgrades_22","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_54","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem ReadyAPI Modul. PR #4624 by @fschuermeyer.</li> <li>\ud83d\udcdd Add external link: PyCharm Guide to ReadyAPI. PR #4512 by @mukulmantosh.</li> <li>\ud83d\udcdd Add external link to article: Building an API with ReadyAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev.</li> <li>\u270f Fix small typo in <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #4515 by @KikoIlievski.</li> </ul>"},{"location":"release-notes/#translations_54","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/tutorial/index.md</code>. PR #4516 by @MKaczkow.</li> <li>\u270f Fix typo in deployment. PR #4629 by @raisulislam541.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/help-readyapi.md</code>. PR #4583 by @mateusjs.</li> </ul>"},{"location":"release-notes/#internal_62","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0770","title":"0.77.0","text":""},{"location":"release-notes/#upgrades_23","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex.<ul> <li>When creating an explicit <code>JSONResponse</code> the <code>content</code> argument is now required.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_55","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link to article: Seamless ReadyAPI Configuration with ConfZ. PR #4414 by @silvanmelchior.</li> <li>\ud83d\udcdd Add external link to article: 5 Advanced Features of ReadyAPI You Should Try. PR #4436 by @kaustubhgupta.</li> <li>\u270f Reword to improve legibility of docs about <code>TestClient</code>. PR #4389 by @rgilton.</li> <li>\ud83d\udcdd Add external link to blog post about Kafka, ReadyAPI, and Ably. PR #4044 by @Ugbot.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #4875 by @wpyoga.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #4726 by @Prezu.</li> </ul>"},{"location":"release-notes/#translations_55","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update source example highlights for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #4237 by @caimaoy.</li> <li>\ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme.</li> <li>\u270f \ud83c\udf10 Fix typo in Portuguese translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #4722 by @CleoMenezesJr.</li> <li>\ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #4112 by @lbmendes.</li> <li>\ud83c\udf10 Fix French translation for <code>docs/tutorial/body.md</code>. PR #4332 by @Smlep.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/conditional-openapi.md</code>. PR #2631 by @sh0nk.</li> <li>\ud83c\udf10 Fix Japanese translation of <code>docs/ja/docs/tutorial/body.md</code>. PR #3062 by @a-takahashi223.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #2170 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/deta.md</code>. PR #4442 by @lsglucas.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/async.md</code>. PR #4036 by @Winand.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/body.md</code>. PR #3960 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Portuguese translation of <code>tutorial/extra-data-types.md</code>. PR #4077 by @luccasmmg.</li> <li>\ud83c\udf10 Update German translation for <code>docs/features.md</code>. PR #3905 by @jomue.</li> </ul>"},{"location":"release-notes/#0760","title":"0.76.0","text":""},{"location":"release-notes/#upgrades_24","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_63","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4847 by @github-actions[bot].</li> <li>\ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0752","title":"0.75.2","text":"<p>This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.</p>"},{"location":"release-notes/#fixes_27","title":"Fixes","text":"<ul> <li>\u2705 Fix new/recent tests with new fixed <code>ValidationError</code> JSON Schema. PR #4806 by @khulnasoft.</li> <li>\ud83d\udc1b Fix JSON Schema for <code>ValidationError</code> at field <code>loc</code>. PR #3810 by @dconathan.</li> <li>\ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex.</li> </ul>"},{"location":"release-notes/#upgrades_25","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @khulnasoft.</li> <li>\u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI (<code>/docs</code>) publicly to non-expert users. PR #4347 by @RAlanWright.</li> </ul>"},{"location":"release-notes/#internal_64","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0751","title":"0.75.1","text":""},{"location":"release-notes/#translations_56","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start Dutch translations. PR #4703 by @khulnasoft.</li> <li>\ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee.</li> <li>\u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza.</li> </ul>"},{"location":"release-notes/#internal_65","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4752 by @github-actions[bot].</li> <li>\u2796 Temporarily remove cligenius-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @khulnasoft.</li> <li>\ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4699 by @github-actions[bot].</li> <li>\ud83d\udc1b Fix ReadyAPI People generation to include missing file in commit. PR #4695 by @khulnasoft.</li> <li>\ud83d\udd27 Update Classiq sponsor links. PR #4688 by @khulnasoft.</li> <li>\ud83d\udd27 Add Classiq sponsor. PR #4671 by @khulnasoft.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @khulnasoft based on original PR #4626 by @hanxiao.</li> </ul>"},{"location":"release-notes/#0750","title":"0.75.0","text":""},{"location":"release-notes/#features_26","title":"Features","text":"<ul> <li>\u2728 Add support for custom <code>generate_unique_id_function</code> and docs for generating clients. New docs: Advanced - Generate Clients. PR #4650 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0741","title":"0.74.1","text":""},{"location":"release-notes/#features_27","title":"Features","text":"<ul> <li>\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0740","title":"0.74.0","text":""},{"location":"release-notes/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>\u2728 Update internal <code>AsyncExitStack</code> to fix context for dependencies with <code>yield</code>. PR #4575 by @khulnasoft.</li> </ul> <p>Dependencies with <code>yield</code> can now catch <code>HTTPException</code> and custom exceptions. For example:</p> <pre><code>async def get_database():\n    with Session() as session:\n        try:\n            yield session\n        except HTTPException:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n</code></pre> <p>After the dependency with <code>yield</code> handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal <code>ServerErrorMiddleware</code>.</p> <p>If you depended on exceptions not being received by dependencies with <code>yield</code>, and receiving an exception breaks the code after <code>yield</code>, you can use a block with <code>try</code> and <code>finally</code>:</p> <pre><code>async def do_something():\n    try:\n        yield something\n    finally:\n        some_cleanup()\n</code></pre> <p>...that way the <code>finally</code> block is run regardless of any exception that might happen.</p>"},{"location":"release-notes/#features_28","title":"Features","text":"<ul> <li>The same PR #4575 from above also fixes the <code>contextvars</code> context for the code before and after <code>yield</code>. This was the main objective of that PR.</li> </ul> <p>This means that now, if you set a value in a context variable before <code>yield</code>, the value would still be available after <code>yield</code> (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards.</p> <p>For example, this works correctly now:</p> <pre><code>from contextvars import ContextVar\nfrom typing import Any, Dict, Optional\n\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n</code></pre> <p>...before this change it would raise an error when resetting the context variable, because the <code>contextvars</code> context was different, because of the way it was implemented.</p> <p>Note: You probably don't need <code>contextvars</code>, and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's <code>g</code> semi-global variable.</p> <p>Technical Details: If you want to know more of the technical details you can check out the PR description #4575.</p>"},{"location":"release-notes/#internal_66","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @khulnasoft.</li> <li>\ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4502 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0730","title":"0.73.0","text":""},{"location":"release-notes/#features_29","title":"Features","text":"<ul> <li>\u2728 Add support for declaring <code>UploadFile</code> parameters without explicit <code>File()</code>. PR #4469 by @khulnasoft. New docs: Request Files - File Parameters with UploadFile.</li> <li>\u2728 Add support for tags with Enums. PR #4468 by @khulnasoft. New docs: Path Operation Configuration - Tags with Enums.</li> <li>\u2728 Allow hiding from OpenAPI (and Swagger UI) <code>Query</code>, <code>Cookie</code>, <code>Header</code>, and <code>Path</code> parameters. PR #3144 by @astraldawn. New docs: Query Parameters and String Validations - Exclude from OpenAPI.</li> </ul>"},{"location":"release-notes/#docs_56","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_28","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux.</li> <li>\ud83d\udc1b Prefer custom encoder over defaults if specified in <code>jsonable_encoder</code>. PR #2061 by @viveksunder.<ul> <li>\ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @khulnasoft.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_67","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Dropbase. PR #4465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0720","title":"0.72.0","text":""},{"location":"release-notes/#features_30","title":"Features","text":"<ul> <li>\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold. Here are the new docs: Configuring Swagger UI.</li> </ul>"},{"location":"release-notes/#docs_57","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_57","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/help-readyapi.md</code>. PR #3847 by @jaystone776.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #4195 by @kty4119.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/index.md</code>. PR #4245 by @MicroPanda123.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs\\tutorial\\path-operation-configuration.md</code>. PR #3312 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_68","title":"Internal","text":"<ul> <li>\ud83d\udd27 Enable MkDocs Material Insiders' <code>content.tabs.link</code>. PR #4399 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0710","title":"0.71.0","text":""},{"location":"release-notes/#features_31","title":"Features","text":"<ul> <li>\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @khulnasoft.<ul> <li>You can start with Python Types Intro, it explains what changes between different Python versions, in Python 3.9 and in Python 3.10.</li> <li>All the ReadyAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00.</li> </ul>"},{"location":"release-notes/#internal_69","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4354 by @github-actions[bot].</li> <li>\ud83d\udd27 Add ReadyAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @khulnasoft.</li> <li>\u2b06 Upgrade MkDocs Material and configs. PR #4385 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0701","title":"0.70.1","text":"<p>There's nothing interesting in this particular ReadyAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29</p>"},{"location":"release-notes/#fixes_29","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood.</li> </ul>"},{"location":"release-notes/#translations_58","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-forms-and-files.md</code>. PR #3744 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-files.md</code>. PR #3743 by @NinaHwang.</li> <li>\ud83c\udf10 Add portuguese translation for <code>docs/tutorial/query-params-str-validations.md</code>. PR #3965 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/response-status-code.md</code>. PR #3742 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/versions.md</code>. PR #4121 by @DevDae.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #4193 by @kimjaeyoonn.</li> <li>\ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @khulnasoft.</li> <li>\ud83d\udcdd Update <code>docs/tutorial/dependencies/classes-as-dependencies</code>: Add type of query parameters in a description of <code>Classes as dependencies</code>. PR #4015 by @0417taehyun.</li> <li>\ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/path-params.md</code>. PR #3548 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/query-params.md</code>. PR #3556 by @Smlep.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/python-types.md</code>. PR #3926 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_70","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4274 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0700","title":"0.70.0","text":"<p>This release just upgrades Starlette to the latest version, <code>0.16.0</code>, which includes several bug fixes and some small breaking changes.</p> <p>These last three consecutive releases are independent so that you can migrate gradually:</p> <ul> <li>First to ReadyAPI <code>0.68.2</code>, with no breaking changes, but upgrading all the sub-dependencies.</li> <li>Next to ReadyAPI <code>0.69.0</code>, which upgrades Starlette to <code>0.15.0</code>, with AnyIO support, and a higher chance of having breaking changes in your code.</li> <li>Finally to ReadyAPI <code>0.70.0</code>, just upgrading Starlette to the latest version <code>0.16.0</code> with additional bug fixes.</li> </ul> <p>This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728</p>"},{"location":"release-notes/#breaking-changes-upgrade","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @khulnasoft.</li> </ul> <p>Also upgrades the ranges of optional dependencies:</p> <ul> <li><code>\"jinja2 &gt;=2.11.2,&lt;4.0.0\"</code></li> <li><code>\"itsdangerous &gt;=1.1.0,&lt;3.0.0\"</code></li> </ul>"},{"location":"release-notes/#0690","title":"0.69.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_1","title":"Breaking Changes - Upgrade","text":"<p>This release adds support for Trio. \u2728</p> <p>It upgrades the version of Starlette to <code>0.15.0</code>, now based on AnyIO, and the internal async components in ReadyAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio.</p> <p>You can read the docs about running ReadyAPI with Trio using Hypercorn.</p> <p>This release also removes <code>graphene</code> as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry. You can read the new ReadyAPI with GraphQL docs.</p>"},{"location":"release-notes/#features_32","title":"Features","text":"<ul> <li>\u2728 Add support for Trio via AnyIO, upgrading Starlette to <code>0.15.0</code>. PR #3372 by @graingert.</li> <li>\u2796 Remove <code>graphene</code> as an optional dependency. PR #4007 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_58","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @khulnasoft.</li> <li>\u270f Fix typos in Deployment Guide. PR #3975 by @ghandic.</li> <li>\ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7.</li> <li>\ud83d\udcdd Add external link to article: Deploying ML Models as API Using ReadyAPI and Heroku. PR #3904 by @kaustubhgupta.</li> <li>\u270f Fix typo in file paths in <code>docs/en/docs/contributing.md</code>. PR #3752 by @NinaHwang.</li> <li>\u270f Fix a typo in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code> and <code>docs/en/docs/release-notes.md</code>. PR #3750 by @saintmalik.</li> <li>\u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/en/docs/help-readyapi.md</code>. PR #3760 by @jaystone776.</li> <li>\u270f Fix typo about file path in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #3285 by @HolyDorus.</li> <li>\u270f Re-word to clarify test client in <code>docs/en/docs/tutorial/testing.md</code>. PR #3382 by @Bharat123rox.</li> <li>\ud83d\udcdd  Fix incorrect highlighted code. PR #3325 by @paxcodes.</li> <li>\ud83d\udcdd Add external link to article: How-to deploy ReadyAPI app to Heroku. PR #3241 by @Jarmos-san.</li> <li>\u270f Fix typo (mistranslation) in <code>docs/en/docs/advanced/templates.md</code>. PR #3211 by @oerpli.</li> <li>\ud83d\udcdd Remove note about (now supported) feature from Swagger UI in <code>docs/en/docs/tutorial/request-files.md</code>. PR #2803 by @gsganden.</li> <li>\u270f Fix typo re-word in <code>docs/tutorial/handling-errors.md</code>. PR #2700 by @graue70.</li> </ul>"},{"location":"release-notes/#translations_59","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/readyapi-people.md</code>. PR #3848 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_71","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani.</li> <li>\u270f Fix link in Japanese docs for <code>docs/ja/docs/deployment/docker.md</code>. PR #3245 by @utamori.</li> <li>\ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert.</li> <li>\ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield.</li> <li>\ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0682","title":"0.68.2","text":"<p>This release has no breaking changes. \ud83c\udf89</p> <p>It upgrades the version ranges of sub-dependencies to allow applications using ReadyAPI to easily upgrade them.</p> <p>Soon there will be a new ReadyAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.</p>"},{"location":"release-notes/#features_33","title":"Features","text":"<ul> <li>\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis.</li> <li>\u2796 Do not require backports in Python &gt;= 3.7. PR #1880 by @FFY00.</li> <li>\u2b06 Upgrade required Python version to &gt;= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin.</li> <li>\u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_59","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @khulnasoft.</li> <li>\ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @khulnasoft.</li> <li>\ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_60","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/features.md</code>. PR #1950 by @ycd.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/benchmarks.md</code>. PR #2729 by @Telomeraz.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/index.md</code>. PR #1908 by @ycd.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/body.md</code>. PR #3671 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/docker.md</code>. PR #3694 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/path-params.md</code>. PR #3664 by @FelipeSilva93.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/https.md</code>. PR #3754 by @lsglucas.</li> <li>\ud83c\udf10 Add German translation for <code>docs/features.md</code>. PR #3699 by @mawassk.</li> </ul>"},{"location":"release-notes/#internal_72","title":"Internal","text":"<ul> <li>\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade development <code>autoflake</code>, supporting multi-line imports. PR #3988 by @khulnasoft.</li> <li>\u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3986 by @github-actions[bot].</li> <li>\ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic.</li> <li>\u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik.</li> <li>\u2728 Add Deepset Sponsorship. PR #3976 by @khulnasoft.</li> <li>\ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0681","title":"0.68.1","text":"<ul> <li>\u2728 Add support for <code>read_with_orm_mode</code>, to support SQLDev relationship attributes. PR #3757 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_61","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation of <code>docs/readyapi-people.md</code>. PR #3461 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #3492 by @jaystone776.</li> <li>\ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/sub-dependencies.md</code>. PR #3491 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/advanced/index.md</code>. PR #3460 by @ComicShrimp.</li> <li>\ud83c\udf10 Portuguese translation of <code>docs/async.md</code>. PR #1330 by @Serrones.</li> <li>\ud83c\udf10 Add French translation for <code>docs/async.md</code>. PR #3416 by @Smlep.</li> </ul>"},{"location":"release-notes/#internal_73","title":"Internal","text":"<ul> <li>\u2728 Add GitHub Action: Notify Translations. PR #3715 by @khulnasoft.</li> <li>\u2728 Update computation of ReadyAPI People and sponsors. PR #3714 by @khulnasoft.</li> <li>\u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @khulnasoft.</li> <li>\ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @khulnasoft.</li> <li>\u2795 Update docs library to include sources in Markdown. PR #3648 by @khulnasoft.</li> <li>\u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3642 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0680","title":"0.68.0","text":""},{"location":"release-notes/#features_34","title":"Features","text":"<ul> <li>\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation. New docs: ReadyAPI Path Operation Advanced Configuration - OpenAPI Extra. Initial PR #1922 by @edouardlp.</li> <li>\u2728 Add additional OpenAPI metadata parameters to <code>ReadyAPI</code> class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs. Initial PR #1812 by @dkreeft.</li> <li>\u2728 Add <code>description</code> parameter to all the security scheme classes, e.g. <code>APIKeyQuery(name=\"key\", description=\"A very cool API key\")</code>. PR #1757 by @hylkepostma.</li> <li>\u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @khulnasoft.</li> <li>\u2728 Import and re-export data structures from Starlette, used by Request properties, on <code>readyapi.datastructures</code>. Initial PR #1872 by @jamescurtin.</li> </ul>"},{"location":"release-notes/#docs_60","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight.</li> </ul>"},{"location":"release-notes/#translations_62","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/python-types.md</code>. PR #3039 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/index.md</code>. PR #3489 by @jaystone776.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/external-links.md</code>. PR #3036 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/global-dependencies.md</code>. PR #3493 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/versions.md</code>. PR #3618 by @lsglucas.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3526 by @sattosan.</li> </ul>"},{"location":"release-notes/#internal_74","title":"Internal","text":"<ul> <li>\u2705 Add  the <code>docs_src</code> directory to test coverage and update tests. Initial PR #1904 by @Kludex.</li> <li>\ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @khulnasoft.</li> <li>\ud83d\udcdd Add official ReadyAPI Twitter to docs: @readyapi. PR #3578 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0670","title":"0.67.0","text":""},{"location":"release-notes/#features_35","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dataclasses</code> in request bodies and <code>response_model</code>. New documentation: Advanced User Guide - Using Dataclasses. PR #3577 by @khulnasoft.</li> <li>\u2728 Support <code>dataclasses</code> in responses. PR #3576 by @khulnasoft, continuation from initial PR #2722 by @amitlissack.</li> </ul>"},{"location":"release-notes/#docs_61","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI. PR #2839 by @aitoehigie.</li> <li>\u270f Fix code highlighted line in: <code>body-nested-models.md</code>. PR #3463 by @jaystone776.</li> <li>\u270f Fix typo in <code>body-nested-models.md</code>. PR #3462 by @jaystone776.</li> <li>\u270f Fix typo \"might me\" -&gt; \"might be\" in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #3362 by @dbrakman.</li> <li>\ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and ReadyAPI. PR #3271 by @ShahriyarR.</li> <li>\ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, ReadyAPI and Docker. PR #2974 by @rodrigo-arenas.</li> <li>\u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex.</li> <li>\ud83d\udcdd Add External Link: Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_75","title":"Internal","text":"<ul> <li>\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @khulnasoft.</li> <li>\ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @khulnasoft.</li> <li>\ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0661","title":"0.66.1","text":""},{"location":"release-notes/#translations_63","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/security/index.md</code>. PR #3507 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/index.md</code>. PR #3337 by @lsglucas.</li> </ul>"},{"location":"release-notes/#internal_76","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to <code>&gt;=6.2.4,&lt;7.0.0</code> and pytest-cov to <code>&gt;=2.12.0,&lt;3.0.0</code>. Initial PR #2790 by @graingert.</li> <li>\u2b06\ufe0f Upgrade python-jose dependency to <code>&gt;=3.3.0,&lt;4.0.0</code> for tests. PR #3468 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0660","title":"0.66.0","text":""},{"location":"release-notes/#features_36","title":"Features","text":"<ul> <li>\u2728 Allow setting the <code>response_class</code> to <code>RedirectResponse</code> or <code>FileResponse</code> and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others, in RedirectResponse and in FileResponse. PR #3457 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_30","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix include/exclude for dicts in <code>jsonable_encoder</code>. PR #2016 by @Rubikoid.</li> <li>\ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson.</li> </ul>"},{"location":"release-notes/#translations_64","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>tutorial/query-params.md</code>. PR #2243 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/response-directly.md</code>. PR #1253 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/additional-status-codes.md</code>. PR #1252 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/path-operation-advanced-configuration.md</code>. PR #1251 by @jfunez.</li> </ul>"},{"location":"release-notes/#0653","title":"0.65.3","text":""},{"location":"release-notes/#fixes_31","title":"Fixes","text":"<ul> <li>\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118. It should allow upgrading ReadyAPI applications with clients that send JSON data without a <code>Content-Type</code> header. And there's still protection against CSRFs. PR #3456 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_65","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl.</li> <li>\ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for ReadyAPI People. PR #3112 by @hareru.</li> <li>\ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo.</li> <li>\ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh.</li> <li>\ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_77","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #3450 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3319 by @github-actions[bot].</li> <li>\u2b06 Upgrade docs development dependency on <code>cligenius-cli</code> to &gt;=0.0.12 to fix conflicts. PR #3429 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0652","title":"0.65.2","text":""},{"location":"release-notes/#security-fixes_1","title":"Security fixes","text":"<ul> <li>\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang.</li> </ul> <p>This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.</p> <p>In versions lower than <code>0.65.2</code>, ReadyAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p> <p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p> <p>But requests with content type <code>text/plain</code> are exempt from CORS preflights, for being considered Simple requests. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the ReadyAPI application.</p> <p>See CVE-2021-32677 for more details.</p> <p>Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12</p>"},{"location":"release-notes/#internal_78","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @khulnasoft.</li> <li>\ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @khulnasoft.</li> <li>\ud83d\udd27 Add new banner sponsor badge for ReadyAPI courses bundle. PR #3288 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0651","title":"0.65.1","text":""},{"location":"release-notes/#security-fixes_2","title":"Security fixes","text":"<ul> <li>\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510. PR #3213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0650","title":"0.65.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_2","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f  Upgrade Starlette to <code>0.14.2</code>, including internal <code>UJSONResponse</code> migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner.</li> </ul>"},{"location":"release-notes/#translations_66","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer.</li> </ul>"},{"location":"release-notes/#internal_79","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs script to generate a new translation language with <code>overrides</code> boilerplate. PR #3202 by @khulnasoft.</li> <li>\u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3189 by @github-actions[bot].</li> <li>\ud83d\udd0a Update ReadyAPI People to allow better debugging. PR #3188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0640","title":"0.64.0","text":""},{"location":"release-notes/#features_37","title":"Features","text":"<ul> <li>\u2728 Add support for adding multiple <code>examples</code> in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data. Initial PR #1267 by @austinorr.</li> </ul>"},{"location":"release-notes/#fixes_32","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @khulnasoft.</li> <li>\ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @khulnasoft.</li> <li>\ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu.</li> </ul>"},{"location":"release-notes/#docs_62","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to article in Russian \"ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler.</li> <li>\ud83d\udcdd Add external link to blog post \"Authenticate Your ReadyAPI App with Auth0\". PR #2172 by @dompatmore.</li> <li>\ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using ReadyAPI and Streamlit. PR #2557 by @davidefiocco.</li> <li>\ud83d\udcdd Add ReadyAPI Medium Article: Deploy a dockerized ReadyAPI application to AWS. PR #2515 by @vjanz.</li> <li>\u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen.</li> <li>\u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00.</li> <li>\u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni.</li> <li>\ud83d\udcdd Add external link to \"ReadyAPI for Flask Users\". PR #2280 by @amitness.</li> </ul>"},{"location":"release-notes/#translations_67","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109.</li> <li>\ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep.</li> <li>\ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for ReadyAPI People. PR #2232 by @JulianMaurin.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3031 by @github-actions[bot].</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for ReadyAPI People. PR #2254 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc.</li> </ul>"},{"location":"release-notes/#internal_80","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @khulnasoft.</li> <li>\ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2880 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2739 by @github-actions[bot].</li> <li>\ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @khulnasoft.</li> <li>\ud83d\udd27 Add ReadyAPI user survey banner. PR #2623 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @khulnasoft.</li> <li>\ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Sponsors order. PR #2620 by @khulnasoft.</li> <li>\ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2590 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0630","title":"0.63.0","text":""},{"location":"release-notes/#features_38","title":"Features","text":"<ul> <li>\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#breaking-changes_5","title":"Breaking changes","text":"<ul> <li>\u2b06\ufe0f Upgrade Uvicorn when installing <code>readyapi[all]</code> to the latest version including <code>uvloop</code>, the new range is <code>uvicorn[standard] &gt;=0.12.0,&lt;0.14.0</code>. PR #2548 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_33","title":"Fixes","text":"<ul> <li>\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with <code>callbacks</code> parameters and when using the <code>OAuth2</code> class.</li> </ul>"},{"location":"release-notes/#docs_63","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @khulnasoft.</li> <li>\ud83d\udcdd Update title for Deta tutorial. PR #2466 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2454 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#translations_68","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add docs lang selector widget. PR #2542 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv.</li> <li>\ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo.</li> <li>\ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031.</li> </ul>"},{"location":"release-notes/#internal_81","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @khulnasoft.</li> <li>\u2796 Remove Cligenius as a docs building dependency (covered by cligenius-cli) to fix pip resolver conflicts. PR #2539 by @khulnasoft.</li> <li>\u2728 Add newsletter: ReadyAPI and friends. PR #2509 by @khulnasoft.</li> <li>\u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @khulnasoft.</li> <li>\ud83d\udd27 Add issue template configs. PR #2476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0620","title":"0.62.0","text":""},{"location":"release-notes/#features_39","title":"Features","text":"<ul> <li>\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @khulnasoft.</li> </ul> <p>Up to now, for several options, the only way to apply them to a group of path operations was in <code>include_router</code>. That works well, but the call to <code>app.include_router()</code> or <code>router.include_router()</code> is normally done in another file.</p> <p>That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together.</p> <p>Setting options in <code>include_router</code> still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the <code>APIRouter</code>.</p> <p>In <code>ReadyAPI</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>.</li> <li><code>dependencies</code>: to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations.</li> <li><code>deprecated</code>: to mark all the path operations as deprecated. \ud83e\udd37</li> <li><code>include_in_schema</code>: to allow excluding all the path operations from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations.</li> </ul> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Depends\n\n\nasync def some_dependency():\n    return\n\n\napp = ReadyAPI(dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>APIRouter</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>. For example, it's not needed to set it explicitly when creating callbacks.</li> <li><code>dependencies</code>: to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with <code>include_router</code>.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated.</li> <li><code>include_in_schema</code>: to allow excluding all the path operations in a router from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations in a router.</li> <li><code>prefix</code>: to set the path prefix for a router. Up to now, this was only possible when calling <code>include_router</code>.</li> <li><code>tags</code>: OpenAPI tags to apply to all the path operations in this router.</li> </ul> <p>For example:</p> <pre><code>from readyapi import APIRouter, Depends\n\n\nasync def some_dependency():\n    return\n\n\nrouter = APIRouter(prefix=\"/users\", dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>include_router</code></p> <p>Most of these settings are now supported in <code>APIRouter</code>, which normally lives closer to the related code, so it is recommended to use <code>APIRouter</code> when possible.</p> <p>But <code>include_router</code> is still useful to, for example, adding options (like <code>dependencies</code>, <code>prefix</code>, and <code>tags</code>) when including a third party router, or a generic router that is shared between several projects.</p> <p>This PR allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>ReadyAPI</code>.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated in OpenAPI.</li> <li><code>include_in_schema</code>: to allow disabling all the path operations from showing in the OpenAPI schema.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> </ul> <p>Note: all the previous parameters are still there, so it's still possible to declare <code>dependencies</code> in <code>include_router</code>.</p>"},{"location":"release-notes/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios:<ul> <li>If you are testing the generated OpenAPI (you shouldn't, ReadyAPI already tests it extensively for you): the order for <code>tags</code> in <code>include_router</code> and path operations was updated for consistency, but it's a simple order change.</li> <li>If you have advanced custom logic to access each route's <code>route.response_class</code>, or the <code>router.default_response_class</code>, or the <code>app.default_response_class</code>: the default value for <code>response_class</code> in <code>APIRoute</code> and for <code>default_response_class</code> in <code>APIRouter</code> and <code>ReadyAPI</code> is now a <code>DefaultPlaceholder</code> used internally to handle and solve default values and overrides. The actual response class inside the <code>DefaultPlaceholder</code> is available at <code>route.response_class.value</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_64","title":"Docs","text":"<ul> <li> <p>PR #2434 (above) includes new or updated docs:</p> <ul> <li>Advanced User Guide - OpenAPI Callbacks.</li> <li>Tutorial - Bigger Applications.</li> <li>Tutorial - Dependencies - Dependencies in path operation decorators.</li> <li>Tutorial - Dependencies - Global Dependencies.</li> </ul> </li> <li> <p>\ud83d\udcdd Add ReadyAPI monitoring blog post to External Links. PR #2324 by @louisguitton.</p> </li> <li>\u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @khulnasoft.</li> <li>\u2728 Add Discord chat. PR #2322 by @khulnasoft.</li> <li>\ud83d\udcdd Fix image links for sponsors. PR #2304 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_69","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031.</li> <li>\ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu.</li> </ul>"},{"location":"release-notes/#internal_82","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor logos. PR #2418 by @khulnasoft.</li> <li>\ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @khulnasoft.</li> <li>\ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @khulnasoft.</li> <li>\u2728 Add silver sponsor WeTransfer. PR #2338 by @khulnasoft.</li> <li>\u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0612","title":"0.61.2","text":""},{"location":"release-notes/#fixes_34","title":"Fixes","text":"<ul> <li>\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold.</li> <li>\ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo.</li> <li>\u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_65","title":"Docs","text":"<ul> <li>\u270f\ufe0f  Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl.</li> <li>\u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy.</li> <li>\u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd.</li> <li>\u270f Fix typo in docs. PR #2179 by @ammarasmro.</li> <li>\ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd.</li> <li>\u270f Fix typos and add rewording in docs. PR #2159 by @nukopy.</li> <li>\ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy.</li> <li>\ud83d\udcdd Fix renamed parameter <code>content_type</code> typo. PR #2135 by @TeoZosa.</li> <li>\u270f Fix minor typos in docs. PR #2122 by @TeoZosa.</li> <li>\u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda.</li> <li>\u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles.</li> <li>\ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust.</li> <li>\u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd.</li> <li>\ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell.</li> <li>\ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2282 by @github-actions[bot].</li> <li>\u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl.</li> <li>\ud83d\udcdd Add articles to External Links. PR #2247 by @khulnasoft.</li> <li>\u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho.</li> </ul>"},{"location":"release-notes/#translations_70","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031.</li> <li>\ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz.</li> <li>\ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Japanese translation for Help ReadyAPI. PR #1692 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi.</li> <li>\ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi.</li> <li>\ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders.</li> <li>\ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones.</li> </ul>"},{"location":"release-notes/#internal_83","title":"Internal","text":"<ul> <li>\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @khulnasoft.</li> <li>\ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @khulnasoft.</li> <li>\u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @khulnasoft.</li> <li>\u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2202 by @github-actions[bot].</li> <li>\u267b\ufe0f Update ReadyAPI People GitHub Action to send the PR as github-actions. PR #2201 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Action config, run monthly. PR #2199 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependencies. PR #2197 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action when there's nothing to change. PR #2196 by @khulnasoft.</li> <li>\ud83d\udc65 Add new section ReadyAPI People. PR #2195 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @khulnasoft.</li> <li>\ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @khulnasoft.</li> <li>\ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #2160.</li> <li>\ud83d\udc77 Add GitHub Action Label Approved. PR #2161.</li> </ul>"},{"location":"release-notes/#0611","title":"0.61.1","text":""},{"location":"release-notes/#fixes_35","title":"Fixes","text":"<ul> <li>Fix issues using <code>jsonable_encoder</code> with SQLAlchemy models directly. PR #1987.</li> </ul>"},{"location":"release-notes/#docs_66","title":"Docs","text":"<ul> <li>Fix typo in NoSQL docs. PR #1980 by @facundojmaero.</li> </ul>"},{"location":"release-notes/#translations_71","title":"Translations","text":"<ul> <li>Add translation for main page to Japanese PR #1571 by @ryuckel.</li> <li>Initialize French translations. PR #1975 by @JulianMaurin-BM.</li> <li>Initialize Turkish translations. PR #1905 by @ycd.</li> </ul>"},{"location":"release-notes/#internal_84","title":"Internal","text":"<ul> <li>Improve docs maintainability by updating <code>hl_lines</code> syntax to use ranges. PR #1863 by @la-mar.</li> </ul>"},{"location":"release-notes/#0610","title":"0.61.0","text":""},{"location":"release-notes/#features_40","title":"Features","text":"<ul> <li>Add support for injecting <code>HTTPConnection</code> (as <code>Request</code> and <code>WebSocket</code>). Useful for sharing app state in dependencies. PR #1827 by @nsidnev.</li> <li>Export <code>WebSocketDisconnect</code> and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss.</li> </ul>"},{"location":"release-notes/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li>Require Pydantic &gt; <code>1.0.0</code>.<ul> <li>Remove support for deprecated Pydantic <code>0.32.2</code>. This improves maintainability and allows new features.</li> <li>In <code>ReadyAPI</code> and <code>APIRouter</code>:<ul> <li>Remove path operation decorators related/deprecated parameter <code>response_model_skip_defaults</code> (use <code>response_model_exclude_unset</code> instead).</li> <li>Change path operation decorators parameter default for <code>response_model_exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code>:<ul> <li>Remove deprecated <code>skip_defaults</code>, use instead <code>exclude_unset</code>.</li> <li>Set default of <code>exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>PR #1862.</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code> remove parameter <code>sqlalchemy_safe</code>.<ul> <li>It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's <code>orm_mode</code> as described in the tutorial: SQL (Relational) Databases.</li> <li>PR #1864.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_67","title":"Docs","text":"<ul> <li>Add link to the course by TestDriven.io: Test-Driven Development with ReadyAPI and Docker. PR #1860.</li> <li>Fix empty log message in docs example about handling errors. PR #1815 by @manlix.</li> <li>Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause.</li> </ul>"},{"location":"release-notes/#internal_85","title":"Internal","text":"<ul> <li>Add Flake8 linting. Original PR #1774 by @MashhadiNima.</li> <li>Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853.</li> </ul>"},{"location":"release-notes/#0602","title":"0.60.2","text":"<ul> <li>Fix typo in docs for query parameters. PR #1832 by @ycd.</li> <li>Add docs about Async Tests. PR #1619 by @empicano.</li> <li>Raise an exception when using form data (<code>Form</code>, <code>File</code>) without having <code>python-multipart</code> installed.<ul> <li>Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.</li> <li>It also detects if the correct package <code>python-multipart</code> is installed instead of the incorrect <code>multipart</code> (both importable as <code>multipart</code>).</li> <li>PR #1851 based on original PR #1627 by @chrisngyn, @YKo20010, @kx-chen.</li> </ul> </li> <li>Re-enable Gitter releases bot. PR #1831.</li> <li>Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings.</li> <li>Fix typo in tutorial about behind a proxy. PR #1807 by @toidi.</li> <li>Fix typo in Portuguese docs. PR #1795 by @izaguerreiro.</li> <li>Add translations setup for Ukrainian. PR #1830.</li> <li>Add external link Build And Host Fast Data Science Applications Using ReadyAPI. PR #1786 by @Kludex.</li> <li>Fix encoding of Pydantic models that inherit from others models with custom <code>json_encoders</code>. PR #1769 by @henrybetts.</li> <li>Simplify and improve <code>jsonable_encoder</code>. PR #1754 by @MashhadiNima.</li> <li>Simplify internal code syntax in several points. PR #1753 by @uriyyo.</li> <li>Improve internal typing, declare <code>Optional</code> parameters. PR #1731 by @MashhadiNima.</li> <li>Add external link Deploy ReadyAPI on Azure App Service to docs. PR #1726 by @windson.</li> <li>Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld.</li> <li>Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie.</li> <li>Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra.</li> <li>Fix typos in docs for security. PR #1678 by @nilslindemann.</li> <li>Fix typos in docs for dependencies. PR #1675 by @nilslindemann.</li> <li>Fix type annotation for <code>**extra</code> parameters in <code>ReadyAPI</code>. PR #1659 by @bharel.</li> <li>Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia.</li> <li>Remove docs preview comment from each commit. PR #1826.</li> <li>Update GitHub context extraction for Gitter notification bot. PR #1766.</li> </ul>"},{"location":"release-notes/#0601","title":"0.60.1","text":"<ul> <li>Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764.</li> <li>Use OS preference theme for online docs. PR #1760 by @adriencaccia.</li> <li>Upgrade Starlette to version <code>0.13.6</code> to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26.</li> <li>Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249. PR #1763.</li> <li>Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761.</li> <li>Update GitHub Actions, refactor Gitter bot. PR #1746.</li> </ul>"},{"location":"release-notes/#0600","title":"0.60.0","text":"<ul> <li>Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740.</li> <li>Add custom GitHub Action to get artifact with docs preview. PR #1739.</li> <li>Add new GitHub Actions to preview docs from PRs. PR #1738.</li> <li>Add XML test coverage to support GitHub Actions. PR #1737.</li> <li>Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736.</li> <li>Add GitHub Actions for CI, move from Travis. PR #1735.</li> <li>Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0590","title":"0.59.0","text":"<ul> <li>Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2.</li> <li>Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux.</li> <li>Fix/re-enable search bar in docs. PR #1703.</li> <li>Auto-generate a \"server\" in OpenAPI <code>servers</code> when there's a <code>root_path</code> instead of prefixing all the <code>paths</code>:<ul> <li>Add a new parameter for <code>ReadyAPI</code> classes: <code>root_path_in_servers</code> to disable the auto-generation of <code>servers</code>.</li> <li>New docs about <code>root_path</code> and <code>servers</code> in Additional Servers.</li> <li>Update OAuth2 examples to use a relative URL for <code>tokenUrl=\"token\"</code> to make sure those examples keep working as-is even when behind a reverse proxy.</li> <li>Initial PR #1596 by @rkbeatss.</li> </ul> </li> <li>Fix typo/link in External Links. PR #1702.</li> <li>Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/khulnasoft/readyapi/pull/1701.</li> <li>Add external link Machine learning model serving in Python using ReadyAPI and Streamlit to docs. PR #1669 by @davidefiocco.</li> <li>Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc.</li> <li>Improve support for tests in editor. PR #1699.</li> <li>Pin dependencies. PR #1697.</li> <li>Update isort to version 5.x.x. PR #1670 by @asheux.</li> </ul>"},{"location":"release-notes/#0581","title":"0.58.1","text":"<ul> <li>Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi.</li> <li>Fix link in warning logs for <code>openapi_prefix</code>. PR #1611 by @bavaria95.</li> <li>Fix bad link in docs. PR #1603 by @molto0504.</li> <li>Add Vim temporary files to <code>.gitignore</code> for contributors using Vim. PR #1590 by @asheux.</li> <li>Fix typo in docs for sub-applications. PR #1578 by @schlpbch.</li> <li>Use <code>Optional</code> in all the examples in the docs. Original PR #1574 by @chrisngyn, @kx-chen, @YKo20010. Updated and merged PR #1644.</li> <li>Update tests and handling of <code>response_model_by_alias</code>. PR #1642.</li> <li>Add translation to Chinese for Body - Fields - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u5b57\u200b\u6bb5\u200b. PR #1569 by @waynerv.</li> <li>Update Chinese translation of main page. PR #1564 by @waynerv.</li> <li>Add translation to Chinese for Body - Multiple Parameters - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b. PR #1532 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters and Numeric Validations - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u503c\u200b\u6821\u9a8c\u200b. PR #1506 by @waynerv.</li> <li>Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638.</li> </ul>"},{"location":"release-notes/#0580","title":"0.58.0","text":"<ul> <li>Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577.</li> <li>Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie.</li> <li>Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie.</li> <li>Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie.</li> <li>Fix Model for JSON Schema keyword <code>not</code> as a JSON Schema instead of a list. PR #1548 by @v-do.</li> <li>Add support for OpenAPI <code>servers</code>. PR #1547 by @mikaello.</li> </ul>"},{"location":"release-notes/#0570","title":"0.57.0","text":"<ul> <li>Remove broken link from \"External Links\". PR #1565 by @victorphoenix3.</li> <li>Update/fix docs for WebSockets with dependencies. Original PR #1540 by @ChihSeanHsu.</li> <li>Add support for Python's <code>http.HTTPStatus</code> in <code>status_code</code> parameters. PR #1534 by @retnikt.</li> <li>When using Pydantic models with <code>__root__</code>, use the internal value in <code>jsonable_encoder</code>. PR #1524 by @patrickkwang.</li> <li>Update docs for path parameters. PR #1521 by @yankeexe.</li> <li>Update docs for first steps, links and rewording. PR #1518 by @yankeexe.</li> <li>Enable <code>showCommonExtensions</code> in Swagger UI to show additional validations like <code>maxLength</code>, etc. PR #1466 by @TiewKH.</li> <li>Make <code>OAuth2PasswordRequestFormStrict</code> importable directly from <code>readyapi.security</code>. PR #1462 by @RichardHoekstra.</li> <li>Add docs about Default response class. PR #1455 by @TezRomacH.</li> <li>Add note in docs about additional parameters <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code> in Response Model. PR #1427 by @wshayes.</li> <li>Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi.</li> <li>Update and clarify testing function name. PR #1395 by @chenl.</li> <li>Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail.</li> <li>Upgrade Starlette version to <code>0.13.4</code>. PR #1361 by @rushton.</li> <li>Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha.</li> <li>Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags. PR #1348 by @thomas-maschler.</li> <li>Add basic setup for Russian translations. PR #1566.</li> <li>Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv.</li> <li>Add <code>__repr__</code> for path operation function parameter helpers (like <code>Query</code>, <code>Depends</code>, etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0561","title":"0.56.1","text":"<ul> <li>Add link to advanced docs from tutorial. PR #1512 by @kx-chen.</li> <li>Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka.</li> <li>Add translation to Chinese for Query Parameters and String Validations - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6821\u9a8c\u200b. PR #1500 by @waynerv.</li> <li>Add translation to Chinese for Request Body - \u200b\u8bf7\u6c42\u200b\u4f53\u200b. PR #1492 by @waynerv.</li> <li>Add translation to Chinese for Help ReadyAPI - Get Help - \u200b\u5e2e\u52a9\u200b ReadyAPI - \u200b\u83b7\u53d6\u200b\u5e2e\u52a9\u200b. PR #1465 by @waynerv.</li> <li>Add translation to Chinese for Query Parameters - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b. PR #1454 by @waynerv.</li> <li>Add translation to Chinese for Contributing - \u200b\u5f00\u53d1\u200b - \u200b\u8d21\u732e\u200b. PR #1460 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b. PR #1453 by @waynerv.</li> <li>Add official Microsoft project generator for serving spaCy with ReadyAPI and Azure Cognitive Skills to Project Generators. PR #1390 by @kabirkhan.</li> <li>Update docs in Python Types Intro to include info about <code>Optional</code>. Original PR #1377 by @yaegassy.</li> <li>Fix support for callable class dependencies with <code>yield</code>. PR #1365 by @mrosales.</li> <li>Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty.</li> <li>Add translation to Chinese for First Steps - \u200b\u7b2c\u4e00\u6b65\u200b. PR #1323 by @waynerv.</li> <li>Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev.</li> <li>Optimize internal regex performance in <code>get_path_param_names()</code>. PR #1243 by @heckad.</li> <li>Remove <code>*,</code> from functions in docs where it's not needed. PR #1239 by @pankaj-giri.</li> <li>Start translations for Italian. PR #1557 by @csr.</li> </ul>"},{"location":"release-notes/#0560","title":"0.56.0","text":"<ul> <li>Add support for ASGI <code>root_path</code>:<ul> <li>Use <code>root_path</code> internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.</li> <li>Add new <code>root_path</code> parameter for <code>ReadyAPI</code> applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter <code>--root-path</code>).</li> <li>Deprecate <code>openapi_prefix</code> parameter in favor of the new <code>root_path</code> parameter.</li> <li>Add new/updated docs for Sub Applications - Mounts, without <code>openapi_prefix</code> (as it is now handled automatically).</li> <li>Add new/updated docs for Behind a Proxy, including how to setup a local testing proxy with Traefik and using <code>root_path</code>.</li> <li>Update docs for Extending OpenAPI with the new <code>openapi_prefix</code> parameter passed (internally generated from <code>root_path</code>).</li> <li>Original PR #1199 by @iksteen.</li> </ul> </li> <li>Update new issue templates and docs: Help ReadyAPI - Get Help. PR #1531.</li> <li>Update GitHub action issue-manager. PR #1520.</li> <li>Add new links:<ul> <li>English articles:<ul> <li>Real-time Notifications with Python and Postgres by Guillermo Cruz.</li> <li>Microservice in Python using ReadyAPI  by Paurakh Sharma Humagain.</li> <li>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</li> <li>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</li> <li>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</li> <li>Build a Secure Twilio Webhook with Python and ReadyAPI  by Twilio.</li> <li>Using ReadyAPI with Django  by Stavros Korokithakis.</li> <li>Introducing Dispatch by Netflix.</li> </ul> </li> <li>Podcasts:<ul> <li>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</li> </ul> </li> <li>Talks:<ul> <li>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> <li>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> </ul> </li> <li>PR #1467.</li> </ul> </li> <li>Add translation to Chinese for Python Types Intro - Python \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u7b80\u4ecb\u200b. PR #1197 by @waynerv.</li> </ul>"},{"location":"release-notes/#0551","title":"0.55.1","text":"<ul> <li>Fix handling of enums with their own schema in path parameters. To support pydantic/pydantic#1432 in ReadyAPI. PR #1463.</li> </ul>"},{"location":"release-notes/#0550","title":"0.55.0","text":"<ul> <li>Allow enums to allow them to have their own schemas in OpenAPI. To support pydantic/pydantic#1432 in ReadyAPI. PR #1461.</li> <li>Add links for funding through GitHub sponsors. PR #1425.</li> <li>Update issue template for for questions. PR #1344 by @retnikt.</li> <li>Update warning about storing passwords in docs. PR #1336 by @skorokithakis.</li> <li>Fix typo. PR #1326 by @chenl.</li> <li>Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es. PR #1325 by @Serrones.</li> <li>Fix 2 typos in docs. PR #1324 by @waynerv.</li> <li>Update CORS docs, fix correct default of <code>max_age=600</code>. PR #1301 by @derekbekoe.</li> <li>Add translation of main page to Portuguese. PR #1300 by @Serrones.</li> <li>Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt.</li> <li>Make sure the <code>*</code> in short features in the docs is consistent (after <code>.</code>) in all languages. PR #1424.</li> <li>Update order of execution for <code>get_db</code> in SQLAlchemy tutorial. PR #1293 by @bcb.</li> <li>Fix typos in Async docs. PR #1423.</li> </ul>"},{"location":"release-notes/#0542","title":"0.54.2","text":"<ul> <li>Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await. PR #1290 by @alvaropernas.</li> <li>Remove obsolete vote link. PR #1289 by @donhui.</li> <li>Allow disabling docs UIs by just disabling OpenAPI with <code>openapi_url=None</code>. New example in docs: Advanced: Conditional OpenAPI. PR #1421.</li> <li>Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es. PR #1274 by @Serrones.</li> <li>Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o. PR #1259 by @marcosmmb.</li> <li>Allow using Unicode in MkDocs for translations. PR #1419.</li> <li>Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n. PR #1250 by @jfunez.</li> <li>Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro. PR #1249 by @marcosmmb.</li> <li>Add translation to Portuguese for Features - Recursos. PR #1248 by @marcosmmb.</li> <li>Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n. PR #1244 by @MartinEliasQ.</li> <li>Add translation to Chinese for Deployment - \u200b\u90e8\u7f72\u200b. PR #1203 by @RunningIkkyu.</li> <li>Add translation to Chinese for Tutorial - User Guide - Intro - \u200b\u6559\u7a0b\u200b - \u200b\u7528\u6237\u200b\u6307\u5357\u200b - \u200b\u7b80\u4ecb\u200b. PR #1202 by @waynerv.</li> <li>Add translation to Chinese for Features - \u200b\u7279\u6027\u200b. PR #1192 by @Dustyposa.</li> <li>Add translation for main page to Chinese PR #1191 by @waynerv.</li> <li>Update docs for project generation. PR #1287.</li> <li>Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro). PR #1237 by @mariacamilagl.</li> <li>Add Spanish translation for Caracter\u00edsticas (Features). PR #1220 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0541","title":"0.54.1","text":"<ul> <li>Update database test setup. PR #1226.</li> <li>Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0540","title":"0.54.0","text":"<ul> <li>Fix grammatical mistakes in async docs. PR #1188 by @mickeypash.</li> <li>Add support for <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code>:<ul> <li>Deprecate the parameter <code>include_none</code> in <code>jsonable_encoder</code> and add the inverted <code>exclude_none</code>, to keep in sync with Pydantic.</li> <li>PR #1166 by @voegtlel.</li> </ul> </li> <li>Add example about Testing a Database. Initial PR #1144 by @duganchen.</li> <li>Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215.</li> <li>Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao.</li> <li>Add Python venv <code>env</code> to <code>.gitignore</code>. PR #1212 by @cassiobotaro.</li> <li>Start Portuguese translations. PR #1210 by @cassiobotaro.</li> <li>Update docs for Pydantic's <code>Settings</code> using a dependency with <code>@lru_cache()</code>. PR #1214.</li> <li>Add first translation to Spanish ReadyAPI. PR #1201 by @mariacamilagl.</li> <li>Add docs about Settings and Environment Variables. Initial PR 1118 by @alexmitelman.</li> </ul>"},{"location":"release-notes/#0532","title":"0.53.2","text":"<ul> <li>Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186.</li> <li>Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack.</li> <li>Fix docs script to ensure languages are always sorted. PR #1189.</li> <li>Start translations for Chinese. PR #1187 by @RunningIkkyu.</li> <li>Add docs for Schema Extra - Example. PR #1185.</li> </ul>"},{"location":"release-notes/#0531","title":"0.53.1","text":"<ul> <li>Fix included example after translations refactor. PR #1182.</li> <li>Add docs example for <code>example</code> in <code>Field</code>. Docs at Body - Fields: JSON Schema extras. PR #1106 by @JohnPaton.</li> <li>Fix using recursive models in <code>response_model</code>. PR #1164 by @voegtlel.</li> <li>Add docs for Pycharm Debugging. PR #1096 by @youngquan.</li> <li>Fix typo in docs. PR #1148 by @PLNech.</li> <li>Update Windows development environment instructions. PR #1179.</li> </ul>"},{"location":"release-notes/#0530","title":"0.53.0","text":"<ul> <li>Update test coverage badge. PR #1175.</li> <li>Add <code>orjson</code> to <code>pip install readyapi[all]</code>. PR #1161 by @michael0liver.</li> <li>Fix included example for <code>GZipMiddleware</code>. PR #1138 by @arimbr.</li> <li>Fix class name in docstring for <code>OAuth2PasswordRequestFormStrict</code>. PR #1126 by @adg-mh.</li> <li>Clarify function name in example in docs. PR #1121 by @tmsick.</li> <li>Add external link Apache Kafka producer and consumer with ReadyAPI and aiokafka to docs. PR #1112 by @iwpnd.</li> <li>Fix serialization when using <code>by_alias</code> or <code>exclude_unset</code> and returning data with Pydantic models. PR #1074 by @juhovh-aiven.</li> <li>Add Gitter chat to docs. PR #1061 by @aakashnand.</li> <li>Update and simplify translations docs. PR #1171.</li> <li>Update development of ReadyAPI docs, set address to <code>127.0.0.1</code> to improve Windows support. PR #1169 by @mariacamilagl.</li> <li>Add support for docs translations. New docs: Development - Contributing: Docs: Translations. PR #1168.</li> <li>Update terminal styles in docs and add note about Cligenius, the ReadyAPI of CLIs. PR #1139.</li> </ul>"},{"location":"release-notes/#0520","title":"0.52.0","text":"<ul> <li>Add new high-performance JSON response class using <code>orjson</code>. New docs: Custom Response - HTML, Stream, File, others: <code>ORJSONResponse</code>. PR #1065.</li> </ul>"},{"location":"release-notes/#0510","title":"0.51.0","text":"<ul> <li>Re-export utils from Starlette:<ul> <li>This allows using things like <code>from readyapi.responses import JSONResponse</code> instead of <code>from starlette.responses import JSONResponse</code>.</li> <li>It's mainly syntax sugar, a convenience for developer experience.</li> <li>Now <code>Request</code>, <code>Response</code>, <code>WebSocket</code>, <code>status</code> can be imported directly from <code>readyapi</code> as in <code>from readyapi import Response</code>. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.</li> <li>Documentation changes in many places, but new docs and noticeable improvements:<ul> <li>Custom Response - HTML, Stream, File, others.</li> <li>Advanced Middleware.</li> <li>Including WSGI - Flask, Django, others.</li> </ul> </li> <li>PR #1064.</li> </ul> </li> </ul>"},{"location":"release-notes/#0500","title":"0.50.0","text":"<ul> <li>Add link to Release Notes from docs about pinning versions for deployment. PR #1058.</li> <li>Upgrade code to use the latest version of Starlette, including:<ul> <li>Several bug fixes.</li> <li>Optional redirects of slashes, with or without ending in <code>/</code>.</li> <li>Events for routers, <code>\"startup\"</code>, and <code>\"shutdown\"</code>.</li> <li>PR #1057.</li> </ul> </li> <li>Add docs about pinning ReadyAPI versions for deployment: Deployment: ReadyAPI versions. PR #1056.</li> </ul>"},{"location":"release-notes/#0492","title":"0.49.2","text":"<ul> <li>Fix links in release notes. PR #1052 by @sattosan.</li> <li>Fix typo in release notes. PR #1051 by @sattosan.</li> <li>Refactor/clarify <code>serialize_response</code> parameter name to avoid confusion. PR #1031 by @patrickmckenna.</li> <li>Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen.</li> <li>Add missing dependencies for testing. PR #1026 by @sm-Fifteen.</li> <li>Fix accepting valid types for response models, including Python types like <code>List[int]</code>. PR #1017 by @patrickmckenna.</li> <li>Fix format in SQL tutorial. PR #1015 by @vegarsti.</li> </ul>"},{"location":"release-notes/#0491","title":"0.49.1","text":"<ul> <li>Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92.</li> <li>Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047.</li> <li>Move mypy configurations to config file. PR #987 by @hukkinj1.</li> <li>Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0490","title":"0.49.0","text":"<ul> <li>Fix encoding of <code>pathlib</code> paths in <code>jsonable_encoder</code>. PR #978 by @patrickmckenna.</li> <li>Add articles to External Links: Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) and [ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b. PR #974 by @tokusumi.</li> <li>Fix broken links in docs. PR #949 by @tsotnikov.</li> <li>Fix small typos. PR #941 by @NikitaKolesov.</li> <li>Update and clarify docs for dependencies with <code>yield</code>. PR #986.</li> <li>Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with <code>yield</code> and <code>HTTPException</code>. PR #985.</li> <li>Update CI to run docs deployment in GitHub actions. PR #983.</li> <li>Allow <code>callable</code>s in path operation functions, like functions modified with <code>functools.partial</code>. PR #977.</li> </ul>"},{"location":"release-notes/#0480","title":"0.48.0","text":"<ul> <li>Run linters first in tests to error out faster. PR #948.</li> <li>Log warning about <code>email-validator</code> only when used. PR #946.</li> <li>Simplify Peewee docs with double dependency with <code>yield</code>. PR #947.</li> <li>Add article External Links: Create and Deploy ReadyAPI app to Heroku. PR #942 by @windson.</li> <li>Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv.</li> <li>Fix typo in main page. PR #920 by @mMarzeta.</li> <li>Fix parsing of possibly invalid bodies. PR #918 by @dmontagu.</li> <li>Fix typo #916 by @adursun.</li> <li>Allow <code>Any</code> type for enums in OpenAPI. PR #906 by @songzhi.</li> <li>Add article to External Links: How to continuously deploy a ReadyAPI to AWS Lambda with AWS SAM. PR #901 by @iwpnd.</li> <li>Add note about using Body parameters without Pydantic. PR #900 by @pawamoy.</li> <li>Fix Pydantic field clone logic. PR #899 by @deuce2367.</li> <li>Fix link in middleware docs. PR #893 by @linchiwei123.</li> <li>Rename default API title from \"Fast API\" to \"ReadyAPI\" for consistency. PR #890.</li> </ul>"},{"location":"release-notes/#0471","title":"0.47.1","text":"<ul> <li>Fix model filtering in <code>response_model</code>, cloning sub-models. PR #889.</li> <li>Fix ReadyAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888.</li> </ul>"},{"location":"release-notes/#0470","title":"0.47.0","text":"<ul> <li>Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887.</li> <li>Tweak external links, Markdown format, typos. PR #881.</li> <li>Fix bug in tutorial handling HTTP Basic Auth <code>username</code> and <code>password</code>. PR #865 by @isaevpd.</li> <li>Fix handling form path operation parameters declared with pure classes like <code>list</code>, <code>tuple</code>, etc. PR #856 by @nsidnev.</li> <li>Add request <code>body</code> to <code>RequestValidationError</code>, new docs: Use the <code>RequestValidationError</code> body. Initial PR #853 by @aviramha.</li> <li>Update External Links with new links and dynamic GitHub projects with <code>readyapi</code> topic. PR #850.</li> <li>Fix Peewee <code>contextvars</code> handling in docs: SQL (Relational) Databases with Peewee. PR #879.</li> <li>Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing. PR #877.</li> <li>Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass.</li> </ul>"},{"location":"release-notes/#0460","title":"0.46.0","text":"<ul> <li>Fix typos and tweak configs. PR #837.</li> <li>Add link to Chinese article in External Links. PR 810 by @wxq0309.</li> <li>Implement <code>OAuth2AuthorizationCodeBearer</code> class. PR #797 by @kuwv.</li> <li>Update example upgrade in docs main page. PR #795 by @cdeil.</li> <li>Fix callback handling for sub-routers. PR #792 by @jekirl.</li> <li>Fix typos. PR #784 by @kkinder.</li> <li>Add 4 Japanese articles to External Links. PR #783 by @HymanZHAN.</li> <li>Add support for subtypes of main types in <code>jsonable_encoder</code>, e.g. asyncpg's UUIDs. PR #756 by @RmStorm.</li> <li>Fix usage of Pydantic's <code>HttpUrl</code> in docs. PR #832 by @Dustyposa.</li> <li>Fix Twitter links in docs. PR #813 by @justindujardin.</li> <li>Add docs for correctly using ReadyAPI with Peewee ORM. Including how to overwrite parts of Peewee to correctly handle async threads. PR #789.</li> </ul>"},{"location":"release-notes/#0450","title":"0.45.0","text":"<ul> <li>Add support for OpenAPI Callbacks:<ul> <li>New docs: OpenAPI Callbacks.</li> <li>Refactor generation of <code>operationId</code>s to be valid Python names (also valid variables in most languages).</li> <li>Add <code>default_response_class</code> parameter to <code>APIRouter</code>.</li> <li>Original PR #722 by @booooh.</li> </ul> </li> <li>Refactor logging to use the same logger everywhere, update log strings and levels. PR #781.</li> <li>Add article to External Links: \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI?. PR #766 by @prostomarkeloff.</li> <li>Remove gender bias in docs for handling errors. PR #780. Original idea in PR #761 by @classywhetten.</li> <li>Rename docs and references to <code>body-schema</code> to <code>body-fields</code> to keep in line with Pydantic. PR #746 by @prostomarkeloff.</li> </ul>"},{"location":"release-notes/#0441","title":"0.44.1","text":"<ul> <li>Add GitHub social preview images to git. PR #752.</li> <li>Update PyPI \"trove classifiers\". PR #751.</li> <li>Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749.</li> <li>Update \"new issue\" templates. PR #749.</li> <li>Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0440","title":"0.44.0","text":"<ul> <li>Add GitHub action Issue Manager. PR #742.</li> <li>Fix typos in docs. PR 734 by @bundabrg.</li> <li>Fix usage of <code>custom_encoder</code> in <code>jsonable_encoder</code>. PR #715 by @matrixise.</li> <li>Fix invalid XML example. PR 710 by @OcasoProtal.</li> <li>Fix typos and update wording in deployment docs. PR #700 by @marier-nico.</li> <li>Add note about dependencies in <code>APIRouter</code> docs. PR #698 by @marier-nico.</li> <li>Add support for async class methods as dependencies #681 by @frankie567.</li> <li>Add ReadyAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10.</li> <li>Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster.</li> <li>Add support for Pydantic versions <code>1.0.0</code> and above, with temporary (deprecated) backwards compatibility for Pydantic <code>0.32.2</code>. PR #646 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0430","title":"0.43.0","text":"<ul> <li>Update docs to reduce gender bias. PR #645 by @ticosax.</li> <li>Add docs about overriding the <code>operationId</code> for all the path operations based on their function name. PR #642 by @SKalt.</li> <li>Fix validators in models generating an incorrect key order. PR #637 by @jaddison.</li> <li>Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom.</li> <li>Remove <code>$</code> from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek.</li> <li>Add docs for self-serving docs' (Swagger UI) static assets, e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch.</li> <li>Fix <code>black</code> linting after upgrade. PR #682 by @frankie567.</li> </ul>"},{"location":"release-notes/#0420","title":"0.42.0","text":"<ul> <li>Add dependencies with <code>yield</code>, a.k.a. exit steps, context managers, cleanup, teardown, ...<ul> <li>This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.</li> <li>Dependencies with <code>yield</code> can be normal or <code>async</code>, ReadyAPI will run normal dependencies in a threadpool.</li> <li>They can be combined with normal dependencies.</li> <li>It's possible to have arbitrary trees/levels of dependencies with <code>yield</code> and exit steps are handled in the correct order automatically.</li> <li>It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:<ul> <li><code>async-exit-stack</code></li> <li><code>async-generator</code></li> </ul> </li> <li>New docs at Dependencies with <code>yield</code>.</li> <li>Updated database docs SQL (Relational) Databases: Main ReadyAPI app.</li> <li>PR #595.</li> </ul> </li> <li>Fix <code>sitemap.xml</code> in website. PR #598 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0410","title":"0.41.0","text":"<ul> <li>Upgrade required Starlette to <code>0.12.9</code>, the new range is <code>&gt;=0.12.9,&lt;=0.12.9</code>.<ul> <li>Add <code>State</code> to ReadyAPI apps at <code>app.state</code>.</li> <li>PR #593.</li> </ul> </li> <li>Improve handling of custom classes for <code>Request</code>s and <code>APIRoute</code>s.<ul> <li>This helps to more easily solve use cases like:<ul> <li>Reading a body before and/or after a request (equivalent to a middleware).</li> <li>Run middleware-like code only for a subset of path operations.</li> <li>Process a request before passing it to a path operation function. E.g. decompressing, deserializing, etc.</li> <li>Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata.</li> </ul> </li> <li>New docs section: Custom Request and APIRoute class.</li> <li>PR #589 by @dmontagu.</li> </ul> </li> <li>Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0400","title":"0.40.0","text":"<ul> <li>Add notes to docs about installing <code>python-multipart</code> when using forms. PR #574 by @sliptonic.</li> <li>Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu.</li> <li>Add support for truncating docstrings from path operation functions.<ul> <li>New docs at Advanced description from docstring.</li> <li>PR #556 by @svalouch.</li> </ul> </li> <li>Fix <code>DOCTYPE</code> in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21.</li> <li>Fix handling <code>4XX</code> responses overriding default <code>422</code> validation error responses. PR #517 by @tsouvarev.</li> <li>Fix typo in documentation for Simple HTTP Basic Auth. PR #514 by @prostomarkeloff.</li> <li>Fix incorrect documentation example in first steps. PR #511 by @IgnatovFedor.</li> <li>Add support for Swagger UI initOauth settings with the parameter <code>swagger_ui_init_oauth</code>. PR #499 by @zamiramir.</li> </ul>"},{"location":"release-notes/#0390","title":"0.39.0","text":"<ul> <li>Allow path parameters to have default values (e.g. <code>None</code>) and discard them instead of raising an error.<ul> <li>This allows declaring a parameter like <code>user_id: str = None</code> that can be taken from a query parameter, but the same path operation can be included in a router with a path <code>/users/{user_id}</code>, in which case will be taken from the path and will be required.</li> <li>PR #464 by @jonathanunderwood.</li> </ul> </li> <li>Add support for setting a <code>default_response_class</code> in the <code>ReadyAPI</code> instance or in <code>include_router</code>. Initial PR #467 by @toppk.</li> <li>Add support for type annotations using strings and <code>from __future__ import annotations</code>. PR #451 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0381","title":"0.38.1","text":"<ul> <li>Fix incorrect <code>Request</code> class import. PR #493 by @kamalgill.</li> </ul>"},{"location":"release-notes/#0380","title":"0.38.0","text":"<ul> <li>Add recent articles to External Links and recent opinions. PR #490.</li> <li>Upgrade support range for Starlette to include <code>0.12.8</code>. The new range is <code>&gt;=0.11.1,&lt;=0.12.8\"</code>. PR #477 by @dmontagu.</li> <li>Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0370","title":"0.37.0","text":"<ul> <li>Add support for custom route classes for advanced use cases. PR #468 by @dmontagu.</li> <li>Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje.</li> <li>Fix security issue: when returning a sub-class of a response model and using <code>skip_defaults</code> it could leak information. PR #485 by @dmontagu.</li> <li>Enable tests for Python 3.8-dev. PR #465 by @Jamim.</li> <li>Add support and tests for Pydantic dataclasses in <code>response_model</code>. PR #454 by @dconathan.</li> <li>Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa.</li> <li>Use the <code>media_type</code> parameter in <code>Body()</code> params to set the media type in OpenAPI for <code>requestBody</code>. PR #439 by @divums.</li> <li>Add article Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann. PR #438 by @naxty.</li> <li>Allow setting custom <code>422</code> (validation error) response/schema in OpenAPI.<ul> <li>And use media type from response class instead of fixed <code>application/json</code> (the default).</li> <li>PR #437 by @divums.</li> </ul> </li> <li>Fix using <code>\"default\"</code> extra response with status codes at the same time. PR #489.</li> <li>Allow additional responses to use status code ranges (like <code>5XX</code> and <code>4XX</code>) and <code>\"default\"</code>. PR #435 by @divums.</li> </ul>"},{"location":"release-notes/#0360","title":"0.36.0","text":"<ul> <li>Fix implementation for <code>skip_defaults</code> when returning a Pydantic model. PR #422 by @dmontagu.</li> <li>Fix OpenAPI generation when using the same dependency in multiple places for the same path operation. PR #417 by @dmontagu.</li> <li>Allow having empty paths in path operations used with <code>include_router</code> and a <code>prefix</code>.<ul> <li>This allows having a router for <code>/cats</code> and all its path operations, while having one of them for <code>/cats</code>.</li> <li>Now it doesn't have to be only <code>/cats/</code> (with a trailing slash).</li> <li>To use it, declare the path in the path operation as the empty string (<code>\"\"</code>).</li> <li>PR #415 by @vitalik.</li> </ul> </li> <li>Fix mypy error after merging PR #415. PR #462.</li> </ul>"},{"location":"release-notes/#0350","title":"0.35.0","text":"<ul> <li>Fix typo in routing <code>assert</code>. PR #419 by @pablogamboa.</li> <li>Fix typo in docs. PR #411 by @bronsen.</li> <li>Fix parsing a body type declared with <code>Union</code>. PR #400 by @koxudaxi.</li> </ul>"},{"location":"release-notes/#0340","title":"0.34.0","text":"<ul> <li> <p>Upgrade Starlette supported range to include the latest <code>0.12.7</code>. The new range is <code>0.11.1,&lt;=0.12.7</code>. PR #367 by @dedsm.</p> </li> <li> <p>Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu. PR #385.</p> </li> </ul>"},{"location":"release-notes/#0330","title":"0.33.0","text":"<ul> <li>Upgrade Pydantic version to <code>0.30.0</code>. PR #384 by @jekirl.</li> </ul>"},{"location":"release-notes/#0320","title":"0.32.0","text":"<ul> <li> <p>Fix typo in docs for features. PR #380 by @MartinoMensio.</p> </li> <li> <p>Fix source code <code>limit</code> for example in Query Parameters. PR #366 by @Smashman.</p> </li> <li> <p>Update wording in docs about OAuth2 scopes. PR #371 by @cjw296.</p> </li> <li> <p>Update docs for <code>Enum</code>s to inherit from <code>str</code> and improve Swagger UI rendering. PR #351.</p> </li> <li> <p>Fix regression, add Swagger UI deep linking again. PR #350.</p> </li> <li> <p>Add test for having path templates in <code>prefix</code> of <code>.include_router</code>. PR #349.</p> </li> <li> <p>Add note to docs: Include the same router multiple times with different <code>prefix</code>. PR #348.</p> </li> <li> <p>Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies.</p> <ul> <li>Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules.</li> <li>The same new ID generation applies to response models.</li> <li>This also changes the generated title for those models.</li> <li>Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file).</li> <li>This also adds the possibility of using <code>.include_router()</code> with the same <code>APIRouter</code> multiple  times, with different prefixes, e.g. <code>/api/v2</code> and <code>/api/latest</code>, and it will now work correctly.</li> <li>PR #347.</li> </ul> </li> </ul>"},{"location":"release-notes/#0310","title":"0.31.0","text":"<ul> <li>Upgrade Pydantic supported version to <code>0.29.0</code>.<ul> <li>New supported version range is <code>\"pydantic &gt;=0.28,&lt;=0.29.0\"</code>.</li> <li>This adds support for Pydantic Generic Models, kudos to @dmontagu.</li> <li>PR #344.</li> </ul> </li> </ul>"},{"location":"release-notes/#0301","title":"0.30.1","text":"<ul> <li> <p>Add section in docs about External Links and Articles. PR #341.</p> </li> <li> <p>Remove <code>Pipfile.lock</code> from the repository as it is only used by ReadyAPI contributors (developers of ReadyAPI itself). See the PR for more details. PR #340.</p> </li> <li> <p>Update section about Help ReadyAPI - Get Help. PR #339.</p> </li> <li> <p>Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338.</p> </li> <li> <p>Update and clarify SQL tutorial with SQLAlchemy. PR #331 by @mariacamilagl.</p> </li> <li> <p>Add SQLite online viewers to the docs. PR #330 by @cyrilbois.</p> </li> </ul>"},{"location":"release-notes/#0300","title":"0.30.0","text":"<ul> <li> <p>Add support for Pydantic's ORM mode:</p> <ul> <li>Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases.</li> <li>The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using <code>@property</code> decorators) and several other use cases.</li> <li>This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other.</li> <li>If your path operations return an arbitrary object with attributes (e.g. <code>my_item.name</code> instead of <code>my_item[\"name\"]</code>) AND you use a <code>response_model</code>, make sure to update the Pydantic models with <code>orm_mode = True</code> as described in the docs (link above).</li> <li>New documentation about receiving plain <code>dict</code>s as request bodies: Bodies of arbitrary <code>dict</code>s.</li> <li>New documentation about returning arbitrary <code>dict</code>s in responses: Response with arbitrary <code>dict</code>.</li> <li>Technical Details:<ul> <li>When declaring a <code>response_model</code> it is used directly to generate the response content, from whatever was returned from the path operation function.</li> <li>Before this, the return content was first passed through <code>jsonable_encoder</code> to ensure it was a \"jsonable\" object, like a <code>dict</code>, instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use <code>orm_mode = True</code>.</li> <li>If you don't have a <code>response_model</code>, the return object will still be passed through <code>jsonable_encoder</code> first.</li> <li>When a <code>response_model</code> is declared, the same <code>response_model</code> type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic <code>Field</code> with all the submodels cloned as well).</li> <li>This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the <code>response_model</code> (e.g. you return a <code>UserInDB</code> that inherits from <code>User</code> but contains extra fields, like <code>hashed_password</code>, and <code>User</code> is used in the <code>response_model</code>), it would still pass the validation (because <code>UserInDB</code> is a subclass of <code>User</code>) and the object would be returned as-is, including the <code>hashed_password</code>. To fix this, the declared <code>response_model</code> is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a <code>List[Item]</code>), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned <code>response_model</code>. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned <code>response_model</code>, containing only the declared fields as normally.</li> </ul> </li> <li>PR #322.</li> </ul> </li> <li> <p>Remove/clean unused RegEx code in routing. PR #314 by @dmontagu.</p> </li> <li> <p>Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao.</p> </li> <li> <p>Upgrade Pydantic support to <code>0.28</code>. PR #320 by @jekirl.</p> </li> </ul>"},{"location":"release-notes/#0291","title":"0.29.1","text":"<ul> <li> <p>Fix handling an empty-body request with a required body param. PR #311.</p> </li> <li> <p>Fix broken link in docs: Return a Response directly. PR #306 by @dmontagu.</p> </li> <li> <p>Fix docs discrepancy in docs for Response Model. PR #288 by @awiddersheim.</p> </li> </ul>"},{"location":"release-notes/#0290","title":"0.29.0","text":"<ul> <li>Add support for declaring a <code>Response</code> parameter:<ul> <li>This allows declaring:<ul> <li>Response Cookies.</li> <li>Response Headers.</li> <li>An HTTP Status Code different than the default: Response - Change Status Code.</li> </ul> </li> <li>All of this while still being able to return arbitrary objects (<code>dict</code>, DB model, etc).</li> <li>Update attribution to Hug, for inspiring the <code>response</code> parameter pattern.</li> <li>PR #294.</li> </ul> </li> </ul>"},{"location":"release-notes/#0280","title":"0.28.0","text":"<ul> <li> <p>Implement dependency cache per request.</p> <ul> <li>This avoids calling each dependency multiple times for the same request.</li> <li>This is useful while calling external services, performing costly computation, etc.</li> <li>This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with <code>.include_router()</code>) and then it is declared again in a specific path operation, the dependency will be called only once.</li> <li>The cache can be disabled per dependency declaration, using <code>use_cache=False</code> as in <code>Depends(your_dependency, use_cache=False)</code>.</li> <li>Updated docs at: Using the same dependency multiple times.</li> <li>PR #292.</li> </ul> </li> <li> <p>Implement dependency overrides for testing.</p> <ul> <li>This allows using overrides/mocks of dependencies during tests.</li> <li>New docs: Testing Dependencies with Overrides.</li> <li>PR #291.</li> </ul> </li> </ul>"},{"location":"release-notes/#0272","title":"0.27.2","text":"<ul> <li>Fix path and query parameters receiving <code>dict</code> as a valid type. It should be mapped to a body payload. PR #287. Updated docs at: Query parameter list / multiple values with defaults: Using <code>list</code>.</li> </ul>"},{"location":"release-notes/#0271","title":"0.27.1","text":"<ul> <li> <p>Fix <code>auto_error=False</code> handling in <code>HTTPBearer</code> security scheme. Do not <code>raise</code> when there's an incorrect <code>Authorization</code> header if <code>auto_error=False</code>. PR #282.</p> </li> <li> <p>Fix type declaration of <code>HTTPException</code>. PR #279.</p> </li> </ul>"},{"location":"release-notes/#0270","title":"0.27.0","text":"<ul> <li> <p>Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu.</p> </li> <li> <p>Refactor param extraction using Pydantic <code>Field</code>:</p> <ul> <li>Large refactor, improvement, and simplification of param extraction from path operations.</li> <li>Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults.</li> <li>Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values.</li> <li>Add support for type annotations using <code>Optional</code> as in <code>param: Optional[str] = None</code>. New documentation: Optional type declarations.</li> <li>PR #278.</li> </ul> </li> </ul>"},{"location":"release-notes/#0260","title":"0.26.0","text":"<ul> <li> <p>Separate error handling for validation errors.</p> <ul> <li>This will allow developers to customize the exception handlers.</li> <li>Document better how to handle exceptions and use error handlers.</li> <li>Include <code>RequestValidationError</code> and <code>WebSocketRequestValidationError</code> (this last one will be useful once encode/starlette#527 or equivalent is merged).</li> <li>New documentation about exceptions handlers:<ul> <li>Install custom exception handlers.</li> <li>Override the default exception handlers.</li> <li>Reuse ReadyAPI's exception handlers.</li> </ul> </li> <li>PR #273.</li> </ul> </li> <li> <p>Fix support for paths in path parameters without needing explicit <code>Path(...)</code>.</p> <ul> <li>PR #256.</li> <li>Documented in PR #272 by @wshayes.</li> <li>New documentation at: Path Parameters containing paths.</li> </ul> </li> <li> <p>Update docs for testing ReadyAPI. Include using <code>POST</code>, sending JSON, testing headers, etc. New documentation: Testing. PR #271.</p> </li> <li> <p>Fix type declaration of <code>response_model</code> to allow generic Python types as <code>List[Model]</code>. Mainly to fix <code>mypy</code> for users. PR #266.</p> </li> </ul>"},{"location":"release-notes/#0250","title":"0.25.0","text":"<ul> <li> <p>Add support for Pydantic's <code>include</code>, <code>exclude</code>, <code>by_alias</code>.</p> <ul> <li>Update documentation: Response Model.</li> <li>Add docs for: Body - updates, using Pydantic's <code>skip_defaults</code>.</li> <li>Add method consistency tests.</li> <li>PR #264.</li> </ul> </li> <li> <p>Add <code>CONTRIBUTING.md</code> file to GitHub, to help new contributors. PR #255 by @wshayes.</p> </li> <li> <p>Add support for Pydantic's <code>skip_defaults</code>:</p> <ul> <li>There's a new path operation decorator parameter <code>response_model_skip_defaults</code>.<ul> <li>The name of the parameter will most probably change in a future version to <code>response_skip_defaults</code>, <code>model_skip_defaults</code> or something similar.</li> </ul> </li> <li>New documentation section about using <code>response_model_skip_defaults</code>.</li> <li>PR #248 by @wshayes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0240","title":"0.24.0","text":"<ul> <li> <p>Add support for WebSockets with dependencies and parameters.</p> <ul> <li>Support included for:<ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> <li>...as these are compatible with the WebSockets protocol (e.g. <code>Body</code> is not).</li> </ul> </li> <li>Updated documentation for WebSockets.</li> <li>PR #178 by @jekirl.</li> </ul> </li> <li> <p>Upgrade the compatible version of Pydantic to <code>0.26.0</code>.</p> <ul> <li>This includes JSON Schema support for IP address and network objects, bug fixes, and other features.</li> <li>PR #247 by @euri10.</li> </ul> </li> </ul>"},{"location":"release-notes/#0230","title":"0.23.0","text":"<ul> <li> <p>Upgrade the compatible version of Starlette to <code>0.12.0</code>.</p> <ul> <li>This includes support for ASGI 3 (the latest version of the standard).</li> <li>It's now possible to use Starlette's <code>StreamingResponse</code> with iterators, like file-like objects (as those returned by <code>open()</code>).</li> <li>It's now possible to use the low level utility <code>iterate_in_threadpool</code> from <code>starlette.concurrency</code> (for advanced scenarios).</li> <li>PR #243.</li> </ul> </li> <li> <p>Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add <code>{your_origin}/docs/oauth2-redirect</code> to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc).</p> <ul> <li>For example, during development, it could be <code>http://localhost:8000/docs/oauth2-redirect</code>.</li> <li>Keep in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at <code>https://yourdomain.com/login/callback</code>.</li> <li>This is only to allow delegated authentication in the API docs with Swagger UI.</li> <li>PR #198 by @steinitzu.</li> </ul> </li> <li> <p>Make Swagger UI and ReDoc route handlers (path operations) be <code>async</code> functions instead of lambdas to improve performance. PR #241 by @Trim21.</p> </li> <li> <p>Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0220","title":"0.22.0","text":"<ul> <li> <p>Add support for <code>dependencies</code> parameter:</p> <ul> <li>A parameter in path operation decorators, for dependencies that should be executed but the return value is not important or not used in the path operation function.</li> <li>A parameter in the <code>.include_router()</code> method of ReadyAPI applications and routers, to include dependencies that should be executed in each path operation in a router.<ul> <li>This is useful, for example, to require authentication or permissions in specific group of path operations.</li> <li>Different <code>dependencies</code> can be applied to different routers.</li> </ul> </li> <li>These <code>dependencies</code> are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined.</li> <li>Dependencies declared in a router are executed first, then the ones defined in path operation decorators, and then the ones declared in normal parameters. They are all combined and executed.</li> <li>All this also supports using <code>Security</code> with <code>scopes</code> in those <code>dependencies</code> parameters, for more advanced OAuth 2.0 security scenarios with scopes.</li> <li>New documentation about dependencies in path operation decorators.</li> <li>New documentation about dependencies in the <code>include_router()</code> method.</li> <li>PR #235.</li> </ul> </li> <li> <p>Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using <code>path</code> convertors, to take a whole path as a parameter, like <code>/some/url/{p:path}</code>. PR #234 by @euri10.</p> </li> <li> <p>Make default parameter utilities exported from <code>readyapi</code> be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix <code>mypy</code> errors in ReadyAPI's users' code. Applies to <code>Path</code>, <code>Query</code>, <code>Header</code>, <code>Cookie</code>, <code>Body</code>, <code>Form</code>, <code>File</code>, <code>Depends</code>, and <code>Security</code>. PR #226 and PR #231.</p> </li> <li> <p>Separate development scripts <code>test.sh</code>, <code>lint.sh</code>, and <code>format.sh</code>. PR #232.</p> </li> <li> <p>Re-enable <code>black</code> formatting checks for Python 3.7. PR #229 by @zamiramir.</p> </li> </ul>"},{"location":"release-notes/#0210","title":"0.21.0","text":"<ul> <li> <p>On body parsing errors, raise <code>from</code> previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm.</p> </li> <li> <p>Use Python logger named \"<code>readyapi</code>\" instead of root logger. PR #222 by @euri10.</p> </li> <li> <p>Upgrade Pydantic to version 0.25. PR #225 by @euri10.</p> </li> <li> <p>Fix typo in routing. PR #221 by @djlambert.</p> </li> </ul>"},{"location":"release-notes/#0201","title":"0.20.1","text":"<ul> <li> <p>Add typing information to package including file <code>py.typed</code>. PR #209 by @meadsteve.</p> </li> <li> <p>Add ReadyAPI bot for Gitter. To automatically announce new releases. PR #189.</p> </li> </ul>"},{"location":"release-notes/#0200","title":"0.20.0","text":"<ul> <li> <p>Upgrade OAuth2:</p> <ul> <li>Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 <code>UNAUTHORIZED</code>, with <code>WWW-Authenticate</code> headers.</li> <li>Update, simplify, and improve all the security docs.</li> <li>Add new <code>scope_str</code> to <code>SecurityScopes</code> and update docs: OAuth2 scopes.</li> <li>Update docs, images, tests.</li> <li>PR #188.</li> </ul> </li> <li> <p>Include Hypercorn as an alternative ASGI server in the docs. PR #187.</p> </li> <li> <p>Add docs for Static Files and Templates. PR #186.</p> </li> <li> <p>Add docs for handling Response Cookies and Response Headers. PR #185.</p> </li> <li> <p>Fix typos in docs. PR #176 by @chdsbd.</p> </li> </ul>"},{"location":"release-notes/#0190","title":"0.19.0","text":"<ul> <li> <p>Rename path operation decorator parameter <code>content_type</code> to <code>response_class</code>. PR #183.</p> </li> <li> <p>Add docs:</p> <ul> <li>How to use the <code>jsonable_encoder</code> in JSON compatible encoder.</li> <li>How to Return a Response directly.</li> <li>Update how to use a Custom Response Class.</li> <li>PR #184.</li> </ul> </li> </ul>"},{"location":"release-notes/#0180","title":"0.18.0","text":"<ul> <li> <p>Add docs for HTTP Basic Auth. PR #177.</p> </li> <li> <p>Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175.</p> </li> <li> <p>Update dependencies for security. PR #174.</p> </li> <li> <p>Add docs for Middleware. PR #173.</p> </li> </ul>"},{"location":"release-notes/#0170","title":"0.17.0","text":"<ul> <li> <p>Make Flit publish from CI. PR #170.</p> </li> <li> <p>Add documentation about handling CORS (Cross-Origin Resource Sharing). PR #169.</p> </li> <li> <p>By default, encode by alias. This allows using Pydantic <code>alias</code> parameters working by default. PR #168.</p> </li> </ul>"},{"location":"release-notes/#0160","title":"0.16.0","text":"<ul> <li> <p>Upgrade path operation <code>docstring</code> parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration. PR #163.</p> </li> <li> <p>Refactor internal usage of Pydantic to use correct data types. PR #164.</p> </li> <li> <p>Upgrade Pydantic to version <code>0.23</code>. PR #160 by @euri10.</p> </li> <li> <p>Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels.</p> </li> <li> <p>Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto.</p> </li> </ul>"},{"location":"release-notes/#0150","title":"0.15.0","text":"<ul> <li> <p>Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads. PR #158.</p> </li> <li> <p>Add docs for: Additional Status Codes. PR #156.</p> </li> </ul>"},{"location":"release-notes/#0140","title":"0.14.0","text":"<ul> <li> <p>Improve automatically generated names of path operations in OpenAPI (in API docs). A function <code>read_items</code> instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155.</p> </li> <li> <p>Add docs for: Testing ReadyAPI. PR #151.</p> </li> <li> <p>Update <code>/docs</code> Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes.</p> </li> <li> <p>Update development dependencies, <code>Pipfile.lock</code>. PR #150.</p> </li> <li> <p>Include Falcon and Hug in: Alternatives, Inspiration and Comparisons.</p> </li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Improve/upgrade OAuth2 scopes support with <code>SecurityScopes</code>:<ul> <li><code>SecurityScopes</code> can be declared as a parameter like <code>Request</code>, to get the scopes of all super-dependencies/dependants.</li> <li>Improve <code>Security</code> handling, merging scopes when declaring <code>SecurityScopes</code>.</li> <li>Allow using <code>SecurityBase</code> (like <code>OAuth2</code>) classes with <code>Depends</code> and still document them. <code>Security</code> now is needed only to declare <code>scopes</code>.</li> <li>Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens.</li> <li>New docs about: OAuth2 scopes.</li> <li>PR #141.</li> </ul> </li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li> <p>Fix bug: handling additional <code>responses</code> in <code>APIRouter.include_router()</code>. PR #140.</p> </li> <li> <p>Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari.</p> </li> <li> <p>Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud.</p> </li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Add additional <code>responses</code> parameter to path operation decorators to extend responses in OpenAPI (and API docs).<ul> <li>It also allows extending existing responses generated from <code>response_model</code>, declare other media types (like images), etc.</li> <li>The new documentation is here: Additional Responses.</li> <li><code>responses</code> can also be added to <code>.include_router()</code>, the updated docs are here: Bigger Applications.</li> <li>PR #97 originally initiated by @barsi.</li> </ul> </li> <li>Update <code>scripts/test-cov-html.sh</code> to allow passing extra parameters like <code>-vv</code>, for development.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li> <p>Add <code>auto_error</code> parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134.</p> </li> <li> <p>Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri.</p> </li> <li> <p>Fix duplicate dependency in <code>pyproject.toml</code>. PR #128 by @zxalif.</p> </li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li> <p>Add Gitter chat, badge, links, etc. https://gitter.im/khulnasoft/readyapi . PR #117.</p> </li> <li> <p>Add docs about Extending OpenAPI. PR #126.</p> </li> <li> <p>Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed.</p> </li> <li> <p>Fix duplicated param variable creation. PR #123 by @yihuang.</p> </li> <li> <p>Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders.</p> </li> <li> <p>Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear.</p> </li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li> <p>Fix OpenAPI (JSON Schema) for declarations of Python <code>Union</code> (JSON Schema <code>additionalProperties</code>). PR #121.</p> </li> <li> <p>Update Background Tasks with a note on Celery.</p> </li> <li> <p>Document response models using unions and lists, updated at: Extra Models. PR #108.</p> </li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add docs and tests for encode/databases. New docs at: Async SQL (Relational) Databases. PR #107.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li> <p>Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here. PR #103.</p> </li> <li> <p>Add support for <code>.websocket_route()</code> in <code>APIRouter</code>. PR #100 by @euri10.</p> </li> <li> <p>New docs section about Events: startup - shutdown. PR #99.</p> </li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Document receiving Multiple values with the same query parameter and Duplicate headers. PR #95.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li> <p>Upgrade compatible Pydantic version to <code>0.21.0</code>. PR #90.</p> </li> <li> <p>Add documentation for: Application Configuration.</p> </li> <li> <p>Fix typo in docs. PR #76 by @matthewhegarty.</p> </li> <li> <p>Fix link in \"Deployment\" to \"Bigger Applications\".</p> </li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li> <p>Make development scripts executable. PR #76 by @euri10.</p> </li> <li> <p>Add support for adding <code>tags</code> in <code>app.include_router()</code>. PR #55 by @euri10. Documentation updated in the section: Bigger Applications.</p> </li> <li> <p>Update docs related to Uvicorn to use new <code>--reload</code> option from version <code>0.5.x</code>. PR #74.</p> </li> <li> <p>Update <code>isort</code> imports and scripts to be compatible with newer versions. PR #75.</p> </li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":"<ul> <li> <p>Update technical details about <code>async def</code> handling with respect to previous frameworks. PR #64 by @haizaar.</p> </li> <li> <p>Add deployment documentation for Docker in Raspberry Pi and other architectures.</p> </li> <li> <p>Trigger Docker images build on Travis CI automatically. PR #65.</p> </li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":"<ul> <li>Add support for <code>UploadFile</code> in <code>File</code> parameter annotations.<ul> <li>This includes a file-like interface.</li> <li>Here's the updated documentation for declaring <code>File</code> parameters with <code>UploadFile</code>.</li> <li>And here's the updated documentation for using <code>Form</code> parameters mixed with <code>File</code> parameters, supporting <code>bytes</code> and <code>UploadFile</code> at the same time.</li> <li>PR #63.</li> </ul> </li> </ul>"},{"location":"release-notes/#064","title":"0.6.4","text":"<ul> <li> <p>Add technical details about <code>async def</code> handling to docs. PR #61.</p> </li> <li> <p>Add docs for Debugging ReadyAPI applications in editors.</p> </li> <li> <p>Clarify Bigger Applications deployed with Docker.</p> </li> <li> <p>Fix typos in docs.</p> </li> <li> <p>Add section about History, Design and Future.</p> </li> <li> <p>Add docs for using WebSockets with ReadyAPI. PR #62.</p> </li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":"<ul> <li>Add Favicons to docs. PR #53.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":"<ul> <li> <p>Introduce new project generator based on ReadyAPI and PostgreSQL: https://github.com/khulnasoft/full-stack-readyapi-postgresql. PR #52.</p> </li> <li> <p>Update SQL tutorial with SQLAlchemy, using <code>Depends</code> to improve editor support and reduce code repetition. PR #52.</p> </li> <li> <p>Improve middleware naming in tutorial for SQL with SQLAlchemy https://readyapi.khulnasoft.com/tutorial/sql-databases/.</p> </li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":"<ul> <li>Add docs for GraphQL: https://readyapi.khulnasoft.com/advanced/graphql/. PR #48.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<ul> <li> <p>Update SQL with SQLAlchemy tutorial at https://readyapi.khulnasoft.com/tutorial/sql-databases/ using the new official <code>request.state</code>. PR #45.</p> </li> <li> <p>Upgrade Starlette to version <code>0.11.1</code> and add required compatibility changes. PR #44.</p> </li> </ul>"},{"location":"release-notes/#051","title":"0.5.1","text":"<ul> <li> <p>Add section about helping and getting help with ReadyAPI.</p> </li> <li> <p>Add note about path operations order in docs.</p> </li> <li> <p>Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41.</p> </li> <li> <p>Add Development - Contributing section to the docs. PR #42.</p> </li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":"<ul> <li> <p>Add new <code>HTTPException</code> with support for custom headers. With new documentation for handling errors at: https://readyapi.khulnasoft.com/tutorial/handling-errors/. PR #35.</p> </li> <li> <p>Add documentation to use Starlette <code>Request</code> object directly. Check #25 by @euri10.</p> </li> <li> <p>Add issue templates to simplify reporting bugs, getting help, etc: #34.</p> </li> <li> <p>Update example for the SQLAlchemy tutorial at https://readyapi.khulnasoft.com/tutorial/sql-databases/ using middleware and database session attached to request.</p> </li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Add <code>openapi_prefix</code>, support for reverse proxy and mounting sub-applications. See the docs at https://readyapi.khulnasoft.com/advanced/sub-applications-proxy/: #26 by @kabirkhan.</p> </li> <li> <p>Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite.</p> </li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy: #30.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Fix <code>jsonable_encoder</code> for Pydantic models with <code>Config</code> but without <code>json_encoders</code>: #29.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li> <p>Fix typos in Security section: #24 by @kkinder.</p> </li> <li> <p>Add support for Pydantic custom JSON encoders: #21 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0119","title":"0.1.19","text":"<ul> <li>Upgrade Starlette version to the current latest <code>0.10.1</code>: #17 by @euri10.</li> </ul>"}]}