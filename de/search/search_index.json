{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadyAPI","text":"<p> ReadyAPI Framework, hochperformant, leicht zu erlernen, schnell zu programmieren, einsatzbereit </p> <p> </p> <p>Dokumentation: https://readyapi.github.io</p> <p>Quellcode: https://github.com/readyapi/readyapi</p> <p>ReadyAPI ist ein modernes, schnelles (hoch performantes) Webframework zur Erstellung von APIs mit Python auf Basis von Standard-Python-Typhinweisen.</p> <p>Seine Schl\u00fcssel-Merkmale sind:</p> <ul> <li> <p>Schnell: Sehr hohe Leistung, auf Augenh\u00f6he mit NodeJS und Go (Dank Starlette und Pydantic). Eines der schnellsten verf\u00fcgbaren Python-Frameworks.</p> </li> <li> <p>Schnell zu programmieren: Erh\u00f6hen Sie die Geschwindigkeit bei der Entwicklung von Funktionen um etwa 200 % bis 300 %. *</p> </li> <li>Weniger Bugs: Verringern Sie die von Menschen (Entwicklern) verursachten Fehler um etwa 40 %. *</li> <li>Intuitiv: Exzellente Editor-Unterst\u00fctzung. Code-Vervollst\u00e4ndigung \u00fcberall. Weniger Debuggen.</li> <li>Einfach: So konzipiert, dass es einfach zu benutzen und zu erlernen ist. Weniger Zeit f\u00fcr das Lesen der Dokumentation.</li> <li>Kurz: Minimieren Sie die Verdoppelung von Code. Mehrere Funktionen aus jeder Parameterdeklaration. Weniger Bugs.</li> <li>Robust: Erhalten Sie produktionsreifen Code. Mit automatischer, interaktiver Dokumentation.</li> <li>Standards-basiert: Basierend auf (und vollst\u00e4ndig kompatibel mit) den offenen Standards f\u00fcr APIs: OpenAPI (fr\u00fcher bekannt als Swagger) und JSON Schema.</li> </ul> <p>* Sch\u00e4tzung auf Basis von Tests in einem internen Entwicklungsteam, das Produktionsanwendungen erstellt.</p>"},{"location":"#sponsoren","title":"Sponsoren","text":"<p>Andere Sponsoren</p>"},{"location":"#meinungen","title":"Meinungen","text":"<p>\u201e[...] Ich verwende ReadyAPI heutzutage sehr oft. [...] Ich habe tats\u00e4chlich vor, es f\u00fcr alle ML-Dienste meines Teams bei Microsoft zu verwenden. Einige davon werden in das Kernprodukt Windows und einige Office-Produkte integriert.\u201c</p> Kabir Khan - Microsoft (Ref) <p>\u201eWir haben die ReadyAPI-Bibliothek genommen, um einen REST-Server zu erstellen, der abgefragt werden kann, um Vorhersagen zu erhalten. [f\u00fcr Ludwig]\u201c</p> Piero Molino, Yaroslav Dudin, und Sai Sumanth Miryala - Uber (Ref) <p>\u201eNetflix freut sich, die Open-Source-Ver\u00f6ffentlichung unseres Krisenmanagement-Orchestrierung-Frameworks bekannt zu geben: Dispatch! [erstellt mit ReadyAPI]\u201c</p> Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (Ref) <p>\u201eIch bin \u00fcbergl\u00fccklich mit ReadyAPI. Es macht so viel Spa\u00df!\u201c</p> Brian Okken - Host des Python Bytes Podcast (Ref) <p>\u201eEhrlich, was Du gebaut hast, sieht super solide und poliert aus. In vielerlei Hinsicht ist es so, wie ich Hug haben wollte \u2013 es ist wirklich inspirierend, jemanden so etwas bauen zu sehen.\u201c</p> Timothy Crosley - Autor von Hug (Ref) <p>\u201eWenn Sie ein modernes Framework zum Erstellen von REST-APIs erlernen m\u00f6chten, schauen Sie sich ReadyAPI an. [...] Es ist schnell, einfach zu verwenden und leicht zu erlernen [...]\u201c</p> <p>\u201eWir haben zu ReadyAPI f\u00fcr unsere APIs gewechselt [...] Ich denke, es wird Ihnen gefallen [...]\u201c</p> Ines Montani - Matthew Honnibal - Gr\u00fcnder von Explosion AI - Autoren von spaCy (Ref) - (Ref) <p>\u201eFalls irgendjemand eine Produktions-Python-API erstellen m\u00f6chte, kann ich ReadyAPI w\u00e4rmstens empfehlen. Es ist wundersch\u00f6n konzipiert, einfach zu verwenden und hoch skalierbar; es ist zu einer Schl\u00fcsselkomponente in unserer API-First-Entwicklungsstrategie geworden und treibt viele Automatisierungen und Dienste an, wie etwa unseren virtuellen TAC-Ingenieur.\u201c</p> Deon Pillsbury - Cisco (Ref)"},{"location":"#cligenius-das-readyapi-der-clis","title":"Cligenius, das ReadyAPI der CLIs","text":"<p>Wenn Sie eine CLI-Anwendung f\u00fcr das Terminal erstellen, anstelle einer Web-API, schauen Sie sich Cligenius an.</p> <p>Cligenius ist die kleine Schwester von ReadyAPI. Und es soll das ReadyAPI der CLIs sein. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#anforderungen","title":"Anforderungen","text":"<p>ReadyAPI steht auf den Schultern von Giganten:</p> <ul> <li>Starlette f\u00fcr die Webanteile.</li> <li>Pydantic f\u00fcr die Datenanteile.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install readyapi\n\n---&gt; 100%\n</code></pre> <p>Sie ben\u00f6tigen au\u00dferdem einen ASGI-Server. F\u00fcr die Produktumgebung beispielsweise Uvicorn oder Hypercorn.</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"#beispiel","title":"Beispiel","text":""},{"location":"#erstellung","title":"Erstellung","text":"<ul> <li>Erstellen Sie eine Datei <code>main.py</code> mit:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> Oder verwenden Sie <code>async def</code> ... <p>Wenn Ihr Code <code>async</code> / <code>await</code> verwendet, benutzen Sie <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>Anmerkung:</p> <p>Wenn Sie das nicht kennen, schauen Sie sich den Abschnitt \u201eIn Eile?\u201c \u00fcber <code>async</code> und <code>await</code> in der Dokumentation an.</p>"},{"location":"#starten","title":"Starten","text":"<p>F\u00fchren Sie den Server aus:</p> <pre><code>$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> Was macht der Befehl <code>uvicorn main:app --reload</code> ... <p>Der Befehl <code>uvicorn main:app</code> bezieht sich auf:</p> <ul> <li><code>main</code>: die Datei <code>main.py</code> (das Python-\u201eModul\u201c).</li> <li><code>app</code>: das Objekt, das innerhalb von <code>main.py</code> mit der Zeile <code>app = ReadyAPI()</code> erzeugt wurde.</li> <li><code>--reload</code>: l\u00e4sst den Server nach Code\u00e4nderungen neu starten. Tun Sie das nur w\u00e4hrend der Entwicklung.</li> </ul>"},{"location":"#testen","title":"Testen","text":"<p>\u00d6ffnen Sie Ihren Browser unter http://127.0.0.1:8000/items/5?q=somequery.</p> <p>Sie erhalten die JSON-Response:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>Damit haben Sie bereits eine API erstellt, welche:</p> <ul> <li>HTTP-Anfragen auf den Pfaden <code>/</code> und <code>/items/{item_id}</code> entgegennimmt.</li> <li>Beide Pfade erhalten <code>GET</code> Operationen (auch bekannt als HTTP Methoden).</li> <li>Der Pfad <code>/items/{item_id}</code> hat einen Pfadparameter <code>item_id</code>, der ein <code>int</code> sein sollte.</li> <li>Der Pfad <code>/items/{item_id}</code> hat einen optionalen <code>str</code> Query Parameter <code>q</code>.</li> </ul>"},{"location":"#interaktive-api-dokumentation","title":"Interaktive API-Dokumentation","text":"<p>Gehen Sie nun auf http://127.0.0.1:8000/docs.</p> <p>Sie sehen die automatische interaktive API-Dokumentation (bereitgestellt von Swagger UI):</p> <p></p>"},{"location":"#alternative-api-dokumentation","title":"Alternative API-Dokumentation","text":"<p>Gehen Sie jetzt auf http://127.0.0.1:8000/redoc.</p> <p>Sie sehen die alternative automatische Dokumentation (bereitgestellt von ReDoc):</p> <p></p>"},{"location":"#beispiel-aktualisierung","title":"Beispiel Aktualisierung","text":"<p>\u00c4ndern Sie jetzt die Datei <code>main.py</code>, um den Body einer <code>PUT</code>-Anfrage zu empfangen.</p> <p>Deklarieren Sie den Body mithilfe von Standard-Python-Typen, dank Pydantic.</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>Der Server sollte automatisch neu geladen werden (weil Sie oben <code>--reload</code> zum Befehl <code>uvicorn</code> hinzugef\u00fcgt haben).</p>"},{"location":"#aktualisierung-der-interaktiven-api-dokumentation","title":"Aktualisierung der interaktiven API-Dokumentation","text":"<p>Gehen Sie jetzt auf http://127.0.0.1:8000/docs.</p> <ul> <li>Die interaktive API-Dokumentation wird automatisch aktualisiert, einschlie\u00dflich des neuen Bodys:</li> </ul> <p></p> <ul> <li>Klicken Sie auf die Taste \u201eTry it out\u201c, damit k\u00f6nnen Sie die Parameter ausf\u00fcllen und direkt mit der API interagieren:</li> </ul> <p></p> <ul> <li>Klicken Sie dann auf die Taste \u201eExecute\u201c, die Benutzeroberfl\u00e4che wird mit Ihrer API kommunizieren, sendet die Parameter, holt die Ergebnisse und zeigt sie auf dem Bildschirm an:</li> </ul> <p></p>"},{"location":"#aktualisierung-der-alternativen-api-dokumentation","title":"Aktualisierung der alternativen API-Dokumentation","text":"<p>Und nun gehen Sie auf http://127.0.0.1:8000/redoc.</p> <ul> <li>Die alternative Dokumentation wird ebenfalls den neuen Abfrageparameter und -inhalt widerspiegeln:</li> </ul> <p></p>"},{"location":"#zusammenfassung","title":"Zusammenfassung","text":"<p>Zusammengefasst deklarieren Sie einmal die Typen von Parametern, Body, etc. als Funktionsparameter.</p> <p>Das machen Sie mit modernen Standard-Python-Typen.</p> <p>Sie m\u00fcssen keine neue Syntax, Methoden oder Klassen einer bestimmten Bibliothek usw. lernen.</p> <p>Nur Standard-Python+.</p> <p>Zum Beispiel f\u00fcr ein <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>oder f\u00fcr ein komplexeres <code>Item</code>-Modell:</p> <pre><code>item: Item\n</code></pre> <p>... und mit dieser einen Deklaration erhalten Sie:</p> <ul> <li>Editor-Unterst\u00fctzung, einschlie\u00dflich:<ul> <li>Code-Vervollst\u00e4ndigung.</li> <li>Typpr\u00fcfungen.</li> </ul> </li> <li>Validierung von Daten:<ul> <li>Automatische und eindeutige Fehler, wenn die Daten ung\u00fcltig sind.</li> <li>Validierung auch f\u00fcr tief verschachtelte JSON-Objekte.</li> </ul> </li> <li>Konvertierung von Eingabedaten: Aus dem Netzwerk kommend, zu Python-Daten und -Typen. Lesen von:<ul> <li>JSON.</li> <li>Pfad-Parametern.</li> <li>Abfrage-Parametern.</li> <li>Cookies.</li> <li>Header-Feldern.</li> <li>Formularen.</li> <li>Dateien.</li> </ul> </li> <li>Konvertierung von Ausgabedaten: Konvertierung von Python-Daten und -Typen zu Netzwerkdaten (als JSON):<ul> <li>Konvertieren von Python-Typen (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, usw.).</li> <li><code>Datetime</code>-Objekte.</li> <li><code>UUID</code>-Objekte.</li> <li>Datenbankmodelle.</li> <li>... und viele mehr.</li> </ul> </li> <li>Automatische interaktive API-Dokumentation, einschlie\u00dflich 2 alternativer Benutzeroberfl\u00e4chen:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Um auf das vorherige Codebeispiel zur\u00fcckzukommen, ReadyAPI wird:</p> <ul> <li>\u00dcberpr\u00fcfen, dass es eine <code>item_id</code> im Pfad f\u00fcr <code>GET</code>- und <code>PUT</code>-Anfragen gibt.</li> <li>\u00dcberpr\u00fcfen, ob die <code>item_id</code> vom Typ <code>int</code> f\u00fcr <code>GET</code>- und <code>PUT</code>-Anfragen ist.<ul> <li>Falls nicht, wird dem Client ein n\u00fctzlicher, eindeutiger Fehler angezeigt.</li> </ul> </li> <li>Pr\u00fcfen, ob es einen optionalen Abfrageparameter namens <code>q</code> (wie in <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) f\u00fcr <code>GET</code>-Anfragen gibt.<ul> <li>Da der <code>q</code>-Parameter mit <code>= None</code> deklariert ist, ist er optional.</li> <li>Ohne das <code>None</code> w\u00e4re er erforderlich (wie der Body im Fall von <code>PUT</code>).</li> </ul> </li> <li>Bei <code>PUT</code>-Anfragen an <code>/items/{item_id}</code> den Body als JSON lesen:<ul> <li>Pr\u00fcfen, ob er ein erforderliches Attribut <code>name</code> hat, das ein <code>str</code> sein muss.</li> <li>Pr\u00fcfen, ob er ein erforderliches Attribut <code>price</code> hat, das ein <code>float</code> sein muss.</li> <li>Pr\u00fcfen, ob er ein optionales Attribut <code>is_offer</code> hat, das ein <code>bool</code> sein muss, falls vorhanden.</li> <li>All dies w\u00fcrde auch f\u00fcr tief verschachtelte JSON-Objekte funktionieren.</li> </ul> </li> <li>Automatisch von und nach JSON konvertieren.</li> <li>Alles mit OpenAPI dokumentieren, welches verwendet werden kann von:<ul> <li>Interaktiven Dokumentationssystemen.</li> <li>Automatisch Client-Code generierenden Systemen f\u00fcr viele Sprachen.</li> </ul> </li> <li>Zwei interaktive Dokumentation-Webschnittstellen direkt zur Verf\u00fcgung stellen.</li> </ul> <p>Wir haben nur an der Oberfl\u00e4che gekratzt, aber Sie bekommen schon eine Vorstellung davon, wie das Ganze funktioniert.</p> <p>Versuchen Sie, diese Zeile zu \u00e4ndern:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>... von:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>... zu:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>... und sehen Sie, wie Ihr Editor die Attribute automatisch ausf\u00fcllt und ihre Typen kennt:</p> <p></p> <p>F\u00fcr ein vollst\u00e4ndigeres Beispiel, mit weiteren Funktionen, siehe das Tutorial - Benutzerhandbuch.</p> <p>Spoiler-Alarm: Das Tutorial - Benutzerhandbuch enth\u00e4lt:</p> <ul> <li>Deklaration von Parametern von anderen verschiedenen Stellen wie: Header-Felder, Cookies, Formularfelder und Dateien.</li> <li>Wie man Validierungseinschr\u00e4nkungen wie <code>maximum_length</code> oder <code>regex</code> setzt.</li> <li>Ein sehr leistungsf\u00e4higes und einfach zu bedienendes System f\u00fcr Dependency Injection.</li> <li>Sicherheit und Authentifizierung, einschlie\u00dflich Unterst\u00fctzung f\u00fcr OAuth2 mit JWT-Tokens und HTTP-Basic-Authentifizierung.</li> <li>Fortgeschrittenere (aber ebenso einfache) Techniken zur Deklaration tief verschachtelter JSON-Modelle (dank Pydantic).</li> <li>GraphQL Integration mit Strawberry und anderen Bibliotheken.</li> <li>Viele zus\u00e4tzliche Funktionen (dank Starlette) wie:<ul> <li>WebSockets</li> <li>extrem einfache Tests auf Basis von <code>httpx</code> und <code>pytest</code></li> <li>CORS</li> <li>Cookie Sessions</li> <li>... und mehr.</li> </ul> </li> </ul>"},{"location":"#performanz","title":"Performanz","text":"<p>Unabh\u00e4ngige TechEmpower-Benchmarks zeigen ReadyAPI-Anwendungen, die unter Uvicorn laufen, als eines der schnellsten verf\u00fcgbaren Python-Frameworks, nur noch hinter Starlette und Uvicorn selbst (intern von ReadyAPI verwendet).</p> <p>Um mehr dar\u00fcber zu erfahren, siehe den Abschnitt Benchmarks.</p>"},{"location":"#optionale-abhangigkeiten","title":"Optionale Abh\u00e4ngigkeiten","text":"<p>Wird von Pydantic verwendet:</p> <ul> <li><code>email-validator</code> - f\u00fcr E-Mail-Validierung.</li> <li><code>pydantic-settings</code> - f\u00fcr die Verwaltung von Einstellungen.</li> <li><code>pydantic-extra-types</code> - f\u00fcr zus\u00e4tzliche Typen, mit Pydantic zu verwenden.</li> </ul> <p>Wird von Starlette verwendet:</p> <ul> <li><code>httpx</code> - erforderlich, wenn Sie den <code>TestClient</code> verwenden m\u00f6chten.</li> <li><code>jinja2</code> - erforderlich, wenn Sie die Standardkonfiguration f\u00fcr Templates verwenden m\u00f6chten.</li> <li><code>python-multipart</code> - erforderlich, wenn Sie Formulare mittels <code>request.form()</code> \u201eparsen\u201c m\u00f6chten.</li> <li><code>itsdangerous</code> - erforderlich f\u00fcr <code>SessionMiddleware</code> Unterst\u00fctzung.</li> <li><code>pyyaml</code> - erforderlich f\u00fcr Starlette's <code>SchemaGenerator</code> Unterst\u00fctzung (Sie brauchen das wahrscheinlich nicht mit ReadyAPI).</li> <li><code>ujson</code> - erforderlich, wenn Sie <code>UJSONResponse</code> verwenden m\u00f6chten.</li> </ul> <p>Wird von ReadyAPI / Starlette verwendet:</p> <ul> <li><code>uvicorn</code> - f\u00fcr den Server, der Ihre Anwendung l\u00e4dt und serviert.</li> <li><code>orjson</code> - erforderlich, wenn Sie <code>ORJSONResponse</code> verwenden m\u00f6chten.</li> </ul> <p>Sie k\u00f6nnen diese alle mit <code>pip install \"readyapi[all]\"</code> installieren.</p>"},{"location":"#lizenz","title":"Lizenz","text":"<p>Dieses Projekt ist unter den Bedingungen der MIT-Lizenz lizenziert.</p>"},{"location":"alternatives/","title":"Alternativen, Inspiration und Vergleiche","text":"<p>Was hat ReadyAPI inspiriert, ein Vergleich zu Alternativen, und was ReadyAPI von diesen gelernt hat.</p>"},{"location":"alternatives/#einfuhrung","title":"Einf\u00fchrung","text":"<p>ReadyAPI w\u00fcrde ohne die fr\u00fchere Arbeit anderer nicht existieren.</p> <p>Es wurden zuvor viele Tools entwickelt, die als Inspiration f\u00fcr seine Entwicklung dienten.</p> <p>Ich habe die Schaffung eines neuen Frameworks viele Jahre lang vermieden. Zuerst habe ich versucht, alle von ReadyAPI abgedeckten Funktionen mithilfe vieler verschiedener Frameworks, Plugins und Tools zu l\u00f6sen.</p> <p>Aber irgendwann gab es keine andere M\u00f6glichkeit, als etwas zu schaffen, das all diese Funktionen bereitstellte, die besten Ideen fr\u00fcherer Tools aufnahm und diese auf die bestm\u00f6gliche Weise kombinierte, wobei Sprachfunktionen verwendet wurden, die vorher noch nicht einmal verf\u00fcgbar waren (Python 3.6+ Typhinweise).</p>"},{"location":"alternatives/#vorherige-tools","title":"Vorherige Tools","text":""},{"location":"alternatives/#django","title":"Django","text":"<p>Es ist das beliebteste Python-Framework und genie\u00dft gro\u00dfes Vertrauen. Es wird zum Aufbau von Systemen wie Instagram verwendet.</p> <p>Ist relativ eng mit relationalen Datenbanken (wie MySQL oder PostgreSQL) gekoppelt, daher ist es nicht sehr einfach, eine NoSQL-Datenbank (wie Couchbase, MongoDB, Cassandra, usw.) als Hauptspeicherengine zu verwenden.</p> <p>Es wurde erstellt, um den HTML-Code im Backend zu generieren, nicht um APIs zu erstellen, die von einem modernen Frontend (wie React, Vue.js und Angular) oder von anderen Systemen (wie IoT-Ger\u00e4ten) verwendet werden, um mit ihm zu kommunizieren.</p>"},{"location":"alternatives/#django-rest-framework","title":"Django REST Framework","text":"<p>Das Django REST Framework wurde als flexibles Toolkit zum Erstellen von Web-APIs unter Verwendung von Django entwickelt, um dessen API-M\u00f6glichkeiten zu verbessern.</p> <p>Es wird von vielen Unternehmen verwendet, darunter Mozilla, Red Hat und Eventbrite.</p> <p>Es war eines der ersten Beispiele f\u00fcr automatische API-Dokumentation, und dies war insbesondere eine der ersten Ideen, welche \u201edie Suche nach\u201c ReadyAPI inspirierten.</p> <p>Hinweis</p> <p>Das Django REST Framework wurde von Tom Christie erstellt. Derselbe Sch\u00f6pfer von Starlette und Uvicorn, auf denen ReadyAPI basiert.</p> <p>Inspirierte ReadyAPI</p> <p>Eine automatische API-Dokumentationsoberfl\u00e4che zu haben.</p>"},{"location":"alternatives/#flask","title":"Flask","text":"<p>Flask ist ein \u201eMikroframework\u201c, es enth\u00e4lt weder Datenbankintegration noch viele der Dinge, die standardm\u00e4\u00dfig in Django enthalten sind.</p> <p>Diese Einfachheit und Flexibilit\u00e4t erm\u00f6glichen beispielsweise die Verwendung von NoSQL-Datenbanken als Hauptdatenspeichersystem.</p> <p>Da es sehr einfach ist, ist es relativ intuitiv zu erlernen, obwohl die Dokumentation an einigen Stellen etwas technisch wird.</p> <p>Es wird auch h\u00e4ufig f\u00fcr andere Anwendungen verwendet, die nicht unbedingt eine Datenbank, Benutzerverwaltung oder eine der vielen in Django enthaltenen Funktionen ben\u00f6tigen. Obwohl viele dieser Funktionen mit Plugins hinzugef\u00fcgt werden k\u00f6nnen.</p> <p>Diese Entkopplung der Teile und die Tatsache, dass es sich um ein \u201eMikroframework\u201c handelt, welches so erweitert werden kann, dass es genau das abdeckt, was ben\u00f6tigt wird, war ein Schl\u00fcsselmerkmal, das ich beibehalten wollte.</p> <p>Angesichts der Einfachheit von Flask schien es eine gute Erg\u00e4nzung zum Erstellen von APIs zu sein. Als N\u00e4chstes musste ein \u201eDjango REST Framework\u201c f\u00fcr Flask gefunden werden.</p> <p>Inspirierte ReadyAPI</p> <p>Ein Mikroframework zu sein. Es einfach zu machen, die ben\u00f6tigten Tools und Teile zu kombinieren.</p> <p>\u00dcber ein einfaches und benutzerfreundliches Routingsystem zu verf\u00fcgen.</p>"},{"location":"alternatives/#requests","title":"Requests","text":"<p>ReadyAPI ist eigentlich keine Alternative zu Requests. Der Umfang der beiden ist sehr unterschiedlich.</p> <p>Es w\u00e4re tats\u00e4chlich \u00fcblich, Requests innerhalb einer ReadyAPI-Anwendung zu verwenden.</p> <p>Dennoch erhielt ReadyAPI von Requests einiges an Inspiration.</p> <p>Requests ist eine Bibliothek zur Interaktion mit APIs (als Client), w\u00e4hrend ReadyAPI eine Bibliothek zum Erstellen von APIs (als Server) ist.</p> <p>Die beiden stehen mehr oder weniger an entgegengesetzten Enden und erg\u00e4nzen sich.</p> <p>Requests hat ein sehr einfaches und intuitives Design, ist sehr einfach zu bedienen und verf\u00fcgt \u00fcber sinnvolle Standardeinstellungen. Aber gleichzeitig ist es sehr leistungsstark und anpassbar.</p> <p>Aus diesem Grund hei\u00dft es auf der offiziellen Website:</p> <p>Requests ist eines der am h\u00e4ufigsten heruntergeladenen Python-Packages aller Zeiten</p> <p>Die Art und Weise, wie Sie es verwenden, ist sehr einfach. Um beispielsweise einen <code>GET</code>-Request zu machen, w\u00fcrden Sie schreiben:</p> <pre><code>response = requests.get(\"http://example.com/some/url\")\n</code></pre> <p>Die entsprechende Pfadoperation der ReadyAPI-API k\u00f6nnte wie folgt aussehen:</p> <pre><code>@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Sehen Sie sich die \u00c4hnlichkeiten in <code>requests.get(...)</code> und <code>@app.get(...)</code> an.</p> <p>Inspirierte ReadyAPI</p> <ul> <li>\u00dcber eine einfache und intuitive API zu verf\u00fcgen.</li> <li>HTTP-Methodennamen (Operationen) direkt, auf einfache und intuitive Weise zu verwenden.</li> <li>Vern\u00fcnftige Standardeinstellungen zu haben, aber auch m\u00e4chtige Einstellungsm\u00f6glichkeiten.</li> </ul>"},{"location":"alternatives/#swagger-openapi","title":"Swagger / OpenAPI","text":"<p>Die Hauptfunktion, die ich vom Django REST Framework haben wollte, war die automatische API-Dokumentation.</p> <p>Dann fand ich heraus, dass es einen Standard namens Swagger gab, zur Dokumentation von APIs unter Verwendung von JSON (oder YAML, einer Erweiterung von JSON).</p> <p>Und es gab bereits eine Web-Oberfl\u00e4che f\u00fcr Swagger-APIs. Die M\u00f6glichkeit, Swagger-Dokumentation f\u00fcr eine API zu generieren, w\u00fcrde die automatische Nutzung dieser Web-Oberfl\u00e4che erm\u00f6glichen.</p> <p>Irgendwann wurde Swagger an die Linux Foundation \u00fcbergeben und in OpenAPI umbenannt.</p> <p>Aus diesem Grund spricht man bei Version 2.0 h\u00e4ufig von \u201eSwagger\u201c und ab Version 3 von \u201eOpenAPI\u201c.</p> <p>Inspirierte ReadyAPI</p> <p>Einen offenen Standard f\u00fcr API-Spezifikationen zu \u00fcbernehmen und zu verwenden, anstelle eines benutzerdefinierten Schemas.</p> <p>Und Standard-basierte Tools f\u00fcr die Oberfl\u00e4che zu integrieren:</p> <ul> <li>Swagger UI</li> <li>ReDoc</li> </ul> <p>Diese beiden wurden ausgew\u00e4hlt, weil sie ziemlich beliebt und stabil sind, aber bei einer schnellen Suche k\u00f6nnten Sie Dutzende alternativer Benutzeroberfl\u00e4chen f\u00fcr OpenAPI finden (welche Sie mit ReadyAPI verwenden k\u00f6nnen).</p>"},{"location":"alternatives/#flask-rest-frameworks","title":"Flask REST Frameworks","text":"<p>Es gibt mehrere Flask REST Frameworks, aber nachdem ich die Zeit und Arbeit investiert habe, sie zu untersuchen, habe ich festgestellt, dass viele nicht mehr unterst\u00fctzt werden oder abgebrochen wurden und dass mehrere fortbestehende Probleme sie unpassend machten.</p>"},{"location":"alternatives/#marshmallow","title":"Marshmallow","text":"<p>Eine der von API-Systemen ben\u00f6tigen Hauptfunktionen ist die Daten-\u201eSerialisierung\u201c, welche Daten aus dem Code (Python) entnimmt und in etwas umwandelt, was durch das Netzwerk gesendet werden kann. Beispielsweise das Konvertieren eines Objekts, welches Daten aus einer Datenbank enth\u00e4lt, in ein JSON-Objekt. Konvertieren von <code>datetime</code>-Objekten in Strings, usw.</p> <p>Eine weitere wichtige Funktion, ben\u00f6tigt von APIs, ist die Datenvalidierung, welche sicherstellt, dass die Daten unter gegebenen Umst\u00e4nden g\u00fcltig sind. Zum Beispiel, dass ein Feld ein <code>int</code> ist und kein zuf\u00e4lliger String. Das ist besonders n\u00fctzlich f\u00fcr hereinkommende Daten.</p> <p>Ohne ein Datenvalidierungssystem m\u00fcssten Sie alle Pr\u00fcfungen manuell im Code durchf\u00fchren.</p> <p>F\u00fcr diese Funktionen wurde Marshmallow entwickelt. Es ist eine gro\u00dfartige Bibliothek und ich habe sie schon oft genutzt.</p> <p>Aber sie wurde erstellt, bevor Typhinweise in Python existierten. Um also ein Schema zu definieren, m\u00fcssen Sie bestimmte Werkzeuge und Klassen verwenden, die von Marshmallow bereitgestellt werden.</p> <p>Inspirierte ReadyAPI</p> <p>Code zu verwenden, um \u201eSchemas\u201c zu definieren, welche Datentypen und Validierung automatisch bereitstellen.</p>"},{"location":"alternatives/#webargs","title":"Webargs","text":"<p>Eine weitere wichtige Funktion, die von APIs ben\u00f6tigt wird, ist das Parsen von Daten aus eingehenden Requests.</p> <p>Webargs wurde entwickelt, um dieses f\u00fcr mehrere Frameworks, einschlie\u00dflich Flask, bereitzustellen.</p> <p>Es verwendet unter der Haube Marshmallow, um die Datenvalidierung durchzuf\u00fchren. Und es wurde von denselben Entwicklern erstellt.</p> <p>Es ist ein gro\u00dfartiges Tool und ich habe es auch oft verwendet, bevor ich ReadyAPI hatte.</p> <p>Info</p> <p>Webargs wurde von denselben Marshmallow-Entwicklern erstellt.</p> <p>Inspirierte ReadyAPI</p> <p>Eingehende Requestdaten automatisch zu validieren.</p>"},{"location":"alternatives/#apispec","title":"APISpec","text":"<p>Marshmallow und Webargs bieten Validierung, Parsen und Serialisierung als Plugins.</p> <p>Es fehlt jedoch noch die Dokumentation. Dann wurde APISpec erstellt.</p> <p>Es ist ein Plugin f\u00fcr viele Frameworks (und es gibt auch ein Plugin f\u00fcr Starlette).</p> <p>Die Funktionsweise besteht darin, dass Sie die Definition des Schemas im YAML-Format im Docstring jeder Funktion schreiben, die eine Route verarbeitet.</p> <p>Und es generiert OpenAPI-Schemas.</p> <p>So funktioniert es in Flask, Starlette, Responder, usw.</p> <p>Aber dann haben wir wieder das Problem einer Mikrosyntax innerhalb eines Python-Strings (eines gro\u00dfen YAML).</p> <p>Der Texteditor kann dabei nicht viel helfen. Und wenn wir Parameter oder Marshmallow-Schemas \u00e4ndern und vergessen, auch den YAML-Docstring zu \u00e4ndern, w\u00e4re das generierte Schema veraltet.</p> <p>Info</p> <p>APISpec wurde von denselben Marshmallow-Entwicklern erstellt.</p> <p>Inspirierte ReadyAPI</p> <p>Den offenen Standard f\u00fcr APIs, OpenAPI, zu unterst\u00fctzen.</p>"},{"location":"alternatives/#flask-apispec","title":"Flask-apispec","text":"<p>Hierbei handelt es sich um ein Flask-Plugin, welches Webargs, Marshmallow und APISpec miteinander verbindet.</p> <p>Es nutzt die Informationen von Webargs und Marshmallow, um mithilfe von APISpec automatisch OpenAPI-Schemas zu generieren.</p> <p>Ein gro\u00dfartiges Tool, sehr unterbewertet. Es sollte weitaus popul\u00e4rer als viele andere Flask-Plugins sein. M\u00f6glicherweise liegt es daran, dass die Dokumentation zu kompakt und abstrakt ist.</p> <p>Das l\u00f6ste das Problem, YAML (eine andere Syntax) in Python-Docstrings schreiben zu m\u00fcssen.</p> <p>Diese Kombination aus Flask, Flask-apispec mit Marshmallow und Webargs war bis zur Entwicklung von ReadyAPI mein Lieblings-Backend-Stack.</p> <p>Die Verwendung f\u00fchrte zur Entwicklung mehrerer Flask-Full-Stack-Generatoren. Dies sind die Hauptstacks, die ich (und mehrere externe Teams) bisher verwendet haben:</p> <ul> <li>https://github.com/khulnasoft/full-stack</li> <li>https://github.com/khulnasoft/full-stack-flask-couchbase</li> <li>https://github.com/khulnasoft/full-stack-flask-couchdb</li> </ul> <p>Und dieselben Full-Stack-Generatoren bildeten die Basis der ReadyAPI-Projektgeneratoren.</p> <p>Info</p> <p>Flask-apispec wurde von denselben Marshmallow-Entwicklern erstellt.</p> <p>Inspirierte ReadyAPI</p> <p>Das OpenAPI-Schema automatisch zu generieren, aus demselben Code, welcher die Serialisierung und Validierung definiert.</p>"},{"location":"alternatives/#nestjs-und-angular","title":"NestJS (und Angular)","text":"<p>Dies ist nicht einmal Python, NestJS ist ein von Angular inspiriertes JavaScript (TypeScript) NodeJS Framework.</p> <p>Es erreicht etwas \u00c4hnliches wie Flask-apispec.</p> <p>Es verf\u00fcgt \u00fcber ein integriertes Dependency Injection System, welches von Angular 2 inspiriert ist. Erfordert ein Vorab-Registrieren der \u201eInjectables\u201c (wie alle anderen Dependency Injection Systeme, welche ich kenne), sodass der Code ausschweifender wird und es mehr Codeverdoppelung gibt.</p> <p>Da die Parameter mit TypeScript-Typen beschrieben werden (\u00e4hnlich den Python-Typhinweisen), ist die Editorunterst\u00fctzung ziemlich gut.</p> <p>Da TypeScript-Daten jedoch nach der Kompilierung nach JavaScript nicht erhalten bleiben, k\u00f6nnen die Typen nicht gleichzeitig die Validierung, Serialisierung und Dokumentation definieren. Aus diesem Grund und aufgrund einiger Designentscheidungen ist es f\u00fcr die Validierung, Serialisierung und automatische Schemagenerierung erforderlich, an vielen Stellen Dekoratoren hinzuzuf\u00fcgen. Es wird also ziemlich ausf\u00fchrlich.</p> <p>Es kann nicht sehr gut mit verschachtelten Modellen umgehen. Wenn es sich beim JSON-Body in der Anfrage also um ein JSON-Objekt mit inneren Feldern handelt, die wiederum verschachtelte JSON-Objekte sind, kann er nicht richtig dokumentiert und validiert werden.</p> <p>Inspirierte ReadyAPI</p> <p>Python-Typen zu verwenden, um eine hervorragende Editorunterst\u00fctzung zu erhalten.</p> <p>\u00dcber ein leistungsstarkes Dependency Injection System zu verf\u00fcgen. Eine M\u00f6glichkeit zu finden, Codeverdoppelung zu minimieren.</p>"},{"location":"alternatives/#sanic","title":"Sanic","text":"<p>Es war eines der ersten extrem schnellen Python-Frameworks, welches auf <code>asyncio</code> basierte. Es wurde so gestaltet, dass es Flask sehr \u00e4hnlich ist.</p> <p>Technische Details</p> <p>Es verwendete <code>uvloop</code> anstelle der standardm\u00e4\u00dfigen Python-<code>asyncio</code>-Schleife. Das hat es so schnell gemacht.</p> <p>Hat eindeutig Uvicorn und Starlette inspiriert, welche derzeit in offenen Benchmarks schneller als Sanic sind.</p> <p>Inspirierte ReadyAPI</p> <p>Einen Weg zu finden, eine hervorragende Performanz zu haben.</p> <p>Aus diesem Grund basiert ReadyAPI auf Starlette, da dieses das schnellste verf\u00fcgbare Framework ist (getestet in Benchmarks von Dritten).</p>"},{"location":"alternatives/#falcon","title":"Falcon","text":"<p>Falcon ist ein weiteres leistungsstarkes Python-Framework. Es ist minimalistisch konzipiert und dient als Grundlage f\u00fcr andere Frameworks wie Hug.</p> <p>Es ist so konzipiert, dass es \u00fcber Funktionen verf\u00fcgt, welche zwei Parameter empfangen, einen \u201eRequest\u201c und eine \u201eResponse\u201c. Dann \u201elesen\u201c Sie Teile des Requests und \u201eschreiben\u201c Teile der Response. Aufgrund dieses Designs ist es nicht m\u00f6glich, Request-Parameter und -Bodys mit Standard-Python-Typhinweisen als Funktionsparameter zu deklarieren.</p> <p>Daher m\u00fcssen Datenvalidierung, Serialisierung und Dokumentation im Code und nicht automatisch erfolgen. Oder sie m\u00fcssen als Framework oberhalb von Falcon implementiert werden, so wie Hug. Dieselbe Unterscheidung findet auch in anderen Frameworks statt, die vom Design von Falcon inspiriert sind und ein Requestobjekt und ein Responseobjekt als Parameter haben.</p> <p>Inspirierte ReadyAPI</p> <p>Wege zu finden, eine gro\u00dfartige Performanz zu erzielen.</p> <p>Zusammen mit Hug (da Hug auf Falcon basiert), einen <code>response</code>-Parameter in Funktionen zu deklarieren.</p> <p>Obwohl er in ReadyAPI optional ist und haupts\u00e4chlich zum Festlegen von Headern, Cookies und alternativen Statuscodes verwendet wird.</p>"},{"location":"alternatives/#molten","title":"Molten","text":"<p>Ich habe Molten in den ersten Phasen der Entwicklung von ReadyAPI entdeckt. Und es hat ganz \u00e4hnliche Ideen:</p> <ul> <li>Basierend auf Python-Typhinweisen.</li> <li>Validierung und Dokumentation aus diesen Typen.</li> <li>Dependency Injection System.</li> </ul> <p>Es verwendet keine Datenvalidierungs-, Serialisierungs- und Dokumentationsbibliothek eines Dritten wie Pydantic, sondern verf\u00fcgt \u00fcber eine eigene. Daher w\u00e4ren diese Datentyp-Definitionen nicht so einfach wiederverwendbar.</p> <p>Es erfordert eine etwas ausf\u00fchrlichere Konfiguration. Und da es auf WSGI (anstelle von ASGI) basiert, ist es nicht darauf ausgelegt, die hohe Leistung von Tools wie Uvicorn, Starlette und Sanic zu nutzen.</p> <p>Das Dependency Injection System erfordert eine Vorab-Registrierung der Abh\u00e4ngigkeiten und die Abh\u00e4ngigkeiten werden basierend auf den deklarierten Typen aufgel\u00f6st. Daher ist es nicht m\u00f6glich, mehr als eine \u201eKomponente\u201c zu deklarieren, welche einen bestimmten Typ bereitstellt.</p> <p>Routen werden an einer einzigen Stelle deklariert, indem Funktionen verwendet werden, die an anderen Stellen deklariert wurden (anstatt Dekoratoren zu verwenden, welche direkt \u00fcber der Funktion platziert werden k\u00f6nnen, welche den Endpunkt verarbeitet). Dies \u00e4hnelt eher der Vorgehensweise von Django als der Vorgehensweise von Flask (und Starlette). Es trennt im Code Dinge, die relativ eng miteinander gekoppelt sind.</p> <p>Inspirierte ReadyAPI</p> <p>Zus\u00e4tzliche Validierungen f\u00fcr Datentypen zu definieren, mithilfe des \u201eDefault\u201c-Werts von Modellattributen. Dies verbessert die Editorunterst\u00fctzung und war zuvor in Pydantic nicht verf\u00fcgbar.</p> <p>Das hat tats\u00e4chlich dazu gef\u00fchrt, dass Teile von Pydantic aktualisiert wurden, um denselben Validierungsdeklarationsstil zu unterst\u00fctzen (diese gesamte Funktionalit\u00e4t ist jetzt bereits in Pydantic verf\u00fcgbar).</p>"},{"location":"alternatives/#hug","title":"Hug","text":"<p>Hug war eines der ersten Frameworks, welches die Deklaration von API-Parametertypen mithilfe von Python-Typhinweisen implementierte. Das war eine gro\u00dfartige Idee, die andere Tools dazu inspirierte, dasselbe zu tun.</p> <p>Es verwendete benutzerdefinierte Typen in seinen Deklarationen anstelle von Standard-Python-Typen, es war aber dennoch ein gro\u00dfer Fortschritt.</p> <p>Au\u00dferdem war es eines der ersten Frameworks, welches ein benutzerdefiniertes Schema generierte, welches die gesamte API in JSON deklarierte.</p> <p>Es basierte nicht auf einem Standard wie OpenAPI und JSON Schema. Daher w\u00e4re es nicht einfach, es in andere Tools wie Swagger UI zu integrieren. Aber, nochmal, es war eine sehr innovative Idee.</p> <p>Es verf\u00fcgt \u00fcber eine interessante, ungew\u00f6hnliche Funktion: Mit demselben Framework ist es m\u00f6glich, APIs und auch CLIs zu erstellen.</p> <p>Da es auf dem bisherigen Standard f\u00fcr synchrone Python-Webframeworks (WSGI) basiert, kann es nicht mit Websockets und anderen Dingen umgehen, verf\u00fcgt aber dennoch \u00fcber eine hohe Performanz.</p> <p>Info</p> <p>Hug wurde von Timothy Crosley erstellt, dem gleichen Sch\u00f6pfer von <code>isort</code>, einem gro\u00dfartigen Tool zum automatischen Sortieren von Importen in Python-Dateien.</p> <p>Ideen, die ReadyAPI inspiriert haben</p> <p>Hug inspirierte Teile von APIStar und war eines der Tools, die ich am vielversprechendsten fand, neben APIStar.</p> <p>Hug hat dazu beigetragen, ReadyAPI dazu zu inspirieren, Python-Typhinweise zum Deklarieren von Parametern zu verwenden und ein Schema zu generieren, das die API automatisch definiert.</p> <p>Hug inspirierte ReadyAPI dazu, einen <code>response</code>-Parameter in Funktionen zu deklarieren, um Header und Cookies zu setzen.</p>"},{"location":"alternatives/#apistar-05","title":"APIStar (\u2266 0.5)","text":"<p>Kurz bevor ich mich entschied, ReadyAPI zu erstellen, fand ich den APIStar-Server. Er hatte fast alles, was ich suchte, und ein tolles Design.</p> <p>Er war eine der ersten Implementierungen eines Frameworks, die ich je gesehen hatte (vor NestJS und Molten), welches Python-Typhinweise zur Deklaration von Parametern und Requests verwendeten. Ich habe ihn mehr oder weniger zeitgleich mit Hug gefunden. Aber APIStar nutzte den OpenAPI-Standard.</p> <p>Er verf\u00fcgte an mehreren Stellen \u00fcber automatische Datenvalidierung, Datenserialisierung und OpenAPI-Schemagenerierung, basierend auf denselben Typhinweisen.</p> <p>Body-Schemadefinitionen verwendeten nicht die gleichen Python-Typhinweise wie Pydantic, er war Marshmallow etwas \u00e4hnlicher, sodass die Editorunterst\u00fctzung nicht so gut war, aber dennoch war APIStar die beste verf\u00fcgbare Option.</p> <p>Er hatte zu dieser Zeit die besten Leistungsbenchmarks (nur \u00fcbertroffen von Starlette).</p> <p>Anfangs gab es keine Web-Oberfl\u00e4che f\u00fcr die automatische API-Dokumentation, aber ich wusste, dass ich Swagger UI hinzuf\u00fcgen konnte.</p> <p>Er verf\u00fcgte \u00fcber ein Dependency Injection System. Es erforderte eine Vorab-Registrierung der Komponenten, wie auch bei anderen oben besprochenen Tools. Aber dennoch, es war ein tolles Feature.</p> <p>Ich konnte ihn nie in einem vollst\u00e4ndigen Projekt verwenden, da er keine Sicherheitsintegration hatte, sodass ich nicht alle Funktionen, die ich hatte, durch die auf Flask-apispec basierenden Full-Stack-Generatoren ersetzen konnte. Ich hatte in meinem Projekte-Backlog den Eintrag, einen Pull Request zu erstellen, welcher diese Funktionalit\u00e4t hinzuf\u00fcgte.</p> <p>Doch dann verlagerte sich der Schwerpunkt des Projekts.</p> <p>Es handelte sich nicht l\u00e4nger um ein API-Webframework, da sich der Entwickler auf Starlette konzentrieren musste.</p> <p>Jetzt handelt es sich bei APIStar um eine Reihe von Tools zur Validierung von OpenAPI-Spezifikationen, nicht um ein Webframework.</p> <p>Info</p> <p>APIStar wurde von Tom Christie erstellt. Derselbe, welcher Folgendes erstellt hat:</p> <ul> <li>Django REST Framework</li> <li>Starlette (auf welchem ReadyAPI basiert)</li> <li>Uvicorn (verwendet von Starlette und ReadyAPI)</li> </ul> <p>Inspirierte ReadyAPI</p> <p>Zu existieren.</p> <p>Die Idee, mehrere Dinge (Datenvalidierung, Serialisierung und Dokumentation) mit denselben Python-Typen zu deklarieren, welche gleichzeitig eine hervorragende Editorunterst\u00fctzung bieten, hielt ich f\u00fcr eine brillante Idee.</p> <p>Und nach einer langen Suche nach einem \u00e4hnlichen Framework und dem Testen vieler verschiedener Alternativen, war APIStar die beste verf\u00fcgbare Option.</p> <p>Dann h\u00f6rte APIStar auf, als Server zu existieren, und Starlette wurde geschaffen, welches eine neue, bessere Grundlage f\u00fcr ein solches System bildete. Das war die finale Inspiration f\u00fcr die Entwicklung von ReadyAPI.</p> <p>Ich betrachte ReadyAPI als einen \u201espirituellen Nachfolger\u201c von APIStar, welcher die Funktionen, das Typsystem und andere Teile verbessert und erweitert, basierend auf den Erkenntnissen aus all diesen fr\u00fcheren Tools.</p>"},{"location":"alternatives/#verwendet-von-readyapi","title":"Verwendet von ReadyAPI","text":""},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic ist eine Bibliothek zum Definieren von Datenvalidierung, Serialisierung und Dokumentation (unter Verwendung von JSON Schema) basierend auf Python-Typhinweisen.</p> <p>Das macht es \u00e4u\u00dferst intuitiv.</p> <p>Es ist vergleichbar mit Marshmallow. Obwohl es in Benchmarks schneller als Marshmallow ist. Und da es auf den gleichen Python-Typhinweisen basiert, ist die Editorunterst\u00fctzung gro\u00dfartig.</p> <p>ReadyAPI verwendet es, um</p> <p>Die gesamte Datenvalidierung, Datenserialisierung und automatische Modelldokumentation (basierend auf JSON Schema) zu erledigen.</p> <p>ReadyAPI nimmt dann, abgesehen von all den anderen Dingen, die es tut, dieses JSON-Schema und f\u00fcgt es in OpenAPI ein.</p>"},{"location":"alternatives/#starlette","title":"Starlette","text":"<p>Starlette ist ein leichtgewichtiges ASGI-Framework/Toolkit, welches sich ideal f\u00fcr die Erstellung hochperformanter asynchroner Dienste eignet.</p> <p>Es ist sehr einfach und intuitiv. Es ist so konzipiert, dass es leicht erweiterbar ist und \u00fcber modulare Komponenten verf\u00fcgt.</p> <p>Es bietet:</p> <ul> <li>Eine sehr beeindruckende Leistung.</li> <li>WebSocket-Unterst\u00fctzung.</li> <li>Hintergrundtasks im selben Prozess.</li> <li>Events f\u00fcr das Hoch- und Herunterfahren.</li> <li>Testclient basierend auf HTTPX.</li> <li>CORS, GZip, statische Dateien, Streamende Responses.</li> <li>Session- und Cookie-Unterst\u00fctzung.</li> <li>100 % Testabdeckung.</li> <li>100 % Typannotierte Codebasis.</li> <li>Wenige starke Abh\u00e4ngigkeiten.</li> </ul> <p>Starlette ist derzeit das schnellste getestete Python-Framework. Nur \u00fcbertroffen von Uvicorn, welches kein Framework, sondern ein Server ist.</p> <p>Starlette bietet alle grundlegenden Funktionen eines Web-Microframeworks.</p> <p>Es bietet jedoch keine automatische Datenvalidierung, Serialisierung oder Dokumentation.</p> <p>Das ist eines der wichtigsten Dinge, welche ReadyAPI hinzuf\u00fcgt, alles basierend auf Python-Typhinweisen (mit Pydantic). Das, plus, das Dependency Injection System, Sicherheitswerkzeuge, OpenAPI-Schemagenerierung, usw.</p> <p>Technische Details</p> <p>ASGI ist ein neuer \u201eStandard\u201c, welcher von Mitgliedern des Django-Kernteams entwickelt wird. Es handelt sich immer noch nicht um einen \u201ePython-Standard\u201c (ein PEP), obwohl sie gerade dabei sind, das zu tun.</p> <p>Dennoch wird es bereits von mehreren Tools als \u201eStandard\u201c verwendet. Das verbessert die Interoperabilit\u00e4t erheblich, da Sie Uvicorn mit jeden anderen ASGI-Server (wie Daphne oder Hypercorn) tauschen oder ASGI-kompatible Tools wie <code>python-socketio</code> hinzuf\u00fcgen k\u00f6nnen.</p> <p>ReadyAPI verwendet es, um</p> <p>Alle Kern-Webaspekte zu handhaben. Und f\u00fcgt Funktionen obenauf.</p> <p>Die Klasse <code>ReadyAPI</code> selbst erbt direkt von der Klasse <code>Starlette</code>.</p> <p>Alles, was Sie also mit Starlette machen k\u00f6nnen, k\u00f6nnen Sie direkt mit ReadyAPI machen, da es sich im Grunde um Starlette auf Steroiden handelt.</p>"},{"location":"alternatives/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn ist ein blitzschneller ASGI-Server, der auf uvloop und httptools basiert.</p> <p>Es handelt sich nicht um ein Webframework, sondern um einen Server. Beispielsweise werden keine Tools f\u00fcr das Routing von Pfaden bereitgestellt. Das ist etwas, was ein Framework wie Starlette (oder ReadyAPI) zus\u00e4tzlich bieten w\u00fcrde.</p> <p>Es ist der empfohlene Server f\u00fcr Starlette und ReadyAPI.</p> <p>ReadyAPI empfiehlt es als</p> <p>Hauptwebserver zum Ausf\u00fchren von ReadyAPI-Anwendungen.</p> <p>Sie k\u00f6nnen ihn mit Gunicorn kombinieren, um einen asynchronen Multiprozess-Server zu erhalten.</p> <p>Weitere Details finden Sie im Abschnitt Deployment.</p>"},{"location":"alternatives/#benchmarks-und-geschwindigkeit","title":"Benchmarks und Geschwindigkeit","text":"<p>Um den Unterschied zwischen Uvicorn, Starlette und ReadyAPI zu verstehen, zu vergleichen und zu sehen, lesen Sie den Abschnitt \u00fcber Benchmarks.</p>"},{"location":"async/","title":"Nebenl\u00e4ufigkeit und async / await","text":"<p>Details zur <code>async def</code>-Syntax f\u00fcr Pfadoperation-Funktionen und Hintergrundinformationen zu asynchronem Code, Nebenl\u00e4ufigkeit und Parallelit\u00e4t.</p>"},{"location":"async/#in-eile","title":"In Eile?","text":"<p>TL;DR:</p> <p>Wenn Sie Bibliotheken von Dritten verwenden, die mit <code>await</code> aufgerufen werden m\u00fcssen, wie zum Beispiel:</p> <pre><code>results = await some_library()\n</code></pre> <p>Dann deklarieren Sie Ihre Pfadoperation-Funktionen mit <code>async def</code> wie in:</p> <pre><code>@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n</code></pre> <p>Note</p> <p>Sie k\u00f6nnen <code>await</code> nur innerhalb von Funktionen verwenden, die mit <code>async def</code> erstellt wurden.</p> <p>Wenn Sie eine Bibliothek eines Dritten verwenden, die mit etwas kommuniziert (einer Datenbank, einer API, dem Dateisystem, usw.) und welche die Verwendung von <code>await</code> nicht unterst\u00fctzt (dies ist derzeit bei den meisten Datenbankbibliotheken der Fall), dann deklarieren Sie Ihre Pfadoperation-Funktionen ganz normal nur mit <code>def</code>, etwa:</p> <pre><code>@app.get('/')\ndef results():\n    results = some_library()\n    return results\n</code></pre> <p>Wenn Ihre Anwendung (irgendwie) mit nichts anderem kommunizieren und auf dessen Antwort warten muss, verwenden Sie <code>async def</code>.</p> <p>Wenn Sie sich unsicher sind, verwenden Sie einfach <code>def</code>.</p> <p>Hinweis: Sie k\u00f6nnen <code>def</code> und <code>async def</code> in Ihren Pfadoperation-Funktionen beliebig mischen, so wie Sie es ben\u00f6tigen, und jede einzelne Funktion in der f\u00fcr Sie besten Variante erstellen. ReadyAPI wird damit das Richtige tun.</p> <p>Wie dem auch sei, in jedem der oben genannten F\u00e4lle wird ReadyAPI immer noch asynchron arbeiten und extrem schnell sein.</p> <p>Wenn Sie jedoch den oben genannten Schritten folgen, k\u00f6nnen einige Performance-Optimierungen vorgenommen werden.</p>"},{"location":"async/#technische-details","title":"Technische Details","text":"<p>Moderne Versionen von Python unterst\u00fctzen \u201easynchronen Code\u201c unter Verwendung sogenannter \u201eCoroutinen\u201c mithilfe der Syntax <code>async</code> und <code>await</code>.</p> <p>Nehmen wir obigen Satz in den folgenden Abschnitten Schritt f\u00fcr Schritt unter die Lupe:</p> <ul> <li>Asynchroner Code</li> <li><code>async</code> und <code>await</code></li> <li>Coroutinen</li> </ul>"},{"location":"async/#asynchroner-code","title":"Asynchroner Code","text":"<p>Asynchroner Code bedeutet lediglich, dass die Sprache \ud83d\udcac eine M\u00f6glichkeit hat, dem Computersystem / Programm \ud83e\udd16 mitzuteilen, dass es \ud83e\udd16 an einem bestimmten Punkt im Code darauf warten muss, dass etwas anderes irgendwo anders fertig wird. Nehmen wir an, etwas anderes ist hier \u201eLangsam-Datei\u201c \ud83d\udcdd.</p> <p>W\u00e4hrend der Zeit, die \u201eLangsam-Datei\u201c \ud83d\udcdd ben\u00f6tigt, kann das System also andere Aufgaben erledigen.</p> <p>Dann kommt das System / Programm \ud83e\udd16 bei jeder Gelegenheit zur\u00fcck, wenn es entweder wieder wartet, oder wann immer es \ud83e\udd16 die ganze Arbeit erledigt hat, die zu diesem Zeitpunkt zu tun war. Und es \ud83e\udd16 wird nachschauen, ob eine der Aufgaben, auf die es gewartet hat, fertig damit ist, zu tun, was sie tun sollte.</p> <p>Dann nimmt es \ud83e\udd16 die erste erledigte Aufgabe (sagen wir, unsere \u201eLangsam-Datei\u201c \ud83d\udcdd) und bearbeitet sie weiter.</p> <p>Das \u201eWarten auf etwas anderes\u201c bezieht sich normalerweise auf I/O-Operationen, die relativ \u201elangsam\u201c sind (im Vergleich zur Geschwindigkeit des Prozessors und des Arbeitsspeichers), wie etwa das Warten darauf, dass:</p> <ul> <li>die Daten des Clients \u00fcber das Netzwerk empfangen wurden</li> <li>die von Ihrem Programm gesendeten Daten vom Client \u00fcber das Netzwerk empfangen wurden</li> <li>der Inhalt einer Datei vom System von der Festplatte gelesen und an Ihr Programm \u00fcbergeben wurde</li> <li>der Inhalt, den Ihr Programm dem System \u00fcbergeben hat, auf die Festplatte geschrieben wurde</li> <li>eine Remote-API-Operation beendet wurde</li> <li>Eine Datenbankoperation abgeschlossen wurde</li> <li>eine Datenbankabfrage die Ergebnisse zur\u00fcckgegeben hat</li> <li>usw.</li> </ul> <p>Da die Ausf\u00fchrungszeit hier haupts\u00e4chlich durch das Warten auf I/O-Operationen verbraucht wird, nennt man dies auch \u201eI/O-lastige\u201c (\u201eI/O bound\u201c) Operationen.</p> <p>\u201eAsynchron\u201c, sagt man, weil das Computersystem / Programm nicht mit einer langsamen Aufgabe \u201esynchronisiert\u201c werden muss und nicht auf den genauen Moment warten muss, in dem die Aufgabe beendet ist, ohne dabei etwas zu tun, um schlie\u00dflich das Ergebnis der Aufgabe zu \u00fcbernehmen und die Arbeit fortsetzen zu k\u00f6nnen.</p> <p>Da es sich stattdessen um ein \u201easynchrones\u201c System handelt, kann die Aufgabe nach Abschluss ein wenig (einige Mikrosekunden) in der Schlange warten, bis das System / Programm seine anderen Dinge erledigt hat und zur\u00fcckkommt, um die Ergebnisse entgegenzunehmen und mit ihnen weiterzuarbeiten.</p> <p>F\u00fcr \u201esynchron\u201c (im Gegensatz zu \u201easynchron\u201c) wird auch oft der Begriff \u201esequentiell\u201c verwendet, da das System / Programm alle Schritte in einer Sequenz (\u201eder Reihe nach\u201c) ausf\u00fchrt, bevor es zu einer anderen Aufgabe wechselt, auch wenn diese Schritte mit Warten verbunden sind.</p>"},{"location":"async/#nebenlaufigkeit-und-hamburger","title":"Nebenl\u00e4ufigkeit und Hamburger","text":"<p>Diese oben beschriebene Idee von asynchronem Code wird manchmal auch \u201eNebenl\u00e4ufigkeit\u201c genannt. Sie unterscheidet sich von \u201eParallelit\u00e4t\u201c.</p> <p>Nebenl\u00e4ufigkeit und Parallelit\u00e4t beziehen sich beide auf \u201everschiedene Dinge, die mehr oder weniger gleichzeitig passieren\u201c.</p> <p>Aber die Details zwischen Nebenl\u00e4ufigkeit und Parallelit\u00e4t sind ziemlich unterschiedlich.</p> <p>Um den Unterschied zu erkennen, stellen Sie sich die folgende Geschichte \u00fcber Hamburger vor:</p>"},{"location":"async/#nebenlaufige-hamburger","title":"Nebenl\u00e4ufige Hamburger","text":"<p>Sie gehen mit Ihrem Schwarm Fastfood holen, stehen in der Schlange, w\u00e4hrend der Kassierer die Bestellungen der Leute vor Ihnen entgegennimmt. \ud83d\ude0d</p> <p></p> <p>Dann sind Sie an der Reihe und Sie bestellen zwei sehr schmackhafte Burger f\u00fcr Ihren Schwarm und Sie. \ud83c\udf54\ud83c\udf54</p> <p></p> <p>Der Kassierer sagt etwas zum Koch in der K\u00fcche, damit dieser wei\u00df, dass er Ihre Burger zubereiten muss (obwohl er gerade die f\u00fcr die vorherigen Kunden zubereitet).</p> <p></p> <p>Sie bezahlen. \ud83d\udcb8</p> <p>Der Kassierer gibt Ihnen die Nummer Ihrer Bestellung.</p> <p></p> <p>W\u00e4hrend Sie warten, suchen Sie sich mit Ihrem Schwarm einen Tisch aus, Sie sitzen da und reden lange mit Ihrem Schwarm (da Ihre Burger sehr aufw\u00e4ndig sind und die Zubereitung einige Zeit dauert).</p> <p>W\u00e4hrend Sie mit Ihrem Schwarm am Tisch sitzen und auf die Burger warten, k\u00f6nnen Sie die Zeit damit verbringen, zu bewundern, wie gro\u00dfartig, s\u00fc\u00df und klug Ihr Schwarm ist \u2728\ud83d\ude0d\u2728.</p> <p></p> <p>W\u00e4hrend Sie warten und mit Ihrem Schwarm sprechen, \u00fcberpr\u00fcfen Sie von Zeit zu Zeit die auf dem Z\u00e4hler angezeigte Nummer, um zu sehen, ob Sie bereits an der Reihe sind.</p> <p>Dann, irgendwann, sind Sie endlich an der Reihe. Sie gehen zur Theke, holen sich die Burger und kommen zur\u00fcck an den Tisch.</p> <p></p> <p>Sie und Ihr Schwarm essen die Burger und haben eine sch\u00f6ne Zeit. \u2728</p> <p></p> <p>Info</p> <p>Die wundersch\u00f6nen Illustrationen stammen von Ketrina Thompson. \ud83c\udfa8</p> <p>Stellen Sie sich vor, Sie w\u00e4ren das Computersystem / Programm \ud83e\udd16 in dieser Geschichte.</p> <p>W\u00e4hrend Sie an der Schlange stehen, sind Sie einfach unt\u00e4tig \ud83d\ude34, warten darauf, dass Sie an die Reihe kommen, und tun nichts sehr \u201eProduktives\u201c. Aber die Schlange ist schnell abgearbeitet, weil der Kassierer nur die Bestellungen entgegennimmt (und nicht zubereitet), also ist das vertretbar.</p> <p>Wenn Sie dann an der Reihe sind, erledigen Sie tats\u00e4chliche \u201eproduktive\u201c Arbeit, Sie gehen das Men\u00fc durch, entscheiden sich, was Sie m\u00f6chten, bekunden Ihre und die Wahl Ihres Schwarms, bezahlen, pr\u00fcfen, ob Sie die richtige Menge Geld oder die richtige Karte geben, pr\u00fcfen, ob die Rechnung korrekt ist, pr\u00fcfen, dass die Bestellung die richtigen Artikel enth\u00e4lt, usw.</p> <p>Aber dann, auch wenn Sie Ihre Burger noch nicht haben, ist Ihre Interaktion mit dem Kassierer erst mal \u201eauf Pause\u201c \u23f8, weil Sie warten m\u00fcssen \ud83d\udd59, bis Ihre Burger fertig sind.</p> <p>Aber wenn Sie sich von der Theke entfernt haben und mit der Nummer f\u00fcr die Bestellung an einem Tisch sitzen, k\u00f6nnen Sie Ihre Aufmerksamkeit auf Ihren Schwarm lenken und an dieser Aufgabe \u201earbeiten\u201c \u23ef \ud83e\udd13. Sie machen wieder etwas sehr \u201eProduktives\u201c und flirten mit Ihrem Schwarm \ud83d\ude0d.</p> <p>Dann sagt der Kassierer \ud83d\udc81 \u201eIch bin mit dem Burger fertig\u201c, indem er Ihre Nummer auf dem Display \u00fcber der Theke anzeigt, aber Sie springen nicht sofort wie verr\u00fcckt auf, wenn das Display auf Ihre Nummer springt. Sie wissen, dass niemand Ihnen Ihre Burger wegnimmt, denn Sie haben die Nummer Ihrer Bestellung, und andere Leute haben andere Nummern.</p> <p>Also warten Sie darauf, dass Ihr Schwarm ihre Geschichte zu Ende erz\u00e4hlt (die aktuelle Arbeit \u23ef / bearbeitete Aufgabe beendet \ud83e\udd13), l\u00e4cheln sanft und sagen, dass Sie die Burger holen \u23f8.</p> <p>Dann gehen Sie zur Theke \ud83d\udd00, zur urspr\u00fcnglichen Aufgabe, die nun erledigt ist \u23ef, nehmen die Burger auf, sagen Danke, und bringen sie zum Tisch. Damit ist dieser Schritt / diese Aufgabe der Interaktion mit der Theke abgeschlossen \u23f9. Das wiederum schafft eine neue Aufgabe, \u201eBurger essen\u201c \ud83d\udd00 \u23ef, aber die vorherige Aufgabe \u201eBurger holen\u201c ist erledigt \u23f9.</p>"},{"location":"async/#parallele-hamburger","title":"Parallele Hamburger","text":"<p>Stellen wir uns jetzt vor, dass es sich hierbei nicht um \u201enebenl\u00e4ufige Hamburger\u201c, sondern um \u201eparallele Hamburger\u201c handelt.</p> <p>Sie gehen los mit Ihrem Schwarm, um paralleles Fast Food zu bekommen.</p> <p>Sie stehen in der Schlange, w\u00e4hrend mehrere (sagen wir acht) Kassierer, die gleichzeitig K\u00f6che sind, die Bestellungen der Leute vor Ihnen entgegennehmen.</p> <p>Alle vor Ihnen warten darauf, dass ihre Burger fertig sind, bevor sie die Theke verlassen, denn jeder der 8 Kassierer geht los und bereitet den Burger sofort zu, bevor er die n\u00e4chste Bestellung entgegennimmt.</p> <p></p> <p>Dann sind Sie endlich an der Reihe und bestellen zwei sehr leckere Burger f\u00fcr Ihren Schwarm und Sie.</p> <p>Sie zahlen \ud83d\udcb8.</p> <p></p> <p>Der Kassierer geht in die K\u00fcche.</p> <p>Sie warten, vor der Theke stehend \ud83d\udd59, damit niemand au\u00dfer Ihnen Ihre Burger entgegennimmt, da es keine Nummern f\u00fcr die Reihenfolge gibt.</p> <p></p> <p>Da Sie und Ihr Schwarm damit besch\u00e4ftigt sind, niemanden vor sich zu lassen, der Ihre Burger nimmt, wenn sie ankommen, k\u00f6nnen Sie Ihrem Schwarm keine Aufmerksamkeit schenken. \ud83d\ude1e</p> <p>Das ist \u201esynchrone\u201c Arbeit, Sie sind mit dem Kassierer/Koch \u201esynchronisiert\u201c \ud83d\udc68\u200d\ud83c\udf73. Sie m\u00fcssen warten \ud83d\udd59 und genau in dem Moment da sein, in dem der Kassierer/Koch \ud83d\udc68\u200d\ud83c\udf73 die Burger zubereitet hat und Ihnen gibt, sonst k\u00f6nnte jemand anderes sie nehmen.</p> <p></p> <p>Dann kommt Ihr Kassierer/Koch \ud83d\udc68\u200d\ud83c\udf73 endlich mit Ihren Burgern zur\u00fcck, nachdem Sie lange vor der Theke gewartet \ud83d\udd59 haben.</p> <p></p> <p>Sie nehmen Ihre Burger und gehen mit Ihrem Schwarm an den Tisch.</p> <p>Sie essen sie und sind fertig. \u23f9</p> <p></p> <p>Es wurde nicht viel geredet oder geflirtet, da die meiste Zeit mit Warten \ud83d\udd59 vor der Theke verbracht wurde. \ud83d\ude1e</p> <p>Info</p> <p>Die wundersch\u00f6nen Illustrationen stammen von Ketrina Thompson. \ud83c\udfa8</p> <p>In diesem Szenario der parallelen Hamburger sind Sie ein Computersystem / Programm \ud83e\udd16 mit zwei Prozessoren (Sie und Ihr Schwarm), die beide warten \ud83d\udd59 und ihre Aufmerksamkeit darauf verwenden, \u201elange Zeit vor der Theke zu warten\u201c \ud83d\udd59.</p> <p>Der Fast-Food-Laden verf\u00fcgt \u00fcber 8 Prozessoren (Kassierer/K\u00f6che). W\u00e4hrend der nebenl\u00e4ufige Burger-Laden nur zwei hatte (einen Kassierer und einen Koch).</p> <p>Dennoch ist das schlussendliche Benutzererlebnis nicht das Beste. \ud83d\ude1e</p> <p>Dies w\u00e4re die parallele \u00e4quivalente Geschichte f\u00fcr Hamburger. \ud83c\udf54</p> <p>F\u00fcr ein \u201erealeres\u201c Beispiel hierf\u00fcr, stellen Sie sich eine Bank vor.</p> <p>Bis vor kurzem hatten die meisten Banken mehrere Kassierer \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc und eine gro\u00dfe Warteschlange \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59.</p> <p>Alle Kassierer erledigen die ganze Arbeit mit einem Kunden nach dem anderen \ud83d\udc68\u200d\ud83d\udcbc\u23ef.</p> <p>Und man muss lange in der Schlange warten \ud83d\udd59 sonst kommt man nicht an die Reihe.</p> <p>Sie w\u00fcrden Ihren Schwarm \ud83d\ude0d wahrscheinlich nicht mitnehmen wollen, um Besorgungen bei der Bank zu erledigen \ud83c\udfe6.</p>"},{"location":"async/#hamburger-schlussfolgerung","title":"Hamburger Schlussfolgerung","text":"<p>In diesem Szenario \u201eFast Food Burger mit Ihrem Schwarm\u201c ist es viel sinnvoller, ein nebenl\u00e4ufiges System zu haben \u23f8\ud83d\udd00\u23ef, da viel gewartet wird \ud83d\udd59.</p> <p>Das ist auch bei den meisten Webanwendungen der Fall.</p> <p>Viele, viele Benutzer, aber Ihr Server wartet \ud83d\udd59 darauf, dass deren nicht so gute Internetverbindungen die Requests \u00fcbermitteln.</p> <p>Und dann warten \ud83d\udd59, bis die Responses zur\u00fcckkommen.</p> <p>Dieses \u201eWarten\u201c \ud83d\udd59 wird in Mikrosekunden gemessen, aber zusammenfassend l\u00e4sst sich sagen, dass am Ende eine Menge gewartet wird.</p> <p>Deshalb ist es sehr sinnvoll, asynchronen \u23f8\ud83d\udd00\u23ef Code f\u00fcr Web-APIs zu verwenden.</p> <p>Diese Art der Asynchronit\u00e4t hat NodeJS popul\u00e4r gemacht (auch wenn NodeJS nicht parallel ist) und darin liegt die St\u00e4rke von Go als Programmiersprache.</p> <p>Und das ist das gleiche Leistungsniveau, das Sie mit ReadyAPI erhalten.</p> <p>Und da Sie Parallelit\u00e4t und Asynchronit\u00e4t gleichzeitig haben k\u00f6nnen, erzielen Sie eine h\u00f6here Performanz als die meisten getesteten NodeJS-Frameworks und sind mit Go auf Augenh\u00f6he, einer kompilierten Sprache, die n\u00e4her an C liegt (alles dank Starlette).</p>"},{"location":"async/#ist-nebenlaufigkeit-besser-als-parallelitat","title":"Ist Nebenl\u00e4ufigkeit besser als Parallelit\u00e4t?","text":"<p>Nein! Das ist nicht die Moral der Geschichte.</p> <p>Nebenl\u00e4ufigkeit unterscheidet sich von Parallelit\u00e4t. Und sie ist besser bei bestimmten Szenarien, die viel Warten erfordern. Aus diesem Grund ist sie im Allgemeinen viel besser als Parallelit\u00e4t f\u00fcr die Entwicklung von Webanwendungen. Aber das stimmt nicht f\u00fcr alle Anwendungen.</p> <p>Um die Dinge auszugleichen, stellen Sie sich die folgende Kurzgeschichte vor:</p> <p>Sie m\u00fcssen ein gro\u00dfes, schmutziges Haus aufr\u00e4umen.</p> <p>Yup, das ist die ganze Geschichte.</p> <p>Es gibt kein Warten \ud83d\udd59, nur viel Arbeit an mehreren Stellen im Haus.</p> <p>Sie k\u00f6nnten wie im Hamburger-Beispiel hin- und herspringen, zuerst das Wohnzimmer, dann die K\u00fcche, aber da Sie auf nichts warten \ud83d\udd59, sondern nur putzen und putzen, h\u00e4tte das Hin- und Herspringen keine Auswirkungen.</p> <p>Es w\u00fcrde mit oder ohne Hin- und Herspringen (Nebenl\u00e4ufigkeit) die gleiche Zeit in Anspruch nehmen, um fertig zu werden, und Sie h\u00e4tten die gleiche Menge an Arbeit erledigt.</p> <p>Aber wenn Sie in diesem Fall die acht Ex-Kassierer/K\u00f6che/jetzt Reinigungskr\u00e4fte mitbringen w\u00fcrden und jeder von ihnen (plus Sie) w\u00fcrde einen Bereich des Hauses reinigen, k\u00f6nnten Sie die ganze Arbeit parallel erledigen, und w\u00fcrden mit dieser zus\u00e4tzlichen Hilfe viel schneller fertig werden.</p> <p>In diesem Szenario w\u00e4re jede einzelne Reinigungskraft (einschlie\u00dflich Ihnen) ein Prozessor, der seinen Teil der Arbeit erledigt.</p> <p>Und da die meiste Ausf\u00fchrungszeit durch tats\u00e4chliche Arbeit (anstatt durch Warten) in Anspruch genommen wird und die Arbeit in einem Computer von einer CPU erledigt wird, werden diese Probleme als \u201eCPU-lastig\u201c (\u201eCPU bound\u201c) bezeichnet.</p> <p>Typische Beispiele f\u00fcr CPU-lastige Vorg\u00e4nge sind Dinge, die komplexe mathematische Berechnungen erfordern.</p> <p>Zum Beispiel:</p> <ul> <li>Audio- oder Bildbearbeitung.</li> <li>Computer Vision: Ein Bild besteht aus Millionen von Pixeln, jedes Pixel hat 3 Werte / Farben, die Verarbeitung erfordert normalerweise, Berechnungen mit diesen Pixeln durchzuf\u00fchren, alles zur gleichen Zeit.</li> <li>Maschinelles Lernen: Normalerweise sind viele \u201eMatrix\u201c- und \u201eVektor\u201c-Multiplikationen erforderlich. Stellen Sie sich eine riesige Tabelle mit Zahlen vor, in der Sie alle Zahlen gleichzeitig multiplizieren.</li> <li>Deep Learning: Dies ist ein Teilgebiet des maschinellen Lernens, daher gilt das Gleiche. Es ist nur so, dass es nicht eine einzige Tabelle mit Zahlen zum Multiplizieren gibt, sondern eine riesige Menge davon, und in vielen F\u00e4llen verwendet man einen speziellen Prozessor, um diese Modelle zu erstellen und / oder zu verwenden.</li> </ul>"},{"location":"async/#nebenlaufigkeit-parallelitat-web-maschinelles-lernen","title":"Nebenl\u00e4ufigkeit + Parallelit\u00e4t: Web + maschinelles Lernen","text":"<p>Mit ReadyAPI k\u00f6nnen Sie die Vorteile der Nebenl\u00e4ufigkeit nutzen, die in der Webentwicklung weit verbreitet ist (derselbe Hauptvorteil von NodeJS).</p> <p>Sie k\u00f6nnen aber auch die Vorteile von Parallelit\u00e4t und Multiprocessing (Mehrere Prozesse werden parallel ausgef\u00fchrt) f\u00fcr CPU-lastige Workloads wie in Systemen f\u00fcr maschinelles Lernen nutzen.</p> <p>Dies und die einfache Tatsache, dass Python die Hauptsprache f\u00fcr Data Science, maschinelles Lernen und insbesondere Deep Learning ist, machen ReadyAPI zu einem sehr passenden Werkzeug f\u00fcr Web-APIs und Anwendungen f\u00fcr Data Science / maschinelles Lernen (neben vielen anderen).</p> <p>Wie Sie diese Parallelit\u00e4t in der Produktion erreichen, erfahren Sie im Abschnitt \u00fcber Deployment.</p>"},{"location":"async/#async-und-await","title":"<code>async</code> und <code>await</code>.","text":"<p>Moderne Versionen von Python verf\u00fcgen \u00fcber eine sehr intuitive M\u00f6glichkeit, asynchronen Code zu schreiben. Dadurch sieht es wie normaler \u201esequentieller\u201c Code aus und \u00fcbernimmt im richtigen Moment das \u201eWarten\u201c f\u00fcr Sie.</p> <p>Wenn es einen Vorgang gibt, der erfordert, dass gewartet wird, bevor die Ergebnisse zur\u00fcckgegeben werden, und der diese neue Python-Funktionalit\u00e4t unterst\u00fctzt, k\u00f6nnen Sie ihn wie folgt schreiben:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>Der Schl\u00fcssel hier ist das <code>await</code>. Es teilt Python mit, dass es warten \u23f8 muss, bis <code>get_burgers(2)</code> seine Aufgabe erledigt hat \ud83d\udd59, bevor die Ergebnisse in <code>burgers</code> gespeichert werden. Damit wei\u00df Python, dass es in der Zwischenzeit etwas anderes tun kann \ud83d\udd00 \u23ef (z. B. einen weiteren Request empfangen).</p> <p>Damit <code>await</code> funktioniert, muss es sich in einer Funktion befinden, die diese Asynchronit\u00e4t unterst\u00fctzt. Dazu deklarieren Sie sie einfach mit <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n    # Mach Sie hier etwas Asynchrones, um die Burger zu erstellen\n    return burgers\n</code></pre> <p>... statt mit <code>def</code>:</p> <pre><code># Die ist nicht asynchron\ndef get_sequential_burgers(number: int):\n    # Mach Sie hier etwas Sequentielles, um die Burger zu erstellen\n    return burgers\n</code></pre> <p>Mit <code>async def</code> wei\u00df Python, dass es innerhalb dieser Funktion auf <code>await</code>-Ausdr\u00fccke achten muss und dass es die Ausf\u00fchrung dieser Funktion \u201eanhalten\u201c \u23f8 und etwas anderes tun kann \ud83d\udd00, bevor es zur\u00fcckkommt.</p> <p>Wenn Sie eine <code>async def</code>-Funktion aufrufen m\u00f6chten, m\u00fcssen Sie sie \u201eerwarten\u201c (\u201eawait\u201c). Das folgende wird also nicht funktionieren:</p> <pre><code># Das funktioniert nicht, weil get_burgers definiert wurde mit: async def\nburgers = get_burgers(2)\n</code></pre> <p>Wenn Sie also eine Bibliothek verwenden, die Ihnen sagt, dass Sie sie mit <code>await</code> aufrufen k\u00f6nnen, m\u00fcssen Sie die Pfadoperation-Funktionen, die diese Bibliothek verwenden, mittels <code>async def</code> erstellen, wie in:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n</code></pre>"},{"location":"async/#weitere-technische-details","title":"Weitere technische Details","text":"<p>Ihnen ist wahrscheinlich aufgefallen, dass <code>await</code> nur innerhalb von Funktionen verwendet werden kann, die mit <code>async def</code> definiert sind.</p> <p>Gleichzeitig m\u00fcssen aber mit <code>async def</code> definierte Funktionen \u201eerwartet\u201c (\u201eawaited\u201c) werden. Daher k\u00f6nnen Funktionen mit <code>async def</code> nur innerhalb von Funktionen aufgerufen werden, die auch mit <code>async def</code> definiert sind.</p> <p>Daraus resultiert das Ei-und-Huhn-Problem: Wie ruft man die erste <code>async</code> Funktion auf?</p> <p>Wenn Sie mit ReadyAPI arbeiten, m\u00fcssen Sie sich dar\u00fcber keine Sorgen machen, da diese \u201eerste\u201c Funktion Ihre Pfadoperation-Funktion sein wird und ReadyAPI wei\u00df, was zu tun ist.</p> <p>Wenn Sie jedoch <code>async</code> / <code>await</code> ohne ReadyAPI verwenden m\u00f6chten, k\u00f6nnen Sie dies auch tun.</p>"},{"location":"async/#schreiben-sie-ihren-eigenen-asynchronen-code","title":"Schreiben Sie Ihren eigenen asynchronen Code","text":"<p>Starlette (und ReadyAPI) basiert auf AnyIO, was bedeutet, es ist sowohl kompatibel mit der Python-Standardbibliothek asyncio, als auch mit Trio.</p> <p>Insbesondere k\u00f6nnen Sie AnyIO direkt verwenden f\u00fcr Ihre fortgeschritten nebenl\u00e4ufigen und parallelen Anwendungsf\u00e4lle, die fortgeschrittenere Muster in Ihrem eigenen Code erfordern.</p> <p>Und selbst wenn Sie ReadyAPI nicht verwenden w\u00fcrden, k\u00f6nnten Sie auch Ihre eigenen asynchronen Anwendungen mit AnyIO so schreiben, dass sie hoch kompatibel sind und Sie dessen Vorteile nutzen k\u00f6nnen (z. B. strukturierte Nebenl\u00e4ufigkeit).</p>"},{"location":"async/#andere-formen-von-asynchronem-code","title":"Andere Formen von asynchronem Code","text":"<p>Diese Art der Verwendung von <code>async</code> und <code>await</code> ist in der Sprache relativ neu.</p> <p>Aber sie erleichtert die Arbeit mit asynchronem Code erheblich.</p> <p>Die gleiche Syntax (oder fast identisch) wurde k\u00fcrzlich auch in moderne Versionen von JavaScript (im Browser und in NodeJS) aufgenommen.</p> <p>Davor war der Umgang mit asynchronem Code jedoch deutlich komplexer und schwieriger.</p> <p>In fr\u00fcheren Versionen von Python h\u00e4tten Sie Threads oder Gevent verwenden k\u00f6nnen. Der Code ist jedoch viel komplexer zu verstehen, zu debuggen und nachzuvollziehen.</p> <p>In fr\u00fcheren Versionen von NodeJS / Browser JavaScript h\u00e4tten Sie \u201eCallbacks\u201c verwendet. Was zur Callback-H\u00f6lle f\u00fchrt.</p>"},{"location":"async/#coroutinen","title":"Coroutinen","text":"<p>Coroutine ist nur ein schicker Begriff f\u00fcr dasjenige, was von einer <code>async def</code>-Funktion zur\u00fcckgegeben wird. Python wei\u00df, dass es so etwas wie eine Funktion ist, die es starten kann und die irgendwann endet, aber auch dass sie pausiert \u23f8 werden kann, wann immer darin ein <code>await</code> steht.</p> <p>Aber all diese Funktionalit\u00e4t der Verwendung von asynchronem Code mit <code>async</code> und <code>await</code> wird oft als Verwendung von \u201eCoroutinen\u201c zusammengefasst. Es ist vergleichbar mit dem Hauptmerkmal von Go, den \u201eGoroutinen\u201c.</p>"},{"location":"async/#fazit","title":"Fazit","text":"<p>Sehen wir uns den gleichen Satz von oben noch mal an:</p> <p>Moderne Versionen von Python unterst\u00fctzen \u201easynchronen Code\u201c unter Verwendung sogenannter \u201eCoroutinen\u201c mithilfe der Syntax <code>async</code> und <code>await</code>.</p> <p>Das sollte jetzt mehr Sinn ergeben. \u2728</p> <p>All das ist es, was ReadyAPI (via Starlette) befeuert und es eine so beeindruckende Performanz haben l\u00e4sst.</p>"},{"location":"async/#sehr-technische-details","title":"Sehr technische Details","text":"<p>Achtung</p> <p>Das folgende k\u00f6nnen Sie wahrscheinlich \u00fcberspringen.</p> <p>Dies sind sehr technische Details dar\u00fcber, wie ReadyAPI unter der Haube funktioniert.</p> <p>Wenn Sie \u00fcber gute technische Kenntnisse verf\u00fcgen (Coroutinen, Threads, Blocking, usw.) und neugierig sind, wie ReadyAPI mit <code>async def</code>s im Vergleich zu normalen <code>def</code>s umgeht, fahren Sie fort.</p>"},{"location":"async/#pfadoperation-funktionen","title":"Pfadoperation-Funktionen","text":"<p>Wenn Sie eine Pfadoperation-Funktion mit normalem <code>def</code> anstelle von <code>async def</code> deklarieren, wird sie in einem externen Threadpool ausgef\u00fchrt, der dann <code>await</code>et wird, anstatt direkt aufgerufen zu werden (da dies den Server blockieren w\u00fcrde).</p> <p>Wenn Sie von einem anderen asynchronen Framework kommen, das nicht auf die oben beschriebene Weise funktioniert, und Sie es gewohnt sind, triviale, nur-berechnende Pfadoperation-Funktionen mit einfachem <code>def</code> zu definieren, um einen geringf\u00fcgigen Geschwindigkeitsgewinn (etwa 100 Nanosekunden) zu erzielen, beachten Sie bitte, dass der Effekt in ReadyAPI genau gegenteilig w\u00e4re. In solchen F\u00e4llen ist es besser, <code>async def</code> zu verwenden, es sei denn, Ihre Pfadoperation-Funktionen verwenden Code, der blockierende I/O-Operationen durchf\u00fchrt.</p> <p>Dennoch besteht in beiden F\u00e4llen eine gute Chance, dass ReadyAPI immer noch schneller als Ihr bisheriges Framework (oder zumindest damit vergleichbar) ist.</p>"},{"location":"async/#abhangigkeiten","title":"Abh\u00e4ngigkeiten","text":"<p>Das Gleiche gilt f\u00fcr Abh\u00e4ngigkeiten. Wenn eine Abh\u00e4ngigkeit eine normale <code>def</code>-Funktion ist, anstelle einer <code>async def</code>-Funktion, dann wird sie im externen Threadpool ausgef\u00fchrt.</p>"},{"location":"async/#unterabhangigkeiten","title":"Unterabh\u00e4ngigkeiten","text":"<p>Sie k\u00f6nnen mehrere Abh\u00e4ngigkeiten und Unterabh\u00e4ngigkeiten haben, die einander bedingen (als Parameter der Funktionsdefinitionen), einige davon k\u00f6nnten erstellt werden mit <code>async def</code> und einige mit normalem <code>def</code>. Es w\u00fcrde immer noch funktionieren und diejenigen, die mit normalem <code>def</code> erstellt wurden, w\u00fcrden in einem externen Thread (vom Threadpool stammend) aufgerufen werden, anstatt <code>await</code>et zu werden.</p>"},{"location":"async/#andere-hilfsfunktionen","title":"Andere Hilfsfunktionen","text":"<p>Jede andere Hilfsfunktion, die Sie direkt aufrufen, kann mit normalem <code>def</code> oder <code>async def</code> erstellt werden, und ReadyAPI beeinflusst nicht die Art und Weise, wie Sie sie aufrufen.</p> <p>Dies steht im Gegensatz zu den Funktionen, die ReadyAPI f\u00fcr Sie aufruft: Pfadoperation-Funktionen und Abh\u00e4ngigkeiten.</p> <p>Wenn Ihre Hilfsfunktion eine normale Funktion mit <code>def</code> ist, wird sie direkt aufgerufen (so wie Sie es in Ihrem Code schreiben), nicht in einem Threadpool. Wenn die Funktion mit <code>async def</code> erstellt wurde, sollten Sie sie <code>await</code>en, wenn Sie sie in Ihrem Code aufrufen.</p> <p>Nochmal, es handelt sich hier um sehr technische Details, die Ihnen helfen, falls Sie danach gesucht haben.</p> <p>Andernfalls liegen Sie richtig, wenn Sie sich an die Richtlinien aus dem obigen Abschnitt halten: In Eile?.</p>"},{"location":"benchmarks/","title":"Benchmarks","text":"<p>Unabh\u00e4ngige TechEmpower-Benchmarks zeigen, ReadyAPI-Anwendungen, die unter Uvicorn ausgef\u00fchrt werden, geh\u00f6ren zu den schnellsten existierenden Python-Frameworks, nur Starlette und Uvicorn selbst (intern von ReadyAPI verwendet) sind schneller.</p> <p>Beim Ansehen von Benchmarks und Vergleichen sollten Sie jedoch Folgende Punkte beachten.</p>"},{"location":"benchmarks/#benchmarks-und-geschwindigkeit","title":"Benchmarks und Geschwindigkeit","text":"<p>Wenn Sie sich die Benchmarks ansehen, werden h\u00e4ufig mehrere Tools mit unterschiedlichen Eigenschaften als gleichwertig verglichen.</p> <p>Konkret geht es darum, Uvicorn, Starlette und ReadyAPI miteinander zu vergleichen (neben vielen anderen Tools).</p> <p>Je einfacher das Problem, welches durch das Tool gel\u00f6st wird, desto besser ist die Performanz. Und die meisten Benchmarks testen nicht die zus\u00e4tzlichen Funktionen, welche das Tool bietet.</p> <p>Die Hierarchie ist wie folgt:</p> <ul> <li> <p>Uvicorn: ein ASGI-Server</p> <ul> <li>Starlette: (verwendet Uvicorn) ein Web-Mikroframework<ul> <li>ReadyAPI: (verwendet Starlette) ein API-Mikroframework mit mehreren zus\u00e4tzlichen Funktionen zum Erstellen von APIs, mit Datenvalidierung, usw.</li> </ul> </li> </ul> </li> <li> <p>Uvicorn:</p> <ul> <li>Bietet die beste Leistung, da au\u00dfer dem Server selbst nicht viel zus\u00e4tzlicher Code vorhanden ist.</li> <li>Sie w\u00fcrden eine Anwendung nicht direkt in Uvicorn schreiben. Das w\u00fcrde bedeuten, dass Ihr Code zumindest mehr oder weniger den gesamten von Starlette (oder ReadyAPI) bereitgestellten Code enthalten m\u00fcsste. Und wenn Sie das t\u00e4ten, h\u00e4tte Ihre endg\u00fcltige Anwendung den gleichen Overhead wie die Verwendung eines Frameworks nebst Minimierung Ihres Anwendungscodes und der Fehler.</li> <li>Wenn Sie Uvicorn vergleichen, vergleichen Sie es mit Anwendungsservern wie Daphne, Hypercorn, uWSGI, usw.</li> </ul> </li> <li>Starlette:<ul> <li>Wird nach Uvicorn die n\u00e4chstbeste Performanz erbringen. Tats\u00e4chlich nutzt Starlette intern Uvicorn. Daher kann es wahrscheinlich nur \u201elangsamer\u201c als Uvicorn sein, weil mehr Code ausgef\u00fchrt wird.</li> <li>Aber es bietet Ihnen die Tools zum Erstellen einfacher Webanwendungen, mit Routing basierend auf Pfaden, usw.</li> <li>Wenn Sie Starlette vergleichen, vergleichen Sie es mit Webframeworks (oder Mikroframeworks) wie Sanic, Flask, Django, usw.</li> </ul> </li> <li>ReadyAPI:<ul> <li>So wie Starlette Uvicorn verwendet und nicht schneller als dieses sein kann, verwendet ReadyAPI Starlette, sodass es nicht schneller als dieses sein kann.</li> <li>ReadyAPI bietet zus\u00e4tzlich zu Starlette weitere Funktionen. Funktionen, die Sie beim Erstellen von APIs fast immer ben\u00f6tigen, wie Datenvalidierung und Serialisierung. Und wenn Sie es verwenden, erhalten Sie kostenlos automatische Dokumentation (die automatische Dokumentation verursacht nicht einmal zus\u00e4tzlichen Aufwand f\u00fcr laufende Anwendungen, sie wird beim Start generiert).</li> <li>Wenn Sie ReadyAPI nicht, und direkt Starlette (oder ein anderes Tool wie Sanic, Flask, Responder, usw.) verwenden w\u00fcrden, m\u00fcssten Sie die gesamte Datenvalidierung und Serialisierung selbst implementieren. Ihre finale Anwendung h\u00e4tte also immer noch den gleichen Overhead, als ob sie mit ReadyAPI erstellt worden w\u00e4re. Und in vielen F\u00e4llen ist diese Datenvalidierung und Serialisierung der gr\u00f6\u00dfte Teil des in Anwendungen geschriebenen Codes.</li> <li>Durch die Verwendung von ReadyAPI sparen Sie also Entwicklungszeit, Fehler und Codezeilen und w\u00fcrden wahrscheinlich die gleiche Leistung (oder eine bessere) erzielen, die Sie h\u00e4tten, wenn Sie es nicht verwenden w\u00fcrden (da Sie alles in Ihrem Code implementieren m\u00fcssten).</li> <li>Wenn Sie ReadyAPI vergleichen, vergleichen Sie es mit einem Webanwendung-Framework (oder einer Reihe von Tools), welche Datenvalidierung, Serialisierung und Dokumentation bereitstellen, wie Flask-apispec, NestJS, Molten, usw. \u2013 Frameworks mit integrierter automatischer Datenvalidierung, Serialisierung und Dokumentation.</li> </ul> </li> </ul>"},{"location":"features/","title":"Merkmale","text":""},{"location":"features/#readyapi-merkmale","title":"ReadyAPI Merkmale","text":"<p>ReadyAPI erm\u00f6glicht Ihnen Folgendes:</p>"},{"location":"features/#basiert-auf-offenen-standards","title":"Basiert auf offenen Standards","text":"<ul> <li>OpenAPI f\u00fcr die Erstellung von APIs, inklusive Deklarationen von Pfad-Operationen, Parametern, Requestbodys, Sicherheit, usw.</li> <li>Automatische Dokumentation der Datenmodelle mit JSON Schema (da OpenAPI selbst auf JSON Schema basiert).</li> <li>Um diese Standards herum entworfen, nach sorgf\u00e4ltigem Studium. Statt einer nachtr\u00e4glichen Schicht dar\u00fcber.</li> <li>Dies erm\u00f6glicht auch automatische Client-Code-Generierung in vielen Sprachen.</li> </ul>"},{"location":"features/#automatische-dokumentation","title":"Automatische Dokumentation","text":"<p>Interaktive API-Dokumentation und erkundbare Web-Benutzeroberfl\u00e4chen. Da das Framework auf OpenAPI basiert, gibt es mehrere Optionen, zwei sind standardm\u00e4\u00dfig vorhanden.</p> <ul> <li>Swagger UI, bietet interaktive Erkundung, testen und rufen Sie ihre API direkt im Webbrowser auf.</li> </ul> <p></p> <ul> <li>Alternative API-Dokumentation mit ReDoc.</li> </ul> <p></p>"},{"location":"features/#nur-modernes-python","title":"Nur modernes Python","text":"<p>Alles basiert auf Python 3.8 Typ-Deklarationen (dank Pydantic). Es muss keine neue Syntax gelernt werden, nur standardisiertes modernes Python.</p> <p>Wenn Sie eine zweimin\u00fctige Auffrischung ben\u00f6tigen, wie man Python-Typen verwendet (auch wenn Sie ReadyAPI nicht benutzen), schauen Sie sich das kurze Tutorial an: Einf\u00fchrung in Python-Typen.</p> <p>Sie schreiben Standard-Python mit Typen:</p> <pre><code>from typing import List, Dict\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Deklarieren Sie eine Variable als ein `str`\n# und bekommen Sie Editor-Unterst\u00fctung innerhalb der Funktion\ndef main(user_id: str):\n    return user_id\n\n\n# Ein Pydantic-Modell\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n</code></pre> <p>Das kann nun wie folgt verwendet werden:</p> <pre><code>my_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n</code></pre> <p>Info</p> <p><code>**second_user_data</code> bedeutet:</p> <p>Nimm die Schl\u00fcssel-Wert-Paare des <code>second_user_data</code> Dicts und \u00fcbergib sie direkt als Schl\u00fcsselwort-Argumente. \u00c4quivalent zu: <code>User(id=4, name=\"Mary\", joined=\"2018-11-30\")</code>.</p>"},{"location":"features/#editor-unterstutzung","title":"Editor Unterst\u00fctzung","text":"<p>Das ganze Framework wurde so entworfen, dass es einfach und intuitiv zu benutzen ist; alle Entscheidungen wurden auf mehreren Editoren getestet, sogar vor der Implementierung, um die bestm\u00f6gliche Entwicklererfahrung zu gew\u00e4hrleisten.</p> <p>In der letzten Python-Entwickler-Umfrage wurde klar, dass die meist genutzte Funktion die \u201eAutovervollst\u00e4ndigung\u201c ist.</p> <p>Das gesamte ReadyAPI-Framework ist darauf ausgelegt, das zu erf\u00fcllen. Autovervollst\u00e4ndigung funktioniert \u00fcberall.</p> <p>Sie werden selten noch mal in der Dokumentation nachschauen m\u00fcssen.</p> <p>So kann ihr Editor Sie unterst\u00fctzen:</p> <ul> <li>in Visual Studio Code:</li> </ul> <p></p> <ul> <li>in PyCharm:</li> </ul> <p></p> <p>Sie bekommen sogar Autovervollst\u00e4ndigung an Stellen, an denen Sie dies vorher nicht f\u00fcr m\u00f6glich gehalten h\u00e4tten. Zum Beispiel der <code>price</code> Schl\u00fcssel in einem JSON Datensatz (dieser k\u00f6nnte auch verschachtelt sein), der aus einer Anfrage kommt.</p> <p>Nie wieder falsche Schl\u00fcsselnamen tippen, Hin und Herh\u00fcpfen zwischen der Dokumentation, Hoch- und Runterscrollen, um herauszufinden, ob es <code>username</code> oder <code>user_name</code> war.</p>"},{"location":"features/#kompakt","title":"Kompakt","text":"<p>Es gibt f\u00fcr alles sensible Defaultwerte, mit optionaler Konfiguration \u00fcberall. Alle Parameter k\u00f6nnen feinjustiert werden, damit sie tun, was Sie ben\u00f6tigen, und die API definieren, die Sie brauchen.</p> <p>Aber standardm\u00e4\u00dfig \u201efunktioniert einfach alles\u201c.</p>"},{"location":"features/#validierung","title":"Validierung","text":"<ul> <li> <p>Validierung f\u00fcr die meisten (oder alle?) Python-Datentypen, hierzu geh\u00f6ren:</p> <ul> <li>JSON Objekte (<code>dict</code>).</li> <li>JSON Listen (<code>list</code>), die den Typ ihrer Elemente definieren.</li> <li>Strings (<code>str</code>) mit definierter minimaler und maximaler L\u00e4nge.</li> <li>Zahlen (<code>int</code>, <code>float</code>) mit Mindest- und Maximal-Werten, usw.</li> </ul> </li> <li> <p>Validierung f\u00fcr mehr exotische Typen, wie:</p> <ul> <li>URL.</li> <li>E-Mail.</li> <li>UUID.</li> <li>... und andere.</li> </ul> </li> </ul> <p>Die gesamte Validierung \u00fcbernimmt das gut etablierte und robuste Pydantic.</p>"},{"location":"features/#sicherheit-und-authentifizierung","title":"Sicherheit und Authentifizierung","text":"<p>Sicherheit und Authentifizierung ist integriert. Ohne Kompromisse bei Datenbanken oder Datenmodellen.</p> <p>Alle in OpenAPI definierten Sicherheitsschemas, inklusive:</p> <ul> <li>HTTP Basic Authentifizierung.</li> <li>OAuth2 (auch mit JWT Tokens). Siehe dazu das Tutorial zu OAuth2 mit JWT.</li> <li>API Schl\u00fcssel in:<ul> <li>Header-Feldern.</li> <li>Anfrageparametern.</li> <li>Cookies, usw.</li> </ul> </li> </ul> <p>Zus\u00e4tzlich alle Sicherheitsfunktionen von Starlette (inklusive Session Cookies).</p> <p>Alles als wiederverwendbare Tools und Komponenten gebaut, die einfach in ihre Systeme, Datenspeicher, relationalen und nicht-relationalen Datenbanken, usw., integriert werden k\u00f6nnen.</p>"},{"location":"features/#einbringen-von-abhangigkeiten-dependency-injection","title":"Einbringen von Abh\u00e4ngigkeiten (Dependency Injection)","text":"<p>ReadyAPI enth\u00e4lt ein extrem einfach zu verwendendes, aber extrem m\u00e4chtiges Dependency Injection System.</p> <ul> <li>Selbst Abh\u00e4ngigkeiten k\u00f6nnen Abh\u00e4ngigkeiten haben, woraus eine Hierarchie oder ein \u201eGraph\u201c von Abh\u00e4ngigkeiten entsteht.</li> <li>Alles automatisch gehandhabt durch das Framework.</li> <li>Alle Abh\u00e4ngigkeiten k\u00f6nnen Daten von Anfragen anfordern und das Verhalten von Pfadoperationen und der automatisierten Dokumentation modifizieren.</li> <li>Automatische Validierung selbst f\u00fcr solche Parameter von Pfadoperationen, welche in Abh\u00e4ngigkeiten definiert sind.</li> <li>Unterst\u00fctzung f\u00fcr komplexe Authentifizierungssysteme, Datenbankverbindungen, usw.</li> <li>Keine Kompromisse bei Datenbanken, Frontends, usw., sondern einfache Integration mit allen.</li> </ul>"},{"location":"features/#unbegrenzte-erweiterungen","title":"Unbegrenzte Erweiterungen","text":"<p>Oder mit anderen Worten, sie werden nicht ben\u00f6tigt. Importieren und nutzen Sie den Code, den Sie brauchen.</p> <p>Jede Integration wurde so entworfen, dass sie so einfach zu nutzen ist (mit Abh\u00e4ngigkeiten), dass Sie eine Erweiterung f\u00fcr Ihre Anwendung mit nur zwei Zeilen Code erstellen k\u00f6nnen. Hierbei nutzen Sie die gleiche Struktur und Syntax, wie bei Pfadoperationen.</p>"},{"location":"features/#getestet","title":"Getestet","text":"<ul> <li>100 % Testabdeckung.</li> <li>100 % Typen annotiert.</li> <li>Verwendet in Produktionsanwendungen.</li> </ul>"},{"location":"features/#starlettes-merkmale","title":"Starlette's Merkmale","text":"<p>ReadyAPI ist vollkommen kompatibel (und basiert auf) Starlette. Das bedeutet, wenn Sie eigenen Starlette Quellcode haben, funktioniert der.</p> <p><code>ReadyAPI</code> ist tats\u00e4chlich eine Unterklasse von <code>Starlette</code>. Wenn Sie also bereits Starlette kennen oder benutzen, das meiste funktioniert genau so.</p> <p>Mit ReadyAPI bekommen Sie alles von Starlette (da ReadyAPI nur Starlette auf Steroiden ist):</p> <ul> <li>Schwer beeindruckende Performanz. Es ist eines der schnellsten Python-Frameworks, auf Augenh\u00f6he mit NodeJS und Go.</li> <li>WebSocket-Unterst\u00fctzung.</li> <li>Hintergrundaufgaben im selben Prozess.</li> <li>Ereignisse beim Starten und Herunterfahren.</li> <li>Testclient baut auf HTTPX auf.</li> <li>CORS, GZip, statische Dateien, Responses streamen.</li> <li>Sitzungs- und Cookie-Unterst\u00fctzung.</li> <li>100 % Testabdeckung.</li> <li>100 % Typen annotierte Codebasis.</li> </ul>"},{"location":"features/#pydantics-merkmale","title":"Pydantic's Merkmale","text":"<p>ReadyAPI ist vollkommen kompatibel (und basiert auf) Pydantic. Das bedeutet, wenn Sie eigenen Pydantic Quellcode haben, funktioniert der.</p> <p>Inklusive externer Bibliotheken, die auf Pydantic basieren, wie ORMs, ODMs f\u00fcr Datenbanken.</p> <p>Daher k\u00f6nnen Sie in vielen F\u00e4llen das Objekt einer Anfrage direkt zur Datenbank schicken, weil alles automatisch validiert wird.</p> <p>Das gleiche gilt auch f\u00fcr die andere Richtung: Sie k\u00f6nnen in vielen F\u00e4llen das Objekt aus der Datenbank direkt zum Client schicken.</p> <p>Mit ReadyAPI bekommen Sie alle Funktionen von Pydantic (da ReadyAPI f\u00fcr die gesamte Datenverarbeitung Pydantic nutzt):</p> <ul> <li>Kein Kopfzerbrechen:<ul> <li>Keine neue Schemadefinition-Mikrosprache zu lernen.</li> <li>Wenn Sie Pythons Typen kennen, wissen Sie, wie man Pydantic verwendet.</li> </ul> </li> <li>Gutes Zusammenspiel mit Ihrer/Ihrem IDE/Linter/Gehirn:<ul> <li>Weil Pydantics Datenstrukturen einfach nur Instanzen ihrer definierten Klassen sind; Autovervollst\u00e4ndigung, Linting, mypy und ihre Intuition sollten alle einwandfrei mit ihren validierten Daten funktionieren.</li> </ul> </li> <li>Validierung von komplexen Strukturen:<ul> <li>Benutzung von hierarchischen Pydantic-Modellen, Python-<code>typing</code>s <code>List</code> und <code>Dict</code>, etc.</li> <li>Die Validierer erlauben es, komplexe Datenschemen klar und einfach zu definieren, \u00fcberpr\u00fcft und dokumentiert als JSON Schema.</li> <li>Sie k\u00f6nnen tief verschachtelte JSON Objekte haben, die alle validiert und annotiert sind.</li> </ul> </li> <li>Erweiterbar:<ul> <li>Pydantic erlaubt die Definition von eigenen Datentypen oder sie k\u00f6nnen die Validierung mit einer <code>validator</code>-dekorierten Methode im Modell erweitern.</li> </ul> </li> <li>100 % Testabdeckung.</li> </ul>"},{"location":"help-readyapi/","title":"ReadyAPI helfen \u2013 Hilfe erhalten","text":"<p>Gef\u00e4llt Ihnen ReadyAPI?</p> <p>M\u00f6chten Sie ReadyAPI, anderen Benutzern und dem Autor helfen?</p> <p>Oder m\u00f6chten Sie Hilfe zu ReadyAPI erhalten?</p> <p>Es gibt sehr einfache M\u00f6glichkeiten zu helfen (manche erfordern nur ein oder zwei Klicks).</p> <p>Und es gibt auch viele M\u00f6glichkeiten, Hilfe zu bekommen.</p>"},{"location":"help-readyapi/#newsletter-abonnieren","title":"Newsletter abonnieren","text":"<p>Sie k\u00f6nnen den (unregelm\u00e4\u00dfig erscheinenden) ReadyAPI and Friends-Newsletter abonnieren, um auf dem Laufenden zu bleiben:</p> <ul> <li>Neuigkeiten \u00fcber ReadyAPI and Friends \ud83d\ude80</li> <li>Anleitungen \ud83d\udcdd</li> <li>Funktionen \u2728</li> <li>Breaking Changes \ud83d\udea8</li> <li>Tipps und Tricks \u2705</li> </ul>"},{"location":"help-readyapi/#readyapi-auf-twitter-folgen","title":"ReadyAPI auf Twitter folgen","text":"<p>Folgen Sie @readyapi auf Twitter, um die neuesten Nachrichten \u00fcber ReadyAPI zu erhalten. \ud83d\udc26</p>"},{"location":"help-readyapi/#readyapi-auf-github-einen-stern-geben","title":"ReadyAPI auf GitHub einen Stern geben","text":"<p>Sie k\u00f6nnen ReadyAPI auf GitHub \u201estarren\u201c (durch Klicken auf den Stern-Button oben rechts): https://github.com/readyapi/readyapi. \u2b50\ufe0f</p> <p>Durch das Hinzuf\u00fcgen eines Sterns k\u00f6nnen andere Benutzer es leichter finden und sehen, dass es f\u00fcr andere bereits n\u00fctzlich war.</p>"},{"location":"help-readyapi/#das-github-repository-auf-releases-beobachten","title":"Das GitHub-Repository auf Releases beobachten","text":"<p>Sie k\u00f6nnen ReadyAPI in GitHub beobachten (Klicken Sie oben rechts auf den Button \u201ewatch\u201c): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>Dort k\u00f6nnen Sie \u201eReleases only\u201c ausw\u00e4hlen.</p> <p>Auf diese Weise erhalten Sie Benachrichtigungen (per E-Mail), wenn es einen neuen Release (eine neue Version) von ReadyAPI mit Fehlerbehebungen und neuen Funktionen gibt.</p>"},{"location":"help-readyapi/#mit-dem-autor-vernetzen","title":"Mit dem Autor vernetzen","text":"<p>Sie k\u00f6nnen sich mit mir (KhulnaSoft Ltd / <code>khulnasoft</code>), dem Autor, verbinden.</p> <p>Insbesondere:</p> <ul> <li> Folgen Sie mir auf GitHub.<ul> <li>Finden Sie andere Open-Source-Projekte, die ich erstellt habe und die Ihnen helfen k\u00f6nnten.</li> <li>Folgen Sie mir, um mitzubekommen, wenn ich ein neues Open-Source-Projekt erstelle.</li> </ul> </li> <li>Folgen Sie mir auf Twitter oder Mastodon.<ul> <li>Berichten Sie mir, wie Sie ReadyAPI verwenden (das h\u00f6re ich gerne).</li> <li>Bekommen Sie mit, wenn ich Ank\u00fcndigungen mache oder neue Tools ver\u00f6ffentliche.</li> <li>Sie k\u00f6nnen auch @readyapi auf Twitter folgen (ein separates Konto).</li> </ul> </li> <li>Folgen Sie mir auf LinkedIn.<ul> <li>Bekommen Sie mit, wenn ich Ank\u00fcndigungen mache oder neue Tools ver\u00f6ffentliche (obwohl ich Twitter h\u00e4ufiger verwende \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Lesen Sie, was ich schreibe (oder folgen Sie mir) auf Dev.to oder Medium.<ul> <li>Lesen Sie andere Ideen, Artikel, und erfahren Sie mehr \u00fcber die von mir erstellten Tools.</li> <li>Folgen Sie mir, um zu lesen, wenn ich etwas Neues ver\u00f6ffentliche.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#uber-readyapi-tweeten","title":"\u00dcber ReadyAPI tweeten","text":"<p>Tweeten Sie \u00fcber ReadyAPI und teilen Sie mir und anderen mit, warum es Ihnen gef\u00e4llt. \ud83c\udf89</p> <p>Ich h\u00f6re gerne, wie ReadyAPI verwendet wird, was Ihnen daran gefallen hat, in welchem Projekt/Unternehmen Sie es verwenden, usw.</p>"},{"location":"help-readyapi/#fur-readyapi-abstimmen","title":"F\u00fcr ReadyAPI abstimmen","text":"<ul> <li>Stimmen Sie f\u00fcr ReadyAPI auf Slant.</li> <li>Stimmen Sie f\u00fcr ReadyAPI auf AlternativeTo.</li> <li>Berichten Sie auf StackShare, dass Sie ReadyAPI verwenden.</li> </ul>"},{"location":"help-readyapi/#anderen-bei-fragen-auf-github-helfen","title":"Anderen bei Fragen auf GitHub helfen","text":"<p>Sie k\u00f6nnen versuchen, anderen bei ihren Fragen zu helfen:</p> <ul> <li>GitHub-Diskussionen</li> <li>GitHub-Issues</li> </ul> <p>In vielen F\u00e4llen kennen Sie m\u00f6glicherweise bereits die Antwort auf diese Fragen. \ud83e\udd13</p> <p>Wenn Sie vielen Menschen bei ihren Fragen helfen, werden Sie offizieller ReadyAPI-Experte. \ud83c\udf89</p> <p>Denken Sie aber daran, der wichtigste Punkt ist: Versuchen Sie, freundlich zu sein. Die Leute bringen ihre Frustrationen mit und fragen in vielen F\u00e4llen nicht auf die beste Art und Weise, aber versuchen Sie dennoch so gut wie m\u00f6glich, freundlich zu sein. \ud83e\udd17</p> <p>Die ReadyAPI-Community soll freundlich und einladend sein. Und auch kein Mobbing oder respektloses Verhalten gegen\u00fcber anderen akzeptieren. Wir m\u00fcssen uns umeinander k\u00fcmmern.</p> <p>So helfen Sie anderen bei Fragen (in Diskussionen oder Problemen):</p>"},{"location":"help-readyapi/#die-frage-verstehen","title":"Die Frage verstehen","text":"<ul> <li> <p>Fragen Sie sich, ob Sie verstehen, was das Ziel und der Anwendungsfall der fragenden Person ist.</p> </li> <li> <p>\u00dcberpr\u00fcfen Sie dann, ob die Frage (die \u00fcberwiegende Mehrheit sind Fragen) klar ist.</p> </li> <li> <p>In vielen F\u00e4llen handelt es sich bei der gestellten Frage um eine L\u00f6sung, die der Benutzer sich vorstellt, aber es k\u00f6nnte eine bessere L\u00f6sung geben. Wenn Sie das Problem und den Anwendungsfall besser verstehen, k\u00f6nnen Sie eine bessere Alternativl\u00f6sung vorschlagen.</p> </li> <li> <p>Wenn Sie die Frage nicht verstehen k\u00f6nnen, fragen Sie nach weiteren Details.</p> </li> </ul>"},{"location":"help-readyapi/#das-problem-reproduzieren","title":"Das Problem reproduzieren","text":"<p>In den meisten F\u00e4llen und bei den meisten Fragen ist etwas mit dem von der Person erstellten eigenen Quellcode los.</p> <p>In vielen F\u00e4llen wird nur ein Fragment des Codes gepostet, aber das reicht nicht aus, um das Problem zu reproduzieren.</p> <ul> <li> <p>Sie k\u00f6nnen die Person darum bitten, ein minimales, reproduzierbares Beispiel bereitzustellen, welches Sie kopieren, einf\u00fcgen und lokal ausf\u00fchren k\u00f6nnen, um den gleichen Fehler oder das gleiche Verhalten zu sehen, das die Person sieht, oder um ihren Anwendungsfall besser zu verstehen.</p> </li> <li> <p>Wenn Sie in Geberlaune sind, k\u00f6nnen Sie versuchen, selbst ein solches Beispiel zu erstellen, nur basierend auf der Beschreibung des Problems. Denken Sie jedoch daran, dass dies viel Zeit in Anspruch nehmen kann und dass es besser sein kann, zun\u00e4chst um eine Kl\u00e4rung des Problems zu bitten.</p> </li> </ul>"},{"location":"help-readyapi/#losungen-vorschlagen","title":"L\u00f6sungen vorschlagen","text":"<ul> <li> <p>Nachdem Sie die Frage verstanden haben, k\u00f6nnen Sie eine m\u00f6gliche Antwort geben.</p> </li> <li> <p>In vielen F\u00e4llen ist es besser, das zugrunde liegende Problem oder den Anwendungsfall zu verstehen, da es m\u00f6glicherweise einen besseren Weg zur L\u00f6sung gibt als das, was die Person versucht.</p> </li> </ul>"},{"location":"help-readyapi/#um-schlieung-bitten","title":"Um Schlie\u00dfung bitten","text":"<p>Wenn die Person antwortet, besteht eine hohe Chance, dass Sie ihr Problem gel\u00f6st haben. Herzlichen Gl\u00fcckwunsch, Sie sind ein Held! \ud83e\uddb8</p> <ul> <li> <p>Wenn es tats\u00e4chlich das Problem gel\u00f6st hat, k\u00f6nnen Sie sie darum bitten:</p> <ul> <li>In GitHub-Diskussionen: den Kommentar als Antwort zu markieren.</li> <li>In GitHub-Issues: Das Issue zu schlie\u00dfen.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#das-github-repository-beobachten","title":"Das GitHub-Repository beobachten","text":"<p>Sie k\u00f6nnen ReadyAPI auf GitHub \u201ebeobachten\u201c (Klicken Sie oben rechts auf die Schaltfl\u00e4che \u201ewatch\u201c): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>Wenn Sie dann \u201eWatching\u201c statt \u201eReleases only\u201c ausw\u00e4hlen, erhalten Sie Benachrichtigungen, wenn jemand ein neues Issue er\u00f6ffnet oder eine neue Frage stellt. Sie k\u00f6nnen auch spezifizieren, dass Sie nur \u00fcber neue Issues, Diskussionen, PRs, usw. benachrichtigt werden m\u00f6chten.</p> <p>Dann k\u00f6nnen Sie versuchen, bei der L\u00f6sung solcher Fragen zu helfen.</p>"},{"location":"help-readyapi/#fragen-stellen","title":"Fragen stellen","text":"<p>Sie k\u00f6nnen im GitHub-Repository eine neue Frage erstellen, zum Beispiel:</p> <ul> <li>Stellen Sie eine Frage oder bitten Sie um Hilfe mit einem Problem.</li> <li>Schlagen Sie eine neue Funktionalit\u00e4t vor.</li> </ul> <p>Hinweis: Wenn Sie das tun, bitte ich Sie, auch anderen zu helfen. \ud83d\ude09</p>"},{"location":"help-readyapi/#pull-requests-prufen","title":"Pull Requests pr\u00fcfen","text":"<p>Sie k\u00f6nnen mir helfen, Pull Requests von anderen zu \u00fcberpr\u00fcfen (Review).</p> <p>Noch einmal, bitte versuchen Sie Ihr Bestes, freundlich zu sein. \ud83e\udd17</p> <p>Hier ist, was Sie beachten sollten und wie Sie einen Pull Request \u00fcberpr\u00fcfen:</p>"},{"location":"help-readyapi/#das-problem-verstehen","title":"Das Problem verstehen","text":"<ul> <li> <p>Stellen Sie zun\u00e4chst sicher, dass Sie das Problem verstehen, welches der Pull Request zu l\u00f6sen versucht. M\u00f6glicherweise gibt es eine l\u00e4ngere Diskussion dazu in einer GitHub-Diskussion oder einem GitHub-Issue.</p> </li> <li> <p>Es besteht auch eine gute Chance, dass der Pull Request nicht wirklich ben\u00f6tigt wird, da das Problem auf andere Weise gel\u00f6st werden kann. Dann k\u00f6nnen Sie das vorschlagen oder danach fragen.</p> </li> </ul>"},{"location":"help-readyapi/#der-stil-ist-nicht-so-wichtig","title":"Der Stil ist nicht so wichtig","text":"<ul> <li> <p>Machen Sie sich nicht zu viele Gedanken \u00fcber Dinge wie den Stil von Commit-Nachrichten, ich werde den Commit manuell zusammenf\u00fchren und anpassen.</p> </li> <li> <p>Machen Sie sich auch keine Sorgen \u00fcber Stilregeln, es gibt bereits automatisierte Tools, die das \u00fcberpr\u00fcfen.</p> </li> </ul> <p>Und wenn es irgendeinen anderen Stil- oder Konsistenz-Bedarf gibt, bitte ich direkt darum oder f\u00fcge zus\u00e4tzliche Commits mit den erforderlichen \u00c4nderungen hinzu.</p>"},{"location":"help-readyapi/#den-code-uberprufen","title":"Den Code \u00fcberpr\u00fcfen","text":"<ul> <li> <p>Pr\u00fcfen und lesen Sie den Code, fragen Sie sich, ob er Sinn macht, f\u00fchren Sie ihn lokal aus und testen Sie, ob er das Problem tats\u00e4chlich l\u00f6st.</p> </li> <li> <p>Schreiben Sie dann einen Kommentar und berichten, dass Sie das getan haben. So wei\u00df ich, dass Sie ihn wirklich \u00fcberpr\u00fcft haben.</p> </li> </ul> <p>Info</p> <p>Leider kann ich PRs, nur weil sie von Mehreren gutgehei\u00dfen wurden, nicht einfach vertrauen.</p> <p>Es ist mehrmals passiert, dass es PRs mit drei, f\u00fcnf oder mehr Zustimmungen gibt, wahrscheinlich weil die Beschreibung ansprechend ist, aber wenn ich die PRs \u00fcberpr\u00fcfe, sind sie tats\u00e4chlich fehlerhaft, haben einen Bug, oder l\u00f6sen das Problem nicht, welches sie behaupten, zu l\u00f6sen. \ud83d\ude05</p> <p>Daher ist es wirklich wichtig, dass Sie den Code tats\u00e4chlich lesen und ausf\u00fchren und mir in den Kommentaren mitteilen, dass Sie dies getan haben. \ud83e\udd13</p> <ul> <li>Wenn der PR irgendwie vereinfacht werden kann, fragen Sie ruhig danach, aber seien Sie nicht zu w\u00e4hlerisch, es gibt viele subjektive Standpunkte (und ich habe auch meinen eigenen \ud83d\ude48), also ist es besser, wenn man sich auf die wesentlichen Dinge konzentriert.</li> </ul>"},{"location":"help-readyapi/#tests","title":"Tests","text":"<ul> <li> <p>Helfen Sie mir zu \u00fcberpr\u00fcfen, dass der PR Tests hat.</p> </li> <li> <p>\u00dcberpr\u00fcfen Sie, dass diese Tests vor dem PR fehlschlagen. \ud83d\udea8</p> </li> <li> <p>\u00dcberpr\u00fcfen Sie, dass diese Tests nach dem PR bestanden werden. \u2705</p> </li> <li> <p>Viele PRs haben keine Tests. Sie k\u00f6nnen den Autor daran erinnern, Tests hinzuzuf\u00fcgen, oder Sie k\u00f6nnen sogar selbst einige Tests vorschlagen. Das ist eines der Dinge, die die meiste Zeit in Anspruch nehmen, und dabei k\u00f6nnen Sie viel helfen.</p> </li> <li> <p>Kommentieren Sie auch hier anschlie\u00dfend, was Sie versucht haben, sodass ich wei\u00df, dass Sie es \u00fcberpr\u00fcft haben. \ud83e\udd13</p> </li> </ul>"},{"location":"help-readyapi/#einen-pull-request-erstellen","title":"Einen Pull Request erstellen","text":"<p>Sie k\u00f6nnen zum Quellcode mit Pull Requests beitragen, zum Beispiel:</p> <ul> <li>Um einen Tippfehler zu beheben, den Sie in der Dokumentation gefunden haben.</li> <li>Um einen Artikel, ein Video oder einen Podcast \u00fcber ReadyAPI zu teilen, den Sie erstellt oder gefunden haben, indem Sie diese Datei bearbeiten.<ul> <li>Stellen Sie sicher, dass Sie Ihren Link am Anfang des entsprechenden Abschnitts einf\u00fcgen.</li> </ul> </li> <li>Um zu helfen, die Dokumentation in Ihre Sprache zu \u00fcbersetzen.<ul> <li>Sie k\u00f6nnen auch dabei helfen, die von anderen erstellten \u00dcbersetzungen zu \u00fcberpr\u00fcfen (Review).</li> </ul> </li> <li>Um neue Dokumentationsabschnitte vorzuschlagen.</li> <li>Um ein bestehendes Problem / einen bestehenden Bug zu beheben.<ul> <li>Stellen Sie sicher, dass Sie Tests hinzuf\u00fcgen.</li> </ul> </li> <li>Um eine neue Funktionalit\u00e4t hinzuzuf\u00fcgen.<ul> <li>Stellen Sie sicher, dass Sie Tests hinzuf\u00fcgen.</li> <li>Stellen Sie sicher, dass Sie Dokumentation hinzuf\u00fcgen, falls das notwendig ist.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#readyapi-pflegen","title":"ReadyAPI pflegen","text":"<p>Helfen Sie mir, ReadyAPI instand zu halten! \ud83e\udd13</p> <p>Es gibt viel zu tun, und das meiste davon k\u00f6nnen SIE tun.</p> <p>Die Hauptaufgaben, die Sie jetzt erledigen k\u00f6nnen, sind:</p> <ul> <li>Helfen Sie anderen bei Fragen auf GitHub (siehe Abschnitt oben).</li> <li>Pr\u00fcfen Sie Pull Requests (siehe Abschnitt oben).</li> </ul> <p>Diese beiden Dinge sind es, die die meiste Zeit in Anspruch nehmen. Das ist die Hauptarbeit bei der Wartung von ReadyAPI.</p> <p>Wenn Sie mir dabei helfen k\u00f6nnen, helfen Sie mir, ReadyAPI am Laufen zu erhalten und sorgen daf\u00fcr, dass es weiterhin schneller und besser voranschreitet. \ud83d\ude80</p>"},{"location":"help-readyapi/#beim-chat-mitmachen","title":"Beim Chat mitmachen","text":"<p>Treten Sie dem \ud83d\udc65 Discord-Chatserver \ud83d\udc65 bei und treffen Sie sich mit anderen Mitgliedern der ReadyAPI-Community.</p> <p>Tipp</p> <p>Wenn Sie Fragen haben, stellen Sie sie bei GitHub Diskussionen, es besteht eine viel bessere Chance, dass Sie hier Hilfe von den ReadyAPI-Experten erhalten.</p> <p>Nutzen Sie den Chat nur f\u00fcr andere allgemeine Gespr\u00e4che.</p>"},{"location":"help-readyapi/#den-chat-nicht-fur-fragen-verwenden","title":"Den Chat nicht f\u00fcr Fragen verwenden","text":"<p>Bedenken Sie, da Chats mehr \u201efreie Konversation\u201c erm\u00f6glichen, dass es verlockend ist, Fragen zu stellen, die zu allgemein und schwierig zu beantworten sind, sodass Sie m\u00f6glicherweise keine Antworten erhalten.</p> <p>Auf GitHub hilft Ihnen die Vorlage dabei, die richtige Frage zu schreiben, sodass Sie leichter eine gute Antwort erhalten oder das Problem sogar selbst l\u00f6sen k\u00f6nnen, noch bevor Sie fragen. Und auf GitHub kann ich sicherstellen, dass ich immer alles beantworte, auch wenn es einige Zeit dauert. Ich pers\u00f6nlich kann das mit den Chat-Systemen nicht machen. \ud83d\ude05</p> <p>Unterhaltungen in den Chat-Systemen sind au\u00dferdem nicht so leicht durchsuchbar wie auf GitHub, sodass Fragen und Antworten m\u00f6glicherweise im Gespr\u00e4ch verloren gehen. Und nur die auf GitHub machen einen ReadyAPI-Experten, Sie werden also h\u00f6chstwahrscheinlich mehr Aufmerksamkeit auf GitHub erhalten.</p> <p>Auf der anderen Seite gibt es Tausende von Benutzern in den Chat-Systemen, sodass die Wahrscheinlichkeit hoch ist, dass Sie dort fast immer jemanden zum Reden finden. \ud83d\ude04</p>"},{"location":"help-readyapi/#den-autor-sponsern","title":"Den Autor sponsern","text":"<p>Sie k\u00f6nnen den Autor (mich) auch \u00fcber GitHub-Sponsoren finanziell unterst\u00fctzen.</p> <p>Dort k\u00f6nnten Sie mir als Dankesch\u00f6n einen Kaffee spendieren \u2615\ufe0f. \ud83d\ude04</p> <p>Und Sie k\u00f6nnen auch Silber- oder Gold-Sponsor f\u00fcr ReadyAPI werden. \ud83c\udfc5\ud83c\udf89</p>"},{"location":"help-readyapi/#die-tools-sponsern-die-readyapi-unterstutzen","title":"Die Tools sponsern, die ReadyAPI unterst\u00fctzen","text":"<p>Wie Sie in der Dokumentation gesehen haben, steht ReadyAPI auf den Schultern von Giganten, Starlette und Pydantic.</p> <p>Sie k\u00f6nnen auch sponsern:</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>Encode (Starlette, Uvicorn)</li> </ul> <p>Danke! \ud83d\ude80</p>"},{"location":"history-design-future/","title":"Geschichte, Design und Zukunft","text":"<p>Vor einiger Zeit fragte ein ReadyAPI-Benutzer:</p> <p>Was ist die Geschichte dieses Projekts? Es scheint, als w\u00e4re es in ein paar Wochen aus dem Nichts zu etwas Gro\u00dfartigem geworden [...]</p> <p>Hier ist ein wenig \u00fcber diese Geschichte.</p>"},{"location":"history-design-future/#alternativen","title":"Alternativen","text":"<p>Ich habe seit mehreren Jahren APIs mit komplexen Anforderungen (maschinelles Lernen, verteilte Systeme, asynchrone Jobs, NoSQL-Datenbanken, usw.) erstellt und leitete mehrere Entwicklerteams.</p> <p>Dabei musste ich viele Alternativen untersuchen, testen und nutzen.</p> <p>Die Geschichte von ReadyAPI ist zu einem gro\u00dfen Teil die Geschichte seiner Vorg\u00e4nger.</p> <p>Wie im Abschnitt Alternativen gesagt:</p> <p>ReadyAPI w\u00fcrde ohne die fr\u00fchere Arbeit anderer nicht existieren.</p> <p>Es wurden zuvor viele Tools entwickelt, die als Inspiration f\u00fcr seine Entwicklung dienten.</p> <p>Ich habe die Schaffung eines neuen Frameworks viele Jahre lang vermieden. Zuerst habe ich versucht, alle von ReadyAPI abgedeckten Funktionen mithilfe vieler verschiedener Frameworks, Plugins und Tools zu l\u00f6sen.</p> <p>Aber irgendwann gab es keine andere M\u00f6glichkeit, als etwas zu schaffen, das all diese Funktionen bereitstellte, die besten Ideen fr\u00fcherer Tools aufnahm und diese auf die bestm\u00f6gliche Weise kombinierte, wobei Sprachfunktionen verwendet wurden, die vorher noch nicht einmal verf\u00fcgbar waren (Python 3.6+ Typhinweise).</p>"},{"location":"history-design-future/#investigation","title":"Investigation","text":"<p>Durch die Nutzung all dieser vorherigen Alternativen hatte ich die M\u00f6glichkeit, von allen zu lernen, Ideen aufzunehmen und sie auf die beste Weise zu kombinieren, die ich f\u00fcr mich und die Entwicklerteams, mit denen ich zusammengearbeitet habe, finden konnte.</p> <p>Es war beispielsweise klar, dass es idealerweise auf Standard-Python-Typhinweisen basieren sollte.</p> <p>Der beste Ansatz bestand au\u00dferdem darin, bereits bestehende Standards zu nutzen.</p> <p>Bevor ich also \u00fcberhaupt angefangen habe, ReadyAPI zu schreiben, habe ich mehrere Monate damit verbracht, die Spezifikationen f\u00fcr OpenAPI, JSON Schema, OAuth2, usw. zu studieren und deren Beziehungen, \u00dcberschneidungen und Unterschiede zu verstehen.</p>"},{"location":"history-design-future/#design","title":"Design","text":"<p>Dann habe ich einige Zeit damit verbracht, die Entwickler-\u201eAPI\u201c zu entwerfen, die ich als Benutzer haben wollte (als Entwickler, welcher ReadyAPI verwendet).</p> <p>Ich habe mehrere Ideen in den beliebtesten Python-Editoren getestet: PyCharm, VS Code, Jedi-basierte Editoren.</p> <p>Laut der letzten Python-Entwickler-Umfrage, deckt das etwa 80 % der Benutzer ab.</p> <p>Das bedeutet, dass ReadyAPI speziell mit den Editoren getestet wurde, die von 80 % der Python-Entwickler verwendet werden. Und da die meisten anderen Editoren in der Regel \u00e4hnlich funktionieren, sollten alle diese Vorteile f\u00fcr praktisch alle Editoren funktionieren.</p> <p>Auf diese Weise konnte ich die besten M\u00f6glichkeiten finden, die Codeverdoppelung so weit wie m\u00f6glich zu reduzieren, \u00fcberall Autovervollst\u00e4ndigung, Typ- und Fehlerpr\u00fcfungen, usw. zu gew\u00e4hrleisten.</p> <p>Alles auf eine Weise, die allen Entwicklern das beste Entwicklungserlebnis bot.</p>"},{"location":"history-design-future/#anforderungen","title":"Anforderungen","text":"<p>Nachdem ich mehrere Alternativen getestet hatte, entschied ich, dass ich Pydantic wegen seiner Vorteile verwenden w\u00fcrde.</p> <p>Dann habe ich zu dessen Code beigetragen, um es vollst\u00e4ndig mit JSON Schema kompatibel zu machen, und so verschiedene M\u00f6glichkeiten zum Definieren von einschr\u00e4nkenden Deklarationen (Constraints) zu unterst\u00fctzen, und die Editorunterst\u00fctzung (Typpr\u00fcfungen, Codevervollst\u00e4ndigung) zu verbessern, basierend auf den Tests in mehreren Editoren.</p> <p>W\u00e4hrend der Entwicklung habe ich auch zu Starlette beigetragen, der anderen Schl\u00fcsselanforderung.</p>"},{"location":"history-design-future/#entwicklung","title":"Entwicklung","text":"<p>Als ich mit der Erstellung von ReadyAPI selbst begann, waren die meisten Teile bereits vorhanden, das Design definiert, die Anforderungen und Tools bereit und das Wissen \u00fcber die Standards und Spezifikationen klar und frisch.</p>"},{"location":"history-design-future/#zukunft","title":"Zukunft","text":"<p>Zu diesem Zeitpunkt ist bereits klar, dass ReadyAPI mit seinen Ideen f\u00fcr viele Menschen n\u00fctzlich ist.</p> <p>Es wird gegen\u00fcber fr\u00fcheren Alternativen gew\u00e4hlt, da es f\u00fcr viele Anwendungsf\u00e4lle besser geeignet ist.</p> <p>Viele Entwickler und Teams verlassen sich bei ihren Projekten bereits auf ReadyAPI (einschlie\u00dflich mir und meinem Team).</p> <p>Dennoch stehen uns noch viele Verbesserungen und Funktionen bevor.</p> <p>ReadyAPI hat eine gro\u00dfe Zukunft vor sich.</p> <p>Und Ihre Hilfe wird sehr gesch\u00e4tzt.</p>"},{"location":"project-generation/","title":"Projektgenerierung \u2013 Vorlage","text":"<p>Sie k\u00f6nnen einen Projektgenerator f\u00fcr den Einstieg verwenden, welcher einen Gro\u00dfteil der Ersteinrichtung, Sicherheit, Datenbank und einige API-Endpunkte bereits f\u00fcr Sie erstellt.</p> <p>Ein Projektgenerator verf\u00fcgt immer \u00fcber ein sehr spezifisches Setup, das Sie aktualisieren und an Ihre eigenen Bed\u00fcrfnisse anpassen sollten, aber es k\u00f6nnte ein guter Ausgangspunkt f\u00fcr Ihr Projekt sein.</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql","title":"Full Stack ReadyAPI PostgreSQL","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-postgresql</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql-funktionen","title":"Full Stack ReadyAPI PostgreSQL \u2013 Funktionen","text":"<ul> <li>Vollst\u00e4ndige Docker-Integration (Docker-basiert).</li> <li>Docker-Schwarmmodus-Deployment.</li> <li>Docker Compose-Integration und Optimierung f\u00fcr die lokale Entwicklung.</li> <li>Produktionsbereit Python-Webserver, verwendet Uvicorn und Gunicorn.</li> <li>Python ReadyAPI-Backend:<ul> <li>Schnell: Sehr hohe Leistung, auf Augenh\u00f6he mit NodeJS und Go (dank Starlette und Pydantic).</li> <li>Intuitiv: Hervorragende Editor-Unterst\u00fctzung. Codevervollst\u00e4ndigung \u00fcberall. Weniger Zeitaufwand f\u00fcr das Debuggen.</li> <li>Einfach: Einfach zu bedienen und zu erlernen. Weniger Zeit f\u00fcr das Lesen von Dokumentationen.</li> <li>Kurz: Codeverdoppelung minimieren. Mehrere Funktionalit\u00e4ten aus jeder Parameterdeklaration.</li> <li>Robust: Erhalten Sie produktionsbereiten Code. Mit automatischer, interaktiver Dokumentation.</li> <li>Standards-basiert: Basierend auf (und vollst\u00e4ndig kompatibel mit) den offenen Standards f\u00fcr APIs: OpenAPI und JSON Schema.</li> <li>Viele weitere Funktionen, einschlie\u00dflich automatischer Validierung, Serialisierung, interaktiver Dokumentation, Authentifizierung mit OAuth2-JWT-Tokens, usw.</li> </ul> </li> <li>Sicheres Passwort-Hashing standardm\u00e4\u00dfig.</li> <li>JWT-Token-Authentifizierung.</li> <li>SQLAlchemy-Modelle (unabh\u00e4ngig von Flask-Erweiterungen, sodass sie direkt mit Celery-Workern verwendet werden k\u00f6nnen).</li> <li>Grundlegende Startmodelle f\u00fcr Benutzer (\u00e4ndern und entfernen Sie nach Bedarf).</li> <li>Alembic-Migrationen.</li> <li>CORS (Cross Origin Resource Sharing).</li> <li>Celery-Worker, welche Modelle und Code aus dem Rest des Backends selektiv importieren und verwenden k\u00f6nnen.</li> <li>REST-Backend-Tests basierend auf Pytest, integriert in Docker, sodass Sie die vollst\u00e4ndige API-Interaktion unabh\u00e4ngig von der Datenbank testen k\u00f6nnen. Da es in Docker ausgef\u00fchrt wird, kann jedes Mal ein neuer Datenspeicher von Grund auf erstellt werden (Sie k\u00f6nnen also ElasticSearch, MongoDB, CouchDB oder was auch immer Sie m\u00f6chten verwenden und einfach testen, ob die API funktioniert).</li> <li>Einfache Python-Integration mit Jupyter-Kerneln f\u00fcr Remote- oder In-Docker-Entwicklung mit Erweiterungen wie Atom Hydrogen oder Visual Studio Code Jupyter.</li> <li>Vue-Frontend:<ul> <li>Mit Vue CLI generiert.</li> <li>Handhabung der JWT-Authentifizierung.</li> <li>Login-View.</li> <li>Nach der Anmeldung Hauptansicht des Dashboards.</li> <li>Haupt-Dashboard mit Benutzererstellung und -bearbeitung.</li> <li>Bearbeitung des eigenen Benutzers.</li> <li>Vuex.</li> <li>Vue-Router.</li> <li>Vuetify f\u00fcr sch\u00f6ne Material-Designkomponenten.</li> <li>TypeScript.</li> <li>Docker-Server basierend auf Nginx (konfiguriert, um gut mit Vue-Router zu funktionieren).</li> <li>Mehrstufigen Docker-Erstellung, sodass Sie kompilierten Code nicht speichern oder committen m\u00fcssen.</li> <li>Frontend-Tests, welche zur Erstellungszeit ausgef\u00fchrt werden (k\u00f6nnen auch deaktiviert werden).</li> <li>So modular wie m\u00f6glich gestaltet, sodass es sofort einsatzbereit ist. Sie k\u00f6nnen es aber mit Vue CLI neu generieren oder es so wie Sie m\u00f6chten erstellen und wiederverwenden, was Sie m\u00f6chten.</li> </ul> </li> <li>PGAdmin f\u00fcr die PostgreSQL-Datenbank, k\u00f6nnen Sie problemlos \u00e4ndern, sodass PHPMyAdmin und MySQL verwendet wird.</li> <li>Flower f\u00fcr die \u00dcberwachung von Celery-Jobs.</li> <li>Load Balancing zwischen Frontend und Backend mit Traefik, sodass Sie beide unter derselben Domain haben k\u00f6nnen, getrennt durch den Pfad, aber von unterschiedlichen Containern ausgeliefert.</li> <li>Traefik-Integration, einschlie\u00dflich automatischer Generierung von Let's Encrypt-HTTPS-Zertifikaten.</li> <li>GitLab CI (kontinuierliche Integration), einschlie\u00dflich Frontend- und Backend-Testen.</li> </ul>"},{"location":"project-generation/#full-stack-readyapi-couchbase","title":"Full Stack ReadyAPI Couchbase","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-couchbase</p> <p>\u26a0\ufe0f WARNUNG \u26a0\ufe0f</p> <p>Wenn Sie ein neues Projekt von Grund auf starten, pr\u00fcfen Sie die Alternativen hier.</p> <p>Zum Beispiel k\u00f6nnte der Projektgenerator Full Stack ReadyAPI PostgreSQL eine bessere Alternative sein, da er aktiv gepflegt und genutzt wird. Und er enth\u00e4lt alle neuen Funktionen und Verbesserungen.</p> <p>Es steht Ihnen weiterhin frei, den Couchbase-basierten Generator zu verwenden, wenn Sie m\u00f6chten. Er sollte wahrscheinlich immer noch gut funktionieren, und wenn Sie bereits ein Projekt damit erstellt haben, ist das auch in Ordnung (und Sie haben es wahrscheinlich bereits an Ihre Bed\u00fcrfnisse angepasst).</p> <p>Weitere Informationen hierzu finden Sie in der Dokumentation des Repos.</p>"},{"location":"project-generation/#full-stack-readyapi-mongodb","title":"Full Stack ReadyAPI MongoDB","text":"<p>... k\u00f6nnte sp\u00e4ter kommen, abh\u00e4ngig von meiner verf\u00fcgbaren Zeit und anderen Faktoren. \ud83d\ude05 \ud83c\udf89</p>"},{"location":"project-generation/#modelle-fur-maschinelles-lernen-mit-spacy-und-readyapi","title":"Modelle f\u00fcr maschinelles Lernen mit spaCy und ReadyAPI","text":"<p>GitHub: https://github.com/microsoft/cookiecutter-spacy-readyapi</p>"},{"location":"project-generation/#modelle-fur-maschinelles-lernen-mit-spacy-und-readyapi-funktionen","title":"Modelle f\u00fcr maschinelles Lernen mit spaCy und ReadyAPI \u2013 Funktionen","text":"<ul> <li>spaCy NER-Modellintegration.</li> <li>Azure Cognitive Search-Anforderungsformat integriert.</li> <li>Produktionsbereit Python-Webserver, verwendet Uvicorn und Gunicorn.</li> <li>Azure DevOps Kubernetes (AKS) CI/CD-Deployment integriert.</li> <li>Mehrsprachig W\u00e4hlen Sie bei der Projekteinrichtung ganz einfach eine der integrierten Sprachen von spaCy aus.</li> <li>Einfach erweiterbar auf andere Modellframeworks (Pytorch, Tensorflow), nicht nur auf SpaCy.</li> </ul>"},{"location":"python-types/","title":"Einf\u00fchrung in Python-Typen","text":"<p>Python hat Unterst\u00fctzung f\u00fcr optionale \u201eTyphinweise\u201c (Englisch: \u201eType Hints\u201c). Auch \u201eTyp Annotationen\u201c genannt.</p> <p>Diese \u201eTyphinweise\u201c oder -Annotationen sind eine spezielle Syntax, die es erlaubt, den Typ einer Variablen zu deklarieren.</p> <p>Durch das Deklarieren von Typen f\u00fcr Ihre Variablen k\u00f6nnen Editoren und Tools bessere Unterst\u00fctzung bieten.</p> <p>Dies ist lediglich eine schnelle Anleitung / Auffrischung \u00fcber Pythons Typhinweise. Sie deckt nur das Minimum ab, das n\u00f6tig ist, um diese mit ReadyAPI zu verwenden ... was tats\u00e4chlich sehr wenig ist.</p> <p>ReadyAPI basiert vollst\u00e4ndig auf diesen Typhinweisen, sie geben der Anwendung viele Vorteile und M\u00f6glichkeiten.</p> <p>Aber selbst wenn Sie ReadyAPI nie verwenden, wird es f\u00fcr Sie n\u00fctzlich sein, ein wenig dar\u00fcber zu lernen.</p> <p>Hinweis</p> <p>Wenn Sie ein Python-Experte sind und bereits alles \u00fcber Typhinweise wissen, \u00fcberspringen Sie dieses Kapitel und fahren Sie mit dem n\u00e4chsten fort.</p>"},{"location":"python-types/#motivation","title":"Motivation","text":"<p>Fangen wir mit einem einfachen Beispiel an:</p> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Dieses Programm gibt aus:</p> <pre><code>John Doe\n</code></pre> <p>Die Funktion macht Folgendes:</p> <ul> <li>Nimmt einen <code>first_name</code> und <code>last_name</code>.</li> <li>Schreibt den ersten Buchstaben eines jeden Wortes gro\u00df, mithilfe von <code>title()</code>.</li> <li>Verkettet sie mit einem Leerzeichen in der Mitte.</li> </ul> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre>"},{"location":"python-types/#bearbeiten-sie-es","title":"Bearbeiten Sie es","text":"<p>Es ist ein sehr einfaches Programm.</p> <p>Aber nun stellen Sie sich vor, Sie w\u00fcrden es selbst schreiben.</p> <p>Irgendwann sind die Funktions-Parameter fertig, Sie starten mit der Definition des K\u00f6rpers ...</p> <p>Aber dann m\u00fcssen Sie \u201ediese Methode aufrufen, die den ersten Buchstaben in Gro\u00dfbuchstaben umwandelt\u201c.</p> <p>War es <code>upper</code>? War es <code>uppercase</code>? <code>first_uppercase</code>? <code>capitalize</code>?</p> <p>Dann versuchen Sie es mit dem langj\u00e4hrigen Freund des Programmierers, der Editor-Autovervollst\u00e4ndigung.</p> <p>Sie geben den ersten Parameter der Funktion ein, <code>first_name</code>, dann einen Punkt (<code>.</code>) und dr\u00fccken <code>Strg+Leertaste</code>, um die Vervollst\u00e4ndigung auszul\u00f6sen.</p> <p>Aber leider erhalten Sie nichts N\u00fctzliches:</p> <p></p>"},{"location":"python-types/#typen-hinzufugen","title":"Typen hinzuf\u00fcgen","text":"<p>Lassen Sie uns eine einzelne Zeile aus der vorherigen Version \u00e4ndern.</p> <p>Wir \u00e4ndern den folgenden Teil, die Parameter der Funktion, von:</p> <pre><code>    first_name, last_name\n</code></pre> <p>zu:</p> <pre><code>    first_name: str, last_name: str\n</code></pre> <p>Das war's.</p> <p>Das sind die \u201eTyphinweise\u201c:</p> Python 3.8+ <pre><code>def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Das ist nicht das gleiche wie das Deklarieren von Defaultwerten, wie es hier der Fall ist:</p> <pre><code>    first_name=\"john\", last_name=\"doe\"\n</code></pre> <p>Das ist eine andere Sache.</p> <p>Wir verwenden Doppelpunkte (<code>:</code>), nicht Gleichheitszeichen (<code>=</code>).</p> <p>Und das Hinzuf\u00fcgen von Typhinweisen \u00e4ndert normalerweise nichts an dem, was ohne sie passieren w\u00fcrde.</p> <p>Aber jetzt stellen Sie sich vor, Sie sind wieder mitten in der Erstellung dieser Funktion, aber mit Typhinweisen.</p> <p>An derselben Stelle versuchen Sie, die Autovervollst\u00e4ndigung mit \u201eStrg+Leertaste\u201c auszul\u00f6sen, und Sie sehen:</p> <p></p> <p>Hier k\u00f6nnen Sie durch die Optionen bl\u00e4ttern, bis Sie diejenige finden, bei der es \u201eKlick\u201c macht:</p> <p></p>"},{"location":"python-types/#mehr-motivation","title":"Mehr Motivation","text":"<p>Sehen Sie sich diese Funktion an, sie hat bereits Typhinweise:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n</code></pre> <p>Da der Editor die Typen der Variablen kennt, erhalten Sie nicht nur Code-Vervollst\u00e4ndigung, sondern auch eine Fehlerpr\u00fcfung:</p> <p></p> <p>Jetzt, da Sie wissen, dass Sie das reparieren m\u00fcssen, konvertieren Sie <code>age</code> mittels <code>str(age)</code> in einen String:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n</code></pre>"},{"location":"python-types/#deklarieren-von-typen","title":"Deklarieren von Typen","text":"<p>Sie haben gerade den Haupt-Einsatzort f\u00fcr die Deklaration von Typhinweisen gesehen. Als Funktionsparameter.</p> <p>Das ist auch meistens, wie sie in ReadyAPI verwendet werden.</p>"},{"location":"python-types/#einfache-typen","title":"Einfache Typen","text":"<p>Sie k\u00f6nnen alle Standard-Python-Typen deklarieren, nicht nur <code>str</code>.</p> <p>Zum Beispiel diese:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> <li><code>bytes</code></li> </ul> Python 3.8+ <pre><code>def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n</code></pre>"},{"location":"python-types/#generische-typen-mit-typ-parametern","title":"Generische Typen mit Typ-Parametern","text":"<p>Es gibt Datenstrukturen, die andere Werte enthalten k\u00f6nnen, wie etwa <code>dict</code>, <code>list</code>, <code>set</code> und <code>tuple</code>. Die inneren Werte k\u00f6nnen auch ihren eigenen Typ haben.</p> <p>Diese Typen mit inneren Typen werden \u201egenerische\u201c Typen genannt. Es ist m\u00f6glich, sie mit ihren inneren Typen zu deklarieren.</p> <p>Um diese Typen und die inneren Typen zu deklarieren, k\u00f6nnen Sie Pythons Standardmodul <code>typing</code> verwenden. Es existiert speziell f\u00fcr die Unterst\u00fctzung dieser Typhinweise.</p>"},{"location":"python-types/#neuere-python-versionen","title":"Neuere Python-Versionen","text":"<p>Die Syntax, welche <code>typing</code> verwendet, ist kompatibel mit allen Versionen, von Python 3.6 aufw\u00e4rts zu den neuesten, inklusive Python 3.9, Python 3.10, usw.</p> <p>Mit der Weiterentwicklung von Python kommen neuere Versionen heraus, mit verbesserter Unterst\u00fctzung f\u00fcr Typannotationen, und in vielen F\u00e4llen m\u00fcssen Sie gar nicht mehr das <code>typing</code>-Modul importieren, um Typannotationen zu schreiben.</p> <p>Wenn Sie eine neuere Python-Version f\u00fcr Ihr Projekt w\u00e4hlen k\u00f6nnen, werden Sie aus dieser zus\u00e4tzlichen Vereinfachung Nutzen ziehen k\u00f6nnen.</p> <p>In der gesamten Dokumentation gibt es Beispiele, welche kompatibel mit unterschiedlichen Python-Versionen sind (wenn es Unterschiede gibt).</p> <p>Zum Beispiel bedeutet \u201ePython 3.6+\u201c, dass das Beispiel kompatibel mit Python 3.6 oder h\u00f6her ist (inklusive 3.7, 3.8, 3.9, 3.10, usw.). Und \u201ePython 3.9+\u201c bedeutet, es ist kompatibel mit Python 3.9 oder h\u00f6her (inklusive 3.10, usw.).</p> <p>Wenn Sie \u00fcber die neueste Version von Python verf\u00fcgen, verwenden Sie die Beispiele f\u00fcr die neueste Version, diese werden die beste und einfachste Syntax haben, zum Beispiel, \u201ePython 3.10+\u201c.</p>"},{"location":"python-types/#liste","title":"Liste","text":"<p>Definieren wir zum Beispiel eine Variable, die eine <code>list</code> von <code>str</code> \u2013 eine Liste von Strings \u2013 sein soll.</p> Python 3.9+Python 3.8+ <p>Deklarieren Sie die Variable mit der gleichen Doppelpunkt-Syntax (<code>:</code>).</p> <p>Als Typ nehmen Sie <code>list</code>.</p> <p>Da die Liste ein Typ ist, welcher innere Typen enth\u00e4lt, werden diese von eckigen Klammern umfasst:</p> <pre><code>def process_items(items: list[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Von <code>typing</code> importieren Sie <code>List</code> (mit Gro\u00dfbuchstaben <code>L</code>):</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Deklarieren Sie die Variable mit der gleichen Doppelpunkt-Syntax (<code>:</code>).</p> <p>Als Typ nehmen Sie das <code>List</code>, das Sie von <code>typing</code> importiert haben.</p> <p>Da die Liste ein Typ ist, welcher innere Typen enth\u00e4lt, werden diese von eckigen Klammern umfasst:</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Tipp</p> <p>Die inneren Typen in den eckigen Klammern werden als \u201eTyp-Parameter\u201c bezeichnet.</p> <p>In diesem Fall ist <code>str</code> der Typ-Parameter, der an <code>List</code> \u00fcbergeben wird (oder <code>list</code> in Python 3.9 und dar\u00fcber).</p> <p>Das bedeutet: Die Variable <code>items</code> ist eine Liste \u2013 <code>list</code> \u2013 und jedes der Elemente in dieser Liste ist ein String \u2013 <code>str</code>.</p> <p>Tipp</p> <p>Wenn Sie Python 3.9 oder h\u00f6her verwenden, m\u00fcssen Sie <code>List</code> nicht von <code>typing</code> importieren, Sie k\u00f6nnen stattdessen den regul\u00e4ren <code>list</code>-Typ verwenden.</p> <p>Auf diese Weise kann Ihr Editor Sie auch bei der Bearbeitung von Eintr\u00e4gen aus der Liste unterst\u00fctzen:</p> <p></p> <p>Ohne Typen ist das fast unm\u00f6glich zu erreichen.</p> <p>Beachten Sie, dass die Variable <code>item</code> eines der Elemente in der Liste <code>items</code> ist.</p> <p>Und trotzdem wei\u00df der Editor, dass es sich um ein <code>str</code> handelt, und bietet entsprechende Unterst\u00fctzung.</p>"},{"location":"python-types/#tupel-und-menge","title":"Tupel und Menge","text":"<p>Das Gleiche gilt f\u00fcr die Deklaration eines Tupels \u2013 <code>tuple</code> \u2013 und einer Menge \u2013 <code>set</code>:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s\n</code></pre> <pre><code>from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n</code></pre> <p>Das bedeutet:</p> <ul> <li>Die Variable <code>items_t</code> ist ein <code>tuple</code> mit 3 Elementen, einem <code>int</code>, einem weiteren <code>int</code> und einem <code>str</code>.</li> <li>Die Variable <code>items_s</code> ist ein <code>set</code>, und jedes seiner Elemente ist vom Typ <code>bytes</code>.</li> </ul>"},{"location":"python-types/#dict","title":"Dict","text":"<p>Um ein <code>dict</code> zu definieren, \u00fcbergeben Sie zwei Typ-Parameter, getrennt durch Kommas.</p> <p>Der erste Typ-Parameter ist f\u00fcr die Schl\u00fcssel des <code>dict</code>.</p> <p>Der zweite Typ-Parameter ist f\u00fcr die Werte des <code>dict</code>:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <pre><code>from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <p>Das bedeutet:</p> <ul> <li>Die Variable <code>prices</code> ist ein <code>dict</code>:<ul> <li>Die Schl\u00fcssel dieses <code>dict</code> sind vom Typ <code>str</code> (z. B. die Namen der einzelnen Artikel).</li> <li>Die Werte dieses <code>dict</code> sind vom Typ <code>float</code> (z. B. der Preis jedes Artikels).</li> </ul> </li> </ul>"},{"location":"python-types/#union","title":"Union","text":"<p>Sie k\u00f6nnen deklarieren, dass eine Variable einer von verschiedenen Typen sein kann, zum Beispiel ein <code>int</code> oder ein <code>str</code>.</p> <p>In Python 3.6 und h\u00f6her (inklusive Python 3.10) k\u00f6nnen Sie den <code>Union</code>-Typ von <code>typing</code> verwenden und die m\u00f6glichen Typen innerhalb der eckigen Klammern auflisten.</p> <p>In Python 3.10 gibt es zus\u00e4tzlich eine neue Syntax, die es erlaubt, die m\u00f6glichen Typen getrennt von einem vertikalen Balken (<code>|</code>) aufzulisten.</p> Python 3.10+Python 3.8+ <pre><code>def process_item(item: int | str):\n    print(item)\n</code></pre> <pre><code>from typing import Union\n\n\ndef process_item(item: Union[int, str]):\n    print(item)\n</code></pre> <p>In beiden F\u00e4llen bedeutet das, dass <code>item</code> ein <code>int</code> oder ein <code>str</code> sein kann.</p>"},{"location":"python-types/#vielleicht-none","title":"Vielleicht <code>None</code>","text":"<p>Sie k\u00f6nnen deklarieren, dass ein Wert ein <code>str</code>, aber vielleicht auch <code>None</code> sein kann.</p> <p>In Python 3.6 und dar\u00fcber (inklusive Python 3.10) k\u00f6nnen Sie das deklarieren, indem Sie <code>Optional</code> vom <code>typing</code> Modul importieren und verwenden.</p> Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <p>Wenn Sie <code>Optional[str]</code> anstelle von nur <code>str</code> verwenden, wird Ihr Editor Ihnen dabei helfen, Fehler zu erkennen, bei denen Sie annehmen k\u00f6nnten, dass ein Wert immer eine String (<code>str</code>) ist, obwohl er auch <code>None</code> sein k\u00f6nnte.</p> <p><code>Optional[Something]</code> ist tats\u00e4chlich eine Abk\u00fcrzung f\u00fcr <code>Union[Something, None]</code>, diese beiden sind \u00e4quivalent.</p> <p>Das bedeutet auch, dass Sie in Python 3.10 <code>Something | None</code> verwenden k\u00f6nnen:</p> Python 3.10+Python 3.8+Python 3.8+ Alternative <pre><code>def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Union\n\n\ndef say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre>"},{"location":"python-types/#union-oder-optional-verwenden","title":"<code>Union</code> oder <code>Optional</code> verwenden?","text":"<p>Wenn Sie eine Python-Version unterhalb 3.10 verwenden, hier ist mein sehr subjektiver Standpunkt dazu:</p> <ul> <li>\ud83d\udea8 Vermeiden Sie <code>Optional[SomeType]</code></li> <li>Stattdessen \u2728 verwenden Sie <code>Union[SomeType, None]</code> \u2728.</li> </ul> <p>Beide sind \u00e4quivalent und im Hintergrund dasselbe, aber ich empfehle <code>Union</code> statt <code>Optional</code>, weil das Wort \u201eoptional\u201c impliziert, dass dieser Wert, zum Beispiel als Funktionsparameter, optional ist. Tats\u00e4chlich bedeutet es aber nur \u201eDer Wert kann <code>None</code> sein\u201c, selbst wenn der Wert nicht optional ist und ben\u00f6tigt wird.</p> <p>Ich denke, <code>Union[SomeType, None]</code> ist expliziter bez\u00fcglich seiner Bedeutung.</p> <p>Es geht nur um W\u00f6rter und Namen. Aber diese Worte k\u00f6nnen beeinflussen, wie Sie und Ihre Teamkollegen \u00fcber den Code denken.</p> <p>Nehmen wir zum Beispiel diese Funktion:</p> Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> <p>Der Parameter <code>name</code> ist definiert als <code>Optional[str]</code>, aber er ist nicht optional, Sie k\u00f6nnen die Funktion nicht ohne diesen Parameter aufrufen:</p> <pre><code>say_hi()  # Oh, nein, das l\u00f6st einen Fehler aus! \ud83d\ude31\n</code></pre> <p>Der <code>name</code> Parameter wird immer noch ben\u00f6tigt (nicht optional), weil er keinen Default-Wert hat. <code>name</code> akzeptiert aber dennoch <code>None</code> als Wert:</p> <pre><code>say_hi(name=None)  # Das funktioniert, None is g\u00fcltig \ud83c\udf89\n</code></pre> <p>Die gute Nachricht ist, dass Sie sich dar\u00fcber keine Sorgen mehr machen m\u00fcssen, wenn Sie Python 3.10 verwenden, da Sie einfach <code>|</code> verwenden k\u00f6nnen, um Vereinigungen von Typen zu definieren:</p> Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> <p>Und dann m\u00fcssen Sie sich nicht mehr um Namen wie <code>Optional</code> und <code>Union</code> k\u00fcmmern. \ud83d\ude0e</p>"},{"location":"python-types/#generische-typen","title":"Generische Typen","text":"<p>Diese Typen, die Typ-Parameter in eckigen Klammern akzeptieren, werden generische Typen oder Generics genannt.</p> Python 3.10+Python 3.9+Python 3.8+ <p>Sie k\u00f6nnen die eingebauten Typen als Generics verwenden (mit eckigen Klammern und Typen darin):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>Verwenden Sie f\u00fcr den Rest, wie unter Python 3.8, das <code>typing</code>-Modul:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code> (so wie unter Python 3.8)</li> <li>... und andere.</li> </ul> <p>In Python 3.10 k\u00f6nnen Sie als Alternative zu den Generics <code>Union</code> und <code>Optional</code> den vertikalen Balken (<code>|</code>) verwenden, um Vereinigungen von Typen zu deklarieren, das ist besser und einfacher.</p> <p>Sie k\u00f6nnen die eingebauten Typen als Generics verwenden (mit eckigen Klammern und Typen darin):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>Verwenden Sie f\u00fcr den Rest, wie unter Python 3.8, das <code>typing</code>-Modul:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code></li> <li>... und andere.</li> </ul> <ul> <li><code>List</code></li> <li><code>Tuple</code></li> <li><code>Set</code></li> <li><code>Dict</code></li> <li><code>Union</code></li> <li><code>Optional</code></li> <li>... und andere.</li> </ul>"},{"location":"python-types/#klassen-als-typen","title":"Klassen als Typen","text":"<p>Sie k\u00f6nnen auch eine Klasse als Typ einer Variablen deklarieren.</p> <p>Nehmen wir an, Sie haben eine Klasse <code>Person</code>, mit einem Namen:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Dann k\u00f6nnen Sie eine Variable vom Typ <code>Person</code> deklarieren:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Und wiederum bekommen Sie die volle Editor-Unterst\u00fctzung:</p> <p></p> <p>Beachten Sie, das bedeutet: \u201e<code>one_person</code> ist eine Instanz der Klasse <code>Person</code>\u201c.</p> <p>Es bedeutet nicht: \u201e<code>one_person</code> ist die Klasse genannt <code>Person</code>\u201c.</p>"},{"location":"python-types/#pydantic-modelle","title":"Pydantic Modelle","text":"<p>Pydantic ist eine Python-Bibliothek f\u00fcr die Validierung von Daten.</p> <p>Sie deklarieren die \u201eForm\u201c der Daten als Klassen mit Attributen.</p> <p>Und jedes Attribut hat einen Typ.</p> <p>Dann erzeugen Sie eine Instanz dieser Klasse mit einigen Werten, und Pydantic validiert die Werte, konvertiert sie in den passenden Typ (falls notwendig) und gibt Ihnen ein Objekt mit allen Daten.</p> <p>Und Sie erhalten volle Editor-Unterst\u00fctzung f\u00fcr dieses Objekt.</p> <p>Ein Beispiel aus der offiziellen Pydantic Dokumentation:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <p>Info</p> <p>Um mehr \u00fcber Pydantic zu erfahren, schauen Sie sich dessen Dokumentation an.</p> <p>ReadyAPI basiert vollst\u00e4ndig auf Pydantic.</p> <p>Viel mehr von all dem werden Sie in praktischer Anwendung im Tutorial - Benutzerhandbuch sehen.</p> <p>Tipp</p> <p>Pydantic verh\u00e4lt sich speziell, wenn Sie <code>Optional</code> oder <code>Union[Etwas, None]</code> ohne einen Default-Wert verwenden. Sie k\u00f6nnen dar\u00fcber in der Pydantic Dokumentation unter Required fields mehr erfahren.</p>"},{"location":"python-types/#typhinweise-mit-metadaten-annotationen","title":"Typhinweise mit Metadaten-Annotationen","text":"<p>Python bietet auch die M\u00f6glichkeit, zus\u00e4tzliche Metadaten in Typhinweisen unterzubringen, mittels <code>Annotated</code>.</p> Python 3.9+Python 3.8+ <p>In Python 3.9 ist <code>Annotated</code> ein Teil der Standardbibliothek, Sie k\u00f6nnen es von <code>typing</code> importieren.</p> <pre><code>from typing import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>In Versionen niedriger als Python 3.9 importieren Sie <code>Annotated</code> von <code>typing_extensions</code>.</p> <p>Es wird bereits mit ReadyAPI installiert sein.</p> <pre><code>from typing_extensions import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>Python selbst macht nichts mit <code>Annotated</code>. F\u00fcr Editoren und andere Tools ist der Typ immer noch <code>str</code>.</p> <p>Aber Sie k\u00f6nnen <code>Annotated</code> nutzen, um ReadyAPI mit Metadaten zu versorgen, die ihm sagen, wie sich ihre Anwendung verhalten soll.</p> <p>Wichtig ist, dass der erste Typ-Parameter, den Sie <code>Annotated</code> \u00fcbergeben, der tats\u00e4chliche Typ ist. Der Rest sind Metadaten f\u00fcr andere Tools.</p> <p>Im Moment m\u00fcssen Sie nur wissen, dass <code>Annotated</code> existiert, und dass es Standard-Python ist. \ud83d\ude0e</p> <p>Sp\u00e4ter werden Sie sehen, wie m\u00e4chtig es sein kann.</p> <p>Tipp</p> <p>Der Umstand, dass es Standard-Python ist, bedeutet, dass Sie immer noch die bestm\u00f6gliche Entwickler-Erfahrung in ihrem Editor haben, sowie mit den Tools, die Sie nutzen, um ihren Code zu analysieren, zu refaktorisieren, usw. \u2728</p> <p>Und ebenfalls, dass Ihr Code sehr kompatibel mit vielen anderen Python-Tools und -Bibliotheken sein wird. \ud83d\ude80</p>"},{"location":"python-types/#typhinweise-in-readyapi","title":"Typhinweise in ReadyAPI","text":"<p>ReadyAPI macht sich diese Typhinweise zunutze, um mehrere Dinge zu tun.</p> <p>Mit ReadyAPI deklarieren Sie Parameter mit Typhinweisen, und Sie erhalten:</p> <ul> <li>Editorunterst\u00fctzung.</li> <li>Typ-Pr\u00fcfungen.</li> </ul> <p>... und ReadyAPI verwendet dieselben Deklarationen, um:</p> <ul> <li>Anforderungen zu definieren: aus Anfrage-Pfadparametern, Abfrageparametern, Header-Feldern, Bodys, Abh\u00e4ngigkeiten, usw.</li> <li>Daten umzuwandeln: aus der Anfrage in den erforderlichen Typ.</li> <li>Daten zu validieren: aus jeder Anfrage:<ul> <li>Automatische Fehler generieren, die an den Client zur\u00fcckgegeben werden, wenn die Daten ung\u00fcltig sind.</li> </ul> </li> <li>Die API mit OpenAPI zu dokumentieren:<ul> <li>Die dann von den Benutzeroberfl\u00e4chen der automatisch generierten interaktiven Dokumentation verwendet wird.</li> </ul> </li> </ul> <p>Das mag alles abstrakt klingen. Machen Sie sich keine Sorgen. Sie werden all das in Aktion sehen im Tutorial - Benutzerhandbuch.</p> <p>Das Wichtigste ist, dass ReadyAPI durch die Verwendung von Standard-Python-Typen an einer einzigen Stelle (anstatt weitere Klassen, Dekoratoren usw. hinzuzuf\u00fcgen) einen Gro\u00dfteil der Arbeit f\u00fcr Sie erledigt.</p> <p>Info</p> <p>Wenn Sie bereits das ganze Tutorial durchgearbeitet haben und mehr \u00fcber Typen erfahren wollen, dann ist eine gute Ressource der \u201eCheat Sheet\u201c von <code>mypy</code>.</p>"},{"location":"about/","title":"\u00dcber","text":"<p>\u00dcber ReadyAPI, sein Design, seine Inspiration und mehr. \ud83e\udd13</p>"},{"location":"advanced/","title":"Handbuch f\u00fcr fortgeschrittene Benutzer","text":""},{"location":"advanced/#zusatzfunktionen","title":"Zusatzfunktionen","text":"<p>Das Haupt-Tutorial \u2013 Benutzerhandbuch sollte ausreichen, um Ihnen einen \u00dcberblick \u00fcber alle Hauptfunktionen von ReadyAPI zu geben.</p> <p>In den n\u00e4chsten Abschnitten sehen Sie weitere Optionen, Konfigurationen und zus\u00e4tzliche Funktionen.</p> <p>Tipp</p> <p>Die n\u00e4chsten Abschnitte sind nicht unbedingt \u201efortgeschritten\u201c.</p> <p>Und es ist m\u00f6glich, dass f\u00fcr Ihren Anwendungsfall die L\u00f6sung in einem davon liegt.</p>"},{"location":"advanced/#lesen-sie-zuerst-das-tutorial","title":"Lesen Sie zuerst das Tutorial","text":"<p>Sie k\u00f6nnen immer noch die meisten Funktionen in ReadyAPI mit den Kenntnissen aus dem Haupt-Tutorial \u2013 Benutzerhandbuch nutzen.</p> <p>Und in den n\u00e4chsten Abschnitten wird davon ausgegangen, dass Sie es bereits gelesen haben und dass Sie diese Haupt-Ideen kennen.</p>"},{"location":"advanced/#externe-kurse","title":"Externe Kurse","text":"<p>Obwohl das Tutorial \u2013 Benutzerhandbuch und dieses Handbuch f\u00fcr fortgeschrittene Benutzer als gef\u00fchrtes Tutorial (wie ein Buch) geschrieben sind und f\u00fcr Sie ausreichen sollten, um ReadyAPI zu lernen, m\u00f6chten Sie sie vielleicht durch zus\u00e4tzliche Kurse erg\u00e4nzen.</p> <p>Oder Sie belegen einfach lieber andere Kurse, weil diese besser zu Ihrem Lernstil passen.</p> <p>Einige Kursanbieter \u2728 sponsern ReadyAPI \u2728, dies gew\u00e4hrleistet die kontinuierliche und gesunde Entwicklung von ReadyAPI und seinem \u00d6kosystem.</p> <p>Und es zeigt deren wahres Engagement f\u00fcr ReadyAPI und seine Gemeinschaft (Sie), da diese Ihnen nicht nur eine gute Lernerfahrung bieten m\u00f6chten, sondern auch sicherstellen m\u00f6chten, dass Sie \u00fcber ein *gutes und gesundes Framework verf\u00fcgen *, ReadyAPI. \ud83d\ude47</p> <p>Vielleicht m\u00f6chten Sie ihre Kurse ausprobieren:</p> <ul> <li>Talk Python Training</li> <li>Test-Driven Development</li> </ul>"},{"location":"advanced/additional-responses/","title":"Zus\u00e4tzliche Responses in OpenAPI","text":"<p>Achtung</p> <p>Dies ist ein eher fortgeschrittenes Thema.</p> <p>Wenn Sie mit ReadyAPI beginnen, ben\u00f6tigen Sie dies m\u00f6glicherweise nicht.</p> <p>Sie k\u00f6nnen zus\u00e4tzliche Responses mit zus\u00e4tzlichen Statuscodes, Medientypen, Beschreibungen, usw. deklarieren.</p> <p>Diese zus\u00e4tzlichen Responses werden in das OpenAPI-Schema aufgenommen, sodass sie auch in der API-Dokumentation erscheinen.</p> <p>F\u00fcr diese zus\u00e4tzlichen Responses m\u00fcssen Sie jedoch sicherstellen, dass Sie eine <code>Response</code>, wie etwa <code>JSONResponse</code>, direkt zur\u00fcckgeben, mit Ihrem Statuscode und Inhalt.</p>"},{"location":"advanced/additional-responses/#zusatzliche-response-mit-model","title":"Zus\u00e4tzliche Response mit <code>model</code>","text":"<p>Sie k\u00f6nnen Ihren Pfadoperation-Dekoratoren einen Parameter <code>responses</code> \u00fcbergeben.</p> <p>Der nimmt ein <code>dict</code> entgegen, die Schl\u00fcssel sind Statuscodes f\u00fcr jede Response, wie etwa <code>200</code>, und die Werte sind andere <code>dict</code>s mit den Informationen f\u00fcr jede Response.</p> <p>Jedes dieser Response-<code>dict</code>s kann einen Schl\u00fcssel <code>model</code> haben, welcher ein Pydantic-Modell enth\u00e4lt, genau wie <code>response_model</code>.</p> <p>ReadyAPI nimmt dieses Modell, generiert dessen JSON-Schema und f\u00fcgt es an der richtigen Stelle in OpenAPI ein.</p> <p>Um beispielsweise eine weitere Response mit dem Statuscode <code>404</code> und einem Pydantic-Modell <code>Message</code> zu deklarieren, k\u00f6nnen Sie schreiben:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass Sie die <code>JSONResponse</code> direkt zur\u00fcckgeben m\u00fcssen.</p> <p>Info</p> <p>Der <code>model</code>-Schl\u00fcssel ist nicht Teil von OpenAPI.</p> <p>ReadyAPI nimmt das Pydantic-Modell von dort, generiert das JSON-Schema und f\u00fcgt es an der richtigen Stelle ein.</p> <p>Die richtige Stelle ist:</p> <ul> <li>Im Schl\u00fcssel <code>content</code>, der als Wert ein weiteres JSON-Objekt (<code>dict</code>) hat, welches Folgendes enth\u00e4lt:<ul> <li>Ein Schl\u00fcssel mit dem Medientyp, z. B. <code>application/json</code>, der als Wert ein weiteres JSON-Objekt hat, welches Folgendes enth\u00e4lt:<ul> <li>Ein Schl\u00fcssel <code>schema</code>, der als Wert das JSON-Schema aus dem Modell hat, hier ist die richtige Stelle.<ul> <li>ReadyAPI f\u00fcgt hier eine Referenz auf die globalen JSON-Schemas an einer anderen Stelle in Ihrer OpenAPI hinzu, anstatt es direkt einzubinden. Auf diese Weise k\u00f6nnen andere Anwendungen und Clients diese JSON-Schemas direkt verwenden, bessere Tools zur Codegenerierung bereitstellen, usw.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Die generierten Responses in der OpenAPI f\u00fcr diese Pfadoperation lauten:</p> <pre><code>{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Die Schemas werden von einer anderen Stelle innerhalb des OpenAPI-Schemas referenziert:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/additional-responses/#zusatzliche-medientypen-fur-die-haupt-response","title":"Zus\u00e4tzliche Medientypen f\u00fcr die Haupt-Response","text":"<p>Sie k\u00f6nnen denselben <code>responses</code>-Parameter verwenden, um verschiedene Medientypen f\u00fcr dieselbe Haupt-Response hinzuzuf\u00fcgen.</p> <p>Sie k\u00f6nnen beispielsweise einen zus\u00e4tzlichen Medientyp <code>image/png</code> hinzuf\u00fcgen und damit deklarieren, dass Ihre Pfadoperation ein JSON-Objekt (mit dem Medientyp <code>application/json</code>) oder ein PNG-Bild zur\u00fcckgeben kann:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass Sie das Bild direkt mit einer <code>FileResponse</code> zur\u00fcckgeben m\u00fcssen.</p> <p>Info</p> <p>Sofern Sie in Ihrem Parameter <code>responses</code> nicht explizit einen anderen Medientyp angeben, geht ReadyAPI davon aus, dass die Response denselben Medientyp wie die Haupt-Response-Klasse hat (Standardm\u00e4\u00dfig <code>application/json</code>).</p> <p>Wenn Sie jedoch eine benutzerdefinierte Response-Klasse mit <code>None</code> als Medientyp angegeben haben, verwendet ReadyAPI <code>application/json</code> f\u00fcr jede zus\u00e4tzliche Response, die \u00fcber ein zugeh\u00f6riges Modell verf\u00fcgt.</p>"},{"location":"advanced/additional-responses/#informationen-kombinieren","title":"Informationen kombinieren","text":"<p>Sie k\u00f6nnen auch Response-Informationen von mehreren Stellen kombinieren, einschlie\u00dflich der Parameter <code>response_model</code>, <code>status_code</code> und <code>responses</code>.</p> <p>Sie k\u00f6nnen ein <code>response_model</code> deklarieren, indem Sie den Standardstatuscode <code>200</code> (oder bei Bedarf einen benutzerdefinierten) verwenden und dann zus\u00e4tzliche Informationen f\u00fcr dieselbe Response in <code>responses</code> direkt im OpenAPI-Schema deklarieren.</p> <p>ReadyAPI beh\u00e4lt die zus\u00e4tzlichen Informationen aus <code>responses</code> und kombiniert sie mit dem JSON-Schema aus Ihrem Modell.</p> <p>Sie k\u00f6nnen beispielsweise eine Response mit dem Statuscode <code>404</code> deklarieren, die ein Pydantic-Modell verwendet und \u00fcber eine benutzerdefinierte Beschreibung (<code>description</code>) verf\u00fcgt.</p> <p>Und eine Response mit dem Statuscode <code>200</code>, die Ihr <code>response_model</code> verwendet, aber ein benutzerdefiniertes Beispiel (<code>example</code>) enth\u00e4lt:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Es wird alles kombiniert und in Ihre OpenAPI eingebunden und in der API-Dokumentation angezeigt:</p> <p></p>"},{"location":"advanced/additional-responses/#vordefinierte-und-benutzerdefinierte-responses-kombinieren","title":"Vordefinierte und benutzerdefinierte Responses kombinieren","text":"<p>M\u00f6glicherweise m\u00f6chten Sie einige vordefinierte Responses haben, die f\u00fcr viele Pfadoperationen gelten, Sie m\u00f6chten diese jedoch mit benutzerdefinierten Responses kombinieren, die f\u00fcr jede Pfadoperation erforderlich sind.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie die Python-Technik zum \u201eEntpacken\u201c eines <code>dict</code>s mit <code>**dict_to_unpack</code> verwenden:</p> <pre><code>old_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n</code></pre> <p>Hier wird <code>new_dict</code> alle Schl\u00fcssel-Wert-Paare von <code>old_dict</code> plus das neue Schl\u00fcssel-Wert-Paar enthalten:</p> <pre><code>{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n</code></pre> <p>Mit dieser Technik k\u00f6nnen Sie einige vordefinierte Responses in Ihren Pfadoperationen wiederverwenden und sie mit zus\u00e4tzlichen benutzerdefinierten Responses kombinieren.</p> <p>Zum Beispiel:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre>"},{"location":"advanced/additional-responses/#weitere-informationen-zu-openapi-responses","title":"Weitere Informationen zu OpenAPI-Responses","text":"<p>Um zu sehen, was genau Sie in die Responses aufnehmen k\u00f6nnen, k\u00f6nnen Sie die folgenden Abschnitte in der OpenAPI-Spezifikation \u00fcberpr\u00fcfen:</p> <ul> <li>OpenAPI Responses Object, enth\u00e4lt das <code>Response Object</code>.</li> <li>OpenAPI Response Object, Sie k\u00f6nnen alles davon direkt in jede Response innerhalb Ihres <code>responses</code>-Parameter einf\u00fcgen. Einschlie\u00dflich <code>description</code>, <code>headers</code>, <code>content</code> (darin deklarieren Sie verschiedene Medientypen und JSON-Schemas) und <code>links</code>.</li> </ul>"},{"location":"advanced/additional-status-codes/","title":"Zus\u00e4tzliche Statuscodes","text":"<p>Standardm\u00e4\u00dfig liefert ReadyAPI die R\u00fcckgabewerte (Responses) als <code>JSONResponse</code> zur\u00fcck und f\u00fcgt den Inhalt der jeweiligen Pfadoperation in das <code>JSONResponse</code> Objekt ein.</p> <p>Es wird der Default-Statuscode oder derjenige verwendet, den Sie in Ihrer Pfadoperation festgelegt haben.</p>"},{"location":"advanced/additional-status-codes/#zusatzliche-statuscodes_1","title":"Zus\u00e4tzliche Statuscodes","text":"<p>Wenn Sie neben dem Hauptstatuscode weitere Statuscodes zur\u00fcckgeben m\u00f6chten, k\u00f6nnen Sie dies tun, indem Sie direkt eine <code>Response</code> zur\u00fcckgeben, wie etwa eine <code>JSONResponse</code>, und den zus\u00e4tzlichen Statuscode direkt festlegen.</p> <p>Angenommen, Sie m\u00f6chten eine Pfadoperation haben, die das Aktualisieren von Artikeln erm\u00f6glicht und bei Erfolg den HTTP-Statuscode 200 \u201eOK\u201c zur\u00fcckgibt.</p> <p>Sie m\u00f6chten aber auch, dass sie neue Artikel akzeptiert. Und wenn die Elemente vorher nicht vorhanden waren, werden diese Elemente erstellt und der HTTP-Statuscode 201 \u201eCreated\u201c zur\u00fcckgegeben.</p> <p>Um dies zu erreichen, importieren Sie <code>JSONResponse</code>, und geben Sie Ihren Inhalt direkt zur\u00fcck, indem Sie den gew\u00fcnschten <code>status_code</code> setzen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Achtung</p> <p>Wenn Sie eine <code>Response</code> direkt zur\u00fcckgeben, wie im obigen Beispiel, wird sie direkt zur\u00fcckgegeben.</p> <p>Sie wird nicht mit einem Modell usw. serialisiert.</p> <p>Stellen Sie sicher, dass sie die gew\u00fcnschten Daten enth\u00e4lt und dass die Werte g\u00fcltiges JSON sind (wenn Sie <code>JSONResponse</code> verwenden).</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import JSONResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette. Das Gleiche gilt f\u00fcr <code>status</code>.</p>"},{"location":"advanced/additional-status-codes/#openapi-und-api-dokumentation","title":"OpenAPI- und API-Dokumentation","text":"<p>Wenn Sie zus\u00e4tzliche Statuscodes und Responses direkt zur\u00fcckgeben, werden diese nicht in das OpenAPI-Schema (die API-Dokumentation) aufgenommen, da ReadyAPI keine M\u00f6glichkeit hat, im Voraus zu wissen, was Sie zur\u00fcckgeben werden.</p> <p>Sie k\u00f6nnen das jedoch in Ihrem Code dokumentieren, indem Sie Folgendes verwenden: Zus\u00e4tzliche Responses.</p>"},{"location":"advanced/advanced-dependencies/","title":"Fortgeschrittene Abh\u00e4ngigkeiten","text":""},{"location":"advanced/advanced-dependencies/#parametrisierte-abhangigkeiten","title":"Parametrisierte Abh\u00e4ngigkeiten","text":"<p>Alle Abh\u00e4ngigkeiten, die wir bisher gesehen haben, waren festgelegte Funktionen oder Klassen.</p> <p>Es kann jedoch F\u00e4lle geben, in denen Sie Parameter f\u00fcr eine Abh\u00e4ngigkeit festlegen m\u00f6chten, ohne viele verschiedene Funktionen oder Klassen zu deklarieren.</p> <p>Stellen wir uns vor, wir m\u00f6chten eine Abh\u00e4ngigkeit haben, die pr\u00fcft, ob ein Query-Parameter <code>q</code> einen vordefinierten Inhalt hat.</p> <p>Aber wir wollen diesen vordefinierten Inhalt per Parameter festlegen k\u00f6nnen.</p>"},{"location":"advanced/advanced-dependencies/#eine-aufrufbare-instanz","title":"Eine \u201eaufrufbare\u201c Instanz","text":"<p>In Python gibt es eine M\u00f6glichkeit, eine Instanz einer Klasse \u201eaufrufbar\u201c (\u201ecallable\u201c) zu machen.</p> <p>Nicht die Klasse selbst (die bereits aufrufbar ist), sondern eine Instanz dieser Klasse.</p> <p>Dazu deklarieren wir eine Methode <code>__call__</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>In diesem Fall ist dieses <code>__call__</code> das, was ReadyAPI verwendet, um nach zus\u00e4tzlichen Parametern und Unterabh\u00e4ngigkeiten zu suchen, und das ist es auch, was sp\u00e4ter aufgerufen wird, um einen Wert an den Parameter in Ihrer Pfadoperation-Funktion zu \u00fcbergeben.</p>"},{"location":"advanced/advanced-dependencies/#die-instanz-parametrisieren","title":"Die Instanz parametrisieren","text":"<p>Und jetzt k\u00f6nnen wir <code>__init__</code> verwenden, um die Parameter der Instanz zu deklarieren, die wir zum <code>Parametrisieren</code> der Abh\u00e4ngigkeit verwenden k\u00f6nnen:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>In diesem Fall wird ReadyAPI <code>__init__</code> nie ber\u00fchren oder sich darum k\u00fcmmern, wir werden es direkt in unserem Code verwenden.</p>"},{"location":"advanced/advanced-dependencies/#eine-instanz-erstellen","title":"Eine Instanz erstellen","text":"<p>Wir k\u00f6nnten eine Instanz dieser Klasse erstellen mit:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Und auf diese Weise k\u00f6nnen wir unsere Abh\u00e4ngigkeit \u201eparametrisieren\u201c, die jetzt <code>\"bar\"</code> enth\u00e4lt, als das Attribut <code>checker.fixed_content</code>.</p>"},{"location":"advanced/advanced-dependencies/#die-instanz-als-abhangigkeit-verwenden","title":"Die Instanz als Abh\u00e4ngigkeit verwenden","text":"<p>Dann k\u00f6nnten wir diesen <code>checker</code> in einem <code>Depends(checker)</code> anstelle von <code>Depends(FixedContentQueryChecker)</code> verwenden, da die Abh\u00e4ngigkeit die Instanz <code>checker</code> und nicht die Klasse selbst ist.</p> <p>Und beim Aufl\u00f6sen der Abh\u00e4ngigkeit ruft ReadyAPI diesen <code>checker</code> wie folgt auf:</p> <pre><code>checker(q=\"somequery\")\n</code></pre> <p>... und \u00fcbergibt, was immer das als Wert dieser Abh\u00e4ngigkeit in unserer Pfadoperation-Funktion zur\u00fcckgibt, als den Parameter <code>fixed_content_included</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tipp</p> <p>Das alles mag gek\u00fcnstelt wirken. Und es ist m\u00f6glicherweise noch nicht ganz klar, welchen Nutzen das hat.</p> <p>Diese Beispiele sind bewusst einfach gehalten, zeigen aber, wie alles funktioniert.</p> <p>In den Kapiteln zum Thema Sicherheit gibt es Hilfsfunktionen, die auf die gleiche Weise implementiert werden.</p> <p>Wenn Sie das hier alles verstanden haben, wissen Sie bereits, wie diese Sicherheits-Hilfswerkzeuge unter der Haube funktionieren.</p>"},{"location":"advanced/async-tests/","title":"Asynchrone Tests","text":"<p>Sie haben bereits gesehen, wie Sie Ihre ReadyAPI-Anwendungen mit dem bereitgestellten <code>TestClient</code> testen. Bisher haben Sie nur gesehen, wie man synchrone Tests schreibt, ohne <code>async</code>hrone Funktionen zu verwenden.</p> <p>Die M\u00f6glichkeit, in Ihren Tests asynchrone Funktionen zu verwenden, k\u00f6nnte beispielsweise n\u00fctzlich sein, wenn Sie Ihre Datenbank asynchron abfragen. Stellen Sie sich vor, Sie m\u00f6chten das Senden von Requests an Ihre ReadyAPI-Anwendung testen und dann \u00fcberpr\u00fcfen, ob Ihr Backend die richtigen Daten erfolgreich in die Datenbank geschrieben hat, w\u00e4hrend Sie eine asynchrone Datenbankbibliothek verwenden.</p> <p>Schauen wir uns an, wie wir das machen k\u00f6nnen.</p>"},{"location":"advanced/async-tests/#pytestmarkanyio","title":"pytest.mark.anyio","text":"<p>Wenn wir in unseren Tests asynchrone Funktionen aufrufen m\u00f6chten, m\u00fcssen unsere Testfunktionen asynchron sein. AnyIO stellt hierf\u00fcr ein nettes Plugin zur Verf\u00fcgung, mit dem wir festlegen k\u00f6nnen, dass einige Testfunktionen asynchron aufgerufen werden sollen.</p>"},{"location":"advanced/async-tests/#httpx","title":"HTTPX","text":"<p>Auch wenn Ihre ReadyAPI-Anwendung normale <code>def</code>-Funktionen anstelle von <code>async def</code> verwendet, handelt es sich darunter immer noch um eine <code>async</code>hrone Anwendung.</p> <p>Der <code>TestClient</code> macht unter der Haube magisches, um die asynchrone ReadyAPI-Anwendung in Ihren normalen <code>def</code>-Testfunktionen, mithilfe von Standard-Pytest aufzurufen. Aber diese Magie funktioniert nicht mehr, wenn wir sie in asynchronen Funktionen verwenden. Durch die asynchrone Ausf\u00fchrung unserer Tests k\u00f6nnen wir den <code>TestClient</code> nicht mehr in unseren Testfunktionen verwenden.</p> <p>Der <code>TestClient</code> basiert auf HTTPX und gl\u00fccklicherweise k\u00f6nnen wir ihn direkt verwenden, um die API zu testen.</p>"},{"location":"advanced/async-tests/#beispiel","title":"Beispiel","text":"<p>Betrachten wir als einfaches Beispiel eine Dateistruktur \u00e4hnlich der in Gr\u00f6\u00dfere Anwendungen und Testen:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Die Datei <code>main.py</code> h\u00e4tte als Inhalt:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n</code></pre> <p>Die Datei <code>test_main.py</code> h\u00e4tte die Tests f\u00fcr <code>main.py</code>, das k\u00f6nnte jetzt so aussehen:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre>"},{"location":"advanced/async-tests/#es-ausfuhren","title":"Es ausf\u00fchren","text":"<p>Sie k\u00f6nnen Ihre Tests wie gewohnt ausf\u00fchren mit:</p> <pre><code>$ pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/async-tests/#details","title":"Details","text":"<p>Der Marker <code>@pytest.mark.anyio</code> teilt pytest mit, dass diese Testfunktion asynchron aufgerufen werden soll:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass die Testfunktion jetzt <code>async def</code> ist und nicht nur <code>def</code> wie zuvor, wenn Sie den <code>TestClient</code> verwenden.</p> <p>Dann k\u00f6nnen wir einen <code>AsyncClient</code> mit der App erstellen und mit <code>await</code> asynchrone Requests an ihn senden.</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Das ist das \u00c4quivalent zu:</p> <pre><code>response = client.get('/')\n</code></pre> <p>... welches wir verwendet haben, um unsere Requests mit dem <code>TestClient</code> zu machen.</p> <p>Tipp</p> <p>Beachten Sie, dass wir async/await mit dem neuen <code>AsyncClient</code> verwenden \u2013 der Request ist asynchron.</p> <p>Achtung</p> <p>Falls Ihre Anwendung auf Lifespan-Events angewiesen ist, der <code>AsyncClient</code> l\u00f6st diese Events nicht aus. Um sicherzustellen, dass sie ausgel\u00f6st werden, verwenden Sie <code>LifespanManager</code> von florimondmanca/asgi-lifespan.</p>"},{"location":"advanced/async-tests/#andere-asynchrone-funktionsaufrufe","title":"Andere asynchrone Funktionsaufrufe","text":"<p>Da die Testfunktion jetzt asynchron ist, k\u00f6nnen Sie in Ihren Tests neben dem Senden von Requests an Ihre ReadyAPI-Anwendung jetzt auch andere <code>async</code>hrone Funktionen aufrufen (und <code>await</code>en), genau so, wie Sie diese an anderer Stelle in Ihrem Code aufrufen w\u00fcrden.</p> <p>Tipp</p> <p>Wenn Sie einen <code>RuntimeError: Task attached to a different loop</code> erhalten, wenn Sie asynchrone Funktionsaufrufe in Ihre Tests integrieren (z. B. bei Verwendung von MongoDBs MotorClient), dann denken Sie daran, Objekte zu instanziieren, die einen Event Loop nur innerhalb asynchroner Funktionen ben\u00f6tigen, z. B. einen <code>@app.on_event(\"startup\")</code>-Callback.</p>"},{"location":"advanced/behind-a-proxy/","title":"Hinter einem Proxy","text":"<p>In manchen Situationen m\u00fcssen Sie m\u00f6glicherweise einen Proxy-Server wie Traefik oder Nginx verwenden, mit einer Konfiguration, die ein zus\u00e4tzliches Pfadpr\u00e4fix hinzuf\u00fcgt, das von Ihrer Anwendung nicht gesehen wird.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie <code>root_path</code> verwenden, um Ihre Anwendung zu konfigurieren.</p> <p>Der <code>root_path</code> (\u201eWurzelpfad\u201c) ist ein Mechanismus, der von der ASGI-Spezifikation bereitgestellt wird (auf der ReadyAPI via Starlette aufbaut).</p> <p>Der <code>root_path</code> wird verwendet, um diese speziellen F\u00e4lle zu handhaben.</p> <p>Und er wird auch intern beim Mounten von Unteranwendungen verwendet.</p>"},{"location":"advanced/behind-a-proxy/#proxy-mit-einem-abgetrennten-pfadprafix","title":"Proxy mit einem abgetrennten Pfadpr\u00e4fix","text":"<p>Ein Proxy mit einem abgetrennten Pfadpr\u00e4fix bedeutet in diesem Fall, dass Sie einen Pfad unter <code>/app</code> in Ihrem Code deklarieren k\u00f6nnten, dann aber, eine Ebene dar\u00fcber, den Proxy hinzuf\u00fcgen, der Ihre ReadyAPI-Anwendung unter einem Pfad wie <code>/api/v1</code> platziert.</p> <p>In diesem Fall w\u00fcrde der urspr\u00fcngliche Pfad <code>/app</code> tats\u00e4chlich unter <code>/api/v1/app</code> bereitgestellt.</p> <p>Auch wenn Ihr gesamter Code unter der Annahme geschrieben ist, dass es nur <code>/app</code> gibt.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Und der Proxy w\u00fcrde das Pfadpr\u00e4fix on-the-fly \"entfernen\", bevor er die Anfrage an Uvicorn \u00fcbermittelt, daf\u00fcr sorgend, dass Ihre Anwendung davon \u00fcberzeugt ist, dass sie unter <code>/app</code> bereitgestellt wird, sodass Sie nicht Ihren gesamten Code dahingehend aktualisieren m\u00fcssen, das Pr\u00e4fix <code>/api/v1</code> zu verwenden.</p> <p>Bis hierher w\u00fcrde alles wie gewohnt funktionieren.</p> <p>Wenn Sie dann jedoch die Benutzeroberfl\u00e4che der integrierten Dokumentation (das Frontend) \u00f6ffnen, wird angenommen, dass sich das OpenAPI-Schema unter <code>/openapi.json</code> anstelle von <code>/api/v1/openapi.json</code> befindet.</p> <p>Das Frontend (das im Browser l\u00e4uft) w\u00fcrde also versuchen, <code>/openapi.json</code> zu erreichen und w\u00e4re nicht in der Lage, das OpenAPI-Schema abzurufen.</p> <p>Da wir f\u00fcr unsere Anwendung einen Proxy mit dem Pfadpr\u00e4fix <code>/api/v1</code> haben, muss das Frontend das OpenAPI-Schema unter <code>/api/v1/openapi.json</code> abrufen.</p> <pre><code>graph LR\n\nbrowser(\"Browser\")\nproxy[\"Proxy auf http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Server auf http://127.0.0.1:8000/app\"]\n\nbrowser --&gt; proxy\nproxy --&gt; server</code></pre> <p>Tipp</p> <p>Die IP <code>0.0.0.0</code> wird \u00fcblicherweise verwendet, um anzudeuten, dass das Programm alle auf diesem Computer/Server verf\u00fcgbaren IPs abh\u00f6rt.</p> <p>Die Benutzeroberfl\u00e4che der Dokumentation w\u00fcrde ben\u00f6tigen, dass das OpenAPI-Schema deklariert, dass sich dieser API-<code>server</code> unter <code>/api/v1</code> (hinter dem Proxy) befindet. Zum Beispiel:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // Hier mehr Einstellungen\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // Hier mehr Einstellungen\n    }\n}\n</code></pre> <p>In diesem Beispiel k\u00f6nnte der \u201eProxy\u201c etwa Traefik sein. Und der Server w\u00e4re so etwas wie Uvicorn, auf dem Ihre ReadyAPI-Anwendung ausgef\u00fchrt wird.</p>"},{"location":"advanced/behind-a-proxy/#bereitstellung-des-root_path","title":"Bereitstellung des <code>root_path</code>","text":"<p>Um dies zu erreichen, k\u00f6nnen Sie die Kommandozeilenoption <code>--root-path</code> wie folgt verwenden:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Falls Sie Hypercorn verwenden, das hat auch die Option <code>--root-path</code>.</p> <p>Technische Details</p> <p>Die ASGI-Spezifikation definiert einen <code>root_path</code> f\u00fcr diesen Anwendungsfall.</p> <p>Und die Kommandozeilenoption <code>--root-path</code> stellt diesen <code>root_path</code> bereit.</p>"},{"location":"advanced/behind-a-proxy/#uberprufen-des-aktuellen-root_path","title":"\u00dcberpr\u00fcfen des aktuellen <code>root_path</code>","text":"<p>Sie k\u00f6nnen den aktuellen <code>root_path</code> abrufen, der von Ihrer Anwendung f\u00fcr jede Anfrage verwendet wird. Er ist Teil des <code>scope</code>-Dictionarys (das ist Teil der ASGI-Spezifikation).</p> <p>Hier f\u00fcgen wir ihn, nur zu Demonstrationszwecken, in die Nachricht ein.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Wenn Sie Uvicorn dann starten mit:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>w\u00e4re die Response etwa:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre>"},{"location":"advanced/behind-a-proxy/#festlegen-des-root_path-in-der-readyapi-anwendung","title":"Festlegen des <code>root_path</code> in der ReadyAPI-Anwendung","text":"<p>Falls Sie keine M\u00f6glichkeit haben, eine Kommandozeilenoption wie <code>--root-path</code> oder \u00e4hnlich zu \u00fcbergeben, k\u00f6nnen Sie als Alternative beim Erstellen Ihrer ReadyAPI-Anwendung den Parameter <code>root_path</code> setzen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Die \u00dcbergabe des <code>root_path</code> an <code>ReadyAPI</code> w\u00e4re das \u00c4quivalent zur \u00dcbergabe der <code>--root-path</code>-Kommandozeilenoption an Uvicorn oder Hypercorn.</p>"},{"location":"advanced/behind-a-proxy/#uber-root_path","title":"\u00dcber <code>root_path</code>","text":"<p>Beachten Sie, dass der Server (Uvicorn) diesen <code>root_path</code> f\u00fcr nichts anderes au\u00dfer die Weitergabe an die Anwendung verwendet.</p> <p>Aber wenn Sie mit Ihrem Browser auf http://127.0.0.1:8000/app gehen, sehen Sie die normale Antwort:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Es wird also nicht erwartet, dass unter <code>http://127.0.0.1:8000/api/v1/app</code> darauf zugegriffen wird.</p> <p>Uvicorn erwartet, dass der Proxy unter <code>http://127.0.0.1:8000/app</code> auf Uvicorn zugreift, und dann liegt es in der Verantwortung des Proxys, das zus\u00e4tzliche <code>/api/v1</code>-Pr\u00e4fix dar\u00fcber hinzuzuf\u00fcgen.</p>"},{"location":"advanced/behind-a-proxy/#uber-proxys-mit-einem-abgetrennten-pfadprafix","title":"\u00dcber Proxys mit einem abgetrennten Pfadpr\u00e4fix","text":"<p>Bedenken Sie, dass ein Proxy mit abgetrennten Pfadpr\u00e4fix nur eine von vielen Konfigurationsm\u00f6glichkeiten ist.</p> <p>Wahrscheinlich wird in vielen F\u00e4llen die Standardeinstellung sein, dass der Proxy kein abgetrenntes Pfadpr\u00e4fix hat.</p> <p>In einem solchen Fall (ohne ein abgetrenntes Pfadpr\u00e4fix) w\u00fcrde der Proxy auf etwas wie <code>https://myawesomeapp.com</code> lauschen, und wenn der Browser dann zu <code>https://myawesomeapp.com/api/v1/</code> wechselt, und Ihr Server (z. B. Uvicorn) auf <code>http://127.0.0.1:8000</code> lauscht, w\u00fcrde der Proxy (ohne ein abgetrenntes Pfadpr\u00e4fix) \u00fcber denselben Pfad auf Uvicorn zugreifen: <code>http://127.0.0.1:8000/api/v1/app</code>.</p>"},{"location":"advanced/behind-a-proxy/#lokal-testen-mit-traefik","title":"Lokal testen mit Traefik","text":"<p>Sie k\u00f6nnen das Experiment mit einem abgetrennten Pfadpr\u00e4fix ganz einfach lokal ausf\u00fchren, indem Sie Traefik verwenden.</p> <p>Laden Sie Traefik herunter, es ist eine einzelne Bin\u00e4rdatei, Sie k\u00f6nnen die komprimierte Datei extrahieren und sie direkt vom Terminal aus ausf\u00fchren.</p> <p>Dann erstellen Sie eine Datei <code>traefik.toml</code> mit:</p> <pre><code>[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n</code></pre> <p>Dadurch wird Traefik angewiesen, Port 9999 abzuh\u00f6ren und eine andere Datei <code>routes.toml</code> zu verwenden.</p> <p>Tipp</p> <p>Wir verwenden Port 9999 anstelle des Standard-HTTP-Ports 80, damit Sie ihn nicht mit Administratorrechten (<code>sudo</code>) ausf\u00fchren m\u00fcssen.</p> <p>Erstellen Sie nun die andere Datei <code>routes.toml</code>:</p> <pre><code>[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n</code></pre> <p>Diese Datei konfiguriert Traefik, das Pfadpr\u00e4fix <code>/api/v1</code> zu verwenden.</p> <p>Und dann leitet Traefik seine Anfragen an Ihren Uvicorn weiter, der unter <code>http://127.0.0.1:8000</code> l\u00e4uft.</p> <p>Starten Sie nun Traefik:</p> <pre><code>$ ./traefik --configFile=traefik.toml\n\nINFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml\n</code></pre> <p>Und jetzt starten Sie Ihre Anwendung mit Uvicorn, indem Sie die Option <code>--root-path</code> verwenden:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"advanced/behind-a-proxy/#die-responses-betrachten","title":"Die Responses betrachten","text":"<p>Wenn Sie nun zur URL mit dem Port f\u00fcr Uvicorn gehen: http://127.0.0.1:8000/app, sehen Sie die normale Response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass, obwohl Sie unter <code>http://127.0.0.1:8000/app</code> darauf zugreifen, als <code>root_path</code> angezeigt wird <code>/api/v1</code>, welches aus der Option <code>--root-path</code> stammt.</p> <p>\u00d6ffnen Sie nun die URL mit dem Port f\u00fcr Traefik, einschlie\u00dflich des Pfadpr\u00e4fixes: http://127.0.0.1:9999/api/v1/app.</p> <p>Wir bekommen die gleiche Response:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Diesmal jedoch unter der URL mit dem vom Proxy bereitgestellten Pr\u00e4fixpfad: <code>/api/v1</code>.</p> <p>Die Idee hier ist nat\u00fcrlich, dass jeder \u00fcber den Proxy auf die Anwendung zugreifen soll, daher ist die Version mit dem Pfadpr\u00e4fix <code>/api/v1</code> die \u201ekorrekte\u201c.</p> <p>Und die von Uvicorn direkt bereitgestellte Version ohne Pfadpr\u00e4fix (<code>http://127.0.0.1:8000/app</code>) w\u00e4re ausschlie\u00dflich f\u00fcr den Zugriff durch den Proxy (Traefik) bestimmt.</p> <p>Dies demonstriert, wie der Proxy (Traefik) das Pfadpr\u00e4fix verwendet und wie der Server (Uvicorn) den <code>root_path</code> aus der Option <code>--root-path</code> verwendet.</p>"},{"location":"advanced/behind-a-proxy/#es-in-der-dokumentationsoberflache-betrachten","title":"Es in der Dokumentationsoberfl\u00e4che betrachten","text":"<p>Jetzt folgt der spa\u00dfige Teil. \u2728</p> <p>Der \u201eoffizielle\u201c Weg, auf die Anwendung zuzugreifen, w\u00e4re \u00fcber den Proxy mit dem von uns definierten Pfadpr\u00e4fix. Wenn Sie also die von Uvicorn direkt bereitgestellte Dokumentationsoberfl\u00e4che ohne das Pfadpr\u00e4fix in der URL ausprobieren, wird es erwartungsgem\u00e4\u00df nicht funktionieren, da erwartet wird, dass der Zugriff \u00fcber den Proxy erfolgt.</p> <p>Sie k\u00f6nnen das unter http://127.0.0.1:8000/docs sehen:</p> <p></p> <p>Wenn wir jedoch unter der \u201eoffiziellen\u201c URL, \u00fcber den Proxy mit Port <code>9999</code>, unter <code>/api/v1/docs</code>, auf die Dokumentationsoberfl\u00e4che zugreifen, funktioniert es ordnungsgem\u00e4\u00df! \ud83c\udf89</p> <p>Sie k\u00f6nnen das unter http://127.0.0.1:9999/api/v1/docs testen:</p> <p></p> <p>Genau so, wie wir es wollten. \u2714\ufe0f</p> <p>Dies liegt daran, dass ReadyAPI diesen <code>root_path</code> verwendet, um den Default-<code>server</code> in OpenAPI mit der von <code>root_path</code> bereitgestellten URL zu erstellen.</p>"},{"location":"advanced/behind-a-proxy/#zusatzliche-server","title":"Zus\u00e4tzliche Server","text":"<p>Achtung</p> <p>Dies ist ein fortgeschrittener Anwendungsfall. \u00dcberspringen Sie das gerne.</p> <p>Standardm\u00e4\u00dfig erstellt ReadyAPI einen <code>server</code> im OpenAPI-Schema mit der URL f\u00fcr den <code>root_path</code>.</p> <p>Sie k\u00f6nnen aber auch andere alternative <code>server</code> bereitstellen, beispielsweise wenn Sie m\u00f6chten, dass dieselbe Dokumentationsoberfl\u00e4che mit einer Staging- und Produktionsumgebung interagiert.</p> <p>Wenn Sie eine benutzerdefinierte Liste von Servern (<code>servers</code>) \u00fcbergeben und es einen <code>root_path</code> gibt (da Ihre API hinter einem Proxy l\u00e4uft), f\u00fcgt ReadyAPI einen \u201eServer\u201c mit diesem <code>root_path</code> am Anfang der Liste ein.</p> <p>Zum Beispiel:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Erzeugt ein OpenAPI-Schema, wie:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // Hier mehr Einstellungen\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Staging environment\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Production environment\"\n        }\n    ],\n    \"paths\": {\n            // Hier mehr Einstellungen\n    }\n}\n</code></pre> <p>Tipp</p> <p>Beachten Sie den automatisch generierten Server mit dem <code>URL</code>-Wert <code>/api/v1</code>, welcher vom <code>root_path</code> stammt.</p> <p>In der Dokumentationsoberfl\u00e4che unter http://127.0.0.1:9999/api/v1/docs w\u00fcrde es so aussehen:</p> <p></p> <p>Tipp</p> <p>Die Dokumentationsoberfl\u00e4che interagiert mit dem von Ihnen ausgew\u00e4hlten Server.</p>"},{"location":"advanced/behind-a-proxy/#den-automatischen-server-von-root_path-deaktivieren","title":"Den automatischen Server von <code>root_path</code> deaktivieren","text":"<p>Wenn Sie nicht m\u00f6chten, dass ReadyAPI einen automatischen Server inkludiert, welcher <code>root_path</code> verwendet, k\u00f6nnen Sie den Parameter <code>root_path_in_servers=False</code> verwenden:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Dann wird er nicht in das OpenAPI-Schema aufgenommen.</p>"},{"location":"advanced/behind-a-proxy/#mounten-einer-unteranwendung","title":"Mounten einer Unteranwendung","text":"<p>Wenn Sie gleichzeitig eine Unteranwendung mounten (wie beschrieben in Unteranwendungen \u2013 Mounts) und einen Proxy mit <code>root_path</code> verwenden wollen, k\u00f6nnen Sie das normal tun, wie Sie es erwarten w\u00fcrden.</p> <p>ReadyAPI verwendet intern den <code>root_path</code> auf intelligente Weise, sodass es einfach funktioniert. \u2728</p>"},{"location":"advanced/custom-response/","title":"Benutzerdefinierte Response \u2013 HTML, Stream, Datei, andere","text":"<p>Standardm\u00e4\u00dfig gibt ReadyAPI die Responses mittels <code>JSONResponse</code> zur\u00fcck.</p> <p>Sie k\u00f6nnen das \u00fcberschreiben, indem Sie direkt eine <code>Response</code> zur\u00fcckgeben, wie in Eine Response direkt zur\u00fcckgeben gezeigt.</p> <p>Wenn Sie jedoch direkt eine <code>Response</code> zur\u00fcckgeben, werden die Daten nicht automatisch konvertiert und die Dokumentation wird nicht automatisch generiert (zum Beispiel wird der spezifische \u201eMedientyp\u201c, der im HTTP-Header <code>Content-Type</code> angegeben ist, nicht Teil der generierten OpenAPI).</p> <p>Sie k\u00f6nnen aber auch die <code>Response</code>, die Sie verwenden m\u00f6chten, im Pfadoperation-Dekorator deklarieren.</p> <p>Der Inhalt, den Sie von Ihrer Pfadoperation-Funktion zur\u00fcckgeben, wird in diese <code>Response</code> eingef\u00fcgt.</p> <p>Und wenn diese <code>Response</code> einen JSON-Medientyp (<code>application/json</code>) hat, wie es bei <code>JSONResponse</code> und <code>UJSONResponse</code> der Fall ist, werden die von Ihnen zur\u00fcckgegebenen Daten automatisch mit jedem Pydantic <code>response_model</code> konvertiert (und gefiltert), das Sie im Pfadoperation-Dekorator deklariert haben.</p> <p>Hinweis</p> <p>Wenn Sie eine Response-Klasse ohne Medientyp verwenden, erwartet ReadyAPI, dass Ihre Response keinen Inhalt hat, und dokumentiert daher das Format der Response nicht in deren generierter OpenAPI-Dokumentation.</p>"},{"location":"advanced/custom-response/#orjsonresponse-verwenden","title":"<code>ORJSONResponse</code> verwenden","text":"<p>Um beispielsweise noch etwas Leistung herauszuholen, k\u00f6nnen Sie <code>orjson</code> installieren und verwenden, und die Response als <code>ORJSONResponse</code> deklarieren.</p> <p>Importieren Sie die <code>Response</code>-Klasse (-Unterklasse), die Sie verwenden m\u00f6chten, und deklarieren Sie sie im Pfadoperation-Dekorator.</p> <p>Bei umfangreichen Responses ist die direkte R\u00fcckgabe einer <code>Response</code> viel schneller als ein Dictionary zur\u00fcckzugeben.</p> <p>Das liegt daran, dass ReadyAPI standardm\u00e4\u00dfig jedes enthaltene Element \u00fcberpr\u00fcft und sicherstellt, dass es als JSON serialisierbar ist, und zwar unter Verwendung desselben JSON-kompatiblen Encoders, der im Tutorial erl\u00e4utert wurde. Dadurch k\u00f6nnen Sie beliebige Objekte zur\u00fcckgeben, zum Beispiel Datenbankmodelle.</p> <p>Wenn Sie jedoch sicher sind, dass der von Ihnen zur\u00fcckgegebene Inhalt mit JSON serialisierbar ist, k\u00f6nnen Sie ihn direkt an die Response-Klasse \u00fcbergeben und die zus\u00e4tzliche Arbeit vermeiden, die ReadyAPI h\u00e4tte, indem es Ihren zur\u00fcckgegebenen Inhalt durch den <code>jsonable_encoder</code> leitet, bevor es ihn an die Response-Klasse \u00fcbergibt.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n</code></pre> <p>Info</p> <p>Der Parameter <code>response_class</code> wird auch verwendet, um den \u201eMedientyp\u201c der Response zu definieren.</p> <p>In diesem Fall wird der HTTP-Header <code>Content-Type</code> auf <code>application/json</code> gesetzt.</p> <p>Und er wird als solcher in OpenAPI dokumentiert.</p> <p>Tipp</p> <p>Die <code>ORJSONResponse</code> ist derzeit nur in ReadyAPI verf\u00fcgbar, nicht in Starlette.</p>"},{"location":"advanced/custom-response/#html-response","title":"HTML-Response","text":"<p>Um eine Response mit HTML direkt von ReadyAPI zur\u00fcckzugeben, verwenden Sie <code>HTMLResponse</code>.</p> <ul> <li>Importieren Sie <code>HTMLResponse</code>.</li> <li>\u00dcbergeben Sie <code>HTMLResponse</code> als den Parameter <code>response_class</code> Ihres Pfadoperation-Dekorators.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre> <p>Info</p> <p>Der Parameter <code>response_class</code> wird auch verwendet, um den \u201eMedientyp\u201c der Response zu definieren.</p> <p>In diesem Fall wird der HTTP-Header <code>Content-Type</code> auf <code>text/html</code> gesetzt.</p> <p>Und er wird als solcher in OpenAPI dokumentiert.</p>"},{"location":"advanced/custom-response/#eine-response-zuruckgeben","title":"Eine <code>Response</code> zur\u00fcckgeben","text":"<p>Wie in Eine Response direkt zur\u00fcckgeben gezeigt, k\u00f6nnen Sie die Response auch direkt in Ihrer Pfadoperation \u00fcberschreiben, indem Sie diese zur\u00fcckgeben.</p> <p>Das gleiche Beispiel von oben, das eine <code>HTMLResponse</code> zur\u00fcckgibt, k\u00f6nnte so aussehen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Achtung</p> <p>Eine <code>Response</code>, die direkt von Ihrer Pfadoperation-Funktion zur\u00fcckgegeben wird, wird in OpenAPI nicht dokumentiert (zum Beispiel wird der <code>Content-Type</code> nicht dokumentiert) und ist in der automatischen interaktiven Dokumentation nicht sichtbar.</p> <p>Info</p> <p>Nat\u00fcrlich stammen der eigentliche <code>Content-Type</code>-Header, der Statuscode, usw., aus dem <code>Response</code>-Objekt, das Sie zur\u00fcckgegeben haben.</p>"},{"location":"advanced/custom-response/#in-openapi-dokumentieren-und-response-uberschreiben","title":"In OpenAPI dokumentieren und <code>Response</code> \u00fcberschreiben","text":"<p>Wenn Sie die Response innerhalb der Funktion \u00fcberschreiben und gleichzeitig den \u201eMedientyp\u201c in OpenAPI dokumentieren m\u00f6chten, k\u00f6nnen Sie den <code>response_class</code>-Parameter verwenden UND ein <code>Response</code>-Objekt zur\u00fcckgeben.</p> <p>Die <code>response_class</code> wird dann nur zur Dokumentation der OpenAPI-Pfadoperation* verwendet, Ihre <code>Response</code> wird jedoch unver\u00e4ndert verwendet.</p>"},{"location":"advanced/custom-response/#eine-htmlresponse-direkt-zuruckgeben","title":"Eine <code>HTMLResponse</code> direkt zur\u00fcckgeben","text":"<p>Es k\u00f6nnte zum Beispiel so etwas sein:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n</code></pre> <p>In diesem Beispiel generiert die Funktion <code>generate_html_response()</code> bereits eine <code>Response</code> und gibt sie zur\u00fcck, anstatt das HTML in einem <code>str</code> zur\u00fcckzugeben.</p> <p>Indem Sie das Ergebnis des Aufrufs von <code>generate_html_response()</code> zur\u00fcckgeben, geben Sie bereits eine <code>Response</code> zur\u00fcck, die das Standardverhalten von ReadyAPI \u00fcberschreibt.</p> <p>Aber da Sie die <code>HTMLResponse</code> auch in der <code>response_class</code> \u00fcbergeben haben, wei\u00df ReadyAPI, dass sie in OpenAPI und der interaktiven Dokumentation als HTML mit <code>text/html</code> zu dokumentieren ist:</p> <p></p>"},{"location":"advanced/custom-response/#verfugbare-responses","title":"Verf\u00fcgbare Responses","text":"<p>Hier sind einige der verf\u00fcgbaren Responses.</p> <p>Bedenken Sie, dass Sie <code>Response</code> verwenden k\u00f6nnen, um alles andere zur\u00fcckzugeben, oder sogar eine benutzerdefinierte Unterklasse zu erstellen.</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import HTMLResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p>"},{"location":"advanced/custom-response/#response","title":"<code>Response</code>","text":"<p>Die Hauptklasse <code>Response</code>, alle anderen Responses erben von ihr.</p> <p>Sie k\u00f6nnen sie direkt zur\u00fcckgeben.</p> <p>Sie akzeptiert die folgenden Parameter:</p> <ul> <li><code>content</code> \u2013 Ein <code>str</code> oder <code>bytes</code>.</li> <li><code>status_code</code> \u2013 Ein <code>int</code>-HTTP-Statuscode.</li> <li><code>headers</code> \u2013 Ein <code>dict</code> von Strings.</li> <li><code>media_type</code> \u2013 Ein <code>str</code>, der den Medientyp angibt. Z. B. <code>\"text/html\"</code>.</li> </ul> <p>ReadyAPI (eigentlich Starlette) f\u00fcgt automatisch einen Content-Length-Header ein. Au\u00dferdem wird es einen Content-Type-Header einf\u00fcgen, der auf dem media_type basiert, und f\u00fcr Texttypen einen Zeichensatz (charset) anf\u00fcgen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/custom-response/#htmlresponse","title":"<code>HTMLResponse</code>","text":"<p>Nimmt Text oder Bytes entgegen und gibt eine HTML-Response zur\u00fcck, wie Sie oben gelesen haben.</p>"},{"location":"advanced/custom-response/#plaintextresponse","title":"<code>PlainTextResponse</code>","text":"<p>Nimmt Text oder Bytes entgegen und gibt eine Plain-Text-Response zur\u00fcck.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import PlainTextResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n</code></pre>"},{"location":"advanced/custom-response/#jsonresponse","title":"<code>JSONResponse</code>","text":"<p>Nimmt einige Daten entgegen und gibt eine <code>application/json</code>-codierte Response zur\u00fcck.</p> <p>Dies ist die Standard-Response, die in ReadyAPI verwendet wird, wie Sie oben gelesen haben.</p>"},{"location":"advanced/custom-response/#orjsonresponse","title":"<code>ORJSONResponse</code>","text":"<p>Eine schnelle alternative JSON-Response mit <code>orjson</code>, wie Sie oben gelesen haben.</p>"},{"location":"advanced/custom-response/#ujsonresponse","title":"<code>UJSONResponse</code>","text":"<p>Eine alternative JSON-Response mit <code>ujson</code>.</p> <p>Achtung</p> <p><code>ujson</code> ist bei der Behandlung einiger Sonderf\u00e4lle weniger sorgf\u00e4ltig als Pythons eingebaute Implementierung.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import UJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tipp</p> <p>M\u00f6glicherweise ist <code>ORJSONResponse</code> eine schnellere Alternative.</p>"},{"location":"advanced/custom-response/#redirectresponse","title":"<code>RedirectResponse</code>","text":"<p>Gibt eine HTTP-Weiterleitung (HTTP-Redirect) zur\u00fcck. Verwendet standardm\u00e4\u00dfig den Statuscode 307 \u2013 Tempor\u00e4re Weiterleitung (Temporary Redirect).</p> <p>Sie k\u00f6nnen eine <code>RedirectResponse</code> direkt zur\u00fcckgeben:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/cligenius\")\nasync def redirect_cligenius():\n    return RedirectResponse(\"https://cligenius.khulnasoft.com\")\n</code></pre> <p>Oder Sie k\u00f6nnen sie im Parameter <code>response_class</code> verwenden:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/readyapi\", response_class=RedirectResponse)\nasync def redirect_readyapi():\n    return \"https://readyapi.github.io\"\n</code></pre> <p>Wenn Sie das tun, k\u00f6nnen Sie die URL direkt von Ihrer Pfadoperation-Funktion zur\u00fcckgeben.</p> <p>In diesem Fall ist der verwendete <code>status_code</code> der Standardcode f\u00fcr die <code>RedirectResponse</code>, also <code>307</code>.</p> <p>Sie k\u00f6nnen den Parameter <code>status_code</code> auch in Kombination mit dem Parameter <code>response_class</code> verwenden:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse","title":"<code>StreamingResponse</code>","text":"<p>Nimmt einen asynchronen Generator oder einen normalen Generator/Iterator und streamt den Responsebody.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\napp = ReadyAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n</code></pre>"},{"location":"advanced/custom-response/#verwendung-von-streamingresponse-mit-dateiahnlichen-objekten","title":"Verwendung von <code>StreamingResponse</code> mit datei\u00e4hnlichen Objekten","text":"<p>Wenn Sie ein datei\u00e4hnliches (file-like) Objekt haben (z. B. das von <code>open()</code> zur\u00fcckgegebene Objekt), k\u00f6nnen Sie eine Generatorfunktion erstellen, um \u00fcber dieses datei\u00e4hnliche Objekt zu iterieren.</p> <p>Auf diese Weise m\u00fcssen Sie nicht alles zuerst in den Arbeitsspeicher lesen und k\u00f6nnen diese Generatorfunktion an <code>StreamingResponse</code> \u00fcbergeben und zur\u00fcckgeben.</p> <p>Das umfasst viele Bibliotheken zur Interaktion mit Cloud-Speicher, Videoverarbeitung und anderen.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n</code></pre> <ol> <li>Das ist die Generatorfunktion. Es handelt sich um eine \u201eGeneratorfunktion\u201c, da sie <code>yield</code>-Anweisungen enth\u00e4lt.</li> <li>Durch die Verwendung eines <code>with</code>-Blocks stellen wir sicher, dass das datei\u00e4hnliche Objekt geschlossen wird, nachdem die Generatorfunktion fertig ist. Also, nachdem sie mit dem Senden der Response fertig ist.</li> <li> <p>Dieses <code>yield from</code> weist die Funktion an, \u00fcber das Ding namens <code>file_like</code> zu iterieren. Und dann f\u00fcr jeden iterierten Teil, diesen Teil so zur\u00fcckzugeben, als wenn er aus dieser Generatorfunktion (<code>iterfile</code>) stammen w\u00fcrde.</p> <p>Es handelt sich also hier um eine Generatorfunktion, die die \u201egenerierende\u201c Arbeit intern auf etwas anderes \u00fcbertr\u00e4gt.</p> <p>Auf diese Weise k\u00f6nnen wir das Ganze in einen <code>with</code>-Block einf\u00fcgen und so sicherstellen, dass das dateiartige Objekt nach Abschluss geschlossen wird.</p> </li> </ol> <p>Tipp</p> <p>Beachten Sie, dass wir, da wir Standard-<code>open()</code> verwenden, welches <code>async</code> und <code>await</code> nicht unterst\u00fctzt, hier die Pfadoperation mit normalen <code>def</code> deklarieren.</p>"},{"location":"advanced/custom-response/#fileresponse","title":"<code>FileResponse</code>","text":"<p>Streamt eine Datei asynchron als Response.</p> <p>Nimmt zur Instanziierung einen anderen Satz von Argumenten entgegen als die anderen Response-Typen:</p> <ul> <li><code>path</code> \u2013 Der Dateipfad zur Datei, die gestreamt werden soll.</li> <li><code>headers</code> \u2013 Alle benutzerdefinierten Header, die inkludiert werden sollen, als Dictionary.</li> <li><code>media_type</code> \u2013 Ein String, der den Medientyp angibt. Wenn nicht gesetzt, wird der Dateiname oder Pfad verwendet, um auf einen Medientyp zu schlie\u00dfen.</li> <li><code>filename</code> \u2013 Wenn gesetzt, wird das in der <code>Content-Disposition</code> der Response eingef\u00fcgt.</li> </ul> <p>Datei-Responses enthalten die entsprechenden <code>Content-Length</code>-, <code>Last-Modified</code>- und <code>ETag</code>-Header.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n</code></pre> <p>Sie k\u00f6nnen auch den Parameter <code>response_class</code> verwenden:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n</code></pre> <p>In diesem Fall k\u00f6nnen Sie den Dateipfad direkt von Ihrer Pfadoperation-Funktion zur\u00fcckgeben.</p>"},{"location":"advanced/custom-response/#benutzerdefinierte-response-klasse","title":"Benutzerdefinierte Response-Klasse","text":"<p>Sie k\u00f6nnen Ihre eigene benutzerdefinierte Response-Klasse erstellen, die von <code>Response</code> erbt und diese verwendet.</p> <p>Nehmen wir zum Beispiel an, dass Sie <code>orjson</code> verwenden m\u00f6chten, aber mit einigen benutzerdefinierten Einstellungen, die in der enthaltenen <code>ORJSONResponse</code>-Klasse nicht verwendet werden.</p> <p>Sie m\u00f6chten etwa, dass Ihre Response einger\u00fccktes und formatiertes JSON zur\u00fcckgibt. Daf\u00fcr m\u00f6chten Sie die orjson-Option <code>orjson.OPT_INDENT_2</code> verwenden.</p> <p>Sie k\u00f6nnten eine <code>CustomORJSONResponse</code> erstellen. Das Wichtigste, was Sie tun m\u00fcssen, ist, eine <code>Response.render(content)</code>-Methode zu erstellen, die den Inhalt als <code>bytes</code> zur\u00fcckgibt:</p> Python 3.8+ <pre><code>from typing import Any\n\nimport orjson\nfrom readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Statt:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>... wird die Response jetzt Folgendes zur\u00fcckgeben:</p> <pre><code>{\n  \"message\": \"Hello World\"\n}\n</code></pre> <p>Nat\u00fcrlich werden Sie wahrscheinlich viel bessere M\u00f6glichkeiten finden, Vorteil daraus zu ziehen, als JSON zu formatieren. \ud83d\ude09</p>"},{"location":"advanced/custom-response/#standard-response-klasse","title":"Standard-Response-Klasse","text":"<p>Beim Erstellen einer ReadyAPI-Klasseninstanz oder eines <code>APIRouter</code>s k\u00f6nnen Sie angeben, welche Response-Klasse standardm\u00e4\u00dfig verwendet werden soll.</p> <p>Der Parameter, der das definiert, ist <code>default_response_class</code>.</p> <p>Im folgenden Beispiel verwendet ReadyAPI standardm\u00e4\u00dfig <code>ORJSONResponse</code> in allen Pfadoperationen, anstelle von <code>JSONResponse</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen dennoch weiterhin <code>response_class</code> in Pfadoperationen \u00fcberschreiben, wie bisher.</p>"},{"location":"advanced/custom-response/#zusatzliche-dokumentation","title":"Zus\u00e4tzliche Dokumentation","text":"<p>Sie k\u00f6nnen auch den Medientyp und viele andere Details in OpenAPI mit <code>responses</code> deklarieren: Zus\u00e4tzliche Responses in OpenAPI.</p>"},{"location":"advanced/dataclasses/","title":"Verwendung von Datenklassen","text":"<p>ReadyAPI basiert auf Pydantic und ich habe Ihnen gezeigt, wie Sie Pydantic-Modelle verwenden k\u00f6nnen, um Requests und Responses zu deklarieren.</p> <p>Aber ReadyAPI unterst\u00fctzt auf die gleiche Weise auch die Verwendung von <code>dataclasses</code>:</p> Python 3.8+ <pre><code>from dataclasses import dataclass\nfrom typing import Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Das ist dank Pydantic ebenfalls m\u00f6glich, da es <code>dataclasses</code> intern unterst\u00fctzt.</p> <p>Auch wenn im obige Code Pydantic nicht explizit vorkommt, verwendet ReadyAPI Pydantic, um diese Standard-Datenklassen in Pydantics eigene Variante von Datenklassen zu konvertieren.</p> <p>Und nat\u00fcrlich wird das gleiche unterst\u00fctzt:</p> <ul> <li>Validierung der Daten</li> <li>Serialisierung der Daten</li> <li>Dokumentation der Daten, usw.</li> </ul> <p>Das funktioniert genauso wie mit Pydantic-Modellen. Und tats\u00e4chlich wird es unter der Haube mittels Pydantic auf die gleiche Weise bewerkstelligt.</p> <p>Info</p> <p>Bedenken Sie, dass Datenklassen nicht alles k\u00f6nnen, was Pydantic-Modelle k\u00f6nnen.</p> <p>Daher m\u00fcssen Sie m\u00f6glicherweise weiterhin Pydantic-Modelle verwenden.</p> <p>Wenn Sie jedoch eine Menge Datenklassen herumliegen haben, ist dies ein guter Trick, um sie f\u00fcr eine Web-API mithilfe von ReadyAPI zu verwenden. \ud83e\udd13</p>"},{"location":"advanced/dataclasses/#datenklassen-als-response_model","title":"Datenklassen als <code>response_model</code>","text":"<p>Sie k\u00f6nnen <code>dataclasses</code> auch im Parameter <code>response_model</code> verwenden:</p> Python 3.8+ <pre><code>from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n</code></pre> <p>Die Datenklasse wird automatisch in eine Pydantic-Datenklasse konvertiert.</p> <p>Auf diese Weise wird deren Schema in der Benutzeroberfl\u00e4che der API-Dokumentation angezeigt:</p> <p></p>"},{"location":"advanced/dataclasses/#datenklassen-in-verschachtelten-datenstrukturen","title":"Datenklassen in verschachtelten Datenstrukturen","text":"<p>Sie k\u00f6nnen <code>dataclasses</code> auch mit anderen Typannotationen kombinieren, um verschachtelte Datenstrukturen zu erstellen.</p> <p>In einigen F\u00e4llen m\u00fcssen Sie m\u00f6glicherweise immer noch Pydantics Version von <code>dataclasses</code> verwenden. Zum Beispiel, wenn Sie Fehler in der automatisch generierten API-Dokumentation haben.</p> <p>In diesem Fall k\u00f6nnen Sie einfach die Standard-<code>dataclasses</code> durch <code>pydantic.dataclasses</code> ersetzen, was einen direkten Ersatz darstellt:</p> Python 3.8+ <pre><code>from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n</code></pre> <ol> <li> <p>Wir importieren <code>field</code> weiterhin von Standard-<code>dataclasses</code>.</p> </li> <li> <p><code>pydantic.dataclasses</code> ist ein direkter Ersatz f\u00fcr <code>dataclasses</code>.</p> </li> <li> <p>Die Datenklasse <code>Author</code> enth\u00e4lt eine Liste von <code>Item</code>-Datenklassen.</p> </li> <li> <p>Die Datenklasse <code>Author</code> wird im <code>response_model</code>-Parameter verwendet.</p> </li> <li> <p>Sie k\u00f6nnen andere Standard-Typannotationen mit Datenklassen als Requestbody verwenden.</p> <p>In diesem Fall handelt es sich um eine Liste von <code>Item</code>-Datenklassen.</p> </li> <li> <p>Hier geben wir ein Dictionary zur\u00fcck, das <code>items</code> enth\u00e4lt, welches eine Liste von Datenklassen ist.</p> <p>ReadyAPI ist weiterhin in der Lage, die Daten nach JSON zu serialisieren.</p> </li> <li> <p>Hier verwendet das <code>response_model</code> als Typannotation eine Liste von <code>Author</code>-Datenklassen.</p> <p>Auch hier k\u00f6nnen Sie <code>dataclasses</code> mit Standard-Typannotationen kombinieren.</p> </li> <li> <p>Beachten Sie, dass diese Pfadoperation-Funktion regul\u00e4res <code>def</code> anstelle von <code>async def</code> verwendet.</p> <p>Wie immer k\u00f6nnen Sie in ReadyAPI <code>def</code> und <code>async def</code> beliebig kombinieren.</p> <p>Wenn Sie eine Auffrischung dar\u00fcber ben\u00f6tigen, wann welche Anwendung sinnvoll ist, lesen Sie den Abschnitt \u201eIn Eile?\u201c in der Dokumentation zu <code>async</code> und <code>await</code>.</p> </li> <li> <p>Diese Pfadoperation-Funktion gibt keine Datenklassen zur\u00fcck (obwohl dies m\u00f6glich w\u00e4re), sondern eine Liste von Dictionarys mit internen Daten.</p> <p>ReadyAPI verwendet den Parameter <code>response_model</code> (der Datenklassen enth\u00e4lt), um die Response zu konvertieren.</p> </li> </ol> <p>Sie k\u00f6nnen <code>dataclasses</code> mit anderen Typannotationen auf vielf\u00e4ltige Weise kombinieren, um komplexe Datenstrukturen zu bilden.</p> <p>Weitere Einzelheiten finden Sie in den Bemerkungen im Quellcode oben.</p>"},{"location":"advanced/dataclasses/#mehr-erfahren","title":"Mehr erfahren","text":"<p>Sie k\u00f6nnen <code>dataclasses</code> auch mit anderen Pydantic-Modellen kombinieren, von ihnen erben, sie in Ihre eigenen Modelle einbinden, usw.</p> <p>Weitere Informationen finden Sie in der Pydantic-Dokumentation zu Datenklassen.</p>"},{"location":"advanced/dataclasses/#version","title":"Version","text":"<p>Dies ist verf\u00fcgbar seit ReadyAPI-Version <code>0.67.0</code>. \ud83d\udd16</p>"},{"location":"advanced/events/","title":"Lifespan-Events","text":"<p>Sie k\u00f6nnen Logik (Code) definieren, die ausgef\u00fchrt werden soll, bevor die Anwendung hochf\u00e4hrt. Dies bedeutet, dass dieser Code einmal ausgef\u00fchrt wird, bevor die Anwendung beginnt, Requests entgegenzunehmen.</p> <p>Auf die gleiche Weise k\u00f6nnen Sie Logik (Code) definieren, die ausgef\u00fchrt werden soll, wenn die Anwendung heruntergefahren wird. In diesem Fall wird dieser Code einmal ausgef\u00fchrt, nachdem m\u00f6glicherweise viele Requests bearbeitet wurden.</p> <p>Da dieser Code ausgef\u00fchrt wird, bevor die Anwendung beginnt, Requests entgegenzunehmen, und unmittelbar, nachdem sie die Bearbeitung von Requests abgeschlossen hat, deckt er die gesamte Lebensdauer \u2013 \u201eLifespan\u201c \u2013 der Anwendung ab (das Wort \u201eLifespan\u201c wird gleich wichtig sein \ud83d\ude09).</p> <p>Dies kann sehr n\u00fctzlich sein, um Ressourcen einzurichten, die Sie in der gesamten Anwendung verwenden wollen und die von Requests gemeinsam genutzt werden und/oder die Sie anschlie\u00dfend aufr\u00e4umen m\u00fcssen. Zum Beispiel ein Pool von Datenbankverbindungen oder das Laden eines gemeinsam genutzten Modells f\u00fcr maschinelles Lernen.</p>"},{"location":"advanced/events/#anwendungsfall","title":"Anwendungsfall","text":"<p>Beginnen wir mit einem Beispiel-Anwendungsfall und schauen uns dann an, wie wir ihn mit dieser Methode implementieren k\u00f6nnen.</p> <p>Stellen wir uns vor, Sie verf\u00fcgen \u00fcber einige Modelle f\u00fcr maschinelles Lernen, die Sie zur Bearbeitung von Requests verwenden m\u00f6chten. \ud83e\udd16</p> <p>Die gleichen Modelle werden von den Requests gemeinsam genutzt, es handelt sich also nicht um ein Modell pro Request, pro Benutzer, oder \u00e4hnliches.</p> <p>Stellen wir uns vor, dass das Laden des Modells eine ganze Weile dauern kann, da viele Daten von der Festplatte gelesen werden m\u00fcssen. Sie m\u00f6chten das also nicht f\u00fcr jeden Request tun.</p> <p>Sie k\u00f6nnten das auf der obersten Ebene des Moduls/der Datei machen, aber das w\u00fcrde auch bedeuten, dass das Modell geladen wird, selbst wenn Sie nur einen einfachen automatisierten Test ausf\u00fchren, dann w\u00e4re dieser Test langsam, weil er warten m\u00fcsste, bis das Modell geladen ist, bevor er einen davon unabh\u00e4ngigen Teil des Codes ausf\u00fchren k\u00f6nnte.</p> <p>Das wollen wir besser machen: Laden wir das Modell, bevor die Requests bearbeitet werden, aber unmittelbar bevor die Anwendung beginnt, Requests zu empfangen, und nicht, w\u00e4hrend der Code geladen wird.</p>"},{"location":"advanced/events/#lifespan","title":"Lifespan","text":"<p>Sie k\u00f6nnen diese Logik beim Hochfahren und Herunterfahren mithilfe des <code>lifespan</code>-Parameters der <code>ReadyAPI</code>-App und eines \u201eKontextmanagers\u201c definieren (ich zeige Ihnen gleich, was das ist).</p> <p>Beginnen wir mit einem Beispiel und sehen es uns dann im Detail an.</p> <p>Wir erstellen eine asynchrone Funktion <code>lifespan()</code> mit <code>yield</code> wie folgt:</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Hier simulieren wir das langsame Hochfahren, das Laden des Modells, indem wir die (Fake-)Modellfunktion vor dem <code>yield</code> in das Dictionary mit Modellen f\u00fcr maschinelles Lernen einf\u00fcgen. Dieser Code wird ausgef\u00fchrt, bevor die Anwendung beginnt, Requests entgegenzunehmen, w\u00e4hrend des Hochfahrens.</p> <p>Und dann, direkt nach dem <code>yield</code>, entladen wir das Modell. Dieser Code wird unmittelbar vor dem Herunterfahren ausgef\u00fchrt, nachdem die Anwendung die Bearbeitung von Requests abgeschlossen hat. Dadurch k\u00f6nnten beispielsweise Ressourcen wie Arbeitsspeicher oder eine GPU freigegeben werden.</p> <p>Tipp</p> <p>Das Herunterfahren w\u00fcrde erfolgen, wenn Sie die Anwendung stoppen.</p> <p>M\u00f6glicherweise m\u00fcssen Sie eine neue Version starten, oder Sie haben es einfach satt, sie auszuf\u00fchren. \ud83e\udd37</p>"},{"location":"advanced/events/#lifespan-funktion","title":"Lifespan-Funktion","text":"<p>Das Erste, was auff\u00e4llt, ist, dass wir eine asynchrone Funktion mit <code>yield</code> definieren. Das ist sehr \u00e4hnlich zu Abh\u00e4ngigkeiten mit <code>yield</code>.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Der erste Teil der Funktion, vor dem <code>yield</code>, wird ausgef\u00fchrt bevor die Anwendung startet.</p> <p>Und der Teil nach <code>yield</code> wird ausgef\u00fchrt, nachdem die Anwendung beendet ist.</p>"},{"location":"advanced/events/#asynchroner-kontextmanager","title":"Asynchroner Kontextmanager","text":"<p>Wie Sie sehen, ist die Funktion mit einem <code>@asynccontextmanager</code> versehen.</p> <p>Dadurch wird die Funktion in einen sogenannten \u201easynchronen Kontextmanager\u201c umgewandelt.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Ein Kontextmanager in Python ist etwas, das Sie in einer <code>with</code>-Anweisung verwenden k\u00f6nnen, zum Beispiel kann <code>open()</code> als Kontextmanager verwendet werden:</p> <pre><code>with open(\"file.txt\") as file:\n    file.read()\n</code></pre> <p>In neueren Versionen von Python gibt es auch einen asynchronen Kontextmanager. Sie w\u00fcrden ihn mit <code>async with</code> verwenden:</p> <pre><code>async with lifespan(app):\n    await do_stuff()\n</code></pre> <p>Wenn Sie wie oben einen Kontextmanager oder einen asynchronen Kontextmanager erstellen, f\u00fchrt dieser vor dem Betreten des <code>with</code>-Blocks den Code vor dem <code>yield</code> aus, und nach dem Verlassen des <code>with</code>-Blocks wird er den Code nach dem <code>yield</code> ausf\u00fchren.</p> <p>In unserem obigen Codebeispiel verwenden wir ihn nicht direkt, sondern \u00fcbergeben ihn an ReadyAPI, damit es ihn verwenden kann.</p> <p>Der Parameter <code>lifespan</code> der <code>ReadyAPI</code>-App ben\u00f6tigt einen asynchronen Kontextmanager, wir k\u00f6nnen ihm also unseren neuen asynchronen Kontextmanager <code>lifespan</code> \u00fcbergeben.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"advanced/events/#alternative-events-deprecated","title":"Alternative Events (deprecated)","text":"<p>Achtung</p> <p>Der empfohlene Weg, das Hochfahren und Herunterfahren zu handhaben, ist die Verwendung des <code>lifespan</code>-Parameters der <code>ReadyAPI</code>-App, wie oben beschrieben. Wenn Sie einen <code>lifespan</code>-Parameter \u00fcbergeben, werden die <code>startup</code>- und <code>shutdown</code>-Eventhandler nicht mehr aufgerufen. Es ist entweder alles <code>lifespan</code> oder alles Events, nicht beides.</p> <p>Sie k\u00f6nnen diesen Teil wahrscheinlich \u00fcberspringen.</p> <p>Es gibt eine alternative M\u00f6glichkeit, diese Logik zu definieren, sodass sie beim Hochfahren und beim Herunterfahren ausgef\u00fchrt wird.</p> <p>Sie k\u00f6nnen Eventhandler (Funktionen) definieren, die ausgef\u00fchrt werden sollen, bevor die Anwendung hochgefahren wird oder wenn die Anwendung heruntergefahren wird.</p> <p>Diese Funktionen k\u00f6nnen mit <code>async def</code> oder normalem <code>def</code> deklariert werden.</p>"},{"location":"advanced/events/#startup-event","title":"<code>startup</code>-Event","text":"<p>Um eine Funktion hinzuzuf\u00fcgen, die vor dem Start der Anwendung ausgef\u00fchrt werden soll, deklarieren Sie diese mit dem Event <code>startup</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n</code></pre> <p>In diesem Fall initialisiert die Eventhandler-Funktion <code>startup</code> die \u201eDatenbank\u201c der Items (nur ein <code>dict</code>) mit einigen Werten.</p> <p>Sie k\u00f6nnen mehr als eine Eventhandler-Funktion hinzuf\u00fcgen.</p> <p>Und Ihre Anwendung empf\u00e4ngt erst dann Anfragen, wenn alle <code>startup</code>-Eventhandler abgeschlossen sind.</p>"},{"location":"advanced/events/#shutdown-event","title":"<code>shutdown</code>-Event","text":"<p>Um eine Funktion hinzuzuf\u00fcgen, die beim Herunterfahren der Anwendung ausgef\u00fchrt werden soll, deklarieren Sie sie mit dem Event <code>shutdown</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Hier schreibt die <code>shutdown</code>-Eventhandler-Funktion eine Textzeile <code>\"Application shutdown\"</code> in eine Datei <code>log.txt</code>.</p> <p>Info</p> <p>In der Funktion <code>open()</code> bedeutet <code>mode=\"a\"</code> \u201eappend\u201c (\u201eanh\u00e4ngen\u201c), sodass die Zeile nach dem, was sich in dieser Datei befindet, hinzugef\u00fcgt wird, ohne den vorherigen Inhalt zu \u00fcberschreiben.</p> <p>Tipp</p> <p>Beachten Sie, dass wir in diesem Fall eine Standard-Python-Funktion <code>open()</code> verwenden, die mit einer Datei interagiert.</p> <p>Es handelt sich also um I/O (Input/Output), welches \u201eWarten\u201c erfordert, bis Dinge auf die Festplatte geschrieben werden.</p> <p>Aber <code>open()</code> verwendet nicht <code>async</code> und <code>await</code>.</p> <p>Daher deklarieren wir die Eventhandler-Funktion mit Standard-<code>def</code> statt mit <code>async def</code>.</p>"},{"location":"advanced/events/#startup-und-shutdown-zusammen","title":"<code>startup</code> und <code>shutdown</code> zusammen","text":"<p>Es besteht eine hohe Wahrscheinlichkeit, dass die Logik f\u00fcr Ihr Hochfahren und Herunterfahren miteinander verkn\u00fcpft ist. Vielleicht m\u00f6chten Sie etwas beginnen und es dann beenden, eine Ressource laden und sie dann freigeben usw.</p> <p>Bei getrennten Funktionen, die keine gemeinsame Logik oder Variablen haben, ist dies schwieriger, da Sie Werte in globalen Variablen speichern oder \u00e4hnliche Tricks verwenden m\u00fcssen.</p> <p>Aus diesem Grund wird jetzt empfohlen, stattdessen <code>lifespan</code> wie oben erl\u00e4utert zu verwenden.</p>"},{"location":"advanced/events/#technische-details","title":"Technische Details","text":"<p>Nur ein technisches Detail f\u00fcr die neugierigen Nerds. \ud83e\udd13</p> <p>In der technischen ASGI-Spezifikation ist dies Teil des Lifespan Protokolls und definiert Events namens <code>startup</code> und <code>shutdown</code>.</p> <p>Info</p> <p>Weitere Informationen zu Starlettes <code>lifespan</code>-Handlern finden Sie in Starlettes Lifespan-Dokumentation.</p> <p>Einschlie\u00dflich, wie man Lifespan-Zustand handhabt, der in anderen Bereichen Ihres Codes verwendet werden kann.</p>"},{"location":"advanced/events/#unteranwendungen","title":"Unteranwendungen","text":"<p>\ud83d\udea8 Beachten Sie, dass diese Lifespan-Events (Hochfahren und Herunterfahren) nur f\u00fcr die Hauptanwendung ausgef\u00fchrt werden, nicht f\u00fcr Unteranwendungen \u2013 Mounts.</p>"},{"location":"advanced/generate-clients/","title":"Clients generieren","text":"<p>Da ReadyAPI auf der OpenAPI-Spezifikation basiert, erhalten Sie automatische Kompatibilit\u00e4t mit vielen Tools, einschlie\u00dflich der automatischen API-Dokumentation (bereitgestellt von Swagger UI).</p> <p>Ein besonderer Vorteil, der nicht unbedingt offensichtlich ist, besteht darin, dass Sie f\u00fcr Ihre API Clients generieren k\u00f6nnen (manchmal auch SDKs genannt), f\u00fcr viele verschiedene Programmiersprachen.</p>"},{"location":"advanced/generate-clients/#openapi-client-generatoren","title":"OpenAPI-Client-Generatoren","text":"<p>Es gibt viele Tools zum Generieren von Clients aus OpenAPI.</p> <p>Ein g\u00e4ngiges Tool ist OpenAPI Generator.</p> <p>Wenn Sie ein Frontend erstellen, ist openapi-ts eine sehr interessante Alternative.</p>"},{"location":"advanced/generate-clients/#client-und-sdk-generatoren-sponsor","title":"Client- und SDK-Generatoren \u2013 Sponsor","text":"<p>Es gibt auch einige vom Unternehmen entwickelte Client- und SDK-Generatoren, die auf OpenAPI (ReadyAPI) basieren. In einigen F\u00e4llen k\u00f6nnen diese Ihnen weitere Funktionalit\u00e4t zus\u00e4tzlich zu qualitativ hochwertigen generierten SDKs/Clients bieten.</p> <p>Einige von diesen \u2728 sponsern ReadyAPI \u2728, das gew\u00e4hrleistet die kontinuierliche und gesunde Entwicklung von ReadyAPI und seinem \u00d6kosystem.</p> <p>Und es zeigt deren wahres Engagement f\u00fcr ReadyAPI und seine Community (Sie), da diese Ihnen nicht nur einen guten Service bieten m\u00f6chten, sondern auch sicherstellen m\u00f6chten, dass Sie \u00fcber ein gutes und gesundes Framework verf\u00fcgen, ReadyAPI. \ud83d\ude47</p> <p>Beispielsweise k\u00f6nnten Sie Speakeasy ausprobieren.</p> <p>Es gibt auch mehrere andere Unternehmen, welche \u00e4hnliche Dienste anbieten und die Sie online suchen und finden k\u00f6nnen. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#einen-typescript-frontend-client-generieren","title":"Einen TypeScript-Frontend-Client generieren","text":"<p>Beginnen wir mit einer einfachen ReadyAPI-Anwendung:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <p>Beachten Sie, dass die Pfadoperationen die Modelle definieren, welche diese f\u00fcr die Request- und Response-Payload verwenden, indem sie die Modelle <code>Item</code> und <code>ResponseMessage</code> verwenden.</p>"},{"location":"advanced/generate-clients/#api-dokumentation","title":"API-Dokumentation","text":"<p>Wenn Sie zur API-Dokumentation gehen, werden Sie sehen, dass diese die Schemas f\u00fcr die Daten enth\u00e4lt, welche in Requests gesendet und in Responses empfangen werden:</p> <p></p> <p>Sie k\u00f6nnen diese Schemas sehen, da sie mit den Modellen in der Anwendung deklariert wurden.</p> <p>Diese Informationen sind im OpenAPI-Schema der Anwendung verf\u00fcgbar und werden dann in der API-Dokumentation angezeigt (von Swagger UI).</p> <p>Und dieselben Informationen aus den Modellen, die in OpenAPI enthalten sind, k\u00f6nnen zum Generieren des Client-Codes verwendet werden.</p>"},{"location":"advanced/generate-clients/#einen-typescript-client-generieren","title":"Einen TypeScript-Client generieren","text":"<p>Nachdem wir nun die Anwendung mit den Modellen haben, k\u00f6nnen wir den Client-Code f\u00fcr das Frontend generieren.</p>"},{"location":"advanced/generate-clients/#openapi-ts-installieren","title":"<code>openapi-ts</code> installieren","text":"<p>Sie k\u00f6nnen <code>openapi-ts</code> in Ihrem Frontend-Code installieren mit:</p> <pre><code>$ npm install @hey-api/openapi-ts --save-dev\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/generate-clients/#client-code-generieren","title":"Client-Code generieren","text":"<p>Um den Client-Code zu generieren, k\u00f6nnen Sie das Kommandozeilentool <code>openapi-ts</code> verwenden, das soeben installiert wurde.</p> <p>Da es im lokalen Projekt installiert ist, k\u00f6nnten Sie diesen Befehl wahrscheinlich nicht direkt aufrufen, sondern w\u00fcrden ihn in Ihre Datei <code>package.json</code> einf\u00fcgen.</p> <p>Diese k\u00f6nnte so aussehen:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Nachdem Sie das NPM-Skript <code>generate-client</code> dort stehen haben, k\u00f6nnen Sie es ausf\u00fchren mit:</p> <pre><code>$ npm run generate-client\n\nfrontend-app@1.0.0 generate-client /home/user/code/frontend-app\n&gt; openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n</code></pre> <p>Dieser Befehl generiert Code in <code>./src/client</code> und verwendet intern <code>axios</code> (die Frontend-HTTP-Bibliothek).</p>"},{"location":"advanced/generate-clients/#den-client-code-ausprobieren","title":"Den Client-Code ausprobieren","text":"<p>Jetzt k\u00f6nnen Sie den Client-Code importieren und verwenden. Er k\u00f6nnte wie folgt aussehen, beachten Sie, dass Sie automatische Codevervollst\u00e4ndigung f\u00fcr die Methoden erhalten:</p> <p></p> <p>Sie erhalten au\u00dferdem automatische Vervollst\u00e4ndigung f\u00fcr die zu sendende Payload:</p> <p></p> <p>Tipp</p> <p>Beachten Sie die automatische Vervollst\u00e4ndigung f\u00fcr <code>name</code> und <code>price</code>, welche in der ReadyAPI-Anwendung im <code>Item</code>-Modell definiert wurden.</p> <p>Sie erhalten Inline-Fehlerberichte f\u00fcr die von Ihnen gesendeten Daten:</p> <p></p> <p>Das Response-Objekt hat auch automatische Vervollst\u00e4ndigung:</p> <p></p>"},{"location":"advanced/generate-clients/#readyapi-anwendung-mit-tags","title":"ReadyAPI-Anwendung mit Tags","text":"<p>In vielen F\u00e4llen wird Ihre ReadyAPI-Anwendung gr\u00f6\u00dfer sein und Sie werden wahrscheinlich Tags verwenden, um verschiedene Gruppen von Pfadoperationen zu separieren.</p> <p>Beispielsweise k\u00f6nnten Sie einen Abschnitt f\u00fcr Items (Artikel) und einen weiteren Abschnitt f\u00fcr Users (Benutzer) haben, und diese k\u00f6nnten durch Tags getrennt sein:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#einen-typescript-client-mit-tags-generieren","title":"Einen TypeScript-Client mit Tags generieren","text":"<p>Wenn Sie unter Verwendung von Tags einen Client f\u00fcr eine ReadyAPI-Anwendung generieren, wird normalerweise auch der Client-Code anhand der Tags getrennt.</p> <p>Auf diese Weise k\u00f6nnen Sie die Dinge f\u00fcr den Client-Code richtig ordnen und gruppieren:</p> <p></p> <p>In diesem Fall haben Sie:</p> <ul> <li><code>ItemsService</code></li> <li><code>UsersService</code></li> </ul>"},{"location":"advanced/generate-clients/#client-methodennamen","title":"Client-Methodennamen","text":"<p>Im Moment sehen die generierten Methodennamen wie <code>createItemItemsPost</code> nicht sehr sauber aus:</p> <pre><code>ItemsService.createItemItemsPost({name: \"Plumbus\", price: 5})\n</code></pre> <p>... das liegt daran, dass der Client-Generator f\u00fcr jede Pfadoperation die OpenAPI-interne Operation-ID verwendet.</p> <p>OpenAPI erfordert, dass jede Operation-ID innerhalb aller Pfadoperationen eindeutig ist. Daher verwendet ReadyAPI den Funktionsnamen, den Pfad und die HTTP-Methode/-Operation, um diese Operation-ID zu generieren. Denn so kann sichergestellt werden, dass die Operation-IDs eindeutig sind.</p> <p>Aber ich zeige Ihnen als n\u00e4chstes, wie Sie das verbessern k\u00f6nnen. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#benutzerdefinierte-operation-ids-und-bessere-methodennamen","title":"Benutzerdefinierte Operation-IDs und bessere Methodennamen","text":"<p>Sie k\u00f6nnen die Art und Weise, wie diese Operation-IDs generiert werden, \u00e4ndern, um sie einfacher zu machen und einfachere Methodennamen in den Clients zu haben.</p> <p>In diesem Fall m\u00fcssen Sie auf andere Weise sicherstellen, dass jede Operation-ID eindeutig ist.</p> <p>Sie k\u00f6nnten beispielsweise sicherstellen, dass jede Pfadoperation einen Tag hat, und dann die Operation-ID basierend auf dem Tag und dem Namen der Pfadoperation (dem Funktionsnamen) generieren.</p>"},{"location":"advanced/generate-clients/#funktion-zum-generieren-einer-eindeutigen-id-erstellen","title":"Funktion zum Generieren einer eindeutigen ID erstellen","text":"<p>ReadyAPI verwendet eine eindeutige ID f\u00fcr jede Pfadoperation, diese wird f\u00fcr die Operation-ID und auch f\u00fcr die Namen aller ben\u00f6tigten benutzerdefinierten Modelle f\u00fcr Requests oder Responses verwendet.</p> <p>Sie k\u00f6nnen diese Funktion anpassen. Sie nimmt eine <code>APIRoute</code> und gibt einen String zur\u00fcck.</p> <p>Hier verwendet sie beispielsweise den ersten Tag (Sie werden wahrscheinlich nur einen Tag haben) und den Namen der Pfadoperation (den Funktionsnamen).</p> <p>Anschlie\u00dfend k\u00f6nnen Sie diese benutzerdefinierte Funktion als Parameter <code>generate_unique_id_function</code> an ReadyAPI \u00fcbergeben:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#einen-typescript-client-mit-benutzerdefinierten-operation-ids-generieren","title":"Einen TypeScript-Client mit benutzerdefinierten Operation-IDs generieren","text":"<p>Wenn Sie nun den Client erneut generieren, werden Sie feststellen, dass er \u00fcber die verbesserten Methodennamen verf\u00fcgt:</p> <p></p> <p>Wie Sie sehen, haben die Methodennamen jetzt den Tag und dann den Funktionsnamen, aber keine Informationen aus dem URL-Pfad und der HTTP-Operation.</p>"},{"location":"advanced/generate-clients/#vorab-modifikation-der-openapi-spezifikation-fur-den-client-generator","title":"Vorab-Modifikation der OpenAPI-Spezifikation f\u00fcr den Client-Generator","text":"<p>Der generierte Code enth\u00e4lt immer noch etwas verdoppelte Information.</p> <p>Wir wissen bereits, dass diese Methode mit den Items zusammenh\u00e4ngt, da sich dieses Wort in <code>ItemsService</code> befindet (vom Tag \u00fcbernommen), aber wir haben auch immer noch den Tagnamen im Methodennamen vorangestellt. \ud83d\ude15</p> <p>Wir werden das wahrscheinlich weiterhin f\u00fcr OpenAPI im Allgemeinen beibehalten wollen, da dadurch sichergestellt wird, dass die Operation-IDs eindeutig sind.</p> <p>Aber f\u00fcr den generierten Client k\u00f6nnten wir die OpenAPI-Operation-IDs direkt vor der Generierung der Clients modifizieren, um diese Methodennamen sch\u00f6ner und sauberer zu machen.</p> <p>Wir k\u00f6nnten das OpenAPI-JSON in eine Datei <code>openapi.json</code> herunterladen und dann mit einem Skript wie dem folgenden den vorangestellten Tag entfernen:</p> Python 3.8+Node.js <pre><code>import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n</code></pre> <pre><code>import * as fs from 'fs'\n\nasync function modifyOpenAPIFile(filePath) {\n  try {\n    const data = await fs.promises.readFile(filePath)\n    const openapiContent = JSON.parse(data)\n\n    const paths = openapiContent.paths\n    for (const pathKey of Object.keys(paths)) {\n      const pathData = paths[pathKey]\n      for (const method of Object.keys(pathData)) {\n        const operation = pathData[method]\n        if (operation.tags &amp;&amp; operation.tags.length &gt; 0) {\n          const tag = operation.tags[0]\n          const operationId = operation.operationId\n          const toRemove = `${tag}-`\n          if (operationId.startsWith(toRemove)) {\n            const newOperationId = operationId.substring(toRemove.length)\n            operation.operationId = newOperationId\n          }\n        }\n      }\n    }\n\n    await fs.promises.writeFile(\n      filePath,\n      JSON.stringify(openapiContent, null, 2),\n    )\n    console.log('File successfully modified')\n  } catch (err) {\n    console.error('Error:', err)\n  }\n}\n\nconst filePath = './openapi.json'\nmodifyOpenAPIFile(filePath)\n</code></pre> <p>Damit w\u00fcrden die Operation-IDs von Dingen wie <code>items-get_items</code> in <code>get_items</code> umbenannt, sodass der Client-Generator einfachere Methodennamen generieren kann.</p>"},{"location":"advanced/generate-clients/#einen-typescript-client-mit-der-modifizierten-openapi-generieren","title":"Einen TypeScript-Client mit der modifizierten OpenAPI generieren","text":"<p>Da das Endergebnis nun in einer Datei <code>openapi.json</code> vorliegt, w\u00fcrden Sie die <code>package.json</code> \u00e4ndern, um diese lokale Datei zu verwenden, zum Beispiel:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Nach der Generierung des neuen Clients h\u00e4tten Sie nun saubere Methodennamen mit allen Autovervollst\u00e4ndigungen, Inline-Fehlerberichten, usw.:</p> <p></p>"},{"location":"advanced/generate-clients/#vorteile","title":"Vorteile","text":"<p>Wenn Sie die automatisch generierten Clients verwenden, erhalten Sie automatische Codevervollst\u00e4ndigung f\u00fcr:</p> <ul> <li>Methoden.</li> <li>Request-Payloads im Body, Query-Parameter, usw.</li> <li>Response-Payloads.</li> </ul> <p>Au\u00dferdem erhalten Sie f\u00fcr alles Inline-Fehlerberichte.</p> <p>Und wann immer Sie den Backend-Code aktualisieren und das Frontend neu generieren, stehen alle neuen Pfadoperationen als Methoden zur Verf\u00fcgung, die alten werden entfernt und alle anderen \u00c4nderungen werden im generierten Code reflektiert. \ud83e\udd13</p> <p>Das bedeutet auch, dass, wenn sich etwas \u00e4ndert, dies automatisch im Client-Code reflektiert wird. Und wenn Sie den Client erstellen, kommt es zu einer Fehlermeldung, wenn die verwendeten Daten nicht \u00fcbereinstimmen.</p> <p>Sie w\u00fcrden also sehr fr\u00fch im Entwicklungszyklus viele Fehler erkennen, anstatt darauf warten zu m\u00fcssen, dass die Fehler Ihren Endbenutzern in der Produktion angezeigt werden, und dann zu versuchen, zu debuggen, wo das Problem liegt. \u2728</p>"},{"location":"advanced/middleware/","title":"Fortgeschrittene Middleware","text":"<p>Im Haupttutorial haben Sie gelesen, wie Sie Ihrer Anwendung benutzerdefinierte Middleware hinzuf\u00fcgen k\u00f6nnen.</p> <p>Und dann auch, wie man CORS mittels der <code>CORSMiddleware</code> handhabt.</p> <p>In diesem Abschnitt werden wir sehen, wie man andere Middlewares verwendet.</p>"},{"location":"advanced/middleware/#asgi-middleware-hinzufugen","title":"ASGI-Middleware hinzuf\u00fcgen","text":"<p>Da ReadyAPI auf Starlette basiert und die ASGI-Spezifikation implementiert, k\u00f6nnen Sie jede ASGI-Middleware verwenden.</p> <p>Eine Middleware muss nicht speziell f\u00fcr ReadyAPI oder Starlette gemacht sein, um zu funktionieren, solange sie der ASGI-Spezifikation gen\u00fcgt.</p> <p>Im Allgemeinen handelt es sich bei ASGI-Middleware um Klassen, die als erstes Argument eine ASGI-Anwendung erwarten.</p> <p>In der Dokumentation f\u00fcr ASGI-Middlewares von Drittanbietern wird Ihnen wahrscheinlich gesagt, etwa Folgendes zu tun:</p> <pre><code>from unicorn import UnicornMiddleware\n\napp = SomeASGIApp()\n\nnew_app = UnicornMiddleware(app, some_config=\"rainbow\")\n</code></pre> <p>Aber ReadyAPI (eigentlich Starlette) bietet eine einfachere M\u00f6glichkeit, welche sicherstellt, dass die internen Middlewares zur Behandlung von Serverfehlern und benutzerdefinierten Exceptionhandlern ordnungsgem\u00e4\u00df funktionieren.</p> <p>Dazu verwenden Sie <code>app.add_middleware()</code> (wie schon im Beispiel f\u00fcr CORS gesehen).</p> <pre><code>from readyapi import ReadyAPI\nfrom unicorn import UnicornMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n</code></pre> <p><code>app.add_middleware()</code> empf\u00e4ngt eine Middleware-Klasse als erstes Argument und dann alle weiteren Argumente, die an die Middleware \u00fcbergeben werden sollen.</p>"},{"location":"advanced/middleware/#integrierte-middleware","title":"Integrierte Middleware","text":"<p>ReadyAPI enth\u00e4lt mehrere Middlewares f\u00fcr g\u00e4ngige Anwendungsf\u00e4lle. Wir werden als N\u00e4chstes sehen, wie man sie verwendet.</p> <p>Technische Details</p> <p>F\u00fcr die n\u00e4chsten Beispiele k\u00f6nnten Sie auch <code>from starlette.middleware.something import SomethingMiddleware</code> verwenden.</p> <p>ReadyAPI bietet mehrere Middlewares via <code>readyapi.middleware</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Middlewares kommen aber direkt von Starlette.</p>"},{"location":"advanced/middleware/#httpsredirectmiddleware","title":"<code>HTTPSRedirectMiddleware</code>","text":"<p>Erzwingt, dass alle eingehenden Requests entweder <code>https</code> oder <code>wss</code> sein m\u00fcssen.</p> <p>Alle eingehenden Requests an <code>http</code> oder <code>ws</code> werden stattdessen an das sichere Schema umgeleitet.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"advanced/middleware/#trustedhostmiddleware","title":"<code>TrustedHostMiddleware</code>","text":"<p>Erzwingt, dass alle eingehenden Requests einen korrekt gesetzten <code>Host</code>-Header haben, um sich vor HTTP-Host-Header-Angriffen zu sch\u00fctzen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Die folgenden Argumente werden unterst\u00fctzt:</p> <ul> <li><code>allowed_hosts</code> \u2013 Eine Liste von Domain-Namen, die als Hostnamen zul\u00e4ssig sein sollten. Wildcard-Domains wie <code>*.example.com</code> werden unterst\u00fctzt, um Subdomains zu matchen. Um jeden Hostnamen zu erlauben, verwenden Sie entweder <code>allowed_hosts=[\"*\"]</code> oder lassen Sie diese Middleware weg.</li> </ul> <p>Wenn ein eingehender Request nicht korrekt validiert wird, wird eine \u201e400\u201c-Response gesendet.</p>"},{"location":"advanced/middleware/#gzipmiddleware","title":"<code>GZipMiddleware</code>","text":"<p>Verarbeitet GZip-Responses f\u00fcr alle Requests, die <code>\"gzip\"</code> im <code>Accept-Encoding</code>-Header enthalten.</p> <p>Diese Middleware verarbeitet sowohl Standard- als auch Streaming-Responses.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.gzip import GZipMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n</code></pre> <p>Die folgenden Argumente werden unterst\u00fctzt:</p> <ul> <li><code>minimum_size</code> \u2013 Antworten, die kleiner als diese Mindestgr\u00f6\u00dfe in Bytes sind, nicht per GZip komprimieren. Der Defaultwert ist <code>500</code>.</li> </ul>"},{"location":"advanced/middleware/#andere-middlewares","title":"Andere Middlewares","text":"<p>Es gibt viele andere ASGI-Middlewares.</p> <p>Zum Beispiel:</p> <ul> <li>Uvicorns <code>ProxyHeadersMiddleware</code></li> <li>MessagePack</li> </ul> <p>Um mehr \u00fcber weitere verf\u00fcgbare Middlewares herauszufinden, besuchen Sie Starlettes Middleware-Dokumentation und die ASGI Awesome List.</p>"},{"location":"advanced/openapi-callbacks/","title":"OpenAPI-Callbacks","text":"<p>Sie k\u00f6nnten eine API mit einer Pfadoperation erstellen, die einen Request an eine externe API ausl\u00f6sen k\u00f6nnte, welche von jemand anderem erstellt wurde (wahrscheinlich derselbe Entwickler, der Ihre API verwenden w\u00fcrde).</p> <p>Der Vorgang, der stattfindet, wenn Ihre API-Anwendung die externe API aufruft, wird als \u201eCallback\u201c (\u201eR\u00fcckruf\u201c) bezeichnet. Denn die Software, die der externe Entwickler geschrieben hat, sendet einen Request an Ihre API und dann ruft Ihre API zur\u00fcck (calls back) und sendet einen Request an eine externe API (die wahrscheinlich vom selben Entwickler erstellt wurde).</p> <p>In diesem Fall m\u00f6chten Sie m\u00f6glicherweise dokumentieren, wie diese externe API aussehen sollte. Welche Pfadoperation sie haben sollte, welchen Body sie erwarten sollte, welche Response sie zur\u00fcckgeben sollte, usw.</p>"},{"location":"advanced/openapi-callbacks/#eine-anwendung-mit-callbacks","title":"Eine Anwendung mit Callbacks","text":"<p>Sehen wir uns das alles anhand eines Beispiels an.</p> <p>Stellen Sie sich vor, Sie entwickeln eine Anwendung, mit der Sie Rechnungen erstellen k\u00f6nnen.</p> <p>Diese Rechnungen haben eine <code>id</code>, einen optionalen <code>title</code>, einen <code>customer</code> (Kunde) und ein <code>total</code> (Gesamtsumme).</p> <p>Der Benutzer Ihrer API (ein externer Entwickler) erstellt mit einem POST-Request eine Rechnung in Ihrer API.</p> <p>Dann wird Ihre API (beispielsweise):</p> <ul> <li>die Rechnung an einen Kunden des externen Entwicklers senden.</li> <li>das Geld einsammeln.</li> <li>eine Benachrichtigung an den API-Benutzer (den externen Entwickler) zur\u00fccksenden.<ul> <li>Dies erfolgt durch Senden eines POST-Requests (von Ihrer API) an eine externe API, die von diesem externen Entwickler bereitgestellt wird (das ist der \u201eCallback\u201c).</li> </ul> </li> </ul>"},{"location":"advanced/openapi-callbacks/#die-normale-readyapi-anwendung","title":"Die normale ReadyAPI-Anwendung","text":"<p>Sehen wir uns zun\u00e4chst an, wie die normale API-Anwendung aussehen w\u00fcrde, bevor wir den Callback hinzuf\u00fcgen.</p> <p>Sie verf\u00fcgt \u00fcber eine Pfadoperation, die einen <code>Invoice</code>-Body empf\u00e4ngt, und einen Query-Parameter <code>callback_url</code>, der die URL f\u00fcr den Callback enth\u00e4lt.</p> <p>Dieser Teil ist ziemlich normal, der gr\u00f6\u00dfte Teil des Codes ist Ihnen wahrscheinlich bereits bekannt:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tipp</p> <p>Der Query-Parameter <code>callback_url</code> verwendet einen Pydantic-Url-Typ.</p> <p>Das einzig Neue ist <code>callbacks=invoices_callback_router.routes</code> als Argument f\u00fcr den Pfadoperation-Dekorator. Wir werden als N\u00e4chstes sehen, was das ist.</p>"},{"location":"advanced/openapi-callbacks/#dokumentation-des-callbacks","title":"Dokumentation des Callbacks","text":"<p>Der tats\u00e4chliche Callback-Code h\u00e4ngt stark von Ihrer eigenen API-Anwendung ab.</p> <p>Und er wird wahrscheinlich von Anwendung zu Anwendung sehr unterschiedlich sein.</p> <p>Es k\u00f6nnten nur eine oder zwei Codezeilen sein, wie zum Beispiel:</p> <pre><code>callback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n</code></pre> <p>Der m\u00f6glicherweise wichtigste Teil des Callbacks besteht jedoch darin, sicherzustellen, dass Ihr API-Benutzer (der externe Entwickler) die externe API gem\u00e4\u00df den Daten, die Ihre API im Requestbody des Callbacks senden wird, korrekt implementiert, usw.</p> <p>Als N\u00e4chstes f\u00fcgen wir den Code hinzu, um zu dokumentieren, wie diese externe API aussehen sollte, um den Callback von Ihrer API zu empfangen.</p> <p>Diese Dokumentation wird in der Swagger-Oberfl\u00e4che unter <code>/docs</code> in Ihrer API angezeigt und zeigt externen Entwicklern, wie diese die externe API erstellen sollten.</p> <p>In diesem Beispiel wird nicht der Callback selbst implementiert (das k\u00f6nnte nur eine Codezeile sein), sondern nur der Dokumentationsteil.</p> <p>Tipp</p> <p>Der eigentliche Callback ist nur ein HTTP-Request.</p> <p>Wenn Sie den Callback selbst implementieren, k\u00f6nnen Sie beispielsweise HTTPX oder Requests verwenden.</p>"},{"location":"advanced/openapi-callbacks/#schreiben-des-codes-der-den-callback-dokumentiert","title":"Schreiben des Codes, der den Callback dokumentiert","text":"<p>Dieser Code wird nicht in Ihrer Anwendung ausgef\u00fchrt, wir ben\u00f6tigen ihn nur, um zu dokumentieren, wie diese externe API aussehen soll.</p> <p>Sie wissen jedoch bereits, wie Sie mit ReadyAPI ganz einfach eine automatische Dokumentation f\u00fcr eine API erstellen.</p> <p>Daher werden wir dasselbe Wissen nutzen, um zu dokumentieren, wie die externe API aussehen sollte ... indem wir die Pfadoperation(en) erstellen, welche die externe API implementieren soll (die, welche Ihre API aufruft).</p> <p>Tipp</p> <p>Wenn Sie den Code zum Dokumentieren eines Callbacks schreiben, kann es hilfreich sein, sich vorzustellen, dass Sie dieser externe Entwickler sind. Und dass Sie derzeit die externe API implementieren, nicht Ihre API.</p> <p>Wenn Sie diese Sichtweise (des externen Entwicklers) vor\u00fcbergehend \u00fcbernehmen, wird es offensichtlicher, wo die Parameter, das Pydantic-Modell f\u00fcr den Body, die Response, usw. f\u00fcr diese externe API hingeh\u00f6ren.</p>"},{"location":"advanced/openapi-callbacks/#einen-callback-apirouter-erstellen","title":"Einen Callback-<code>APIRouter</code> erstellen","text":"<p>Erstellen Sie zun\u00e4chst einen neuen <code>APIRouter</code>, der einen oder mehrere Callbacks enth\u00e4lt.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre>"},{"location":"advanced/openapi-callbacks/#die-callback-pfadoperation-erstellen","title":"Die Callback-Pfadoperation erstellen","text":"<p>Um die Callback-Pfadoperation zu erstellen, verwenden Sie denselben <code>APIRouter</code>, den Sie oben erstellt haben.</p> <p>Sie sollte wie eine normale ReadyAPI-Pfadoperation aussehen:</p> <ul> <li>Sie sollte wahrscheinlich eine Deklaration des Bodys enthalten, die sie erhalten soll, z. B. <code>body: InvoiceEvent</code>.</li> <li>Und sie k\u00f6nnte auch eine Deklaration der Response enthalten, die zur\u00fcckgegeben werden soll, z. B. <code>response_model=InvoiceEventReceived</code>.</li> </ul> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Es gibt zwei Hauptunterschiede zu einer normalen Pfadoperation:</p> <ul> <li>Es muss kein tats\u00e4chlicher Code vorhanden sein, da Ihre Anwendung diesen Code niemals aufruft. Sie wird nur zur Dokumentation der externen API verwendet. Die Funktion k\u00f6nnte also einfach <code>pass</code> enthalten.</li> <li>Der Pfad kann einen OpenAPI-3-Ausdruck enthalten (mehr dazu weiter unten), wo er Variablen mit Parametern und Teilen des urspr\u00fcnglichen Requests verwenden kann, der an Ihre API gesendet wurde.</li> </ul>"},{"location":"advanced/openapi-callbacks/#der-callback-pfadausdruck","title":"Der Callback-Pfadausdruck","text":"<p>Der Callback-Pfad kann einen OpenAPI-3-Ausdruck enthalten, welcher Teile des urspr\u00fcnglichen Requests enthalten kann, der an Ihre API gesendet wurde.</p> <p>In diesem Fall ist es der <code>str</code>:</p> <pre><code>\"{$callback_url}/invoices/{$request.body.id}\"\n</code></pre> <p>Wenn Ihr API-Benutzer (der externe Entwickler) also einen Request an Ihre API sendet, via:</p> <pre><code>https://yourapi.com/invoices/?callback_url=https://www.external.org/events\n</code></pre> <p>mit einem JSON-K\u00f6rper:</p> <pre><code>{\n    \"id\": \"2expen51ve\",\n    \"customer\": \"Mr. Richie Rich\",\n    \"total\": \"9999\"\n}\n</code></pre> <p>dann verarbeitet Ihre API die Rechnung und sendet irgendwann sp\u00e4ter einen Callback-Request an die <code>callback_url</code> (die externe API):</p> <pre><code>https://www.external.org/events/invoices/2expen51ve\n</code></pre> <p>mit einem JSON-Body, der etwa Folgendes enth\u00e4lt:</p> <pre><code>{\n    \"description\": \"Payment celebration\",\n    \"paid\": true\n}\n</code></pre> <p>und sie w\u00fcrde eine Response von dieser externen API mit einem JSON-Body wie dem folgenden erwarten:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass die verwendete Callback-URL die URL enth\u00e4lt, die als Query-Parameter in <code>callback_url</code> (<code>https://www.external.org/events</code>) empfangen wurde, und auch die Rechnungs-<code>id</code> aus dem JSON-Body (<code>2expen51ve</code>).</p>"},{"location":"advanced/openapi-callbacks/#den-callback-router-hinzufugen","title":"Den Callback-Router hinzuf\u00fcgen","text":"<p>An diesem Punkt haben Sie die ben\u00f6tigte(n) Callback-Pfadoperation(en) (diejenige(n), die der externe Entwickler in der externen API implementieren sollte) im Callback-Router, den Sie oben erstellt haben.</p> <p>Verwenden Sie nun den Parameter <code>callbacks</code> im Pfadoperation-Dekorator Ihrer API, um das Attribut <code>.routes</code> (das ist eigentlich nur eine <code>list</code>e von Routen/Pfadoperationen) dieses Callback-Routers zu \u00fcbergeben:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass Sie nicht den Router selbst (<code>invoices_callback_router</code>) an <code>callback=</code> \u00fcbergeben, sondern das Attribut <code>.routes</code>, wie in <code>invoices_callback_router.routes</code>.</p>"},{"location":"advanced/openapi-callbacks/#es-in-der-dokumentation-ansehen","title":"Es in der Dokumentation ansehen","text":"<p>Jetzt k\u00f6nnen Sie Ihre Anwendung mit Uvicorn starten und auf http://127.0.0.1:8000/docs gehen.</p> <p>Sie sehen Ihre Dokumentation, einschlie\u00dflich eines Abschnitts \u201eCallbacks\u201c f\u00fcr Ihre Pfadoperation, der zeigt, wie die externe API aussehen sollte:</p> <p></p>"},{"location":"advanced/openapi-webhooks/","title":"OpenAPI-Webhooks","text":"<p>Es gibt F\u00e4lle, in denen Sie Ihren API-Benutzern mitteilen m\u00f6chten, dass Ihre Anwendung mit einigen Daten deren Anwendung aufrufen (ein Request senden) k\u00f6nnte, normalerweise um \u00fcber ein bestimmtes Event zu benachrichtigen.</p> <p>Das bedeutet, dass anstelle des normalen Prozesses, bei dem Benutzer Requests an Ihre API senden, Ihre API (oder Ihre Anwendung) Requests an deren System (an deren API, deren Anwendung) senden k\u00f6nnte.</p> <p>Das wird normalerweise als Webhook bezeichnet.</p>"},{"location":"advanced/openapi-webhooks/#webhooks-schritte","title":"Webhooks-Schritte","text":"<p>Der Prozess besteht normalerweise darin, dass Sie in Ihrem Code definieren, welche Nachricht Sie senden m\u00f6chten, den Body des Requests.</p> <p>Sie definieren auch auf irgendeine Weise, zu welchen Momenten Ihre Anwendung diese Requests oder Events sendet.</p> <p>Und Ihre Benutzer definieren auf irgendeine Weise (zum Beispiel irgendwo in einem Web-Dashboard) die URL, an die Ihre Anwendung diese Requests senden soll.</p> <p>Die gesamte Logik zur Registrierung der URLs f\u00fcr Webhooks und der Code zum tats\u00e4chlichen Senden dieser Requests liegt bei Ihnen. Sie schreiben es so, wie Sie m\u00f6chten, in Ihrem eigenen Code.</p>"},{"location":"advanced/openapi-webhooks/#webhooks-mit-readyapi-und-openapi-dokumentieren","title":"Webhooks mit ReadyAPI und OpenAPI dokumentieren","text":"<p>Mit ReadyAPI k\u00f6nnen Sie mithilfe von OpenAPI die Namen dieser Webhooks, die Arten von HTTP-Operationen, die Ihre Anwendung senden kann (z. B. <code>POST</code>, <code>PUT</code>, usw.) und die Requestbodys definieren, die Ihre Anwendung senden w\u00fcrde.</p> <p>Dies kann es Ihren Benutzern viel einfacher machen, deren APIs zu implementieren, um Ihre Webhook-Requests zu empfangen. M\u00f6glicherweise k\u00f6nnen diese sogar einen Teil des eigenem API-Codes automatisch generieren.</p> <p>Info</p> <p>Webhooks sind in OpenAPI 3.1.0 und h\u00f6her verf\u00fcgbar und werden von ReadyAPI <code>0.99.0</code> und h\u00f6her unterst\u00fctzt.</p>"},{"location":"advanced/openapi-webhooks/#eine-anwendung-mit-webhooks","title":"Eine Anwendung mit Webhooks","text":"<p>Wenn Sie eine ReadyAPI-Anwendung erstellen, gibt es ein <code>webhooks</code>-Attribut, mit dem Sie Webhooks definieren k\u00f6nnen, genauso wie Sie Pfadoperationen definieren w\u00fcrden, zum Beispiel mit <code>@app.webhooks.post()</code>.</p> Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre> <p>Die von Ihnen definierten Webhooks landen im OpenAPI-Schema und der automatischen Dokumentations-Oberfl\u00e4che.</p> <p>Info</p> <p>Das <code>app.webhooks</code>-Objekt ist eigentlich nur ein <code>APIRouter</code>, derselbe Typ, den Sie verwenden w\u00fcrden, wenn Sie Ihre Anwendung mit mehreren Dateien strukturieren.</p> <p>Beachten Sie, dass Sie bei Webhooks tats\u00e4chlich keinen Pfad (wie <code>/items/</code>) deklarieren, sondern dass der Text, den Sie dort \u00fcbergeben, lediglich eine Kennzeichnung des Webhooks (der Name des Events) ist. Zum Beispiel ist in <code>@app.webhooks.post(\"new-subscription\")</code> der Webhook-Name <code>new-subscription</code>.</p> <p>Das liegt daran, dass erwartet wird, dass Ihre Benutzer den tats\u00e4chlichen URL-Pfad, an dem diese den Webhook-Request empfangen m\u00f6chten, auf andere Weise definieren (z. B. \u00fcber ein Web-Dashboard).</p>"},{"location":"advanced/openapi-webhooks/#es-in-der-dokumentation-ansehen","title":"Es in der Dokumentation ansehen","text":"<p>Jetzt k\u00f6nnen Sie Ihre Anwendung mit Uvicorn starten und auf http://127.0.0.1:8000/docs gehen.</p> <p>Sie werden sehen, dass Ihre Dokumentation die normalen Pfadoperationen und jetzt auch einige Webhooks enth\u00e4lt:</p> <p></p>"},{"location":"advanced/path-operation-advanced-configuration/","title":"Fortgeschrittene Konfiguration der Pfadoperation","text":""},{"location":"advanced/path-operation-advanced-configuration/#openapi-operationid","title":"OpenAPI operationId","text":"<p>Achtung</p> <p>Wenn Sie kein \u201eExperte\u201c f\u00fcr OpenAPI sind, brauchen Sie dies wahrscheinlich nicht.</p> <p>Mit dem Parameter <code>operation_id</code> k\u00f6nnen Sie die OpenAPI <code>operationId</code> festlegen, die in Ihrer Pfadoperation verwendet werden soll.</p> <p>Sie m\u00fcssten sicherstellen, dass sie f\u00fcr jede Operation eindeutig ist.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#verwendung-des-namens-der-pfadoperation-funktion-als-operationid","title":"Verwendung des Namens der Pfadoperation-Funktion als operationId","text":"<p>Wenn Sie die Funktionsnamen Ihrer API als <code>operationId</code>s verwenden m\u00f6chten, k\u00f6nnen Sie \u00fcber alle iterieren und die <code>operation_id</code> jeder Pfadoperation mit deren <code>APIRoute.name</code> \u00fcberschreiben.</p> <p>Sie sollten dies tun, nachdem Sie alle Ihre Pfadoperationen hinzugef\u00fcgt haben.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: ReadyAPI) -&gt; None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n</code></pre> <p>Tipp</p> <p>Wenn Sie <code>app.openapi()</code> manuell aufrufen, sollten Sie vorher die <code>operationId</code>s aktualisiert haben.</p> <p>Achtung</p> <p>Wenn Sie dies tun, m\u00fcssen Sie sicherstellen, dass jede Ihrer Pfadoperation-Funktionen einen eindeutigen Namen hat.</p> <p>Auch wenn diese sich in unterschiedlichen Modulen (Python-Dateien) befinden.</p>"},{"location":"advanced/path-operation-advanced-configuration/#von-openapi-ausschlieen","title":"Von OpenAPI ausschlie\u00dfen","text":"<p>Um eine Pfadoperation aus dem generierten OpenAPI-Schema (und damit aus den automatischen Dokumentationssystemen) auszuschlie\u00dfen, verwenden Sie den Parameter <code>include_in_schema</code> und setzen Sie ihn auf <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#fortgeschrittene-beschreibung-mittels-docstring","title":"Fortgeschrittene Beschreibung mittels Docstring","text":"<p>Sie k\u00f6nnen die verwendeten Zeilen aus dem Docstring einer Pfadoperation-Funktion einschr\u00e4nken, die f\u00fcr OpenAPI verwendet werden.</p> <p>Das Hinzuf\u00fcgen eines <code>\\f</code> (ein maskiertes \u201eForm Feed\u201c-Zeichen) f\u00fchrt dazu, dass ReadyAPI die f\u00fcr OpenAPI verwendete Ausgabe an dieser Stelle abschneidet.</p> <p>Sie wird nicht in der Dokumentation angezeigt, aber andere Tools (z. B. Sphinx) k\u00f6nnen den Rest verwenden.</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#zusatzliche-responses","title":"Zus\u00e4tzliche Responses","text":"<p>Sie haben wahrscheinlich gesehen, wie man das <code>response_model</code> und den <code>status_code</code> f\u00fcr eine Pfadoperation deklariert.</p> <p>Das definiert die Metadaten der Haupt-Response einer Pfadoperation.</p> <p>Sie k\u00f6nnen auch zus\u00e4tzliche Responses mit deren Modellen, Statuscodes usw. deklarieren.</p> <p>Es gibt hier in der Dokumentation ein ganzes Kapitel dar\u00fcber, Sie k\u00f6nnen es unter Zus\u00e4tzliche Responses in OpenAPI lesen.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extra","title":"OpenAPI-Extra","text":"<p>Wenn Sie in Ihrer Anwendung eine Pfadoperation deklarieren, generiert ReadyAPI automatisch die relevanten Metadaten dieser Pfadoperation, die in das OpenAPI-Schema aufgenommen werden sollen.</p> <p>Technische Details</p> <p>In der OpenAPI-Spezifikation wird das Operationsobjekt genannt.</p> <p>Es hat alle Informationen zur Pfadoperation und wird zur Erstellung der automatischen Dokumentation verwendet.</p> <p>Es enth\u00e4lt <code>tags</code>, <code>parameters</code>, <code>requestBody</code>, <code>responses</code>, usw.</p> <p>Dieses Pfadoperation-spezifische OpenAPI-Schema wird normalerweise automatisch von ReadyAPI generiert, Sie k\u00f6nnen es aber auch erweitern.</p> <p>Tipp</p> <p>Dies ist ein Low-Level Erweiterungspunkt.</p> <p>Wenn Sie nur zus\u00e4tzliche Responses deklarieren m\u00fcssen, k\u00f6nnen Sie dies bequemer mit Zus\u00e4tzliche Responses in OpenAPI tun.</p> <p>Sie k\u00f6nnen das OpenAPI-Schema f\u00fcr eine Pfadoperation erweitern, indem Sie den Parameter <code>openapi_extra</code> verwenden.</p>"},{"location":"advanced/path-operation-advanced-configuration/#openapi-erweiterungen","title":"OpenAPI-Erweiterungen","text":"<p>Dieses <code>openapi_extra</code> kann beispielsweise hilfreich sein, um OpenAPI-Erweiterungen zu deklarieren:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n</code></pre> <p>Wenn Sie die automatische API-Dokumentation \u00f6ffnen, wird Ihre Erweiterung am Ende der spezifischen Pfadoperation angezeigt.</p> <p></p> <p>Und wenn Sie die resultierende OpenAPI sehen (unter <code>/openapi.json</code> in Ihrer API), sehen Sie Ihre Erweiterung auch als Teil der spezifischen Pfadoperation:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"summary\": \"Read Items\",\n                \"operationId\": \"read_items_items__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                },\n                \"x-aperture-labs-portal\": \"blue\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#benutzerdefiniertes-openapi-pfadoperation-schema","title":"Benutzerdefiniertes OpenAPI-Pfadoperation-Schema","text":"<p>Das Dictionary in <code>openapi_extra</code> wird mit dem automatisch generierten OpenAPI-Schema f\u00fcr die Pfadoperation zusammengef\u00fchrt (mittels Deep Merge).</p> <p>Sie k\u00f6nnen dem automatisch generierten Schema also zus\u00e4tzliche Daten hinzuf\u00fcgen.</p> <p>Sie k\u00f6nnten sich beispielsweise daf\u00fcr entscheiden, den Request mit Ihrem eigenen Code zu lesen und zu validieren, ohne die automatischen Funktionen von ReadyAPI mit Pydantic zu verwenden, aber Sie k\u00f6nnten den Request trotzdem im OpenAPI-Schema definieren wollen.</p> <p>Das k\u00f6nnte man mit <code>openapi_extra</code> machen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n</code></pre> <p>In diesem Beispiel haben wir kein Pydantic-Modell deklariert. Tats\u00e4chlich wird der Requestbody nicht einmal als JSON geparst, sondern direkt als <code>bytes</code> gelesen und die Funktion <code>magic_data_reader ()</code> w\u00e4re daf\u00fcr verantwortlich, ihn in irgendeiner Weise zu parsen.</p> <p>Dennoch k\u00f6nnen wir das zu erwartende Schema f\u00fcr den Requestbody deklarieren.</p>"},{"location":"advanced/path-operation-advanced-configuration/#benutzerdefinierter-openapi-content-type","title":"Benutzerdefinierter OpenAPI-Content-Type","text":"<p>Mit demselben Trick k\u00f6nnten Sie ein Pydantic-Modell verwenden, um das JSON-Schema zu definieren, das dann im benutzerdefinierten Abschnitt des OpenAPI-Schemas f\u00fcr die Pfadoperation enthalten ist.</p> <p>Und Sie k\u00f6nnten dies auch tun, wenn der Datentyp in der Anfrage nicht JSON ist.</p> <p>In der folgenden Anwendung verwenden wir beispielsweise weder die integrierte Funktionalit\u00e4t von ReadyAPI zum Extrahieren des JSON-Schemas aus Pydantic-Modellen noch die automatische Validierung f\u00fcr JSON. Tats\u00e4chlich deklarieren wir den Request-Content-Type als YAML und nicht als JSON:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Info</p> <p>In Pydantic Version 1 hie\u00df die Methode zum Abrufen des JSON-Schemas f\u00fcr ein Modell <code>Item.schema()</code>, in Pydantic Version 2 hei\u00dft die Methode <code>Item.model_json_schema()</code>.</p> <p>Obwohl wir nicht die standardm\u00e4\u00dfig integrierte Funktionalit\u00e4t verwenden, verwenden wir dennoch ein Pydantic-Modell, um das JSON-Schema f\u00fcr die Daten, die wir in YAML empfangen m\u00f6chten, manuell zu generieren.</p> <p>Dann verwenden wir den Request direkt und extrahieren den Body als <code>bytes</code>. Das bedeutet, dass ReadyAPI nicht einmal versucht, den Request-Payload als JSON zu parsen.</p> <p>Und dann parsen wir in unserem Code diesen YAML-Inhalt direkt und verwenden dann wieder dasselbe Pydantic-Modell, um den YAML-Inhalt zu validieren:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Info</p> <p>In Pydantic Version 1 war die Methode zum Parsen und Validieren eines Objekts <code>Item.parse_obj()</code>, in Pydantic Version 2 hei\u00dft die Methode <code>Item.model_validate()</code>.</p> <p>Tipp</p> <p>Hier verwenden wir dasselbe Pydantic-Modell wieder.</p> <p>Aber genauso h\u00e4tten wir es auch auf andere Weise validieren k\u00f6nnen.</p>"},{"location":"advanced/response-change-status-code/","title":"Response \u2013 Statuscode \u00e4ndern","text":"<p>Sie haben wahrscheinlich schon vorher gelesen, dass Sie einen Standard-Response-Statuscode festlegen k\u00f6nnen.</p> <p>In manchen F\u00e4llen m\u00fcssen Sie jedoch einen anderen als den Standard-Statuscode zur\u00fcckgeben.</p>"},{"location":"advanced/response-change-status-code/#anwendungsfall","title":"Anwendungsfall","text":"<p>Stellen Sie sich zum Beispiel vor, Sie m\u00f6chten standardm\u00e4\u00dfig den HTTP-Statuscode \u201eOK\u201c <code>200</code> zur\u00fcckgeben.</p> <p>Wenn die Daten jedoch nicht vorhanden waren, m\u00f6chten Sie diese erstellen und den HTTP-Statuscode \u201eCREATED\u201c <code>201</code> zur\u00fcckgeben.</p> <p>Sie m\u00f6chten aber dennoch in der Lage sein, die von Ihnen zur\u00fcckgegebenen Daten mit einem <code>response_model</code> zu filtern und zu konvertieren.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie einen <code>Response</code>-Parameter verwenden.</p>"},{"location":"advanced/response-change-status-code/#einen-response-parameter-verwenden","title":"Einen <code>Response</code>-Parameter verwenden","text":"<p>Sie k\u00f6nnen einen Parameter vom Typ <code>Response</code> in Ihrer Pfadoperation-Funktion deklarieren (wie Sie es auch f\u00fcr Cookies und Header tun k\u00f6nnen).</p> <p>Anschlie\u00dfend k\u00f6nnen Sie den <code>status_code</code> in diesem vor\u00fcbergehenden Response-Objekt festlegen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response, status\n\napp = ReadyAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n</code></pre> <p>Und dann k\u00f6nnen Sie wie gewohnt jedes ben\u00f6tigte Objekt zur\u00fcckgeben (ein <code>dict</code>, ein Datenbankmodell usw.).</p> <p>Und wenn Sie ein <code>response_model</code> deklariert haben, wird es weiterhin zum Filtern und Konvertieren des von Ihnen zur\u00fcckgegebenen Objekts verwendet.</p> <p>ReadyAPI verwendet diese vor\u00fcbergehende Response, um den Statuscode (auch Cookies und Header) zu extrahieren und f\u00fcgt diese in die endg\u00fcltige Response ein, die den von Ihnen zur\u00fcckgegebenen Wert enth\u00e4lt, gefiltert nach einem beliebigen <code>response_model</code>.</p> <p>Sie k\u00f6nnen den Parameter <code>Response</code> auch in Abh\u00e4ngigkeiten deklarieren und den Statuscode darin festlegen. Bedenken Sie jedoch, dass der gewinnt, welcher zuletzt gesetzt wird.</p>"},{"location":"advanced/response-cookies/","title":"Response-Cookies","text":""},{"location":"advanced/response-cookies/#einen-response-parameter-verwenden","title":"Einen <code>Response</code>-Parameter verwenden","text":"<p>Sie k\u00f6nnen einen Parameter vom Typ <code>Response</code> in Ihrer Pfadoperation-Funktion deklarieren.</p> <p>Und dann k\u00f6nnen Sie Cookies in diesem vor\u00fcbergehenden Response-Objekt setzen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n</code></pre> <p>Anschlie\u00dfend k\u00f6nnen Sie wie gewohnt jedes gew\u00fcnschte Objekt zur\u00fcckgeben (ein <code>dict</code>, ein Datenbankmodell, usw.).</p> <p>Und wenn Sie ein <code>response_model</code> deklariert haben, wird es weiterhin zum Filtern und Konvertieren des von Ihnen zur\u00fcckgegebenen Objekts verwendet.</p> <p>ReadyAPI verwendet diese vor\u00fcbergehende Response, um die Cookies (auch Header und Statuscode) zu extrahieren und f\u00fcgt diese in die endg\u00fcltige Response ein, die den von Ihnen zur\u00fcckgegebenen Wert enth\u00e4lt, gefiltert nach einem beliebigen <code>response_model</code>.</p> <p>Sie k\u00f6nnen den <code>Response</code>-Parameter auch in Abh\u00e4ngigkeiten deklarieren und darin Cookies (und Header) setzen.</p>"},{"location":"advanced/response-cookies/#eine-response-direkt-zuruckgeben","title":"Eine <code>Response</code> direkt zur\u00fcckgeben","text":"<p>Sie k\u00f6nnen Cookies auch erstellen, wenn Sie eine <code>Response</code> direkt in Ihrem Code zur\u00fcckgeben.</p> <p>Dazu k\u00f6nnen Sie eine Response erstellen, wie unter Eine Response direkt zur\u00fcckgeben beschrieben.</p> <p>Setzen Sie dann Cookies darin und geben Sie sie dann zur\u00fcck:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass, wenn Sie eine Response direkt zur\u00fcckgeben, anstatt den <code>Response</code>-Parameter zu verwenden, ReadyAPI diese direkt zur\u00fcckgibt.</p> <p>Sie m\u00fcssen also sicherstellen, dass Ihre Daten vom richtigen Typ sind. Z. B. sollten diese mit JSON kompatibel sein, wenn Sie eine <code>JSONResponse</code> zur\u00fcckgeben.</p> <p>Und auch, dass Sie keine Daten senden, die durch ein <code>response_model</code> h\u00e4tten gefiltert werden sollen.</p>"},{"location":"advanced/response-cookies/#mehr-informationen","title":"Mehr Informationen","text":"<p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import Response</code> oder <code>from starlette.responses import JSONResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p> <p>Und da die <code>Response</code> h\u00e4ufig zum Setzen von Headern und Cookies verwendet wird, stellt ReadyAPI diese auch unter <code>readyapi.Response</code> bereit.</p> <p>Um alle verf\u00fcgbaren Parameter und Optionen anzuzeigen, sehen Sie sich deren Dokumentation in Starlette an.</p>"},{"location":"advanced/response-directly/","title":"Eine Response direkt zur\u00fcckgeben","text":"<p>Wenn Sie eine ReadyAPI Pfadoperation erstellen, k\u00f6nnen Sie normalerweise beliebige Daten davon zur\u00fcckgeben: ein <code>dict</code>, eine <code>list</code>e, ein Pydantic-Modell, ein Datenbankmodell, usw.</p> <p>Standardm\u00e4\u00dfig konvertiert ReadyAPI diesen R\u00fcckgabewert automatisch nach JSON, mithilfe des <code>jsonable_encoder</code>, der in JSON-kompatibler Encoder erl\u00e4utert wird.</p> <p>Dann w\u00fcrde es hinter den Kulissen diese JSON-kompatiblen Daten (z. B. ein <code>dict</code>) in eine <code>JSONResponse</code> einf\u00fcgen, die zum Senden der Response an den Client verwendet w\u00fcrde.</p> <p>Sie k\u00f6nnen jedoch direkt eine <code>JSONResponse</code> von Ihren Pfadoperationen zur\u00fcckgeben.</p> <p>Das kann beispielsweise n\u00fctzlich sein, um benutzerdefinierte Header oder Cookies zur\u00fcckzugeben.</p>"},{"location":"advanced/response-directly/#eine-response-zuruckgeben","title":"Eine <code>Response</code> zur\u00fcckgeben","text":"<p>Tats\u00e4chlich k\u00f6nnen Sie jede <code>Response</code> oder jede Unterklasse davon zur\u00fcckgeben.</p> <p>Tipp</p> <p><code>JSONResponse</code> selbst ist eine Unterklasse von <code>Response</code>.</p> <p>Und wenn Sie eine <code>Response</code> zur\u00fcckgeben, wird ReadyAPI diese direkt weiterleiten.</p> <p>Es wird keine Datenkonvertierung mit Pydantic-Modellen durchf\u00fchren, es wird den Inhalt nicht in irgendeinen Typ konvertieren, usw.</p> <p>Dadurch haben Sie viel Flexibilit\u00e4t. Sie k\u00f6nnen jeden Datentyp zur\u00fcckgeben, jede Datendeklaration oder -validierung \u00fcberschreiben, usw.</p>"},{"location":"advanced/response-directly/#verwendung-des-jsonable_encoder-in-einer-response","title":"Verwendung des <code>jsonable_encoder</code> in einer <code>Response</code>","text":"<p>Da ReadyAPI keine \u00c4nderungen an einer von Ihnen zur\u00fcckgegebenen <code>Response</code> vornimmt, m\u00fcssen Sie sicherstellen, dass deren Inhalt daf\u00fcr bereit ist.</p> <p>Sie k\u00f6nnen beispielsweise kein Pydantic-Modell in eine <code>JSONResponse</code> einf\u00fcgen, ohne es zuvor in ein <code>dict</code> zu konvertieren, bei dem alle Datentypen (wie <code>datetime</code>, <code>UUID</code>, usw.) in JSON-kompatible Typen konvertiert wurden.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie den <code>jsonable_encoder</code> verwenden, um Ihre Daten zu konvertieren, bevor Sie sie an eine Response \u00fcbergeben:</p> Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import JSONResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p>"},{"location":"advanced/response-directly/#eine-benutzerdefinierte-response-zuruckgeben","title":"Eine benutzerdefinierte <code>Response</code> zur\u00fcckgeben","text":"<p>Das obige Beispiel zeigt alle Teile, die Sie ben\u00f6tigen, ist aber noch nicht sehr n\u00fctzlich, da Sie das <code>item</code> einfach direkt h\u00e4tten zur\u00fcckgeben k\u00f6nnen, und ReadyAPI w\u00fcrde es f\u00fcr Sie in eine <code>JSONResponse</code> einf\u00fcgen, es in ein <code>dict</code> konvertieren, usw. All das standardm\u00e4\u00dfig.</p> <p>Sehen wir uns nun an, wie Sie damit eine benutzerdefinierte Response zur\u00fcckgeben k\u00f6nnen.</p> <p>Nehmen wir an, Sie m\u00f6chten eine XML-Response zur\u00fcckgeben.</p> <p>Sie k\u00f6nnten Ihren XML-Inhalt als String in eine <code>Response</code> einf\u00fcgen und sie zur\u00fcckgeben:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/response-directly/#anmerkungen","title":"Anmerkungen","text":"<p>Wenn Sie eine <code>Response</code> direkt zur\u00fccksenden, werden deren Daten weder validiert, konvertiert (serialisiert), noch automatisch dokumentiert.</p> <p>Sie k\u00f6nnen sie aber trotzdem wie unter Zus\u00e4tzliche Responses in OpenAPI beschrieben dokumentieren.</p> <p>In sp\u00e4teren Abschnitten erfahren Sie, wie Sie diese benutzerdefinierten <code>Response</code>s verwenden/deklarieren und gleichzeitig \u00fcber automatische Datenkonvertierung, Dokumentation, usw. verf\u00fcgen.</p>"},{"location":"advanced/response-headers/","title":"Response-Header","text":""},{"location":"advanced/response-headers/#verwenden-sie-einen-response-parameter","title":"Verwenden Sie einen <code>Response</code>-Parameter","text":"<p>Sie k\u00f6nnen einen Parameter vom Typ <code>Response</code> in Ihrer Pfadoperation-Funktion deklarieren (wie Sie es auch f\u00fcr Cookies tun k\u00f6nnen).</p> <p>Und dann k\u00f6nnen Sie Header in diesem vor\u00fcbergehenden Response-Objekt festlegen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Anschlie\u00dfend k\u00f6nnen Sie wie gewohnt jedes gew\u00fcnschte Objekt zur\u00fcckgeben (ein <code>dict</code>, ein Datenbankmodell, usw.).</p> <p>Und wenn Sie ein <code>response_model</code> deklariert haben, wird es weiterhin zum Filtern und Konvertieren des von Ihnen zur\u00fcckgegebenen Objekts verwendet.</p> <p>ReadyAPI verwendet diese vor\u00fcbergehende Response, um die Header (auch Cookies und Statuscode) zu extrahieren und f\u00fcgt diese in die endg\u00fcltige Response ein, die den von Ihnen zur\u00fcckgegebenen Wert enth\u00e4lt, gefiltert nach einem beliebigen <code>response_model</code>.</p> <p>Sie k\u00f6nnen den Parameter <code>Response</code> auch in Abh\u00e4ngigkeiten deklarieren und darin Header (und Cookies) festlegen.</p>"},{"location":"advanced/response-headers/#eine-response-direkt-zuruckgeben","title":"Eine <code>Response</code> direkt zur\u00fcckgeben","text":"<p>Sie k\u00f6nnen auch Header hinzuf\u00fcgen, wenn Sie eine <code>Response</code> direkt zur\u00fcckgeben.</p> <p>Erstellen Sie eine Response wie in Eine Response direkt zur\u00fcckgeben beschrieben und \u00fcbergeben Sie die Header als zus\u00e4tzlichen Parameter:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import Response</code> oder <code>from starlette.responses import JSONResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p> <p>Und da die <code>Response</code> h\u00e4ufig zum Setzen von Headern und Cookies verwendet wird, stellt ReadyAPI diese auch unter <code>readyapi.Response</code> bereit.</p>"},{"location":"advanced/response-headers/#benutzerdefinierte-header","title":"Benutzerdefinierte Header","text":"<p>Beachten Sie, dass benutzerdefinierte propriet\u00e4re Header mittels des Pr\u00e4fix 'X-' hinzugef\u00fcgt werden k\u00f6nnen.</p> <p>Wenn Sie jedoch benutzerdefinierte Header haben, die ein Client in einem Browser sehen k\u00f6nnen soll, m\u00fcssen Sie diese zu Ihren CORS-Konfigurationen hinzuf\u00fcgen (weitere Informationen finden Sie unter CORS (Cross-Origin Resource Sharing)), unter Verwendung des Parameters <code>expose_headers</code>, dokumentiert in Starlettes CORS-Dokumentation.</p>"},{"location":"advanced/settings/","title":"Einstellungen und Umgebungsvariablen","text":"<p>In vielen F\u00e4llen ben\u00f6tigt Ihre Anwendung m\u00f6glicherweise einige externe Einstellungen oder Konfigurationen, zum Beispiel geheime Schl\u00fcssel, Datenbank-Anmeldeinformationen, Anmeldeinformationen f\u00fcr E-Mail-Dienste, usw.</p> <p>Die meisten dieser Einstellungen sind variabel (k\u00f6nnen sich \u00e4ndern), wie z. B. Datenbank-URLs. Und vieles k\u00f6nnten sch\u00fctzenswerte, geheime Daten sein.</p> <p>Aus diesem Grund werden diese \u00fcblicherweise in Umgebungsvariablen bereitgestellt, die von der Anwendung gelesen werden.</p>"},{"location":"advanced/settings/#umgebungsvariablen","title":"Umgebungsvariablen","text":"<p>Tipp</p> <p>Wenn Sie bereits wissen, was \u201eUmgebungsvariablen\u201c sind und wie man sie verwendet, k\u00f6nnen Sie gerne mit dem n\u00e4chsten Abschnitt weiter unten fortfahren.</p> <p>Eine Umgebungsvariable (auch bekannt als \u201eenv var\u201c) ist eine Variable, die sich au\u00dferhalb des Python-Codes im Betriebssystem befindet und von Ihrem Python-Code (oder auch von anderen Programmen) gelesen werden kann.</p> <p>Sie k\u00f6nnen Umgebungsvariablen in der Shell erstellen und verwenden, ohne Python zu ben\u00f6tigen:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Sie k\u00f6nnten eine Umgebungsvariable MY_NAME erstellen mittels\n$ export MY_NAME=\"Wade Wilson\"\n\n// Dann k\u00f6nnten Sie diese mit anderen Programmen verwenden, etwa\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Erstelle eine Umgebungsvariable MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Verwende sie mit anderen Programmen, etwa\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"advanced/settings/#umgebungsvariablen-mit-python-auslesen","title":"Umgebungsvariablen mit Python auslesen","text":"<p>Sie k\u00f6nnen Umgebungsvariablen auch au\u00dferhalb von Python im Terminal (oder mit einer anderen Methode) erstellen und diese dann mit Python auslesen.</p> <p>Sie k\u00f6nnten zum Beispiel eine Datei <code>main.py</code> haben mit:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tipp</p> <p>Das zweite Argument f\u00fcr <code>os.getenv()</code> ist der zur\u00fcckzugebende Defaultwert.</p> <p>Wenn nicht angegeben, ist er standardm\u00e4\u00dfig <code>None</code>. Hier \u00fcbergeben wir <code>\"World\"</code> als Defaultwert.</p> <p>Dann k\u00f6nnten Sie dieses Python-Programm aufrufen:</p> <pre><code>// Hier legen wir die Umgebungsvariable noch nicht fest\n$ python main.py\n\n// Da wir die Umgebungsvariable nicht festgelegt haben, erhalten wir den Standardwert\n\nHello World from Python\n\n// Aber wenn wir zuerst eine Umgebungsvariable erstellen\n$ export MY_NAME=\"Wade Wilson\"\n\n// Und dann das Programm erneut aufrufen\n$ python main.py\n\n// Kann es jetzt die Umgebungsvariable lesen\n\nHello Wade Wilson from Python\n</code></pre> <p>Da Umgebungsvariablen au\u00dferhalb des Codes festgelegt, aber vom Code gelesen werden k\u00f6nnen und nicht zusammen mit den \u00fcbrigen Dateien gespeichert (an <code>git</code> committet) werden m\u00fcssen, werden sie h\u00e4ufig f\u00fcr Konfigurationen oder Einstellungen verwendet.</p> <p>Sie k\u00f6nnen eine Umgebungsvariable auch nur f\u00fcr einen bestimmten Programmaufruf erstellen, die nur f\u00fcr dieses Programm und nur f\u00fcr dessen Dauer verf\u00fcgbar ist.</p> <p>Erstellen Sie diese dazu direkt vor dem Programm selbst, in derselben Zeile:</p> <pre><code>// Erstelle eine Umgebungsvariable MY_NAME inline f\u00fcr diesen Programmaufruf\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// main.py kann jetzt diese Umgebungsvariable lesen\n\nHello Wade Wilson from Python\n\n// Die Umgebungsvariable existiert danach nicht mehr\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tipp</p> <p>Weitere Informationen dazu finden Sie unter The Twelve-Factor App: Config.</p>"},{"location":"advanced/settings/#typen-und-validierung","title":"Typen und Validierung","text":"<p>Diese Umgebungsvariablen k\u00f6nnen nur Text-Zeichenketten verarbeiten, da sie au\u00dferhalb von Python liegen und mit anderen Programmen und dem Rest des Systems (und sogar mit verschiedenen Betriebssystemen wie Linux, Windows, macOS) kompatibel sein m\u00fcssen.</p> <p>Das bedeutet, dass jeder in Python aus einer Umgebungsvariablen gelesene Wert ein <code>str</code> ist und jede Konvertierung in einen anderen Typ oder jede Validierung im Code erfolgen muss.</p>"},{"location":"advanced/settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>Gl\u00fccklicherweise bietet Pydantic ein gro\u00dfartiges Werkzeug zur Verarbeitung dieser Einstellungen, die von Umgebungsvariablen stammen, mit Pydantic: Settings Management.</p>"},{"location":"advanced/settings/#pydantic-settings-installieren","title":"<code>pydantic-settings</code> installieren","text":"<p>Installieren Sie zun\u00e4chst das Package <code>pydantic-settings</code>:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>Es ist bereits enthalten, wenn Sie die <code>all</code>-Extras installiert haben, mit:</p> <pre><code>$ pip install \"readyapi[all]\"\n---&gt; 100%\n</code></pre> <p>Info</p> <p>In Pydantic v1 war das im Hauptpackage enthalten. Jetzt wird es als unabh\u00e4ngiges Package verteilt, sodass Sie w\u00e4hlen k\u00f6nnen, ob Sie es installieren m\u00f6chten oder nicht, falls Sie die Funktionalit\u00e4t nicht ben\u00f6tigen.</p>"},{"location":"advanced/settings/#das-settings-objekt-erstellen","title":"Das <code>Settings</code>-Objekt erstellen","text":"<p>Importieren Sie <code>BaseSettings</code> aus Pydantic und erstellen Sie eine Unterklasse, ganz \u00e4hnlich wie bei einem Pydantic-Modell.</p> <p>Auf die gleiche Weise wie bei Pydantic-Modellen deklarieren Sie Klassenattribute mit Typannotationen und m\u00f6glicherweise Defaultwerten.</p> <p>Sie k\u00f6nnen dieselben Validierungs-Funktionen und -Tools verwenden, die Sie f\u00fcr Pydantic-Modelle verwenden, z. B. verschiedene Datentypen und zus\u00e4tzliche Validierungen mit <code>Field()</code>.</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Info</p> <p>In Pydantic v1 w\u00fcrden Sie <code>BaseSettings</code> direkt von <code>pydantic</code> statt von <code>pydantic_settings</code> importieren.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tipp</p> <p>F\u00fcr ein schnelles Copy-and-paste verwenden Sie nicht dieses Beispiel, sondern das letzte unten.</p> <p>Wenn Sie dann eine Instanz dieser <code>Settings</code>-Klasse erstellen (in diesem Fall als <code>settings</code>-Objekt), liest Pydantic die Umgebungsvariablen ohne Ber\u00fccksichtigung der Gro\u00df- und Kleinschreibung. Eine Variable <code>APP_NAME</code> in Gro\u00dfbuchstaben wird also als Attribut <code>app_name</code> gelesen.</p> <p>Als N\u00e4chstes werden die Daten konvertiert und validiert. Wenn Sie also dieses <code>settings</code>-Objekt verwenden, verf\u00fcgen Sie \u00fcber Daten mit den von Ihnen deklarierten Typen (z. B. ist <code>items_per_user</code> ein <code>int</code>).</p>"},{"location":"advanced/settings/#settings-verwenden","title":"<code>settings</code> verwenden","text":"<p>Dann k\u00f6nnen Sie das neue <code>settings</code>-Objekt in Ihrer Anwendung verwenden:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#den-server-ausfuhren","title":"Den Server ausf\u00fchren","text":"<p>Als N\u00e4chstes w\u00fcrden Sie den Server ausf\u00fchren und die Konfigurationen als Umgebungsvariablen \u00fcbergeben. Sie k\u00f6nnten beispielsweise <code>ADMIN_EMAIL</code> und <code>APP_NAME</code> festlegen mit:</p> <pre><code>$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Tipp</p> <p>Um mehrere Umgebungsvariablen f\u00fcr einen einzelnen Befehl festzulegen, trennen Sie diese einfach durch ein Leerzeichen und f\u00fcgen Sie alle vor dem Befehl ein.</p> <p>Und dann w\u00fcrde die Einstellung <code>admin_email</code> auf <code>\"deadpool@example.com\"</code> gesetzt.</p> <p>Der <code>app_name</code> w\u00e4re <code>\"ChimichangApp\"</code>.</p> <p>Und <code>items_per_user</code> w\u00fcrde seinen Standardwert von <code>50</code> behalten.</p>"},{"location":"advanced/settings/#einstellungen-in-einem-anderen-modul","title":"Einstellungen in einem anderen Modul","text":"<p>Sie k\u00f6nnten diese Einstellungen in eine andere Moduldatei einf\u00fcgen, wie Sie in Gr\u00f6\u00dfere Anwendungen \u2013 mehrere Dateien gesehen haben.</p> <p>Sie k\u00f6nnten beispielsweise eine Datei <code>config.py</code> haben mit:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n</code></pre> <p>Und dann verwenden Sie diese in einer Datei <code>main.py</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nfrom .config import settings\n\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tipp</p> <p>Sie ben\u00f6tigen au\u00dferdem eine Datei <code>__init__.py</code>, wie in Gr\u00f6\u00dfere Anwendungen \u2013 mehrere Dateien gesehen.</p>"},{"location":"advanced/settings/#einstellungen-in-einer-abhangigkeit","title":"Einstellungen in einer Abh\u00e4ngigkeit","text":"<p>In manchen F\u00e4llen kann es n\u00fctzlich sein, die Einstellungen mit einer Abh\u00e4ngigkeit bereitzustellen, anstatt ein globales Objekt <code>settings</code> zu haben, das \u00fcberall verwendet wird.</p> <p>Dies k\u00f6nnte besonders beim Testen n\u00fctzlich sein, da es sehr einfach ist, eine Abh\u00e4ngigkeit mit Ihren eigenen benutzerdefinierten Einstellungen zu \u00fcberschreiben.</p>"},{"location":"advanced/settings/#die-konfigurationsdatei","title":"Die Konfigurationsdatei","text":"<p>Ausgehend vom vorherigen Beispiel k\u00f6nnte Ihre Datei <code>config.py</code> so aussehen:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n</code></pre> <p>Beachten Sie, dass wir jetzt keine Standardinstanz <code>settings = Settings()</code> erstellen.</p>"},{"location":"advanced/settings/#die-haupt-anwendungsdatei","title":"Die Haupt-Anwendungsdatei","text":"<p>Jetzt erstellen wir eine Abh\u00e4ngigkeit, die ein neues <code>config.Settings()</code> zur\u00fcckgibt.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tipp</p> <p>Wir werden das <code>@lru_cache</code> in K\u00fcrze besprechen.</p> <p>Im Moment nehmen Sie an, dass <code>get_settings()</code> eine normale Funktion ist.</p> <p>Und dann k\u00f6nnen wir das von der Pfadoperation-Funktion als Abh\u00e4ngigkeit einfordern und es \u00fcberall dort verwenden, wo wir es brauchen.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#einstellungen-und-tests","title":"Einstellungen und Tests","text":"<p>Dann w\u00e4re es sehr einfach, beim Testen ein anderes Einstellungsobjekt bereitzustellen, indem man eine Abh\u00e4ngigkeits\u00fcberschreibung f\u00fcr <code>get_settings</code> erstellt:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n</code></pre> <p>Bei der Abh\u00e4ngigkeits\u00fcberschreibung legen wir einen neuen Wert f\u00fcr <code>admin_email</code> fest, wenn wir das neue <code>Settings</code>-Objekt erstellen, und geben dann dieses neue Objekt zur\u00fcck.</p> <p>Dann k\u00f6nnen wir testen, ob das verwendet wird.</p>"},{"location":"advanced/settings/#lesen-einer-env-datei","title":"Lesen einer <code>.env</code>-Datei","text":"<p>Wenn Sie viele Einstellungen haben, die sich m\u00f6glicherweise oft \u00e4ndern, vielleicht in verschiedenen Umgebungen, kann es n\u00fctzlich sein, diese in eine Datei zu schreiben und sie dann daraus zu lesen, als w\u00e4ren sie Umgebungsvariablen.</p> <p>Diese Praxis ist so weit verbreitet, dass sie einen Namen hat. Diese Umgebungsvariablen werden \u00fcblicherweise in einer Datei <code>.env</code> abgelegt und die Datei wird \u201edotenv\u201c genannt.</p> <p>Tipp</p> <p>Eine Datei, die mit einem Punkt (<code>.</code>) beginnt, ist eine versteckte Datei in Unix-\u00e4hnlichen Systemen wie Linux und macOS.</p> <p>Aber eine dotenv-Datei muss nicht unbedingt genau diesen Dateinamen haben.</p> <p>Pydantic unterst\u00fctzt das Lesen dieser Dateitypen mithilfe einer externen Bibliothek. Weitere Informationen finden Sie unter Pydantic Settings: Dotenv (.env) support.</p> <p>Tipp</p> <p>Damit das funktioniert, m\u00fcssen Sie <code>pip install python-dotenv</code> ausf\u00fchren.</p>"},{"location":"advanced/settings/#die-env-datei","title":"Die <code>.env</code>-Datei","text":"<p>Sie k\u00f6nnten eine <code>.env</code>-Datei haben, mit:</p> <pre><code>ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n</code></pre>"},{"location":"advanced/settings/#einstellungen-aus-env-lesen","title":"Einstellungen aus <code>.env</code> lesen","text":"<p>Und dann aktualisieren Sie Ihre <code>config.py</code> mit:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n</code></pre> <p>Tipp</p> <p>Das Attribut <code>model_config</code> wird nur f\u00fcr die Pydantic-Konfiguration verwendet. Weitere Informationen finden Sie unter Pydantic: Configuration.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n</code></pre> <p>Tipp</p> <p>Die Klasse <code>Config</code> wird nur f\u00fcr die Pydantic-Konfiguration verwendet. Weitere Informationen finden Sie unter Pydantic Model Config.</p> <p>Info</p> <p>In Pydantic Version 1 erfolgte die Konfiguration in einer internen Klasse <code>Config</code>, in Pydantic Version 2 erfolgt sie in einem Attribut <code>model_config</code>. Dieses Attribut akzeptiert ein <code>dict</code>. Um automatische Codevervollst\u00e4ndigung und Inline-Fehlerberichte zu erhalten, k\u00f6nnen Sie <code>SettingsConfigDict</code> importieren und verwenden, um dieses <code>dict</code> zu definieren.</p> <p>Hier definieren wir die Konfiguration <code>env_file</code> innerhalb Ihrer Pydantic-<code>Settings</code>-Klasse und setzen den Wert auf den Dateinamen mit der dotenv-Datei, die wir verwenden m\u00f6chten.</p>"},{"location":"advanced/settings/#die-settings-nur-einmal-laden-mittels-lru_cache","title":"Die <code>Settings</code> nur einmal laden mittels <code>lru_cache</code>","text":"<p>Das Lesen einer Datei von der Festplatte ist normalerweise ein kostspieliger (langsamer) Vorgang, daher m\u00f6chten Sie ihn wahrscheinlich nur einmal ausf\u00fchren und dann dasselbe Einstellungsobjekt erneut verwenden, anstatt es f\u00fcr jeden Request zu lesen.</p> <p>Aber jedes Mal, wenn wir ausf\u00fchren:</p> <pre><code>Settings()\n</code></pre> <p>w\u00fcrde ein neues <code>Settings</code>-Objekt erstellt und bei der Erstellung w\u00fcrde die <code>.env</code>-Datei erneut ausgelesen.</p> <p>Wenn die Abh\u00e4ngigkeitsfunktion wie folgt w\u00e4re:</p> <pre><code>def get_settings():\n    return Settings()\n</code></pre> <p>w\u00fcrden wir dieses Objekt f\u00fcr jeden Request erstellen und die <code>.env</code>-Datei f\u00fcr jeden Request lesen. \u26a0\ufe0f</p> <p>Da wir jedoch den <code>@lru_cache</code>-Dekorator oben verwenden, wird das <code>Settings</code>-Objekt nur einmal erstellt, n\u00e4mlich beim ersten Aufruf. \u2714\ufe0f</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Dann wird bei allen nachfolgenden Aufrufen von <code>get_settings()</code>, in den Abh\u00e4ngigkeiten f\u00fcr darauffolgende Requests, dasselbe Objekt zur\u00fcckgegeben, das beim ersten Aufruf zur\u00fcckgegeben wurde, anstatt den Code von <code>get_settings()</code> erneut auszuf\u00fchren und ein neues <code>Settings</code>-Objekt zu erstellen.</p>"},{"location":"advanced/settings/#technische-details-zu-lru_cache","title":"Technische Details zu <code>lru_cache</code>","text":"<p><code>@lru_cache</code> \u00e4ndert die Funktion, die es dekoriert, dahingehend, denselben Wert zur\u00fcckzugeben, der beim ersten Mal zur\u00fcckgegeben wurde, anstatt ihn erneut zu berechnen und den Code der Funktion jedes Mal auszuf\u00fchren.</p> <p>Die darunter liegende Funktion wird also f\u00fcr jede Argumentkombination einmal ausgef\u00fchrt. Und dann werden die von jeder dieser Argumentkombinationen zur\u00fcckgegebenen Werte immer wieder verwendet, wenn die Funktion mit genau derselben Argumentkombination aufgerufen wird.</p> <p>Wenn Sie beispielsweise eine Funktion haben:</p> <pre><code>@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n</code></pre> <p>k\u00f6nnte Ihr Programm so ausgef\u00fchrt werden:</p> <pre><code>sequenceDiagram\n\nparticipant code as Code\nparticipant function as say_hi()\nparticipant execute as Funktion ausgef\u00fchrt\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; execute: f\u00fchre Code der Funktion aus\n        execute -&gt;&gt; code: gib das Resultat zur\u00fcck\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: gib das gespeicherte Resultat zur\u00fcck\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; execute: f\u00fchre Code der Funktion aus\n        execute -&gt;&gt; code: gib das Resultat zur\u00fcck\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function -&gt;&gt; execute: f\u00fchre Code der Funktion aus\n        execute -&gt;&gt; code: gib das Resultat zur\u00fcck\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; code: gib das gespeicherte Resultat zur\u00fcck\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: gib das gespeicherte Resultat zur\u00fcck\n    end</code></pre> <p>Im Fall unserer Abh\u00e4ngigkeit <code>get_settings()</code> akzeptiert die Funktion nicht einmal Argumente, sodass sie immer den gleichen Wert zur\u00fcckgibt.</p> <p>Auf diese Weise verh\u00e4lt es sich fast so, als w\u00e4re es nur eine globale Variable. Da es jedoch eine Abh\u00e4ngigkeitsfunktion verwendet, k\u00f6nnen wir diese zu Testzwecken problemlos \u00fcberschreiben.</p> <p><code>@lru_cache</code> ist Teil von <code>functools</code>, welches Teil von Pythons Standardbibliothek ist. Weitere Informationen dazu finden Sie in der Python Dokumentation f\u00fcr <code>@lru_cache</code>.</p>"},{"location":"advanced/settings/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mit Pydantic Settings k\u00f6nnen Sie die Einstellungen oder Konfigurationen f\u00fcr Ihre Anwendung verwalten und dabei die gesamte Leistungsf\u00e4higkeit der Pydantic-Modelle nutzen.</p> <ul> <li>Durch die Verwendung einer Abh\u00e4ngigkeit k\u00f6nnen Sie das Testen vereinfachen.</li> <li>Sie k\u00f6nnen <code>.env</code>-Dateien damit verwenden.</li> <li>Durch die Verwendung von <code>@lru_cache</code> k\u00f6nnen Sie vermeiden, die dotenv-Datei bei jedem Request erneut zu lesen, w\u00e4hrend Sie sie w\u00e4hrend des Testens \u00fcberschreiben k\u00f6nnen.</li> </ul>"},{"location":"advanced/sub-applications/","title":"Unteranwendungen \u2013 Mounts","text":"<p>Wenn Sie zwei unabh\u00e4ngige ReadyAPI-Anwendungen mit deren eigenen unabh\u00e4ngigen OpenAPI und deren eigenen Dokumentationsoberfl\u00e4chen ben\u00f6tigen, k\u00f6nnen Sie eine Hauptanwendung haben und dann eine (oder mehrere) Unteranwendung(en) \u201emounten\u201c.</p>"},{"location":"advanced/sub-applications/#mounten-einer-readyapi-anwendung","title":"Mounten einer ReadyAPI-Anwendung","text":"<p>\u201eMounten\u201c (\u201eEinh\u00e4ngen\u201c) bedeutet das Hinzuf\u00fcgen einer v\u00f6llig \u201eunabh\u00e4ngigen\u201c Anwendung an einem bestimmten Pfad, die sich dann um die Handhabung aller unter diesem Pfad liegenden Pfadoperationen k\u00fcmmert, welche in dieser Unteranwendung deklariert sind.</p>"},{"location":"advanced/sub-applications/#hauptanwendung","title":"Hauptanwendung","text":"<p>Erstellen Sie zun\u00e4chst die Hauptanwendung ReadyAPI und deren Pfadoperationen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#unteranwendung","title":"Unteranwendung","text":"<p>Erstellen Sie dann Ihre Unteranwendung und deren Pfadoperationen.</p> <p>Diese Unteranwendung ist nur eine weitere Standard-ReadyAPI-Anwendung, aber diese wird \u201egemountet\u201c:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#die-unteranwendung-mounten","title":"Die Unteranwendung mounten","text":"<p>Mounten Sie in Ihrer Top-Level-Anwendung <code>app</code> die Unteranwendung <code>subapi</code>.</p> <p>In diesem Fall wird sie im Pfad <code>/subapi</code> gemountet:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#es-in-der-automatischen-api-dokumentation-betrachten","title":"Es in der automatischen API-Dokumentation betrachten","text":"<p>F\u00fchren Sie nun <code>uvicorn</code> mit der Hauptanwendung aus. Wenn Ihre Datei <code>main.py</code> lautet, w\u00e4re das:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Und \u00f6ffnen Sie die Dokumentation unter http://127.0.0.1:8000/docs.</p> <p>Sie sehen die automatische API-Dokumentation f\u00fcr die Hauptanwendung, welche nur deren eigene Pfadoperationen anzeigt:</p> <p></p> <p>\u00d6ffnen Sie dann die Dokumentation f\u00fcr die Unteranwendung unter http://127.0.0.1:8000/subapi/docs.</p> <p>Sie sehen die automatische API-Dokumentation f\u00fcr die Unteranwendung, welche nur deren eigene Pfadoperationen anzeigt, alle unter dem korrekten Unterpfad-Pr\u00e4fix <code>/subapi</code>:</p> <p></p> <p>Wenn Sie versuchen, mit einer der beiden Benutzeroberfl\u00e4chen zu interagieren, funktionieren diese ordnungsgem\u00e4\u00df, da der Browser mit jeder spezifischen Anwendung oder Unteranwendung kommunizieren kann.</p>"},{"location":"advanced/sub-applications/#technische-details-root_path","title":"Technische Details: <code>root_path</code>","text":"<p>Wenn Sie eine Unteranwendung wie oben beschrieben mounten, k\u00fcmmert sich ReadyAPI darum, den Mount-Pfad f\u00fcr die Unteranwendung zu kommunizieren, mithilfe eines Mechanismus aus der ASGI-Spezifikation namens <code>root_path</code>.</p> <p>Auf diese Weise wei\u00df die Unteranwendung, dass sie dieses Pfadpr\u00e4fix f\u00fcr die Benutzeroberfl\u00e4che der Dokumentation verwenden soll.</p> <p>Und die Unteranwendung k\u00f6nnte auch ihre eigenen gemounteten Unteranwendungen haben und alles w\u00fcrde korrekt funktionieren, da ReadyAPI sich um alle diese <code>root_path</code>s automatisch k\u00fcmmert.</p> <p>Mehr \u00fcber den <code>root_path</code> und dessen explizite Verwendung erfahren Sie im Abschnitt Hinter einem Proxy.</p>"},{"location":"advanced/templates/","title":"Templates","text":"<p>Sie k\u00f6nnen jede gew\u00fcnschte Template-Engine mit ReadyAPI verwenden.</p> <p>Eine h\u00e4ufige Wahl ist Jinja2, dasselbe, was auch von Flask und anderen Tools verwendet wird.</p> <p>Es gibt Werkzeuge zur einfachen Konfiguration, die Sie direkt in Ihrer ReadyAPI-Anwendung verwenden k\u00f6nnen (bereitgestellt von Starlette).</p>"},{"location":"advanced/templates/#abhangigkeiten-installieren","title":"Abh\u00e4ngigkeiten installieren","text":"<p>Installieren Sie <code>jinja2</code>:</p> <pre><code>$ pip install jinja2\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/templates/#verwendung-von-jinja2templates","title":"Verwendung von <code>Jinja2Templates</code>","text":"<ul> <li>Importieren Sie <code>Jinja2Templates</code>.</li> <li>Erstellen Sie ein <code>templates</code>-Objekt, das Sie sp\u00e4ter wiederverwenden k\u00f6nnen.</li> <li>Deklarieren Sie einen <code>Request</code>-Parameter in der Pfadoperation, welcher ein Template zur\u00fcckgibt.</li> <li>Verwenden Sie die von Ihnen erstellten <code>templates</code>, um eine <code>TemplateResponse</code> zu rendern und zur\u00fcckzugeben, \u00fcbergeben Sie den Namen des Templates, das Requestobjekt und ein \u201eKontext\u201c-Dictionary mit Schl\u00fcssel-Wert-Paaren, die innerhalb des Jinja2-Templates verwendet werden sollen.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import HTMLResponse\nfrom readyapi.staticfiles import StaticFiles\nfrom readyapi.templating import Jinja2Templates\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n</code></pre> <p>Hinweis</p> <p>Vor ReadyAPI 0.108.0 und Starlette 0.29.0 war <code>name</code> der erste Parameter.</p> <p>Au\u00dferdem wurde in fr\u00fcheren Versionen das <code>request</code>-Objekt als Teil der Schl\u00fcssel-Wert-Paare im Kontext f\u00fcr Jinja2 \u00fcbergeben.</p> <p>Tipp</p> <p>Durch die Deklaration von <code>response_class=HTMLResponse</code> kann die Dokumentationsoberfl\u00e4che erkennen, dass die Response HTML sein wird.</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.templating import Jinja2Templates</code> verwenden.</p> <p>ReadyAPI bietet dasselbe <code>starlette.templating</code> auch via <code>readyapi.templating</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Es kommt aber direkt von Starlette. Das Gleiche gilt f\u00fcr <code>Request</code> und <code>StaticFiles</code>.</p>"},{"location":"advanced/templates/#templates-erstellen","title":"Templates erstellen","text":"<p>Dann k\u00f6nnen Sie unter <code>templates/item.html</code> ein Template erstellen, mit z. B. folgendem Inhalt:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced/templates/#template-kontextwerte","title":"Template-Kontextwerte","text":"<p>Im HTML, welches enth\u00e4lt:</p> <pre><code>Item ID: {{ id }}\n</code></pre> <p>... wird die <code>id</code> angezeigt, welche dem \u201eKontext\u201c-<code>dict</code> entnommen wird, welches Sie \u00fcbergeben haben:</p> <pre><code>{\"id\": id}\n</code></pre> <p>Mit beispielsweise einer ID <code>42</code> w\u00fcrde das wie folgt gerendert werden:</p> <pre><code>Item ID: 42\n</code></pre>"},{"location":"advanced/templates/#template-url_for-argumente","title":"Template-<code>url_for</code>-Argumente","text":"<p>Sie k\u00f6nnen <code>url_for()</code> auch innerhalb des Templates verwenden, es nimmt als Argumente dieselben Argumente, die von Ihrer Pfadoperation-Funktion verwendet werden.</p> <p>Der Abschnitt mit:</p> <pre><code>&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;\n</code></pre> <p>... generiert also einen Link zu derselben URL, welche von der Pfadoperation-Funktion <code>read_item(id=id)</code> gehandhabt werden w\u00fcrde.</p> <p>Mit beispielsweise der ID <code>42</code> w\u00fcrde dies Folgendes ergeben:</p> <pre><code>&lt;a href=\"/items/42\"&gt;\n</code></pre>"},{"location":"advanced/templates/#templates-und-statische-dateien","title":"Templates und statische Dateien","text":"<p>Sie k\u00f6nnen <code>url_for()</code> innerhalb des Templates auch beispielsweise mit den <code>StaticFiles</code> verwenden, die Sie mit <code>name=\"static\"</code> gemountet haben.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In diesem Beispiel w\u00fcrde das zu einer CSS-Datei unter <code>static/styles.css</code> verlinken, mit folgendem Inhalt:</p> <pre><code>h1 {\n    color: green;\n}\n</code></pre> <p>Und da Sie <code>StaticFiles</code> verwenden, wird diese CSS-Datei automatisch von Ihrer ReadyAPI-Anwendung unter der URL <code>/static/styles.css</code> bereitgestellt.</p>"},{"location":"advanced/templates/#mehr-details","title":"Mehr Details","text":"<p>Weitere Informationen, einschlie\u00dflich, wie man Templates testet, finden Sie in der Starlette Dokumentation zu Templates.</p>"},{"location":"advanced/testing-dependencies/","title":"Testen mit Ersatz f\u00fcr Abh\u00e4ngigkeiten","text":""},{"location":"advanced/testing-dependencies/#abhangigkeiten-beim-testen-uberschreiben","title":"Abh\u00e4ngigkeiten beim Testen \u00fcberschreiben","text":"<p>Es gibt einige Szenarien, in denen Sie beim Testen m\u00f6glicherweise eine Abh\u00e4ngigkeit \u00fcberschreiben m\u00f6chten.</p> <p>Sie m\u00f6chten nicht, dass die urspr\u00fcngliche Abh\u00e4ngigkeit ausgef\u00fchrt wird (und auch keine der m\u00f6glicherweise vorhandenen Unterabh\u00e4ngigkeiten).</p> <p>Stattdessen m\u00f6chten Sie eine andere Abh\u00e4ngigkeit bereitstellen, die nur w\u00e4hrend Tests (m\u00f6glicherweise nur bei einigen bestimmten Tests) verwendet wird und einen Wert bereitstellt, der dort verwendet werden kann, wo der Wert der urspr\u00fcnglichen Abh\u00e4ngigkeit verwendet wurde.</p>"},{"location":"advanced/testing-dependencies/#anwendungsfalle-externer-service","title":"Anwendungsf\u00e4lle: Externer Service","text":"<p>Ein Beispiel k\u00f6nnte sein, dass Sie einen externen Authentifizierungsanbieter haben, mit dem Sie sich verbinden m\u00fcssen.</p> <p>Sie senden ihm ein Token und er gibt einen authentifizierten Benutzer zur\u00fcck.</p> <p>Dieser Anbieter berechnet Ihnen m\u00f6glicherweise Geb\u00fchren pro Anfrage, und der Aufruf k\u00f6nnte etwas l\u00e4nger dauern, als wenn Sie einen vordefinierten Scheinbenutzer f\u00fcr Tests h\u00e4tten.</p> <p>Sie m\u00f6chten den externen Anbieter wahrscheinlich einmal testen, ihn aber nicht unbedingt bei jedem weiteren ausgef\u00fchrten Test aufrufen.</p> <p>In diesem Fall k\u00f6nnen Sie die Abh\u00e4ngigkeit, die diesen Anbieter aufruft, \u00fcberschreiben und eine benutzerdefinierte Abh\u00e4ngigkeit verwenden, die einen Scheinbenutzer zur\u00fcckgibt, nur f\u00fcr Ihre Tests.</p>"},{"location":"advanced/testing-dependencies/#verwenden-sie-das-attribut-appdependency_overrides","title":"Verwenden Sie das Attribut <code>app.dependency_overrides</code>.","text":"<p>F\u00fcr diese F\u00e4lle verf\u00fcgt Ihre ReadyAPI-Anwendung \u00fcber das Attribut <code>app.dependency_overrides</code>, bei diesem handelt sich um ein einfaches <code>dict</code>.</p> <p>Um eine Abh\u00e4ngigkeit f\u00fcr das Testen zu \u00fcberschreiben, geben Sie als Schl\u00fcssel die urspr\u00fcngliche Abh\u00e4ngigkeit (eine Funktion) und als Wert Ihre \u00dcberschreibung der Abh\u00e4ngigkeit (eine andere Funktion) ein.</p> <p>Und dann ruft ReadyAPI diese \u00dcberschreibung anstelle der urspr\u00fcnglichen Abh\u00e4ngigkeit auf.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen eine \u00dcberschreibung f\u00fcr eine Abh\u00e4ngigkeit festlegen, die an einer beliebigen Stelle in Ihrer ReadyAPI-Anwendung verwendet wird.</p> <p>Die urspr\u00fcngliche Abh\u00e4ngigkeit k\u00f6nnte in einer Pfadoperation-Funktion, einem Pfadoperation-Dekorator (wenn Sie den R\u00fcckgabewert nicht verwenden), einem <code>.include_router()</code>-Aufruf, usw. verwendet werden.</p> <p>ReadyAPI kann sie in jedem Fall \u00fcberschreiben.</p> <p>Anschlie\u00dfend k\u00f6nnen Sie Ihre \u00dcberschreibungen zur\u00fccksetzen (entfernen), indem Sie <code>app.dependency_overrides</code> auf ein leeres <code>dict</code> setzen:</p> <pre><code>app.dependency_overrides = {}\n</code></pre> <p>Tipp</p> <p>Wenn Sie eine Abh\u00e4ngigkeit nur w\u00e4hrend einiger Tests \u00fcberschreiben m\u00f6chten, k\u00f6nnen Sie die \u00dcberschreibung zu Beginn des Tests (innerhalb der Testfunktion) festlegen und am Ende (am Ende der Testfunktion) zur\u00fccksetzen.</p>"},{"location":"advanced/testing-events/","title":"Events testen: Hochfahren \u2013 Herunterfahren","text":"<p>Wenn Sie in Ihren Tests Ihre Event-Handler (<code>startup</code> und <code>shutdown</code>) ausf\u00fchren wollen, k\u00f6nnen Sie den <code>TestClient</code> mit einer <code>with</code>-Anweisung verwenden:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n</code></pre>"},{"location":"advanced/testing-websockets/","title":"WebSockets testen","text":"<p>Sie k\u00f6nnen den schon bekannten <code>TestClient</code> zum Testen von WebSockets verwenden.</p> <p>Dazu verwenden Sie den <code>TestClient</code> in einer <code>with</code>-Anweisung, eine Verbindung zum WebSocket herstellend:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom readyapi.websockets import WebSocket\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n</code></pre> <p>Hinweis</p> <p>Weitere Informationen finden Sie in der Starlette-Dokumentation zum Testen von WebSockets.</p>"},{"location":"advanced/using-request-directly/","title":"Den Request direkt verwenden","text":"<p>Bisher haben Sie die Teile des Requests, die Sie ben\u00f6tigen, mithilfe von deren Typen deklariert.</p> <p>Daten nehmend von:</p> <ul> <li>Dem Pfad als Parameter.</li> <li>Headern.</li> <li>Cookies.</li> <li>usw.</li> </ul> <p>Und indem Sie das tun, validiert ReadyAPI diese Daten, konvertiert sie und generiert automatisch Dokumentation f\u00fcr Ihre API.</p> <p>Es gibt jedoch Situationen, in denen Sie m\u00f6glicherweise direkt auf das <code>Request</code>-Objekt zugreifen m\u00fcssen.</p>"},{"location":"advanced/using-request-directly/#details-zum-request-objekt","title":"Details zum <code>Request</code>-Objekt","text":"<p>Da ReadyAPI unter der Haube eigentlich Starlette ist, mit einer Ebene von mehreren Tools dar\u00fcber, k\u00f6nnen Sie Starlette's <code>Request</code>-Objekt direkt verwenden, wenn Sie es ben\u00f6tigen.</p> <p>Das bedeutet allerdings auch, dass, wenn Sie Daten direkt vom <code>Request</code>-Objekt nehmen (z. B. dessen Body lesen), diese von ReadyAPI nicht validiert, konvertiert oder dokumentiert werden (mit OpenAPI, f\u00fcr die automatische API-Benutzeroberfl\u00e4che).</p> <p>Obwohl jeder andere normal deklarierte Parameter (z. B. der Body, mit einem Pydantic-Modell) dennoch validiert, konvertiert, annotiert, usw. werden w\u00fcrde.</p> <p>Es gibt jedoch bestimmte F\u00e4lle, in denen es n\u00fctzlich ist, auf das <code>Request</code>-Objekt zuzugreifen.</p>"},{"location":"advanced/using-request-directly/#das-request-objekt-direkt-verwenden","title":"Das <code>Request</code>-Objekt direkt verwenden","text":"<p>Angenommen, Sie m\u00f6chten auf die IP-Adresse/den Host des Clients in Ihrer Pfadoperation-Funktion zugreifen.</p> <p>Dazu m\u00fcssen Sie direkt auf den Request zugreifen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n</code></pre> <p>Durch die Deklaration eines Pfadoperation-Funktionsparameters, dessen Typ der <code>Request</code> ist, wei\u00df ReadyAPI, dass es den <code>Request</code> diesem Parameter \u00fcbergeben soll.</p> <p>Tipp</p> <p>Beachten Sie, dass wir in diesem Fall einen Pfad-Parameter zus\u00e4tzlich zum Request-Parameter deklarieren.</p> <p>Der Pfad-Parameter wird also extrahiert, validiert, in den spezifizierten Typ konvertiert und mit OpenAPI annotiert.</p> <p>Auf die gleiche Weise k\u00f6nnen Sie wie gewohnt jeden anderen Parameter deklarieren und zus\u00e4tzlich auch den <code>Request</code> erhalten.</p>"},{"location":"advanced/using-request-directly/#request-dokumentation","title":"<code>Request</code>-Dokumentation","text":"<p>Weitere Details zum <code>Request</code>-Objekt finden Sie in der offiziellen Starlette-Dokumentation.</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.requests import Request</code> verwenden.</p> <p>ReadyAPI stellt es direkt zur Verf\u00fcgung, als Komfort f\u00fcr Sie, den Entwickler. Es kommt aber direkt von Starlette.</p>"},{"location":"advanced/websockets/","title":"WebSockets","text":"<p>Sie k\u00f6nnen WebSockets mit ReadyAPI verwenden.</p>"},{"location":"advanced/websockets/#websockets-installieren","title":"<code>WebSockets</code> installieren","text":"<p>Zuerst m\u00fcssen Sie <code>WebSockets</code> installieren:</p> <pre><code>$ pip install websockets\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/websockets/#websockets-client","title":"WebSockets-Client","text":""},{"location":"advanced/websockets/#in-produktion","title":"In Produktion","text":"<p>In Ihrem Produktionssystem haben Sie wahrscheinlich ein Frontend, das mit einem modernen Framework wie React, Vue.js oder Angular erstellt wurde.</p> <p>Und um \u00fcber WebSockets mit Ihrem Backend zu kommunizieren, w\u00fcrden Sie wahrscheinlich die Werkzeuge Ihres Frontends verwenden.</p> <p>Oder Sie verf\u00fcgen m\u00f6glicherweise \u00fcber eine native Mobile-Anwendung, die direkt in nativem Code mit Ihrem WebSocket-Backend kommuniziert.</p> <p>Oder Sie haben andere M\u00f6glichkeiten, mit dem WebSocket-Endpunkt zu kommunizieren.</p> <p>F\u00fcr dieses Beispiel verwenden wir jedoch ein sehr einfaches HTML-Dokument mit etwas JavaScript, alles in einem langen String.</p> <p>Das ist nat\u00fcrlich nicht optimal und man w\u00fcrde das nicht in der Produktion machen.</p> <p>In der Produktion h\u00e4tten Sie eine der oben genannten Optionen.</p> <p>Aber es ist die einfachste M\u00f6glichkeit, sich auf die Serverseite von WebSockets zu konzentrieren und ein funktionierendes Beispiel zu haben:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre>"},{"location":"advanced/websockets/#einen-websocket-erstellen","title":"Einen <code>websocket</code> erstellen","text":"<p>Erstellen Sie in Ihrer ReadyAPI-Anwendung einen <code>websocket</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.websockets import WebSocket</code> verwenden.</p> <p>ReadyAPI stellt den gleichen <code>WebSocket</code> direkt zur Verf\u00fcgung, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Er kommt aber direkt von Starlette.</p>"},{"location":"advanced/websockets/#nachrichten-erwarten-und-nachrichten-senden","title":"Nachrichten erwarten und Nachrichten senden","text":"<p>In Ihrer WebSocket-Route k\u00f6nnen Sie Nachrichten <code>await</code>en und Nachrichten senden.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Sie k\u00f6nnen Bin\u00e4r-, Text- und JSON-Daten empfangen und senden.</p>"},{"location":"advanced/websockets/#es-ausprobieren","title":"Es ausprobieren","text":"<p>Wenn Ihre Datei <code>main.py</code> hei\u00dft, f\u00fchren Sie Ihre Anwendung so aus:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u00d6ffnen Sie Ihren Browser unter http://127.0.0.1:8000.</p> <p>Sie sehen eine einfache Seite wie:</p> <p></p> <p>Sie k\u00f6nnen Nachrichten in das Eingabefeld tippen und absenden:</p> <p></p> <p>Und Ihre ReadyAPI-Anwendung mit WebSockets antwortet:</p> <p></p> <p>Sie k\u00f6nnen viele Nachrichten senden (und empfangen):</p> <p></p> <p>Und alle verwenden dieselbe WebSocket-Verbindung.</p>"},{"location":"advanced/websockets/#verwendung-von-depends-und-anderen","title":"Verwendung von <code>Depends</code> und anderen","text":"<p>In WebSocket-Endpunkten k\u00f6nnen Sie Folgendes aus <code>readyapi</code> importieren und verwenden:</p> <ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> </ul> <p>Diese funktionieren auf die gleiche Weise wie f\u00fcr andere ReadyAPI-Endpunkte/Pfadoperationen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Info</p> <p>Da es sich um einen WebSocket handelt, macht es keinen Sinn, eine <code>HTTPException</code> auszul\u00f6sen, stattdessen l\u00f6sen wir eine <code>WebSocketException</code> aus.</p> <p>Sie k\u00f6nnen einen \u201eClosing\u201c-Code verwenden, aus den g\u00fcltigen Codes, die in der Spezifikation definiert sind.</p>"},{"location":"advanced/websockets/#websockets-mit-abhangigkeiten-ausprobieren","title":"WebSockets mit Abh\u00e4ngigkeiten ausprobieren","text":"<p>Wenn Ihre Datei <code>main.py</code> hei\u00dft, f\u00fchren Sie Ihre Anwendung mit Folgendem aus:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u00d6ffnen Sie Ihren Browser unter http://127.0.0.1:8000.</p> <p>Dort k\u00f6nnen Sie einstellen:</p> <ul> <li>Die \u201eItem ID\u201c, die im Pfad verwendet wird.</li> <li>Das \u201eToken\u201c, das als Query-Parameter verwendet wird.</li> </ul> <p>Tipp</p> <p>Beachten Sie, dass der Query-\u201eToken\u201c von einer Abh\u00e4ngigkeit verarbeitet wird.</p> <p>Damit k\u00f6nnen Sie den WebSocket verbinden und dann Nachrichten senden und empfangen:</p> <p></p>"},{"location":"advanced/websockets/#verbindungsabbruche-und-mehreren-clients-handhaben","title":"Verbindungsabbr\u00fcche und mehreren Clients handhaben","text":"<p>Wenn eine WebSocket-Verbindung geschlossen wird, l\u00f6st <code>await websocket.receive_text()</code> eine <code>WebSocketDisconnect</code>-Exception aus, die Sie dann wie in folgendem Beispiel abfangen und behandeln k\u00f6nnen.</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <p>Zum Ausprobieren:</p> <ul> <li>\u00d6ffnen Sie die Anwendung mit mehreren Browser-Tabs.</li> <li>Schreiben Sie Nachrichten in den Tabs.</li> <li>Schlie\u00dfen Sie dann einen der Tabs.</li> </ul> <p>Das wird die Ausnahme <code>WebSocketDisconnect</code> ausl\u00f6sen und alle anderen Clients erhalten eine Nachricht wie:</p> <pre><code>Client #1596980209979 left the chat\n</code></pre> <p>Tipp</p> <p>Die obige Anwendung ist ein minimales und einfaches Beispiel, das zeigt, wie Nachrichten verarbeitet und an mehrere WebSocket-Verbindungen gesendet werden.</p> <p>Beachten Sie jedoch, dass, da alles nur im Speicher in einer einzigen Liste verwaltet wird, es nur funktioniert, w\u00e4hrend der Prozess ausgef\u00fchrt wird, und nur mit einem einzelnen Prozess.</p> <p>Wenn Sie etwas ben\u00f6tigen, das sich leicht in ReadyAPI integrieren l\u00e4sst, aber robuster ist und von Redis, PostgreSQL und anderen unterst\u00fctzt wird, sehen Sie sich encode/broadcaster an.</p>"},{"location":"advanced/websockets/#mehr-informationen","title":"Mehr Informationen","text":"<p>Weitere Informationen zu Optionen finden Sie in der Dokumentation von Starlette:</p> <ul> <li>Die <code>WebSocket</code>-Klasse.</li> <li>Klassen-basierte Handhabung von WebSockets.</li> </ul>"},{"location":"advanced/wsgi/","title":"WSGI inkludieren \u2013 Flask, Django und andere","text":"<p>Sie k\u00f6nnen WSGI-Anwendungen mounten, wie Sie es in Unteranwendungen \u2013 Mounts, Hinter einem Proxy gesehen haben.</p> <p>Dazu k\u00f6nnen Sie die <code>WSGIMiddleware</code> verwenden und damit Ihre WSGI-Anwendung wrappen, zum Beispiel Flask, Django usw.</p>"},{"location":"advanced/wsgi/#wsgimiddleware-verwenden","title":"<code>WSGIMiddleware</code> verwenden","text":"<p>Sie m\u00fcssen <code>WSGIMiddleware</code> importieren.</p> <p>Wrappen Sie dann die WSGI-Anwendung (z. B. Flask) mit der Middleware.</p> <p>Und dann mounten Sie das auf einem Pfad.</p> Python 3.8+ <pre><code>from flask import Flask, request\nfrom markupsafe import escape\nfrom readyapi import ReadyAPI\nfrom readyapi.middleware.wsgi import WSGIMiddleware\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n</code></pre>"},{"location":"advanced/wsgi/#es-ansehen","title":"Es ansehen","text":"<p>Jetzt wird jede Anfrage unter dem Pfad <code>/v1/</code> von der Flask-Anwendung verarbeitet.</p> <p>Und der Rest wird von ReadyAPI gehandhabt.</p> <p>Wenn Sie das mit Uvicorn ausf\u00fchren und auf http://localhost:8000/v1/ gehen, sehen Sie die Response von Flask:</p> <pre><code>Hello, World from Flask!\n</code></pre> <p>Und wenn Sie auf http://localhost:8000/v2 gehen, sehen Sie die Response von ReadyAPI:</p> <pre><code>{\n    \"message\": \"Hello World\"\n}\n</code></pre>"},{"location":"advanced/security/","title":"Fortgeschrittene Sicherheit","text":""},{"location":"advanced/security/#zusatzfunktionen","title":"Zusatzfunktionen","text":"<p>Neben den in Tutorial \u2013 Benutzerhandbuch: Sicherheit behandelten Funktionen gibt es noch einige zus\u00e4tzliche Funktionen zur Handhabung der Sicherheit.</p> <p>Tipp</p> <p>Die n\u00e4chsten Abschnitte sind nicht unbedingt \u201efortgeschritten\u201c.</p> <p>Und es ist m\u00f6glich, dass f\u00fcr Ihren Anwendungsfall die L\u00f6sung in einem davon liegt.</p>"},{"location":"advanced/security/#lesen-sie-zuerst-das-tutorial","title":"Lesen Sie zuerst das Tutorial","text":"<p>In den n\u00e4chsten Abschnitten wird davon ausgegangen, dass Sie das Haupt-Tutorial \u2013 Benutzerhandbuch: Sicherheit bereits gelesen haben.</p> <p>Sie basieren alle auf den gleichen Konzepten, erm\u00f6glichen jedoch einige zus\u00e4tzliche Funktionalit\u00e4ten.</p>"},{"location":"advanced/security/http-basic-auth/","title":"HTTP Basic Auth","text":"<p>F\u00fcr die einfachsten F\u00e4lle k\u00f6nnen Sie HTTP Basic Auth verwenden.</p> <p>Bei HTTP Basic Auth erwartet die Anwendung einen Header, der einen Benutzernamen und ein Passwort enth\u00e4lt.</p> <p>Wenn sie diesen nicht empf\u00e4ngt, gibt sie den HTTP-Error 401 \u201eUnauthorized\u201c zur\u00fcck.</p> <p>Und gibt einen Header <code>WWW-Authenticate</code> mit dem Wert <code>Basic</code> und einem optionalen <code>realm</code>-Parameter (\u201eBereich\u201c) zur\u00fcck.</p> <p>Dadurch wird der Browser angewiesen, die integrierte Eingabeaufforderung f\u00fcr einen Benutzernamen und ein Passwort anzuzeigen.</p> <p>Wenn Sie dann den Benutzernamen und das Passwort eingeben, sendet der Browser diese automatisch im Header.</p>"},{"location":"advanced/security/http-basic-auth/#einfaches-http-basic-auth","title":"Einfaches HTTP Basic Auth","text":"<ul> <li>Importieren Sie <code>HTTPBasic</code> und <code>HTTPBasicCredentials</code>.</li> <li>Erstellen Sie mit <code>HTTPBasic</code> ein \u201e<code>security</code>-Schema\u201c.</li> <li>Verwenden Sie dieses <code>security</code> mit einer Abh\u00e4ngigkeit in Ihrer Pfadoperation.</li> <li>Diese gibt ein Objekt vom Typ <code>HTTPBasicCredentials</code> zur\u00fcck:<ul> <li>Es enth\u00e4lt den gesendeten <code>username</code> und das gesendete <code>password</code>.</li> </ul> </li> </ul> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Wenn Sie versuchen, die URL zum ersten Mal zu \u00f6ffnen (oder in der Dokumentation auf den Button \u201eExecute\u201c zu klicken), wird der Browser Sie nach Ihrem Benutzernamen und Passwort fragen:</p> <p></p>"},{"location":"advanced/security/http-basic-auth/#den-benutzernamen-uberprufen","title":"Den Benutzernamen \u00fcberpr\u00fcfen","text":"<p>Hier ist ein vollst\u00e4ndigeres Beispiel.</p> <p>Verwenden Sie eine Abh\u00e4ngigkeit, um zu \u00fcberpr\u00fcfen, ob Benutzername und Passwort korrekt sind.</p> <p>Verwenden Sie dazu das Python-Standardmodul <code>secrets</code>, um den Benutzernamen und das Passwort zu \u00fcberpr\u00fcfen.</p> <p><code>secrets.compare_digest()</code> ben\u00f6tigt <code>bytes</code> oder einen <code>str</code>, welcher nur ASCII-Zeichen (solche der englischen Sprache) enthalten darf, das bedeutet, dass es nicht mit Zeichen wie <code>\u00e1</code>, wie in <code>KhulnaSoft</code>, funktionieren w\u00fcrde.</p> <p>Um dies zu l\u00f6sen, konvertieren wir zun\u00e4chst den <code>username</code> und das <code>password</code> in UTF-8-codierte <code>bytes</code>.</p> <p>Dann k\u00f6nnen wir <code>secrets.compare_digest()</code> verwenden, um sicherzustellen, dass <code>credentials.username</code> <code>\"stanleyjobson\"</code> und <code>credentials.password</code> <code>\"swordfish\"</code> ist.</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> <p>Dies w\u00e4re das gleiche wie:</p> <pre><code>if not (credentials.username == \"stanleyjobson\") or not (credentials.password == \"swordfish\"):\n    # Einen Error zur\u00fcckgeben\n    ...\n</code></pre> <p>Aber durch die Verwendung von <code>secrets.compare_digest()</code> ist dieser Code sicher vor einer Art von Angriffen, die \u201eTiming-Angriffe\u201c genannt werden.</p>"},{"location":"advanced/security/http-basic-auth/#timing-angriffe","title":"Timing-Angriffe","text":"<p>Aber was ist ein \u201eTiming-Angriff\u201c?</p> <p>Stellen wir uns vor, dass einige Angreifer versuchen, den Benutzernamen und das Passwort zu erraten.</p> <p>Und sie senden eine Anfrage mit dem Benutzernamen <code>johndoe</code> und dem Passwort <code>love123</code>.</p> <p>Dann w\u00fcrde der Python-Code in Ihrer Anwendung etwa so aussehen:</p> <pre><code>if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Aber genau in dem Moment, in dem Python das erste <code>j</code> in <code>johndoe</code> mit dem ersten <code>s</code> in <code>stanleyjobson</code> vergleicht, gibt es <code>False</code> zur\u00fcck, da es bereits wei\u00df, dass diese beiden Strings nicht identisch sind, und denkt, \u201eEs besteht keine Notwendigkeit, weitere Berechnungen mit dem Vergleich der restlichen Buchstaben zu verschwenden\u201c. Und Ihre Anwendung wird zur\u00fcckgeben \u201eIncorrect username or password\u201c.</p> <p>Doch dann versuchen es die Angreifer mit dem Benutzernamen <code>stanleyjobsox</code> und dem Passwort <code>love123</code>.</p> <p>Und Ihr Anwendungscode macht etwa Folgendes:</p> <pre><code>if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Python muss das gesamte <code>stanleyjobso</code> in <code>stanleyjobsox</code> und <code>stanleyjobson</code> vergleichen, bevor es erkennt, dass beide Zeichenfolgen nicht gleich sind. Daher wird es einige zus\u00e4tzliche Mikrosekunden dauern, bis die Antwort \u201eIncorrect username or password\u201c erfolgt.</p>"},{"location":"advanced/security/http-basic-auth/#die-zeit-zum-antworten-hilft-den-angreifern","title":"Die Zeit zum Antworten hilft den Angreifern","text":"<p>Wenn die Angreifer zu diesem Zeitpunkt feststellen, dass der Server einige Mikrosekunden l\u00e4nger braucht, um die Antwort \u201eIncorrect username or password\u201c zu senden, wissen sie, dass sie etwas richtig gemacht haben, einige der Anfangsbuchstaben waren richtig.</p> <p>Und dann k\u00f6nnen sie es noch einmal versuchen, wohl wissend, dass es wahrscheinlich eher etwas mit <code>stanleyjobsox</code> als mit <code>johndoe</code> zu tun hat.</p>"},{"location":"advanced/security/http-basic-auth/#ein-professioneller-angriff","title":"Ein \u201eprofessioneller\u201c Angriff","text":"<p>Nat\u00fcrlich w\u00fcrden die Angreifer das alles nicht von Hand versuchen, sondern ein Programm daf\u00fcr schreiben, m\u00f6glicherweise mit Tausenden oder Millionen Tests pro Sekunde. Und w\u00fcrden jeweils nur einen zus\u00e4tzlichen richtigen Buchstaben erhalten.</p> <p>Aber so h\u00e4tten die Angreifer in wenigen Minuten oder Stunden mit der \u201eHilfe\u201c unserer Anwendung den richtigen Benutzernamen und das richtige Passwort erraten, indem sie die Zeitspanne zur Hilfe nehmen, die diese zur Beantwortung ben\u00f6tigt.</p>"},{"location":"advanced/security/http-basic-auth/#das-problem-beheben-mittels-secretscompare_digest","title":"Das Problem beheben mittels <code>secrets.compare_digest()</code>","text":"<p>Aber in unserem Code verwenden wir tats\u00e4chlich <code>secrets.compare_digest()</code>.</p> <p>Damit wird, kurz gesagt, der Vergleich von <code>stanleyjobsox</code> mit <code>stanleyjobson</code> genauso lange dauern wie der Vergleich von <code>johndoe</code> mit <code>stanleyjobson</code>. Und das Gleiche gilt f\u00fcr das Passwort.</p> <p>So ist Ihr Anwendungscode, dank der Verwendung von <code>secrets.compare_digest()</code>, vor dieser ganzen Klasse von Sicherheitsangriffen gesch\u00fctzt.</p>"},{"location":"advanced/security/http-basic-auth/#den-error-zuruckgeben","title":"Den Error zur\u00fcckgeben","text":"<p>Nachdem Sie festgestellt haben, dass die Anmeldeinformationen falsch sind, geben Sie eine <code>HTTPException</code> mit dem Statuscode 401 zur\u00fcck (derselbe, der auch zur\u00fcckgegeben wird, wenn keine Anmeldeinformationen angegeben werden) und f\u00fcgen den Header <code>WWW-Authenticate</code> hinzu, damit der Browser die Anmeldeaufforderung erneut anzeigt:</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/","title":"OAuth2-Scopes","text":"<p>Sie k\u00f6nnen OAuth2-Scopes direkt in ReadyAPI verwenden, sie sind nahtlos integriert.</p> <p>Das erm\u00f6glicht es Ihnen, ein feingranuliertes Berechtigungssystem nach dem OAuth2-Standard in Ihre OpenAPI-Anwendung (und deren API-Dokumentation) zu integrieren.</p> <p>OAuth2 mit Scopes ist der Mechanismus, der von vielen gro\u00dfen Authentifizierungsanbietern wie Facebook, Google, GitHub, Microsoft, Twitter usw. verwendet wird. Sie verwenden ihn, um Benutzern und Anwendungen spezifische Berechtigungen zu erteilen.</p> <p>Jedes Mal, wenn Sie sich mit Facebook, Google, GitHub, Microsoft oder Twitter anmelden (\u201elog in with\u201c), verwendet die entsprechende Anwendung OAuth2 mit Scopes.</p> <p>In diesem Abschnitt erfahren Sie, wie Sie Authentifizierung und Autorisierung mit demselben OAuth2, mit Scopes in Ihrer ReadyAPI-Anwendung verwalten.</p> <p>Achtung</p> <p>Dies ist ein mehr oder weniger fortgeschrittener Abschnitt. Wenn Sie gerade erst anfangen, k\u00f6nnen Sie ihn \u00fcberspringen.</p> <p>Sie ben\u00f6tigen nicht unbedingt OAuth2-Scopes, und Sie k\u00f6nnen die Authentifizierung und Autorisierung handhaben wie Sie m\u00f6chten.</p> <p>Aber OAuth2 mit Scopes kann bequem in Ihre API (mit OpenAPI) und deren API-Dokumentation integriert werden.</p> <p>Dennoch, verwenden Sie solche Scopes oder andere Sicherheits-/Autorisierungsanforderungen in Ihrem Code so wie Sie es m\u00f6chten.</p> <p>In vielen F\u00e4llen kann OAuth2 mit Scopes ein Overkill sein.</p> <p>Aber wenn Sie wissen, dass Sie es brauchen oder neugierig sind, lesen Sie weiter.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes-und-openapi","title":"OAuth2-Scopes und OpenAPI","text":"<p>Die OAuth2-Spezifikation definiert \u201eScopes\u201c als eine Liste von durch Leerzeichen getrennten Strings.</p> <p>Der Inhalt jedes dieser Strings kann ein beliebiges Format haben, sollte jedoch keine Leerzeichen enthalten.</p> <p>Diese Scopes stellen \u201eBerechtigungen\u201c dar.</p> <p>In OpenAPI (z. B. der API-Dokumentation) k\u00f6nnen Sie \u201eSicherheitsschemas\u201c definieren.</p> <p>Wenn eines dieser Sicherheitsschemas OAuth2 verwendet, k\u00f6nnen Sie auch Scopes deklarieren und verwenden.</p> <p>Jeder \u201eScope\u201c ist nur ein String (ohne Leerzeichen).</p> <p>Er wird normalerweise verwendet, um bestimmte Sicherheitsberechtigungen zu deklarieren, zum Beispiel:</p> <ul> <li><code>users:read</code> oder <code>users:write</code> sind g\u00e4ngige Beispiele.</li> <li><code>instagram_basic</code> wird von Facebook / Instagram verwendet.</li> <li><code>https://www.googleapis.com/auth/drive</code> wird von Google verwendet.</li> </ul> <p>Info</p> <p>In OAuth2 ist ein \u201eScope\u201c nur ein String, der eine bestimmte erforderliche Berechtigung deklariert.</p> <p>Es spielt keine Rolle, ob er andere Zeichen wie <code>:</code> enth\u00e4lt oder ob es eine URL ist.</p> <p>Diese Details sind implementierungsspezifisch.</p> <p>F\u00fcr OAuth2 sind es einfach nur Strings.</p>"},{"location":"advanced/security/oauth2-scopes/#gesamtubersicht","title":"Gesamt\u00fcbersicht","text":"<p>Sehen wir uns zun\u00e4chst kurz die Teile an, die sich gegen\u00fcber den Beispielen im Haupt-Tutorial \u2013 Benutzerhandbuch f\u00fcr OAuth2 mit Password (und Hashing), Bearer mit JWT-Tokens \u00e4ndern. Diesmal verwenden wir OAuth2-Scopes:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Sehen wir uns diese \u00c4nderungen nun Schritt f\u00fcr Schritt an.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2-sicherheitsschema","title":"OAuth2-Sicherheitsschema","text":"<p>Die erste \u00c4nderung ist, dass wir jetzt das OAuth2-Sicherheitsschema mit zwei verf\u00fcgbaren Scopes deklarieren: <code>me</code> und <code>items</code>.</p> <p>Der <code>scopes</code>-Parameter erh\u00e4lt ein <code>dict</code> mit jedem Scope als Schl\u00fcssel und dessen Beschreibung als Wert:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Da wir diese Scopes jetzt deklarieren, werden sie in der API-Dokumentation angezeigt, wenn Sie sich einloggen/autorisieren.</p> <p>Und Sie k\u00f6nnen ausw\u00e4hlen, auf welche Scopes Sie Zugriff haben m\u00f6chten: <code>me</code> und <code>items</code>.</p> <p>Das ist derselbe Mechanismus, der verwendet wird, wenn Sie beim Anmelden mit Facebook, Google, GitHub, usw. Berechtigungen erteilen:</p> <p></p>"},{"location":"advanced/security/oauth2-scopes/#jwt-token-mit-scopes","title":"JWT-Token mit Scopes","text":"<p>\u00c4ndern Sie nun die Token-Pfadoperation, um die angeforderten Scopes zur\u00fcckzugeben.</p> <p>Wir verwenden immer noch dasselbe <code>OAuth2PasswordRequestForm</code>. Es enth\u00e4lt eine Eigenschaft <code>scopes</code> mit einer <code>list</code>e von <code>str</code>s f\u00fcr jeden Scope, den es im Request erhalten hat.</p> <p>Und wir geben die Scopes als Teil des JWT-Tokens zur\u00fcck.</p> <p>Gefahr</p> <p>Der Einfachheit halber f\u00fcgen wir hier die empfangenen Scopes direkt zum Token hinzu.</p> <p>Aus Sicherheitsgr\u00fcnden sollten Sie jedoch sicherstellen, dass Sie in Ihrer Anwendung nur die Scopes hinzuf\u00fcgen, die der Benutzer tats\u00e4chlich haben kann, oder die Sie vordefiniert haben.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#scopes-in-pfadoperationen-und-abhangigkeiten-deklarieren","title":"Scopes in Pfadoperationen und Abh\u00e4ngigkeiten deklarieren","text":"<p>Jetzt deklarieren wir, dass die Pfadoperation f\u00fcr <code>/users/me/items/</code> den Scope <code>items</code> erfordert.</p> <p>Dazu importieren und verwenden wir <code>Security</code> von <code>readyapi</code>.</p> <p>Sie k\u00f6nnen <code>Security</code> verwenden, um Abh\u00e4ngigkeiten zu deklarieren (genau wie <code>Depends</code>), aber <code>Security</code> erh\u00e4lt auch einen Parameter <code>scopes</code> mit einer Liste von Scopes (Strings).</p> <p>In diesem Fall \u00fcbergeben wir eine Abh\u00e4ngigkeitsfunktion <code>get_current_active_user</code> an <code>Security</code> (genauso wie wir es mit <code>Depends</code> tun w\u00fcrden).</p> <p>Wir \u00fcbergeben aber auch eine <code>list</code>e von Scopes, in diesem Fall mit nur einem Scope: <code>items</code> (es k\u00f6nnten mehrere sein).</p> <p>Und die Abh\u00e4ngigkeitsfunktion <code>get_current_active_user</code> kann auch Unterabh\u00e4ngigkeiten deklarieren, nicht nur mit <code>Depends</code>, sondern auch mit <code>Security</code>. Ihre eigene Unterabh\u00e4ngigkeitsfunktion (<code>get_current_user</code>) und weitere Scope-Anforderungen deklarierend.</p> <p>In diesem Fall erfordert sie den Scope <code>me</code> (sie k\u00f6nnte mehr als einen Scope erfordern).</p> <p>Hinweis</p> <p>Sie m\u00fcssen nicht unbedingt an verschiedenen Stellen verschiedene Scopes hinzuf\u00fcgen.</p> <p>Wir tun dies hier, um zu demonstrieren, wie ReadyAPI auf verschiedenen Ebenen deklarierte Scopes verarbeitet.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Technische Details</p> <p><code>Security</code> ist tats\u00e4chlich eine Unterklasse von <code>Depends</code> und hat nur noch einen zus\u00e4tzlichen Parameter, den wir sp\u00e4ter kennenlernen werden.</p> <p>Durch die Verwendung von <code>Security</code> anstelle von <code>Depends</code> wei\u00df ReadyAPI jedoch, dass es Sicherheits-Scopes deklarieren, intern verwenden und die API mit OpenAPI dokumentieren kann.</p> <p>Wenn Sie jedoch <code>Query</code>, <code>Path</code>, <code>Depends</code>, <code>Security</code> und andere von <code>readyapi</code> importieren, handelt es sich tats\u00e4chlich um Funktionen, die spezielle Klassen zur\u00fcckgeben.</p>"},{"location":"advanced/security/oauth2-scopes/#securityscopes-verwenden","title":"<code>SecurityScopes</code> verwenden","text":"<p>Aktualisieren Sie nun die Abh\u00e4ngigkeit <code>get_current_user</code>.</p> <p>Das ist diejenige, die von den oben genannten Abh\u00e4ngigkeiten verwendet wird.</p> <p>Hier verwenden wir dasselbe OAuth2-Schema, das wir zuvor erstellt haben, und deklarieren es als Abh\u00e4ngigkeit: <code>oauth2_scheme</code>.</p> <p>Da diese Abh\u00e4ngigkeitsfunktion selbst keine Scope-Anforderungen hat, k\u00f6nnen wir <code>Depends</code> mit <code>oauth2_scheme</code> verwenden. Wir m\u00fcssen <code>Security</code> nicht verwenden, wenn wir keine Sicherheits-Scopes angeben m\u00fcssen.</p> <p>Wir deklarieren auch einen speziellen Parameter vom Typ <code>SecurityScopes</code>, der aus <code>readyapi.security</code> importiert wird.</p> <p>Diese <code>SecurityScopes</code>-Klasse \u00e4hnelt <code>Request</code> (<code>Request</code> wurde verwendet, um das Request-Objekt direkt zu erhalten).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#die-scopes-verwenden","title":"Die <code>scopes</code> verwenden","text":"<p>Der Parameter <code>security_scopes</code> wird vom Typ <code>SecurityScopes</code> sein.</p> <p>Dieses verf\u00fcgt \u00fcber ein Attribut <code>scopes</code> mit einer Liste, die alle von ihm selbst ben\u00f6tigten Scopes enth\u00e4lt und ferner alle Abh\u00e4ngigkeiten, die dieses als Unterabh\u00e4ngigkeit verwenden. Sprich, alle \u201eDependanten\u201c ... das mag verwirrend klingen, wird aber sp\u00e4ter noch einmal erkl\u00e4rt.</p> <p>Das <code>security_scopes</code>-Objekt (der Klasse <code>SecurityScopes</code>) stellt au\u00dferdem ein <code>scope_str</code>-Attribut mit einem einzelnen String bereit, der die durch Leerzeichen getrennten Scopes enth\u00e4lt (den werden wir verwenden).</p> <p>Wir erstellen eine <code>HTTPException</code>, die wir sp\u00e4ter an mehreren Stellen wiederverwenden (<code>raise</code>n) k\u00f6nnen.</p> <p>In diese Exception f\u00fcgen wir (falls vorhanden) die erforderlichen Scopes als durch Leerzeichen getrennten String ein (unter Verwendung von <code>scope_str</code>). Wir f\u00fcgen diesen String mit den Scopes in den Header <code>WWW-Authenticate</code> ein (das ist Teil der Spezifikation).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#den-username-und-das-format-der-daten-uberprufen","title":"Den <code>username</code> und das Format der Daten \u00fcberpr\u00fcfen","text":"<p>Wir verifizieren, dass wir einen <code>username</code> erhalten, und extrahieren die Scopes.</p> <p>Und dann validieren wir diese Daten mit dem Pydantic-Modell (wobei wir die <code>ValidationError</code>-Exception abfangen), und wenn wir beim Lesen des JWT-Tokens oder beim Validieren der Daten mit Pydantic einen Fehler erhalten, l\u00f6sen wir die zuvor erstellte <code>HTTPException</code> aus.</p> <p>Dazu aktualisieren wir das Pydantic-Modell <code>TokenData</code> mit einem neuen Attribut <code>scopes</code>.</p> <p>Durch die Validierung der Daten mit Pydantic k\u00f6nnen wir sicherstellen, dass wir beispielsweise pr\u00e4zise eine <code>list</code>e von <code>str</code>s mit den Scopes und einen <code>str</code> mit dem <code>username</code> haben.</p> <p>Anstelle beispielsweise eines <code>dict</code>s oder etwas anderem, was sp\u00e4ter in der Anwendung zu Fehlern f\u00fchren k\u00f6nnte und darum ein Sicherheitsrisiko darstellt.</p> <p>Wir verifizieren auch, dass wir einen Benutzer mit diesem Benutzernamen haben, und wenn nicht, l\u00f6sen wir dieselbe Exception aus, die wir zuvor erstellt haben.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#die-scopes-verifizieren","title":"Die <code>scopes</code> verifizieren","text":"<p>Wir \u00fcberpr\u00fcfen nun, ob das empfangenen Token alle Scopes enth\u00e4lt, die von dieser Abh\u00e4ngigkeit und deren Verwendern (einschlie\u00dflich Pfadoperationen) gefordert werden. Andernfalls l\u00f6sen wir eine <code>HTTPException</code> aus.</p> <p>Hierzu verwenden wir <code>security_scopes.scopes</code>, das eine <code>list</code>e mit allen diesen Scopes als <code>str</code> enth\u00e4lt.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#abhangigkeitsbaum-und-scopes","title":"Abh\u00e4ngigkeitsbaum und Scopes","text":"<p>Sehen wir uns diesen Abh\u00e4ngigkeitsbaum und die Scopes noch einmal an.</p> <p>Da die Abh\u00e4ngigkeit <code>get_current_active_user</code> von <code>get_current_user</code> abh\u00e4ngt, wird der bei <code>get_current_active_user</code> deklarierte Scope <code>\"me\"</code> in die Liste der erforderlichen Scopes in <code>security_scopes.scopes</code> aufgenommen, das an <code>get_current_user</code> \u00fcbergeben wird.</p> <p>Die Pfadoperation selbst deklariert auch einen Scope, <code>\"items\"</code>, sodass dieser auch in der Liste der <code>security_scopes.scopes</code> enthalten ist, die an <code>get_current_user</code> \u00fcbergeben wird.</p> <p>So sieht die Hierarchie der Abh\u00e4ngigkeiten und Scopes aus:</p> <ul> <li>Die Pfadoperation <code>read_own_items</code> hat:<ul> <li>Erforderliche Scopes <code>[\"items\"]</code> mit der Abh\u00e4ngigkeit:</li> <li><code>get_current_active_user</code>:<ul> <li>Die Abh\u00e4ngigkeitsfunktion <code>get_current_active_user</code> hat:<ul> <li>Erforderliche Scopes <code>[\"me\"]</code> mit der Abh\u00e4ngigkeit:</li> <li><code>get_current_user</code>:<ul> <li>Die Abh\u00e4ngigkeitsfunktion <code>get_current_user</code> hat:<ul> <li>Selbst keine erforderlichen Scopes.</li> <li>Eine Abh\u00e4ngigkeit, die <code>oauth2_scheme</code> verwendet.</li> <li>Einen <code>security_scopes</code>-Parameter vom Typ <code>SecurityScopes</code>:<ul> <li>Dieser <code>security_scopes</code>-Parameter hat ein Attribut <code>scopes</code> mit einer <code>list</code>e, die alle oben deklarierten Scopes enth\u00e4lt, sprich:<ul> <li><code>security_scopes.scopes</code> enth\u00e4lt <code>[\"me\", \"items\"]</code> f\u00fcr die Pfadoperation <code>read_own_items</code>.</li> <li><code>security_scopes.scopes</code> enth\u00e4lt <code>[\"me\"]</code> f\u00fcr die Pfadoperation <code>read_users_me</code>, da das in der Abh\u00e4ngigkeit <code>get_current_active_user</code> deklariert ist.</li> <li><code>security_scopes.scopes</code> wird <code>[]</code> (nichts) f\u00fcr die Pfadoperation <code>read_system_status</code> enthalten, da diese keine <code>Security</code> mit <code>scopes</code> deklariert hat, und deren Abh\u00e4ngigkeit <code>get_current_user</code> ebenfalls keinerlei <code>scopes</code> deklariert.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tipp</p> <p>Das Wichtige und \u201eMagische\u201c hier ist, dass <code>get_current_user</code> f\u00fcr jede Pfadoperation eine andere Liste von <code>scopes</code> hat, die \u00fcberpr\u00fcft werden.</p> <p>Alles h\u00e4ngt von den \u201eScopes\u201c ab, die in jeder Pfadoperation und jeder Abh\u00e4ngigkeit im Abh\u00e4ngigkeitsbaum f\u00fcr diese bestimmte Pfadoperation deklariert wurden.</p>"},{"location":"advanced/security/oauth2-scopes/#weitere-details-zu-securityscopes","title":"Weitere Details zu <code>SecurityScopes</code>.","text":"<p>Sie k\u00f6nnen <code>SecurityScopes</code> an jeder Stelle und an mehreren Stellen verwenden, es muss sich nicht in der \u201eWurzel\u201c-Abh\u00e4ngigkeit befinden.</p> <p>Es wird immer die Sicherheits-Scopes enthalten, die in den aktuellen <code>Security</code>-Abh\u00e4ngigkeiten deklariert sind und in allen Abh\u00e4ngigkeiten f\u00fcr diese spezifische Pfadoperation und diesen spezifischen Abh\u00e4ngigkeitsbaum.</p> <p>Da die <code>SecurityScopes</code> alle von den Verwendern der Abh\u00e4ngigkeiten deklarierten Scopes enthalten, k\u00f6nnen Sie damit \u00fcberpr\u00fcfen, ob ein Token in einer zentralen Abh\u00e4ngigkeitsfunktion \u00fcber die erforderlichen Scopes verf\u00fcgt, und dann unterschiedliche Scope-Anforderungen in unterschiedlichen Pfadoperationen deklarieren.</p> <p>Diese werden f\u00fcr jede Pfadoperation unabh\u00e4ngig \u00fcberpr\u00fcft.</p>"},{"location":"advanced/security/oauth2-scopes/#testen-sie-es","title":"Testen Sie es","text":"<p>Wenn Sie die API-Dokumentation \u00f6ffnen, k\u00f6nnen Sie sich authentisieren und angeben, welche Scopes Sie autorisieren m\u00f6chten.</p> <p></p> <p>Wenn Sie keinen Scope ausw\u00e4hlen, werden Sie \u201eauthentifiziert\u201c, aber wenn Sie versuchen, auf <code>/users/me/</code> oder <code>/users/me/items/</code> zuzugreifen, wird eine Fehlermeldung angezeigt, die sagt, dass Sie nicht \u00fcber gen\u00fcgend Berechtigungen verf\u00fcgen. Sie k\u00f6nnen aber auf <code>/status/</code> zugreifen.</p> <p>Und wenn Sie den Scope <code>me</code>, aber nicht den Scope <code>items</code> ausw\u00e4hlen, k\u00f6nnen Sie auf <code>/users/me/</code> zugreifen, aber nicht auf <code>/users/me/items/</code>.</p> <p>Das w\u00fcrde einer Drittanbieteranwendung passieren, die versucht, auf eine dieser Pfadoperationen mit einem Token zuzugreifen, das von einem Benutzer bereitgestellt wurde, abh\u00e4ngig davon, wie viele Berechtigungen der Benutzer dieser Anwendung erteilt hat.</p>"},{"location":"advanced/security/oauth2-scopes/#uber-integrationen-von-drittanbietern","title":"\u00dcber Integrationen von Drittanbietern","text":"<p>In diesem Beispiel verwenden wir den OAuth2-Flow \u201ePassword\u201c.</p> <p>Das ist angemessen, wenn wir uns bei unserer eigenen Anwendung anmelden, wahrscheinlich mit unserem eigenen Frontend.</p> <p>Weil wir darauf vertrauen k\u00f6nnen, dass es den <code>username</code> und das <code>password</code> erh\u00e4lt, welche wir kontrollieren.</p> <p>Wenn Sie jedoch eine OAuth2-Anwendung erstellen, mit der andere eine Verbindung herstellen w\u00fcrden (d.h. wenn Sie einen Authentifizierungsanbieter erstellen, der Facebook, Google, GitHub usw. entspricht), sollten Sie einen der anderen Flows verwenden.</p> <p>Am h\u00e4ufigsten ist der \u201eImplicit\u201c-Flow.</p> <p>Am sichersten ist der \u201eCode\u201c-Flow, die Implementierung ist jedoch komplexer, da mehr Schritte erforderlich sind. Da er komplexer ist, schlagen viele Anbieter letztendlich den \u201eImplicit\u201c-Flow vor.</p> <p>Hinweis</p> <p>Es ist \u00fcblich, dass jeder Authentifizierungsanbieter seine Flows anders benennt, um sie zu einem Teil seiner Marke zu machen.</p> <p>Aber am Ende implementieren sie denselben OAuth2-Standard.</p> <p>ReadyAPI enth\u00e4lt Werkzeuge f\u00fcr alle diese OAuth2-Authentifizierungs-Flows in <code>readyapi.security.oauth2</code>.</p>"},{"location":"advanced/security/oauth2-scopes/#security-in-dekorator-dependencies","title":"<code>Security</code> in Dekorator-<code>dependencies</code>","text":"<p>Auf die gleiche Weise k\u00f6nnen Sie eine <code>list</code>e von <code>Depends</code> im Parameter <code>dependencies</code> des Dekorators definieren (wie in Abh\u00e4ngigkeiten in Pfadoperation-Dekoratoren erl\u00e4utert), Sie k\u00f6nnten auch dort <code>Security</code> mit <code>scopes</code> verwenden.</p>"},{"location":"deployment/","title":"Deployment","text":"<p>Das Deployment einer ReadyAPI-Anwendung ist relativ einfach.</p>"},{"location":"deployment/#was-bedeutet-deployment","title":"Was bedeutet Deployment?","text":"<p>Deployment (Deutsch etwa: Bereitstellen der Anwendung) bedeutet, die notwendigen Schritte durchzuf\u00fchren, um die Anwendung f\u00fcr die Endbenutzer verf\u00fcgbar zu machen.</p> <p>Bei einer Web-API bedeutet das normalerweise, diese auf einem entfernten Rechner zu platzieren, mit einem Serverprogramm, welches gute Leistung, Stabilit\u00e4t, usw. bietet, damit Ihre Benutzer auf die Anwendung effizient und ohne Unterbrechungen oder Probleme zugreifen k\u00f6nnen.</p> <p>Das steht im Gegensatz zu den Entwicklungsphasen, in denen Sie st\u00e4ndig den Code \u00e4ndern, kaputt machen, reparieren, den Entwicklungsserver stoppen und neu starten, usw.</p>"},{"location":"deployment/#deployment-strategien","title":"Deployment-Strategien","text":"<p>Abh\u00e4ngig von Ihrem spezifischen Anwendungsfall und den von Ihnen verwendeten Tools gibt es mehrere M\u00f6glichkeiten, das zu tun.</p> <p>Sie k\u00f6nnten mithilfe einer Kombination von Tools selbst einen Server bereitstellen, Sie k\u00f6nnten einen Cloud-Dienst nutzen, der einen Teil der Arbeit f\u00fcr Sie erledigt, oder andere m\u00f6gliche Optionen.</p> <p>Ich zeige Ihnen einige der wichtigsten Konzepte, die Sie beim Deployment einer ReadyAPI-Anwendung wahrscheinlich ber\u00fccksichtigen sollten (obwohl das meiste davon auch f\u00fcr jede andere Art von Webanwendung gilt).</p> <p>In den n\u00e4chsten Abschnitten erfahren Sie mehr \u00fcber die zu beachtenden Details und \u00fcber die Techniken, das zu tun. \u2728</p>"},{"location":"deployment/cloud/","title":"ReadyAPI-Deployment bei Cloud-Anbietern","text":"<p>Sie k\u00f6nnen praktisch jeden Cloud-Anbieter f\u00fcr das Deployment Ihrer ReadyAPI-Anwendung verwenden.</p> <p>In den meisten F\u00e4llen verf\u00fcgen die Haupt-Cloud-Anbieter \u00fcber Anleitungen zum Deployment von ReadyAPI.</p>"},{"location":"deployment/cloud/#cloud-anbieter-sponsoren","title":"Cloud-Anbieter \u2013 Sponsoren","text":"<p>Einige Cloud-Anbieter \u2728 sponsern ReadyAPI \u2728, dies gew\u00e4hrleistet die kontinuierliche und gesunde Entwicklung von ReadyAPI und seinem \u00d6kosystem.</p> <p>Und es zeigt deren wahres Engagement f\u00fcr ReadyAPI und seine Community (Sie), da diese Ihnen nicht nur einen guten Service bieten m\u00f6chten, sondern auch sicherstellen m\u00f6chten, dass Sie \u00fcber ein gutes und gesundes Framework verf\u00fcgen, ReadyAPI. \ud83d\ude47</p> <p>Vielleicht m\u00f6chten Sie deren Dienste ausprobieren und deren Anleitungen folgen:</p> <ul> <li>Platform.sh</li> <li>Porter</li> <li>Coherence</li> </ul>"},{"location":"deployment/concepts/","title":"Deployment-Konzepte","text":"<p>Bei dem Deployment \u2013 der Bereitstellung \u2013 einer ReadyAPI-Anwendung, oder eigentlich jeder Art von Web-API, gibt es mehrere Konzepte, die Sie wahrscheinlich interessieren, und mithilfe der Sie die am besten geeignete Methode zur Bereitstellung Ihrer Anwendung finden k\u00f6nnen.</p> <p>Einige wichtige Konzepte sind:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul> <p>Wir werden sehen, wie diese sich auf das Deployment auswirken.</p> <p>Letztendlich besteht das ultimative Ziel darin, Ihre API-Clients auf sichere Weise zu bedienen, um Unterbrechungen zu vermeiden und die Rechenressourcen (z. B. entfernte Server/virtuelle Maschinen) so effizient wie m\u00f6glich zu nutzen. \ud83d\ude80</p> <p>Ich erz\u00e4hle Ihnen hier etwas mehr \u00fcber diese Konzepte, was Ihnen hoffentlich die Intuition gibt, die Sie ben\u00f6tigen, um zu entscheiden, wie Sie Ihre API in sehr unterschiedlichen Umgebungen bereitstellen, m\u00f6glicherweise sogar in zuk\u00fcnftigen, die jetzt noch nicht existieren.</p> <p>Durch die Ber\u00fccksichtigung dieser Konzepte k\u00f6nnen Sie die beste Variante der Bereitstellung Ihrer eigenen APIs evaluieren und konzipieren.</p> <p>In den n\u00e4chsten Kapiteln werde ich Ihnen mehr konkrete Rezepte f\u00fcr die Bereitstellung von ReadyAPI-Anwendungen geben.</p> <p>Aber schauen wir uns zun\u00e4chst einmal diese grundlegenden konzeptionellen Ideen an. Diese Konzepte gelten auch f\u00fcr jede andere Art von Web-API. \ud83d\udca1</p>"},{"location":"deployment/concepts/#sicherheit-https","title":"Sicherheit \u2013 HTTPS","text":"<p>Im vorherigen Kapitel \u00fcber HTTPS haben wir erfahren, wie HTTPS Verschl\u00fcsselung f\u00fcr Ihre API bereitstellt.</p> <p>Wir haben auch gesehen, dass HTTPS normalerweise von einer Komponente au\u00dferhalb Ihres Anwendungsservers bereitgestellt wird, einem TLS-Terminierungsproxy.</p> <p>Und es muss etwas geben, das f\u00fcr die Erneuerung der HTTPS-Zertifikate zust\u00e4ndig ist, es k\u00f6nnte sich um dieselbe Komponente handeln oder um etwas anderes.</p>"},{"location":"deployment/concepts/#beispieltools-fur-https","title":"Beispieltools f\u00fcr HTTPS","text":"<p>Einige der Tools, die Sie als TLS-Terminierungsproxy verwenden k\u00f6nnen, sind:</p> <ul> <li>Traefik<ul> <li>Handhabt automatisch Zertifikat-Erneuerungen \u2728</li> </ul> </li> <li>Caddy<ul> <li>Handhabt automatisch Zertifikat-Erneuerungen \u2728</li> </ul> </li> <li>Nginx<ul> <li>Mit einer externen Komponente wie Certbot f\u00fcr Zertifikat-Erneuerungen</li> </ul> </li> <li>HAProxy<ul> <li>Mit einer externen Komponente wie Certbot f\u00fcr Zertifikat-Erneuerungen</li> </ul> </li> <li>Kubernetes mit einem Ingress Controller wie Nginx<ul> <li>Mit einer externen Komponente wie cert-manager f\u00fcr Zertifikat-Erneuerungen</li> </ul> </li> <li>Es wird intern von einem Cloud-Anbieter als Teil seiner Dienste verwaltet (siehe unten \ud83d\udc47)</li> </ul> <p>Eine andere M\u00f6glichkeit besteht darin, dass Sie einen Cloud-Dienst verwenden, der den gr\u00f6\u00dften Teil der Arbeit \u00fcbernimmt, einschlie\u00dflich der Einrichtung von HTTPS. Er k\u00f6nnte einige Einschr\u00e4nkungen haben oder Ihnen mehr in Rechnung stellen, usw. In diesem Fall m\u00fcssten Sie jedoch nicht selbst einen TLS-Terminierungsproxy einrichten.</p> <p>In den n\u00e4chsten Kapiteln zeige ich Ihnen einige konkrete Beispiele.</p> <p>Die n\u00e4chsten zu ber\u00fccksichtigenden Konzepte drehen sich dann um das Programm, das Ihre eigentliche API ausf\u00fchrt (z. B. Uvicorn).</p>"},{"location":"deployment/concepts/#programm-und-prozess","title":"Programm und Prozess","text":"<p>Wir werden viel \u00fcber den laufenden \u201eProzess\u201c sprechen, daher ist es n\u00fctzlich, Klarheit dar\u00fcber zu haben, was das bedeutet und was der Unterschied zum Wort \u201eProgramm\u201c ist.</p>"},{"location":"deployment/concepts/#was-ist-ein-programm","title":"Was ist ein Programm?","text":"<p>Das Wort Programm wird h\u00e4ufig zur Beschreibung vieler Dinge verwendet:</p> <ul> <li>Der Code, den Sie schreiben, die Python-Dateien.</li> <li>Die Datei, die vom Betriebssystem ausgef\u00fchrt werden kann, zum Beispiel: <code>python</code>, <code>python.exe</code> oder <code>uvicorn</code>.</li> <li>Ein bestimmtes Programm, w\u00e4hrend es auf dem Betriebssystem l\u00e4uft, die CPU nutzt und Dinge im Arbeitsspeicher ablegt. Dies wird auch als Prozess bezeichnet.</li> </ul>"},{"location":"deployment/concepts/#was-ist-ein-prozess","title":"Was ist ein Prozess?","text":"<p>Das Wort Prozess wird normalerweise spezifischer verwendet und bezieht sich nur auf das, was im Betriebssystem ausgef\u00fchrt wird (wie im letzten Punkt oben):</p> <ul> <li>Ein bestimmtes Programm, w\u00e4hrend es auf dem Betriebssystem ausgef\u00fchrt wird.<ul> <li>Dies bezieht sich weder auf die Datei noch auf den Code, sondern speziell auf das, was vom Betriebssystem ausgef\u00fchrt und verwaltet wird.</li> </ul> </li> <li>Jedes Programm, jeder Code kann nur dann Dinge tun, wenn er ausgef\u00fchrt wird, wenn also ein Prozess l\u00e4uft.</li> <li>Der Prozess kann von Ihnen oder vom Betriebssystem terminiert (\u201ebeendet\u201c, \u201egekillt\u201c) werden. An diesem Punkt h\u00f6rt es auf zu laufen/ausgef\u00fchrt zu werden und kann keine Dinge mehr tun.</li> <li>Hinter jeder Anwendung, die Sie auf Ihrem Computer ausf\u00fchren, steckt ein Prozess, jedes laufende Programm, jedes Fenster usw. Und normalerweise laufen viele Prozesse gleichzeitig, w\u00e4hrend ein Computer eingeschaltet ist.</li> <li>Es k\u00f6nnen mehrere Prozesse desselben Programms gleichzeitig ausgef\u00fchrt werden.</li> </ul> <p>Wenn Sie sich den \u201eTask-Manager\u201c oder \u201eSystemmonitor\u201c (oder \u00e4hnliche Tools) in Ihrem Betriebssystem ansehen, k\u00f6nnen Sie viele dieser laufenden Prozesse sehen.</p> <p>Und Sie werden beispielsweise wahrscheinlich feststellen, dass mehrere Prozesse dasselbe Browserprogramm ausf\u00fchren (Firefox, Chrome, Edge, usw.). Normalerweise f\u00fchren diese einen Prozess pro Browsertab sowie einige andere zus\u00e4tzliche Prozesse aus.</p> <p></p> <p>Nachdem wir nun den Unterschied zwischen den Begriffen Prozess und Programm kennen, sprechen wir weiter \u00fcber das Deployment.</p>"},{"location":"deployment/concepts/#beim-hochfahren-ausfuhren","title":"Beim Hochfahren ausf\u00fchren","text":"<p>Wenn Sie eine Web-API erstellen, m\u00f6chten Sie in den meisten F\u00e4llen, dass diese immer l\u00e4uft, ununterbrochen, damit Ihre Clients immer darauf zugreifen k\u00f6nnen. Es sei denn nat\u00fcrlich, Sie haben einen bestimmten Grund, warum Sie m\u00f6chten, dass diese nur in bestimmten Situationen ausgef\u00fchrt wird. Meistens m\u00f6chten Sie jedoch, dass sie st\u00e4ndig ausgef\u00fchrt wird und verf\u00fcgbar ist.</p>"},{"location":"deployment/concepts/#auf-einem-entfernten-server","title":"Auf einem entfernten Server","text":"<p>Wenn Sie einen entfernten Server (einen Cloud-Server, eine virtuelle Maschine, usw.) einrichten, k\u00f6nnen Sie am einfachsten Uvicorn (oder \u00e4hnliches) manuell ausf\u00fchren, genau wie bei der lokalen Entwicklung.</p> <p>Und es wird funktionieren und w\u00e4hrend der Entwicklung n\u00fctzlich sein.</p> <p>Wenn Ihre Verbindung zum Server jedoch unterbrochen wird, wird der laufende Prozess wahrscheinlich abst\u00fcrzen.</p> <p>Und wenn der Server neu gestartet wird (z. B. nach Updates oder Migrationen vom Cloud-Anbieter), werden Sie das wahrscheinlich nicht bemerken. Und deshalb wissen Sie nicht einmal, dass Sie den Prozess manuell neu starten m\u00fcssen. Ihre API bleibt also einfach tot. \ud83d\ude31</p>"},{"location":"deployment/concepts/#beim-hochfahren-automatisch-ausfuhren","title":"Beim Hochfahren automatisch ausf\u00fchren","text":"<p>Im Allgemeinen m\u00f6chten Sie wahrscheinlich, dass das Serverprogramm (z. B. Uvicorn) beim Hochfahren des Servers automatisch gestartet wird und kein menschliches Eingreifen erforderlich ist, sodass immer ein Prozess mit Ihrer API ausgef\u00fchrt wird (z. B. Uvicorn, welches Ihre ReadyAPI-Anwendung ausf\u00fchrt).</p>"},{"location":"deployment/concepts/#separates-programm","title":"Separates Programm","text":"<p>Um dies zu erreichen, haben Sie normalerweise ein separates Programm, welches sicherstellt, dass Ihre Anwendung beim Hochfahren ausgef\u00fchrt wird. Und in vielen F\u00e4llen w\u00fcrde es auch sicherstellen, dass auch andere Komponenten oder Anwendungen ausgef\u00fchrt werden, beispielsweise eine Datenbank.</p>"},{"location":"deployment/concepts/#beispieltools-zur-ausfuhrung-beim-hochfahren","title":"Beispieltools zur Ausf\u00fchrung beim Hochfahren","text":"<p>Einige Beispiele f\u00fcr Tools, die diese Aufgabe \u00fcbernehmen k\u00f6nnen, sind:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker im Schwarm-Modus</li> <li>Systemd</li> <li>Supervisor</li> <li>Es wird intern von einem Cloud-Anbieter im Rahmen seiner Dienste verwaltet</li> <li>Andere ...</li> </ul> <p>In den n\u00e4chsten Kapiteln werde ich Ihnen konkretere Beispiele geben.</p>"},{"location":"deployment/concepts/#neustart","title":"Neustart","text":"<p>\u00c4hnlich wie Sie sicherstellen m\u00f6chten, dass Ihre Anwendung beim Hochfahren ausgef\u00fchrt wird, m\u00f6chten Sie wahrscheinlich auch sicherstellen, dass diese nach Fehlern neu gestartet wird.</p>"},{"location":"deployment/concepts/#wir-machen-fehler","title":"Wir machen Fehler","text":"<p>Wir, als Menschen, machen st\u00e4ndig Fehler. Software hat fast immer Bugs, die an verschiedenen Stellen versteckt sind. \ud83d\udc1b</p> <p>Und wir als Entwickler verbessern den Code st\u00e4ndig, wenn wir diese Bugs finden und neue Funktionen implementieren (und m\u00f6glicherweise auch neue Bugs hinzuf\u00fcgen \ud83d\ude05).</p>"},{"location":"deployment/concepts/#kleine-fehler-automatisch-handhaben","title":"Kleine Fehler automatisch handhaben","text":"<p>Wenn beim Erstellen von Web-APIs mit ReadyAPI ein Fehler in unserem Code auftritt, wird ReadyAPI ihn normalerweise dem einzelnen Request zur\u00fcckgeben, der den Fehler ausgel\u00f6st hat. \ud83d\udee1</p> <p>Der Client erh\u00e4lt f\u00fcr diesen Request einen 500 Internal Server Error, aber die Anwendung arbeitet bei den n\u00e4chsten Requests weiter, anstatt einfach komplett abzust\u00fcrzen.</p>"},{"location":"deployment/concepts/#groere-fehler-absturze","title":"Gr\u00f6\u00dfere Fehler \u2013 Abst\u00fcrze","text":"<p>Dennoch kann es vorkommen, dass wir Code schreiben, der die gesamte Anwendung zum Absturz bringt und so zum Absturz von Uvicorn und Python f\u00fchrt. \ud83d\udca5</p> <p>Und dennoch m\u00f6chten Sie wahrscheinlich nicht, dass die Anwendung tot bleibt, weil an einer Stelle ein Fehler aufgetreten ist. Sie m\u00f6chten wahrscheinlich, dass sie zumindest f\u00fcr die Pfadoperationen, die nicht fehlerhaft sind, weiterl\u00e4uft.</p>"},{"location":"deployment/concepts/#neustart-nach-absturz","title":"Neustart nach Absturz","text":"<p>Aber in den F\u00e4llen mit wirklich schwerwiegenden Fehlern, die den laufenden Prozess zum Absturz bringen, ben\u00f6tigen Sie eine externe Komponente, die den Prozess neu startet, zumindest ein paar Mal ...</p> <p>Tipp</p> <p>... Obwohl es wahrscheinlich keinen Sinn macht, sie immer wieder neu zu starten, wenn die gesamte Anwendung einfach sofort abst\u00fcrzt. Aber in diesen F\u00e4llen werden Sie es wahrscheinlich w\u00e4hrend der Entwicklung oder zumindest direkt nach dem Deployment bemerken.</p> <p>Konzentrieren wir uns also auf die Hauptf\u00e4lle, in denen die Anwendung in bestimmten F\u00e4llen in der Zukunft v\u00f6llig abst\u00fcrzen k\u00f6nnte und es dann dennoch sinnvoll ist, sie neu zu starten.</p> <p>Sie m\u00f6chten wahrscheinlich, dass eine externe Komponente f\u00fcr den Neustart Ihrer Anwendung verantwortlich ist, da zu diesem Zeitpunkt dieselbe Anwendung mit Uvicorn und Python bereits abgest\u00fcrzt ist und es daher nichts im selben Code derselben Anwendung gibt, was etwas dagegen tun kann.</p>"},{"location":"deployment/concepts/#beispieltools-zum-automatischen-neustart","title":"Beispieltools zum automatischen Neustart","text":"<p>In den meisten F\u00e4llen wird dasselbe Tool, das zum Ausf\u00fchren des Programms beim Hochfahren verwendet wird, auch f\u00fcr automatische Neustarts verwendet.</p> <p>Dies k\u00f6nnte zum Beispiel erledigt werden durch:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker im Schwarm-Modus</li> <li>Systemd</li> <li>Supervisor</li> <li>Intern von einem Cloud-Anbieter im Rahmen seiner Dienste</li> <li>Andere ...</li> </ul>"},{"location":"deployment/concepts/#replikation-prozesse-und-arbeitsspeicher","title":"Replikation \u2013 Prozesse und Arbeitsspeicher","text":"<p>Wenn Sie eine ReadyAPI-Anwendung verwenden und ein Serverprogramm wie Uvicorn verwenden, kann ein einzelner Prozess mehrere Clients gleichzeitig bedienen.</p> <p>In vielen F\u00e4llen m\u00f6chten Sie jedoch mehrere Prozesse gleichzeitig ausf\u00fchren.</p>"},{"location":"deployment/concepts/#mehrere-prozesse-worker","title":"Mehrere Prozesse \u2013 Worker","text":"<p>Wenn Sie mehr Clients haben, als ein einzelner Prozess verarbeiten kann (z. B. wenn die virtuelle Maschine nicht sehr gro\u00df ist) und die CPU des Servers mehrere Kerne hat, dann k\u00f6nnten mehrere Prozesse gleichzeitig mit derselben Anwendung laufen und alle Requests unter sich verteilen.</p> <p>Wenn Sie mit mehreren Prozessen dasselbe API-Programm ausf\u00fchren, werden diese \u00fcblicherweise als Worker bezeichnet.</p>"},{"location":"deployment/concepts/#workerprozesse-und-ports","title":"Workerprozesse und Ports","text":"<p>Erinnern Sie sich aus der Dokumentation \u00dcber HTTPS, dass nur ein Prozess auf einer Kombination aus Port und IP-Adresse auf einem Server lauschen kann?</p> <p>Das ist immer noch wahr.</p> <p>Um also mehrere Prozesse gleichzeitig zu haben, muss es einen einzelnen Prozess geben, der einen Port \u00fcberwacht, welcher dann die Kommunikation auf irgendeine Weise an jeden Workerprozess \u00fcbertr\u00e4gt.</p>"},{"location":"deployment/concepts/#arbeitsspeicher-pro-prozess","title":"Arbeitsspeicher pro Prozess","text":"<p>Wenn das Programm nun Dinge in den Arbeitsspeicher l\u00e4dt, zum Beispiel ein Modell f\u00fcr maschinelles Lernen in einer Variablen oder den Inhalt einer gro\u00dfen Datei in einer Variablen, verbraucht das alles einen Teil des Arbeitsspeichers (RAM \u2013 Random Access Memory) des Servers.</p> <p>Und mehrere Prozesse teilen sich normalerweise keinen Speicher. Das bedeutet, dass jeder laufende Prozess seine eigenen Dinge, eigenen Variablen und eigenen Speicher hat. Und wenn Sie in Ihrem Code viel Speicher verbrauchen, verbraucht jeder Prozess die gleiche Menge Speicher.</p>"},{"location":"deployment/concepts/#serverspeicher","title":"Serverspeicher","text":"<p>Wenn Ihr Code beispielsweise ein Machine-Learning-Modell mit 1 GB Gr\u00f6\u00dfe l\u00e4dt und Sie einen Prozess mit Ihrer API ausf\u00fchren, verbraucht dieser mindestens 1 GB RAM. Und wenn Sie 4 Prozesse (4 Worker) starten, verbraucht jeder 1 GB RAM. Insgesamt verbraucht Ihre API also 4 GB RAM.</p> <p>Und wenn Ihr entfernter Server oder Ihre virtuelle Maschine nur \u00fcber 3 GB RAM verf\u00fcgt, f\u00fchrt der Versuch, mehr als 4 GB RAM zu laden, zu Problemen. \ud83d\udea8</p>"},{"location":"deployment/concepts/#mehrere-prozesse-ein-beispiel","title":"Mehrere Prozesse \u2013 Ein Beispiel","text":"<p>Im folgenden Beispiel gibt es einen Manager-Prozess, welcher zwei Workerprozesse startet und steuert.</p> <p>Dieser Manager-Prozess w\u00e4re wahrscheinlich derjenige, welcher der IP am Port lauscht. Und er w\u00fcrde die gesamte Kommunikation an die Workerprozesse weiterleiten.</p> <p>Diese Workerprozesse w\u00fcrden Ihre Anwendung ausf\u00fchren, sie w\u00fcrden die Hauptberechnungen durchf\u00fchren, um einen Request entgegenzunehmen und eine Response zur\u00fcckzugeben, und sie w\u00fcrden alles, was Sie in Variablen einf\u00fcgen, in den RAM laden.</p> <p></p> <p>Und nat\u00fcrlich w\u00fcrden auf derselben Maschine neben Ihrer Anwendung wahrscheinlich auch andere Prozesse laufen.</p> <p>Ein interessantes Detail ist dabei, dass der Prozentsatz der von jedem Prozess verwendeten CPU im Laufe der Zeit stark variieren kann, der Arbeitsspeicher (RAM) jedoch normalerweise mehr oder weniger stabil bleibt.</p> <p>Wenn Sie eine API haben, die jedes Mal eine vergleichbare Menge an Berechnungen durchf\u00fchrt, und Sie viele Clients haben, dann wird die CPU-Auslastung wahrscheinlich ebenfalls stabil sein (anstatt st\u00e4ndig schnell zu steigen und zu fallen).</p>"},{"location":"deployment/concepts/#beispiele-fur-replikation-tools-und-strategien","title":"Beispiele f\u00fcr Replikation-Tools und -Strategien","text":"<p>Es gibt mehrere Ans\u00e4tze, um dies zu erreichen, und ich werde Ihnen in den n\u00e4chsten Kapiteln mehr \u00fcber bestimmte Strategien erz\u00e4hlen, beispielsweise wenn es um Docker und Container geht.</p> <p>Die wichtigste zu ber\u00fccksichtigende Einschr\u00e4nkung besteht darin, dass es eine einzelne Komponente geben muss, welche die \u00f6ffentliche IP auf dem Port verwaltet. Und dann muss diese irgendwie die Kommunikation weiterleiten, an die replizierten Prozesse/Worker.</p> <p>Hier sind einige m\u00f6gliche Kombinationen und Strategien:</p> <ul> <li>Gunicorn, welches Uvicorn-Worker managt<ul> <li>Gunicorn w\u00e4re der Prozessmanager, der die IP und den Port \u00fcberwacht, die Replikation w\u00fcrde durch mehrere Uvicorn-Workerprozesse erfolgen</li> </ul> </li> <li>Uvicorn, welches Uvicorn-Worker managt<ul> <li>Ein Uvicorn-Prozessmanager w\u00fcrde der IP am Port lauschen, und er w\u00fcrde mehrere Uvicorn-Workerprozesse starten.</li> </ul> </li> <li>Kubernetes und andere verteilte Containersysteme<ul> <li>Etwas in der Kubernetes-Ebene w\u00fcrde die IP und den Port abh\u00f6ren. Die Replikation h\u00e4tte mehrere Container, in jedem wird jeweils ein Uvicorn-Prozess ausgef\u00fchrt.</li> </ul> </li> <li>Cloud-Dienste, welche das f\u00fcr Sie erledigen<ul> <li>Der Cloud-Dienst wird wahrscheinlich die Replikation f\u00fcr Sie \u00fcbernehmen. Er w\u00fcrde Sie m\u00f6glicherweise einen auszuf\u00fchrenden Prozess oder ein zu verwendendes Container-Image definieren lassen, in jedem Fall w\u00e4re es h\u00f6chstwahrscheinlich ein einzelner Uvicorn-Prozess, und der Cloud-Dienst w\u00e4re auch verantwortlich f\u00fcr die Replikation.</li> </ul> </li> </ul> <p>Tipp</p> <p>Machen Sie sich keine Sorgen, wenn einige dieser Punkte zu Containern, Docker oder Kubernetes noch nicht viel Sinn ergeben.</p> <p>Ich werde Ihnen in einem zuk\u00fcnftigen Kapitel mehr \u00fcber Container-Images, Docker, Kubernetes, usw. erz\u00e4hlen: ReadyAPI in Containern \u2013 Docker.</p>"},{"location":"deployment/concepts/#schritte-vor-dem-start","title":"Schritte vor dem Start","text":"<p>Es gibt viele F\u00e4lle, in denen Sie, bevor Sie Ihre Anwendung starten, einige Schritte ausf\u00fchren m\u00f6chten.</p> <p>Beispielsweise m\u00f6chten Sie m\u00f6glicherweise Datenbankmigrationen ausf\u00fchren.</p> <p>In den meisten F\u00e4llen m\u00f6chten Sie diese Schritte jedoch nur einmal ausf\u00fchren.</p> <p>Sie m\u00f6chten also einen einzelnen Prozess haben, um diese Vorab-Schritte auszuf\u00fchren, bevor Sie die Anwendung starten.</p> <p>Und Sie m\u00fcssen sicherstellen, dass es sich um einen einzelnen Prozess handelt, der die Vorab-Schritte ausf\u00fchrt, auch wenn Sie anschlie\u00dfend mehrere Prozesse (mehrere Worker) f\u00fcr die Anwendung selbst starten. Wenn diese Schritte von mehreren Prozessen ausgef\u00fchrt w\u00fcrden, w\u00fcrden diese die Arbeit verdoppeln, indem sie sie parallel ausf\u00fchren, und wenn es sich bei den Schritten um etwas Delikates wie eine Datenbankmigration handelt, k\u00f6nnte das miteinander Konflikte verursachen.</p> <p>Nat\u00fcrlich gibt es F\u00e4lle, in denen es kein Problem darstellt, die Vorab-Schritte mehrmals auszuf\u00fchren. In diesem Fall ist die Handhabung viel einfacher.</p> <p>Tipp</p> <p>Bedenken Sie au\u00dferdem, dass Sie, abh\u00e4ngig von Ihrer Einrichtung, in manchen F\u00e4llen gar keine Vorab-Schritte ben\u00f6tigen, bevor Sie die Anwendung starten.</p> <p>In diesem Fall m\u00fcssen Sie sich dar\u00fcber keine Sorgen machen. \ud83e\udd37</p>"},{"location":"deployment/concepts/#beispiele-fur-strategien-fur-vorab-schritte","title":"Beispiele f\u00fcr Strategien f\u00fcr Vorab-Schritte","text":"<p>Es h\u00e4ngt stark davon ab, wie Sie Ihr System bereitstellen, und h\u00e4ngt wahrscheinlich mit der Art und Weise zusammen, wie Sie Programme starten, Neustarts durchf\u00fchren, usw.</p> <p>Hier sind einige m\u00f6gliche Ideen:</p> <ul> <li>Ein \u201eInit-Container\u201c in Kubernetes, der vor Ihrem Anwendungs-Container ausgef\u00fchrt wird</li> <li>Ein Bash-Skript, das die Vorab-Schritte ausf\u00fchrt und dann Ihre Anwendung startet<ul> <li>Sie ben\u00f6tigen immer noch eine M\u00f6glichkeit, dieses Bash-Skript zu starten/neu zu starten, Fehler zu erkennen, usw.</li> </ul> </li> </ul> <p>Tipp</p> <p>Konkretere Beispiele hierf\u00fcr mit Containern gebe ich Ihnen in einem sp\u00e4teren Kapitel: ReadyAPI in Containern \u2013 Docker.</p>"},{"location":"deployment/concepts/#ressourcennutzung","title":"Ressourcennutzung","text":"<p>Ihr(e) Server ist (sind) eine Ressource, welche Sie mit Ihren Programmen, der Rechenzeit auf den CPUs und dem verf\u00fcgbaren RAM-Speicher verbrauchen oder nutzen k\u00f6nnen.</p> <p>Wie viele Systemressourcen m\u00f6chten Sie verbrauchen/nutzen? Sie m\u00f6gen \u201enicht viel\u201c denken, aber in Wirklichkeit m\u00f6chten Sie tats\u00e4chlich so viel wie m\u00f6glich ohne Absturz verwenden.</p> <p>Wenn Sie f\u00fcr drei Server bezahlen, aber nur wenig von deren RAM und CPU nutzen, verschwenden Sie wahrscheinlich Geld \ud83d\udcb8 und wahrscheinlich Strom f\u00fcr den Server \ud83c\udf0e, usw.</p> <p>In diesem Fall k\u00f6nnte es besser sein, nur zwei Server zu haben und einen h\u00f6heren Prozentsatz von deren Ressourcen zu nutzen (CPU, Arbeitsspeicher, Festplatte, Netzwerkbandbreite, usw.).</p> <p>Wenn Sie andererseits \u00fcber zwei Server verf\u00fcgen und 100 % ihrer CPU und ihres RAM nutzen, wird irgendwann ein Prozess nach mehr Speicher fragen und der Server muss die Festplatte als \u201eSpeicher\u201c verwenden (was tausendmal langsamer sein kann) oder er k\u00f6nnte sogar abst\u00fcrzen. Oder ein Prozess muss m\u00f6glicherweise einige Berechnungen durchf\u00fchren und m\u00fcsste warten, bis die CPU wieder frei ist.</p> <p>In diesem Fall w\u00e4re es besser, einen zus\u00e4tzlichen Server zu besorgen und einige Prozesse darauf auszuf\u00fchren, damit alle \u00fcber genug RAM und CPU-Zeit verf\u00fcgen.</p> <p>Es besteht auch die M\u00f6glichkeit, dass es aus irgendeinem Grund zu Spitzen in der Nutzung Ihrer API kommt. Vielleicht ist diese viral gegangen, oder vielleicht haben andere Dienste oder Bots damit begonnen, sie zu nutzen. Und vielleicht m\u00f6chten Sie in solchen F\u00e4llen \u00fcber zus\u00e4tzliche Ressourcen verf\u00fcgen, um auf der sicheren Seite zu sein.</p> <p>Sie k\u00f6nnen eine beliebige Zahl festlegen, um beispielsweise eine Ressourcenauslastung zwischen 50\u00a0% und 90\u00a0% anzustreben. Der Punkt ist, dass dies wahrscheinlich die wichtigen Dinge sind, die Sie messen und verwenden sollten, um Ihre Deployments zu optimieren.</p> <p>Sie k\u00f6nnen einfache Tools wie <code>htop</code> verwenden, um die in Ihrem Server verwendete CPU und den RAM oder die von jedem Prozess verwendete Menge anzuzeigen. Oder Sie k\u00f6nnen komplexere \u00dcberwachungstools verwenden, die m\u00f6glicherweise auf mehrere Server usw. verteilt sind.</p>"},{"location":"deployment/concepts/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie haben hier einige der wichtigsten Konzepte gelesen, die Sie wahrscheinlich ber\u00fccksichtigen m\u00fcssen, wenn Sie entscheiden, wie Sie Ihre Anwendung bereitstellen:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul> <p>Das Verst\u00e4ndnis dieser Ideen und deren Anwendung sollte Ihnen die n\u00f6tige Intuition vermitteln, um bei der Konfiguration und Optimierung Ihrer Deployments Entscheidungen zu treffen. \ud83e\udd13</p> <p>In den n\u00e4chsten Abschnitten gebe ich Ihnen konkretere Beispiele f\u00fcr m\u00f6gliche Strategien, die Sie verfolgen k\u00f6nnen. \ud83d\ude80</p>"},{"location":"deployment/docker/","title":"ReadyAPI in Containern \u2013 Docker","text":"<p>Beim Deployment von ReadyAPI-Anwendungen besteht ein g\u00e4ngiger Ansatz darin, ein Linux-Containerimage zu erstellen. Normalerweise erfolgt dies mit Docker. Sie k\u00f6nnen dieses Containerimage dann auf eine von mehreren m\u00f6glichen Arten bereitstellen.</p> <p>Die Verwendung von Linux-Containern bietet mehrere Vorteile, darunter Sicherheit, Replizierbarkeit, Einfachheit und andere.</p> <p>Tipp</p> <p>Sie haben es eilig und kennen sich bereits aus? Springen Sie zum <code>Dockerfile</code> unten \ud83d\udc47.</p> Dockerfile-Vorschau \ud83d\udc40 <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n\n# Wenn Sie hinter einem Proxy wie Nginx oder Traefik sind, f\u00fcgen Sie --proxy-headers hinzu\n# CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]\n</code></pre>"},{"location":"deployment/docker/#was-ist-ein-container","title":"Was ist ein Container?","text":"<p>Container (haupts\u00e4chlich Linux-Container) sind eine sehr leichtgewichtige M\u00f6glichkeit, Anwendungen einschlie\u00dflich aller ihrer Abh\u00e4ngigkeiten und erforderlichen Dateien zu verpacken und sie gleichzeitig von anderen Containern (anderen Anwendungen oder Komponenten) im selben System isoliert zu halten.</p> <p>Linux-Container werden mit demselben Linux-Kernel des Hosts (Maschine, virtuellen Maschine, Cloud-Servers, usw.) ausgef\u00fchrt. Das bedeutet einfach, dass sie sehr leichtgewichtig sind (im Vergleich zu vollst\u00e4ndigen virtuellen Maschinen, die ein gesamtes Betriebssystem emulieren).</p> <p>Auf diese Weise verbrauchen Container wenig Ressourcen, eine Menge vergleichbar mit der direkten Ausf\u00fchrung der Prozesse (eine virtuelle Maschine w\u00fcrde viel mehr verbrauchen).</p> <p>Container verf\u00fcgen au\u00dferdem \u00fcber ihre eigenen isoliert laufenden Prozesse (\u00fcblicherweise nur einen Prozess), \u00fcber ihr eigenes Dateisystem und ihr eigenes Netzwerk, was die Bereitstellung, Sicherheit, Entwicklung usw. vereinfacht.</p>"},{"location":"deployment/docker/#was-ist-ein-containerimage","title":"Was ist ein Containerimage?","text":"<p>Ein Container wird von einem Containerimage ausgef\u00fchrt.</p> <p>Ein Containerimage ist eine statische Version aller Dateien, Umgebungsvariablen und des Standardbefehls/-programms, welche in einem Container vorhanden sein sollten. Statisch bedeutet hier, dass das Container-Image nicht l\u00e4uft, nicht ausgef\u00fchrt wird, sondern nur die gepackten Dateien und Metadaten enth\u00e4lt.</p> <p>Im Gegensatz zu einem \u201eContainerimage\u201c, bei dem es sich um den gespeicherten statischen Inhalt handelt, bezieht sich ein \u201eContainer\u201c normalerweise auf die laufende Instanz, das Ding, das ausgef\u00fchrt wird.</p> <p>Wenn der Container gestartet und ausgef\u00fchrt wird (gestartet von einem Containerimage), kann er Dateien, Umgebungsvariablen usw. erstellen oder \u00e4ndern. Diese \u00c4nderungen sind nur in diesem Container vorhanden, nicht im zugrunde liegenden bestehen Containerimage (werden nicht auf der Festplatte gespeichert).</p> <p>Ein Containerimage ist vergleichbar mit der Programmdatei und ihrem Inhalt, z. B. <code>python</code> und eine Datei <code>main.py</code>.</p> <p>Und der Container selbst (im Gegensatz zum Containerimage) ist die tats\u00e4chlich laufende Instanz des Images, vergleichbar mit einem Prozess. Tats\u00e4chlich l\u00e4uft ein Container nur, wenn er einen laufenden Prozess hat (und normalerweise ist es nur ein einzelner Prozess). Der Container stoppt, wenn kein Prozess darin ausgef\u00fchrt wird.</p>"},{"location":"deployment/docker/#containerimages","title":"Containerimages","text":"<p>Docker ist eines der wichtigsten Tools zum Erstellen und Verwalten von Containerimages und Containern.</p> <p>Und es gibt einen \u00f6ffentlichen Docker Hub mit vorgefertigten offiziellen Containerimages f\u00fcr viele Tools, Umgebungen, Datenbanken und Anwendungen.</p> <p>Beispielsweise gibt es ein offizielles Python-Image.</p> <p>Und es gibt viele andere Images f\u00fcr verschiedene Dinge wie Datenbanken, zum Beispiel f\u00fcr:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>MongoDB</li> <li>Redis, usw.</li> </ul> <p>Durch die Verwendung eines vorgefertigten Containerimages ist es sehr einfach, verschiedene Tools zu kombinieren und zu verwenden. Zum Beispiel, um eine neue Datenbank auszuprobieren. In den meisten F\u00e4llen k\u00f6nnen Sie die offiziellen Images verwenden und diese einfach mit Umgebungsvariablen konfigurieren.</p> <p>Auf diese Weise k\u00f6nnen Sie in vielen F\u00e4llen etwas \u00fcber Container und Docker lernen und dieses Wissen mit vielen verschiedenen Tools und Komponenten wiederverwenden.</p> <p>Sie w\u00fcrden also mehrere Container mit unterschiedlichen Dingen ausf\u00fchren, wie einer Datenbank, einer Python-Anwendung, einem Webserver mit einer React-Frontend-Anwendung, und diese \u00fcber ihr internes Netzwerk miteinander verbinden.</p> <p>In alle Containerverwaltungssysteme (wie Docker oder Kubernetes) sind diese Netzwerkfunktionen integriert.</p>"},{"location":"deployment/docker/#container-und-prozesse","title":"Container und Prozesse","text":"<p>Ein Containerimage enth\u00e4lt normalerweise in seinen Metadaten das Standardprogramm oder den Standardbefehl, der ausgef\u00fchrt werden soll, wenn der Container gestartet wird, sowie die Parameter, die an dieses Programm \u00fcbergeben werden sollen. Sehr \u00e4hnlich zu dem, was w\u00e4re, wenn es \u00fcber die Befehlszeile gestartet werden w\u00fcrde.</p> <p>Wenn ein Container gestartet wird, f\u00fchrt er diesen Befehl/dieses Programm aus (Sie k\u00f6nnen ihn jedoch \u00fcberschreiben und einen anderen Befehl/ein anderes Programm ausf\u00fchren lassen).</p> <p>Ein Container l\u00e4uft, solange der Hauptprozess (Befehl oder Programm) l\u00e4uft.</p> <p>Ein Container hat normalerweise einen einzelnen Prozess, aber es ist auch m\u00f6glich, Unterprozesse vom Hauptprozess aus zu starten, und auf diese Weise haben Sie mehrere Prozesse im selben Container.</p> <p>Es ist jedoch nicht m\u00f6glich, einen laufenden Container, ohne mindestens einen laufenden Prozess zu haben. Wenn der Hauptprozess stoppt, stoppt der Container.</p>"},{"location":"deployment/docker/#ein-docker-image-fur-readyapi-erstellen","title":"Ein Docker-Image f\u00fcr ReadyAPI erstellen","text":"<p>Okay, wollen wir jetzt etwas bauen! \ud83d\ude80</p> <p>Ich zeige Ihnen, wie Sie ein Docker-Image f\u00fcr ReadyAPI von Grund auf erstellen, basierend auf dem offiziellen Python-Image.</p> <p>Das ist, was Sie in den meisten F\u00e4llen tun m\u00f6chten, zum Beispiel:</p> <ul> <li>Bei Verwendung von Kubernetes oder \u00e4hnlichen Tools</li> <li>Beim Betrieb auf einem Raspberry Pi</li> <li>Bei Verwendung eines Cloud-Dienstes, der ein Containerimage f\u00fcr Sie ausf\u00fchrt, usw.</li> </ul>"},{"location":"deployment/docker/#paketanforderungen","title":"Paketanforderungen","text":"<p>Normalerweise befinden sich die Paketanforderungen f\u00fcr Ihre Anwendung in einer Datei.</p> <p>Dies h\u00e4ngt haupts\u00e4chlich von dem Tool ab, mit dem Sie diese Anforderungen installieren.</p> <p>Die gebr\u00e4uchlichste Methode besteht darin, eine Datei <code>requirements.txt</code> mit den Namen der Packages und deren Versionen zu erstellen, eine pro Zeile.</p> <p>Sie w\u00fcrden nat\u00fcrlich die gleichen Ideen verwenden, die Sie in \u00dcber ReadyAPI-Versionen gelesen haben, um die Versionsbereiche festzulegen.</p> <p>Ihre <code>requirements.txt</code> k\u00f6nnte beispielsweise so aussehen:</p> <pre><code>readyapi&gt;=0.68.0,&lt;0.69.0\npydantic&gt;=1.8.0,&lt;2.0.0\nuvicorn&gt;=0.15.0,&lt;0.16.0\n</code></pre> <p>Und normalerweise w\u00fcrden Sie diese Paketabh\u00e4ngigkeiten mit <code>pip</code> installieren, zum Beispiel:</p> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\nSuccessfully installed readyapi pydantic uvicorn\n</code></pre> <p>Info</p> <p>Es gibt andere Formate und Tools zum Definieren und Installieren von Paketabh\u00e4ngigkeiten.</p> <p>Ich zeige Ihnen sp\u00e4ter in einem Abschnitt unten ein Beispiel unter Verwendung von Poetry. \ud83d\udc47</p>"},{"location":"deployment/docker/#den-readyapi-code-erstellen","title":"Den ReadyAPI-Code erstellen","text":"<ul> <li>Erstellen Sie ein <code>app</code>-Verzeichnis und betreten Sie es.</li> <li>Erstellen Sie eine leere Datei <code>__init__.py</code>.</li> <li>Erstellen Sie eine <code>main.py</code>-Datei mit:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"deployment/docker/#dockerfile","title":"Dockerfile","text":"<p>Erstellen Sie nun im selben Projektverzeichnis eine Datei <code>Dockerfile</code> mit:</p> <pre><code># (1)\nFROM python:3.9\n\n# (2)\nWORKDIR /code\n\n# (3)\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)\nCOPY ./app /code/app\n\n# (6)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Beginne mit dem offiziellen Python-Basisimage.</p> </li> <li> <p>Setze das aktuelle Arbeitsverzeichnis auf <code>/code</code>.</p> <p>Hier plazieren wir die Datei <code>requirements.txt</code> und das Verzeichnis <code>app</code>.</p> </li> <li> <p>Kopiere die Datei mit den Paketanforderungen in das Verzeichnis <code>/code</code>.</p> <p>Kopieren Sie zuerst nur die Datei mit den Anforderungen, nicht den Rest des Codes.</p> <p>Da sich diese Datei nicht oft \u00e4ndert, erkennt Docker das und verwendet den Cache f\u00fcr diesen Schritt, wodurch der Cache auch f\u00fcr den n\u00e4chsten Schritt aktiviert wird.</p> </li> <li> <p>Installiere die Paketabh\u00e4ngigkeiten aus der Anforderungsdatei.</p> <p>Die Option <code>--no-cache-dir</code> weist <code>pip</code> an, die heruntergeladenen Pakete nicht lokal zu speichern, da dies nur ben\u00f6tigt wird, sollte <code>pip</code> erneut ausgef\u00fchrt werden, um dieselben Pakete zu installieren, aber das ist beim Arbeiten mit Containern nicht der Fall.</p> <p>Hinweis</p> <p>Das <code>--no-cache-dir</code> bezieht sich nur auf <code>pip</code>, es hat nichts mit Docker oder Containern zu tun.</p> <p>Die Option <code>--upgrade</code> weist <code>pip</code> an, die Packages zu aktualisieren, wenn sie bereits installiert sind.</p> <p>Da der vorherige Schritt des Kopierens der Datei vom Docker-Cache erkannt werden konnte, wird dieser Schritt auch den Docker-Cache verwenden, sofern verf\u00fcgbar.</p> <p>Durch die Verwendung des Caches in diesem Schritt sparen Sie viel Zeit, wenn Sie das Image w\u00e4hrend der Entwicklung immer wieder erstellen, anstatt jedes Mal alle Abh\u00e4ngigkeiten herunterzuladen und zu installieren.</p> </li> <li> <p>Kopiere das Verzeichnis <code>./app</code> in das Verzeichnis <code>/code</code>.</p> <p>Da hier der gesamte Code enthalten ist, der sich am h\u00e4ufigsten \u00e4ndert, wird der Docker-Cache nicht ohne weiteres f\u00fcr diesen oder andere folgende Schritte verwendet.</p> <p>Daher ist es wichtig, dies nahe dem Ende des <code>Dockerfile</code>s zu platzieren, um die Erstellungszeiten des Containerimages zu optimieren.</p> </li> <li> <p>Lege den Befehl fest, um den <code>uvicorn</code>-Server zu starten.</p> <p><code>CMD</code> nimmt eine Liste von Zeichenfolgen entgegen. Jede dieser Zeichenfolgen entspricht dem, was Sie durch Leerzeichen getrennt in die Befehlszeile eingeben w\u00fcrden.</p> <p>Dieser Befehl wird aus dem aktuellen Arbeitsverzeichnis ausgef\u00fchrt, dem gleichen <code>/code</code>-Verzeichnis, das Sie oben mit <code>WORKDIR /code</code> festgelegt haben.</p> <p>Da das Programm unter <code>/code</code> gestartet wird und sich darin das Verzeichnis <code>./app</code> mit Ihrem Code befindet, kann Uvicorn <code>app</code> sehen und aus <code>app.main</code> importieren.</p> </li> </ol> <p>Tipp</p> <p>Lernen Sie, was jede Zeile bewirkt, indem Sie auf die Zahlenblasen im Code klicken. \ud83d\udc46</p> <p>Sie sollten jetzt eine Verzeichnisstruktur wie diese haben:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"deployment/docker/#hinter-einem-tls-terminierungsproxy","title":"Hinter einem TLS-Terminierungsproxy","text":"<p>Wenn Sie Ihren Container hinter einem TLS-Terminierungsproxy (Load Balancer) wie Nginx oder Traefik ausf\u00fchren, f\u00fcgen Sie die Option <code>--proxy-headers</code> hinzu. Das sagt Uvicorn, den von diesem Proxy gesendeten Headern zu vertrauen und dass die Anwendung hinter HTTPS ausgef\u00fchrt wird, usw.</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#docker-cache","title":"Docker-Cache","text":"<p>In diesem <code>Dockerfile</code> gibt es einen wichtigen Trick: Wir kopieren zuerst die Datei nur mit den Abh\u00e4ngigkeiten, nicht den Rest des Codes. Lassen Sie mich Ihnen erkl\u00e4ren, warum.</p> <pre><code>COPY ./requirements.txt /code/requirements.txt\n</code></pre> <p>Docker und andere Tools erstellen diese Containerimages inkrementell, f\u00fcgen eine Ebene \u00fcber der anderen hinzu, beginnend am Anfang des <code>Dockerfile</code>s und f\u00fcgen alle durch die einzelnen Anweisungen des <code>Dockerfile</code>s erstellten Dateien hinzu.</p> <p>Docker und \u00e4hnliche Tools verwenden beim Erstellen des Images auch einen internen Cache. Wenn sich eine Datei seit der letzten Erstellung des Containerimages nicht ge\u00e4ndert hat, wird dieselbe Ebene wiederverwendet, die beim letzten Mal erstellt wurde, anstatt die Datei erneut zu kopieren und eine neue Ebene von Grund auf zu erstellen.</p> <p>Das blo\u00dfe Vermeiden des Kopierens von Dateien f\u00fchrt nicht unbedingt zu einer gro\u00dfen Verbesserung, aber da der Cache f\u00fcr diesen Schritt verwendet wurde, kann der Cache f\u00fcr den n\u00e4chsten Schritt verwendet werden. Beispielsweise k\u00f6nnte der Cache verwendet werden f\u00fcr die Anweisung, welche die Abh\u00e4ngigkeiten installiert mit:</p> <pre><code>RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n</code></pre> <p>Die Datei mit den Paketanforderungen wird sich nicht h\u00e4ufig \u00e4ndern. Wenn Docker also nur diese Datei kopiert, kann es f\u00fcr diesen Schritt den Cache verwenden.</p> <p>Und dann kann Docker den Cache f\u00fcr den n\u00e4chsten Schritt verwenden, der diese Abh\u00e4ngigkeiten herunterl\u00e4dt und installiert. Und hier sparen wir viel Zeit. \u2728 ... und vermeiden die Langeweile beim Warten. \ud83d\ude2a\ud83d\ude06</p> <p>Das Herunterladen und Installieren der Paketabh\u00e4ngigkeiten k\u00f6nnte Minuten dauern, aber die Verwendung des Cache w\u00fcrde h\u00f6chstens Sekunden dauern.</p> <p>Und da Sie das Containerimage w\u00e4hrend der Entwicklung immer wieder erstellen w\u00fcrden, um zu \u00fcberpr\u00fcfen, ob Ihre Code\u00e4nderungen funktionieren, w\u00fcrde dies viel Zeit sparen.</p> <p>Dann, gegen Ende des <code>Dockerfile</code>s, kopieren wir den gesamten Code. Da sich der am h\u00e4ufigsten \u00e4ndert, platzieren wir das am Ende, da fast immer alles nach diesem Schritt nicht mehr in der Lage sein wird, den Cache zu verwenden.</p> <pre><code>COPY ./app /code/app\n</code></pre>"},{"location":"deployment/docker/#das-docker-image-erstellen","title":"Das Docker-Image erstellen","text":"<p>Nachdem nun alle Dateien vorhanden sind, erstellen wir das Containerimage.</p> <ul> <li>Gehen Sie zum Projektverzeichnis (dort, wo sich Ihr <code>Dockerfile</code> und Ihr <code>app</code>-Verzeichnis befindet).</li> <li>Erstellen Sie Ihr ReadyAPI-Image:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre> <p>Tipp</p> <p>Beachten Sie das <code>.</code> am Ende, es entspricht <code>./</code> und teilt Docker mit, welches Verzeichnis zum Erstellen des Containerimages verwendet werden soll.</p> <p>In diesem Fall handelt es sich um dasselbe aktuelle Verzeichnis (<code>.</code>).</p>"},{"location":"deployment/docker/#den-docker-container-starten","title":"Den Docker-Container starten","text":"<ul> <li>F\u00fchren Sie einen Container basierend auf Ihrem Image aus:</li> </ul> <pre><code>$ docker run -d --name mycontainer -p 80:80 myimage\n</code></pre>"},{"location":"deployment/docker/#es-uberprufen","title":"Es \u00fcberpr\u00fcfen","text":"<p>Sie sollten es in der URL Ihres Docker-Containers \u00fcberpr\u00fcfen k\u00f6nnen, zum Beispiel: http://192.168.99.100/items/5?q=somequery oder http://127.0.0.1/items/5?q=somequery (oder gleichwertig, unter Verwendung Ihres Docker-Hosts).</p> <p>Sie werden etwas sehen wie:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/docker/#interaktive-api-dokumentation","title":"Interaktive API-Dokumentation","text":"<p>Jetzt k\u00f6nnen Sie auf http://192.168.99.100/docs oder http://127.0.0.1/docs gehen (oder \u00e4hnlich, unter Verwendung Ihres Docker-Hosts).</p> <p>Sie sehen die automatische interaktive API-Dokumentation (bereitgestellt von Swagger UI):</p> <p></p>"},{"location":"deployment/docker/#alternative-api-dokumentation","title":"Alternative API-Dokumentation","text":"<p>Sie k\u00f6nnen auch auf http://192.168.99.100/redoc oder http://127.0.0.1/redoc gehen (oder \u00e4hnlich, unter Verwendung Ihres Docker-Hosts).</p> <p>Sie sehen die alternative automatische Dokumentation (bereitgestellt von ReDoc):</p> <p></p>"},{"location":"deployment/docker/#ein-docker-image-mit-einem-single-file-readyapi-erstellen","title":"Ein Docker-Image mit einem Single-File-ReadyAPI erstellen","text":"<p>Wenn Ihr ReadyAPI eine einzelne Datei ist, zum Beispiel <code>main.py</code> ohne ein <code>./app</code>-Verzeichnis, k\u00f6nnte Ihre Dateistruktur wie folgt aussehen:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Dann m\u00fcssten Sie nur noch die entsprechenden Pfade \u00e4ndern, um die Datei im <code>Dockerfile</code> zu kopieren:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (1)\nCOPY ./main.py /code/\n\n# (2)\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Kopiere die Datei <code>main.py</code> direkt in das Verzeichnis <code>/code</code> (ohne ein Verzeichnis <code>./app</code>).</p> </li> <li> <p>F\u00fchre Uvicorn aus und weisen es an, das <code>app</code>-Objekt von <code>main</code> zu importieren (anstatt von <code>app.main</code> zu importieren).</p> </li> </ol> <p>Passen Sie dann den Uvicorn-Befehl an, um das neue Modul <code>main</code> anstelle von <code>app.main</code> zu verwenden, um das ReadyAPI-Objekt <code>app</code> zu importieren.</p>"},{"location":"deployment/docker/#deployment-konzepte","title":"Deployment-Konzepte","text":"<p>Lassen Sie uns noch einmal \u00fcber einige der gleichen Deployment-Konzepte in Bezug auf Container sprechen.</p> <p>Container sind haupts\u00e4chlich ein Werkzeug, um den Prozess des Erstellens und Deployments einer Anwendung zu vereinfachen, sie erzwingen jedoch keinen bestimmten Ansatz f\u00fcr die Handhabung dieser Deployment-Konzepte, und es gibt mehrere m\u00f6gliche Strategien.</p> <p>Die gute Nachricht ist, dass es mit jeder unterschiedlichen Strategie eine M\u00f6glichkeit gibt, alle Deployment-Konzepte abzudecken. \ud83c\udf89</p> <p>Sehen wir uns diese Deployment-Konzepte im Hinblick auf Container noch einmal an:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul>"},{"location":"deployment/docker/#https","title":"HTTPS","text":"<p>Wenn wir uns nur auf das Containerimage f\u00fcr eine ReadyAPI-Anwendung (und sp\u00e4ter auf den laufenden Container) konzentrieren, w\u00fcrde HTTPS normalerweise extern von einem anderen Tool verarbeitet.</p> <p>Es k\u00f6nnte sich um einen anderen Container handeln, zum Beispiel mit Traefik, welcher HTTPS und automatischen Erwerb von Zertifikaten handhabt.</p> <p>Tipp</p> <p>Traefik verf\u00fcgt \u00fcber Integrationen mit Docker, Kubernetes und anderen, sodass Sie damit ganz einfach HTTPS f\u00fcr Ihre Container einrichten und konfigurieren k\u00f6nnen.</p> <p>Alternativ k\u00f6nnte HTTPS von einem Cloud-Anbieter als einer seiner Dienste gehandhabt werden (w\u00e4hrend die Anwendung weiterhin in einem Container ausgef\u00fchrt wird).</p>"},{"location":"deployment/docker/#beim-hochfahren-ausfuhren-und-neustarts","title":"Beim Hochfahren ausf\u00fchren und Neustarts","text":"<p>Normalerweise gibt es ein anderes Tool, das f\u00fcr das Starten und Ausf\u00fchren Ihres Containers zust\u00e4ndig ist.</p> <p>Es k\u00f6nnte sich um Docker direkt, Docker Compose, Kubernetes, einen Cloud-Dienst, usw. handeln.</p> <p>In den meisten (oder allen) F\u00e4llen gibt es eine einfache Option, um die Ausf\u00fchrung des Containers beim Hochfahren und Neustarts bei Fehlern zu erm\u00f6glichen. In Docker ist es beispielsweise die Befehlszeilenoption <code>--restart</code>.</p> <p>Ohne die Verwendung von Containern kann es umst\u00e4ndlich und schwierig sein, Anwendungen beim Hochfahren auszuf\u00fchren und neu zu starten. Bei der Arbeit mit Containern ist diese Funktionalit\u00e4t jedoch in den meisten F\u00e4llen standardm\u00e4\u00dfig enthalten. \u2728</p>"},{"location":"deployment/docker/#replikation-anzahl-der-prozesse","title":"Replikation \u2013 Anzahl der Prozesse","text":"<p>Wenn Sie einen Cluster von Maschinen mit Kubernetes, Docker Swarm Mode, Nomad verwenden, oder einem anderen, \u00e4hnlich komplexen System zur Verwaltung verteilter Container auf mehreren Maschinen, m\u00f6chten Sie wahrscheinlich die Replikation auf Cluster-Ebene abwickeln, anstatt in jedem Container einen Prozessmanager (wie Gunicorn mit Workern) zu verwenden.</p> <p>Diese verteilten Containerverwaltungssysteme wie Kubernetes verf\u00fcgen normalerweise \u00fcber eine integrierte M\u00f6glichkeit, die Replikation von Containern zu handhaben und gleichzeitig Load Balancing f\u00fcr die eingehenden Requests zu unterst\u00fctzen. Alles auf Cluster-Ebene.</p> <p>In diesen F\u00e4llen m\u00f6chten Sie wahrscheinlich ein Docker-Image von Grund auf erstellen, wie oben erkl\u00e4rt, Ihre Abh\u00e4ngigkeiten installieren und einen einzelnen Uvicorn-Prozess ausf\u00fchren, anstatt etwas wie Gunicorn mit Uvicorn-Workern auszuf\u00fchren.</p>"},{"location":"deployment/docker/#load-balancer","title":"Load Balancer","text":"<p>Bei der Verwendung von Containern ist normalerweise eine Komponente vorhanden, die am Hauptport lauscht. Es k\u00f6nnte sich um einen anderen Container handeln, der auch ein TLS-Terminierungsproxy ist, um HTTPS zu verarbeiten, oder ein \u00e4hnliches Tool.</p> <p>Da diese Komponente die Last an Requests aufnehmen und diese (hoffentlich) ausgewogen auf die Worker verteilen w\u00fcrde, wird sie \u00fcblicherweise auch Load Balancer \u2013 Lastverteiler \u2013 genannt.</p> <p>Tipp</p> <p>Die gleiche TLS-Terminierungsproxy-Komponente, die f\u00fcr HTTPS verwendet wird, w\u00e4re wahrscheinlich auch ein Load Balancer.</p> <p>Und wenn Sie mit Containern arbeiten, verf\u00fcgt das gleiche System, mit dem Sie diese starten und verwalten, bereits \u00fcber interne Tools, um die Netzwerkkommunikation (z. B. HTTP-Requests) von diesem Load Balancer (das k\u00f6nnte auch ein TLS-Terminierungsproxy sein) zu den Containern mit Ihrer Anwendung weiterzuleiten.</p>"},{"location":"deployment/docker/#ein-load-balancer-mehrere-workercontainer","title":"Ein Load Balancer \u2013 mehrere Workercontainer","text":"<p>Bei der Arbeit mit Kubernetes oder \u00e4hnlichen verteilten Containerverwaltungssystemen w\u00fcrde die Verwendung ihrer internen Netzwerkmechanismen es dem einzelnen Load Balancer, der den Haupt-Port \u00fcberwacht, erm\u00f6glichen, Kommunikation (Requests) an m\u00f6glicherweise mehrere Container weiterzuleiten, in denen Ihre Anwendung ausgef\u00fchrt wird.</p> <p>Jeder dieser Container, in denen Ihre Anwendung ausgef\u00fchrt wird, verf\u00fcgt normalerweise \u00fcber nur einen Prozess (z. B. einen Uvicorn-Prozess, der Ihre ReadyAPI-Anwendung ausf\u00fchrt). Es w\u00e4ren alles identische Container, die das Gleiche ausf\u00fchren, welche aber jeweils \u00fcber einen eigenen Prozess, Speicher, usw. verf\u00fcgen. Auf diese Weise w\u00fcrden Sie die Parallelisierung in verschiedenen Kernen der CPU nutzen. Oder sogar in verschiedenen Maschinen.</p> <p>Und das verteilte Containersystem mit dem Load Balancer w\u00fcrde die Requests abwechselnd an jeden einzelnen Container mit Ihrer Anwendung verteilen. Jeder Request k\u00f6nnte also von einem der mehreren replizierten Container verarbeitet werden, in denen Ihre Anwendung ausgef\u00fchrt wird.</p> <p>Und normalerweise w\u00e4re dieser Load Balancer in der Lage, Requests zu verarbeiten, die an andere Anwendungen in Ihrem Cluster gerichtet sind (z. B. eine andere Domain oder unter einem anderen URL-Pfad-Pr\u00e4fix), und w\u00fcrde diese Kommunikation an die richtigen Container weiterleiten f\u00fcr diese andere Anwendung, die in Ihrem Cluster ausgef\u00fchrt wird.</p>"},{"location":"deployment/docker/#ein-prozess-pro-container","title":"Ein Prozess pro Container","text":"<p>In einem solchen Szenario m\u00f6chten Sie wahrscheinlich einen einzelnen (Uvicorn-)Prozess pro Container haben, da Sie die Replikation bereits auf Cluster ebene durchf\u00fchren w\u00fcrden.</p> <p>In diesem Fall m\u00f6chten Sie also nicht einen Prozessmanager wie Gunicorn mit Uvicorn-Workern oder Uvicorn mit seinen eigenen Uvicorn-Workern haben. Sie m\u00f6chten nur einen einzelnen Uvicorn-Prozess pro Container haben (wahrscheinlich aber mehrere Container).</p> <p>Ein weiterer Prozessmanager im Container (wie es bei Gunicorn oder Uvicorn der Fall w\u00e4re, welche Uvicorn-Worker verwalten) w\u00fcrde nur unn\u00f6tige Komplexit\u00e4t hinzuf\u00fcgen, um welche Sie sich h\u00f6chstwahrscheinlich bereits mit Ihrem Clustersystem k\u00fcmmern.</p>"},{"location":"deployment/docker/#container-mit-mehreren-prozessen-und-sonderfalle","title":"Container mit mehreren Prozessen und Sonderf\u00e4lle","text":"<p>Nat\u00fcrlich gibt es Sonderf\u00e4lle, in denen Sie einen Container mit einem Gunicorn-Prozessmanager haben m\u00f6chten, welcher mehrere Uvicorn-Workerprozesse darin startet.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie das offizielle Docker-Image verwenden, welches Gunicorn als Prozessmanager enth\u00e4lt, welcher mehrere Uvicorn-Workerprozesse ausf\u00fchrt, sowie einige Standardeinstellungen, um die Anzahl der Worker basierend auf den verf\u00fcgbaren CPU-Kernen automatisch anzupassen. Ich erz\u00e4hle Ihnen weiter unten in Offizielles Docker-Image mit Gunicorn \u2013 Uvicorn mehr dar\u00fcber.</p> <p>Hier sind einige Beispiele, wann das sinnvoll sein k\u00f6nnte:</p>"},{"location":"deployment/docker/#eine-einfache-anwendung","title":"Eine einfache Anwendung","text":"<p>Sie k\u00f6nnten einen Prozessmanager im Container haben wollen, wenn Ihre Anwendung einfach genug ist, sodass Sie die Anzahl der Prozesse nicht (zumindest noch nicht) zu stark tunen m\u00fcssen und Sie einfach einen automatisierten Standard verwenden k\u00f6nnen (mit dem offiziellen Docker-Image), und Sie f\u00fchren es auf einem einzelnen Server aus, nicht auf einem Cluster.</p>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":"<p>Sie k\u00f6nnten das Deployment auf einem einzelnen Server (kein Cluster) mit Docker Compose durchf\u00fchren, sodass Sie keine einfache M\u00f6glichkeit h\u00e4tten, die Replikation von Containern (mit Docker Compose) zu verwalten und gleichzeitig das gemeinsame Netzwerk mit Load Balancing zu haben.</p> <p>Dann m\u00f6chten Sie vielleicht einen einzelnen Container mit einem Prozessmanager haben, der darin mehrere Workerprozesse startet.</p>"},{"location":"deployment/docker/#prometheus-und-andere-grunde","title":"Prometheus und andere Gr\u00fcnde","text":"<p>Sie k\u00f6nnten auch andere Gr\u00fcnde haben, die es einfacher machen w\u00fcrden, einen einzelnen Container mit mehreren Prozessen zu haben, anstatt mehrere Container mit einem einzelnen Prozess in jedem von ihnen.</p> <p>Beispielsweise k\u00f6nnten Sie (abh\u00e4ngig von Ihrem Setup) ein Tool wie einen Prometheus-Exporter im selben Container haben, welcher Zugriff auf jeden der eingehenden Requests haben sollte.</p> <p>Wenn Sie in hier mehrere Container h\u00e4tten, w\u00fcrde Prometheus beim Lesen der Metriken standardm\u00e4\u00dfig jedes Mal diejenigen f\u00fcr einen einzelnen Container abrufen (f\u00fcr den Container, der den spezifischen Request verarbeitet hat), anstatt die akkumulierten Metriken f\u00fcr alle replizierten Container abzurufen.</p> <p>In diesem Fall k\u00f6nnte einfacher sein, einen Container mit mehreren Prozessen und ein lokales Tool (z. B. einen Prometheus-Exporter) in demselben Container zu haben, welches Prometheus-Metriken f\u00fcr alle internen Prozesse sammelt und diese Metriken f\u00fcr diesen einzelnen Container offenlegt.</p> <p>Der Hauptpunkt ist, dass keine dieser Regeln in Stein gemei\u00dfelt ist, der man blind folgen muss. Sie k\u00f6nnen diese Ideen verwenden, um Ihren eigenen Anwendungsfall zu evaluieren, zu entscheiden, welcher Ansatz f\u00fcr Ihr System am besten geeignet ist und herauszufinden, wie Sie folgende Konzepte verwalten:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul>"},{"location":"deployment/docker/#arbeitsspeicher","title":"Arbeitsspeicher","text":"<p>Wenn Sie einen einzelnen Prozess pro Container ausf\u00fchren, wird von jedem dieser Container (mehr als einer, wenn sie repliziert werden) eine mehr oder weniger klar definierte, stabile und begrenzte Menge an Arbeitsspeicher verbraucht.</p> <p>Und dann k\u00f6nnen Sie dieselben Speichergrenzen und -anforderungen in Ihren Konfigurationen f\u00fcr Ihr Container-Management-System festlegen (z. B. in Kubernetes). Auf diese Weise ist es in der Lage, die Container auf den verf\u00fcgbaren Maschinen zu replizieren, wobei die von denen ben\u00f6tigte Speichermenge und die auf den Maschinen im Cluster verf\u00fcgbare Menge ber\u00fccksichtigt werden.</p> <p>Wenn Ihre Anwendung einfach ist, wird dies wahrscheinlich kein Problem darstellen und Sie m\u00fcssen m\u00f6glicherweise keine festen Speichergrenzen angeben. Wenn Sie jedoch viel Speicher verbrauchen (z. B. bei Modellen f\u00fcr maschinelles Lernen), sollten Sie \u00fcberpr\u00fcfen, wie viel Speicher Sie verbrauchen, und die Anzahl der Container anpassen, die in jeder Maschine ausgef\u00fchrt werden. (und m\u00f6glicherweise weitere Maschinen zu Ihrem Cluster hinzuf\u00fcgen).</p> <p>Wenn Sie mehrere Prozesse pro Container ausf\u00fchren (zum Beispiel mit dem offiziellen Docker-Image), m\u00fcssen Sie sicherstellen, dass die Anzahl der gestarteten Prozesse nicht mehr Speicher verbraucht als verf\u00fcgbar ist.</p>"},{"location":"deployment/docker/#schritte-vor-dem-start-und-container","title":"Schritte vor dem Start und Container","text":"<p>Wenn Sie Container (z. B. Docker, Kubernetes) verwenden, k\u00f6nnen Sie haupts\u00e4chlich zwei Ans\u00e4tze verwenden.</p>"},{"location":"deployment/docker/#mehrere-container","title":"Mehrere Container","text":"<p>Wenn Sie mehrere Container haben, von denen wahrscheinlich jeder einen einzelnen Prozess ausf\u00fchrt (z. B. in einem Kubernetes-Cluster), dann m\u00f6chten Sie wahrscheinlich einen separaten Container haben, welcher die Arbeit der Vorab-Schritte in einem einzelnen Container, mit einem einzelnenen Prozess ausf\u00fchrt, bevor die replizierten Workercontainer ausgef\u00fchrt werden.</p> <p>Info</p> <p>Wenn Sie Kubernetes verwenden, w\u00e4re dies wahrscheinlich ein Init-Container.</p> <p>Wenn es in Ihrem Anwendungsfall kein Problem darstellt, diese vorherigen Schritte mehrmals parallel auszuf\u00fchren (z. B. wenn Sie keine Datenbankmigrationen ausf\u00fchren, sondern nur pr\u00fcfen, ob die Datenbank bereits bereit ist), k\u00f6nnen Sie sie auch einfach in jedem Container direkt vor dem Start des Hauptprozesses einf\u00fcgen.</p>"},{"location":"deployment/docker/#einzelner-container","title":"Einzelner Container","text":"<p>Wenn Sie ein einfaches Setup mit einem einzelnen Container haben, welcher dann mehrere Workerprozesse (oder auch nur einen Prozess) startet, k\u00f6nnen Sie die Vorab-Schritte im selben Container direkt vor dem Starten des Prozesses mit der Anwendung ausf\u00fchren. Das offizielle Docker-Image unterst\u00fctzt das intern.</p>"},{"location":"deployment/docker/#offizielles-docker-image-mit-gunicorn-uvicorn","title":"Offizielles Docker-Image mit Gunicorn \u2013 Uvicorn","text":"<p>Es gibt ein offizielles Docker-Image, in dem Gunicorn mit Uvicorn-Workern ausgef\u00fchrt wird, wie in einem vorherigen Kapitel beschrieben: Serverworker \u2013 Gunicorn mit Uvicorn.</p> <p>Dieses Image w\u00e4re vor allem in den oben beschriebenen Situationen n\u00fctzlich: Container mit mehreren Prozessen und Sonderf\u00e4lle.</p> <ul> <li>khulnasoft/uvicorn-gunicorn-readyapi.</li> </ul> <p>Achtung</p> <p>Es besteht eine hohe Wahrscheinlichkeit, dass Sie dieses oder ein \u00e4hnliches Basisimage nicht ben\u00f6tigen und es besser w\u00e4re, wenn Sie das Image von Grund auf neu erstellen w\u00fcrden, wie oben beschrieben in: Ein Docker-Image f\u00fcr ReadyAPI erstellen.</p> <p>Dieses Image verf\u00fcgt \u00fcber einen Auto-Tuning-Mechanismus, um die Anzahl der Arbeitsprozesse basierend auf den verf\u00fcgbaren CPU-Kernen festzulegen.</p> <p>Es verf\u00fcgt \u00fcber vern\u00fcnftige Standardeinstellungen, aber Sie k\u00f6nnen trotzdem alle Konfigurationen mit Umgebungsvariablen oder Konfigurationsdateien \u00e4ndern und aktualisieren.</p> <p>Es unterst\u00fctzt auch die Ausf\u00fchrung von Vorab-Schritten vor dem Start  mit einem Skript.</p> <p>Tipp</p> <p>Um alle Konfigurationen und Optionen anzuzeigen, gehen Sie zur Docker-Image-Seite: khulnasoft/uvicorn-gunicorn-readyapi.</p>"},{"location":"deployment/docker/#anzahl-der-prozesse-auf-dem-offiziellen-docker-image","title":"Anzahl der Prozesse auf dem offiziellen Docker-Image","text":"<p>Die Anzahl der Prozesse auf diesem Image wird automatisch anhand der verf\u00fcgbaren CPU-Kerne berechnet.</p> <p>Das bedeutet, dass versucht wird, so viel Leistung wie m\u00f6glich aus der CPU herauszuquetschen.</p> <p>Sie k\u00f6nnen das auch in der Konfiguration anpassen, indem Sie Umgebungsvariablen, usw. verwenden.</p> <p>Das bedeutet aber auch, da die Anzahl der Prozesse von der CPU abh\u00e4ngt, welche der Container ausf\u00fchrt, dass die Menge des verbrauchten Speichers ebenfalls davon abh\u00e4ngt.</p> <p>Wenn Ihre Anwendung also viel Speicher verbraucht (z. B. bei Modellen f\u00fcr maschinelles Lernen) und Ihr Server \u00fcber viele CPU-Kerne, aber wenig Speicher verf\u00fcgt, k\u00f6nnte Ihr Container am Ende versuchen, mehr Speicher als vorhanden zu verwenden, was zu erheblichen Leistungseinbu\u00dfen (oder sogar zum Absturz) f\u00fchren kann. \ud83d\udea8</p>"},{"location":"deployment/docker/#ein-dockerfile-erstellen","title":"Ein <code>Dockerfile</code> erstellen","text":"<p>So w\u00fcrden Sie ein <code>Dockerfile</code> basierend auf diesem Image erstellen:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n</code></pre>"},{"location":"deployment/docker/#groere-anwendungen","title":"Gr\u00f6\u00dfere Anwendungen","text":"<p>Wenn Sie dem Abschnitt zum Erstellen von gr\u00f6\u00dferen Anwendungen mit mehreren Dateien gefolgt sind, k\u00f6nnte Ihr <code>Dockerfile</code> stattdessen wie folgt aussehen:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n</code></pre>"},{"location":"deployment/docker/#wann-verwenden","title":"Wann verwenden","text":"<p>Sie sollten dieses offizielle Basisimage (oder ein \u00e4hnliches) wahrscheinlich nicht benutzen, wenn Sie Kubernetes (oder andere) verwenden und Sie bereits Replikation auf Cluster ebene mit mehreren Containern eingerichtet haben. In diesen F\u00e4llen ist es besser, ein Image von Grund auf zu erstellen, wie oben beschrieben: Ein Docker-Image f\u00fcr ReadyAPI erstellen.</p> <p>Dieses Image w\u00e4re vor allem in den oben in Container mit mehreren Prozessen und Sonderf\u00e4lle beschriebenen Sonderf\u00e4llen n\u00fctzlich. Wenn Ihre Anwendung beispielsweise einfach genug ist, dass das Festlegen einer Standardanzahl von Prozessen basierend auf der CPU gut funktioniert, m\u00f6chten Sie sich nicht mit der manuellen Konfiguration der Replikation auf Cluster ebene herumschlagen und f\u00fchren nicht mehr als einen Container mit Ihrer Anwendung aus. Oder wenn Sie das Deployment mit Docker Compose durchf\u00fchren und auf einem einzelnen Server laufen, usw.</p>"},{"location":"deployment/docker/#deployment-des-containerimages","title":"Deployment des Containerimages","text":"<p>Nachdem Sie ein Containerimage (Docker) haben, gibt es mehrere M\u00f6glichkeiten, es bereitzustellen.</p> <p>Zum Beispiel:</p> <ul> <li>Mit Docker Compose auf einem einzelnen Server</li> <li>Mit einem Kubernetes-Cluster</li> <li>Mit einem Docker Swarm Mode-Cluster</li> <li>Mit einem anderen Tool wie Nomad</li> <li>Mit einem Cloud-Dienst, der Ihr Containerimage nimmt und es bereitstellt</li> </ul>"},{"location":"deployment/docker/#docker-image-mit-poetry","title":"Docker-Image mit Poetry","text":"<p>Wenn Sie Poetry verwenden, um die Abh\u00e4ngigkeiten Ihres Projekts zu verwalten, k\u00f6nnen Sie Dockers mehrphasige Builds verwenden:</p> <pre><code># (1)\nFROM python:3.9 as requirements-stage\n\n# (2)\nWORKDIR /tmp\n\n# (3)\nRUN pip install poetry\n\n# (4)\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\n# (5)\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\n# (6)\nFROM python:3.9\n\n# (7)\nWORKDIR /code\n\n# (8)\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n# (9)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (10)\nCOPY ./app /code/app\n\n# (11)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Dies ist die erste Phase, genannt <code>requirements-stage</code> \u2013 \u201eAnforderungsphase\u201c.</p> </li> <li> <p>Setze <code>/tmp</code> als aktuelles Arbeitsverzeichnis.</p> <p>Hier werden wir die Datei <code>requirements.txt</code> generieren.</p> </li> <li> <p>Installiere Poetry in dieser Docker-Phase.</p> </li> <li> <p>Kopiere die Dateien <code>pyproject.toml</code> und <code>poetry.lock</code> in das Verzeichnis <code>/tmp</code>.</p> <p>Da es <code>./poetry.lock*</code> verwendet (endet mit einem <code>*</code>), st\u00fcrzt es nicht ab, wenn diese Datei noch nicht verf\u00fcgbar ist.</p> </li> <li> <p>Generiere die Datei <code>requirements.txt</code>.</p> </li> <li> <p>Dies ist die letzte Phase. Alles hier bleibt im endg\u00fcltigen Containerimage erhalten.</p> </li> <li> <p>Setze das aktuelle Arbeitsverzeichnis auf <code>/code</code>.</p> </li> <li> <p>Kopiere die Datei <code>requirements.txt</code> in das Verzeichnis <code>/code</code>.</p> <p>Diese Datei existiert nur in der vorherigen Docker-Phase, deshalb verwenden wir <code>--from-requirements-stage</code>, um sie zu kopieren.</p> </li> <li> <p>Installiere die Paketabh\u00e4ngigkeiten von der generierten Datei <code>requirements.txt</code>.</p> </li> <li> <p>Kopiere das Verzeichnis <code>app</code> in das Verzeichnis <code>/code</code>.</p> </li> <li> <p>F\u00fchre den Befehl <code>uvicorn</code> aus und weise ihn an, das aus <code>app.main</code> importierte <code>app</code>-Objekt zu verwenden.</p> </li> </ol> <p>Tipp</p> <p>Klicken Sie auf die Zahlenblasen, um zu sehen, was jede Zeile bewirkt.</p> <p>Eine Docker-Phase ist ein Teil eines <code>Dockerfile</code>s, welcher als tempor\u00e4res Containerimage fungiert und nur zum Generieren einiger Dateien f\u00fcr die sp\u00e4tere Verwendung verwendet wird.</p> <p>Die erste Phase wird nur zur Installation von Poetry und zur Generierung der <code>requirements.txt</code> mit deren Projektabh\u00e4ngigkeiten aus der Datei <code>pyproject.toml</code> von Poetry verwendet.</p> <p>Diese <code>requirements.txt</code>-Datei wird sp\u00e4ter in der n\u00e4chsten Phase mit <code>pip</code> verwendet.</p> <p>Im endg\u00fcltigen Containerimage bleibt nur die letzte Stufe erhalten. Die vorherigen Stufen werden verworfen.</p> <p>Bei der Verwendung von Poetry w\u00e4re es sinnvoll, mehrstufige Docker-Builds zu verwenden, da Poetry und seine Abh\u00e4ngigkeiten nicht wirklich im endg\u00fcltigen Containerimage installiert sein m\u00fcssen, sondern Sie brauchen nur die Datei <code>requirements.txt</code>, um Ihre Projektabh\u00e4ngigkeiten zu installieren.</p> <p>Dann w\u00fcrden Sie im n\u00e4chsten (und letzten) Schritt das Image mehr oder weniger auf die gleiche Weise wie zuvor beschrieben erstellen.</p>"},{"location":"deployment/docker/#hinter-einem-tls-terminierungsproxy-poetry","title":"Hinter einem TLS-Terminierungsproxy \u2013 Poetry","text":"<p>Auch hier gilt: Wenn Sie Ihren Container hinter einem TLS-Terminierungsproxy (Load Balancer) wie Nginx oder Traefik ausf\u00fchren, f\u00fcgen Sie dem Befehl die Option <code>--proxy-headers</code> hinzu:</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mithilfe von Containersystemen (z. B. mit Docker und Kubernetes) ist es ziemlich einfach, alle Deployment-Konzepte zu handhaben:</p> <ul> <li>HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul> <p>In den meisten F\u00e4llen m\u00f6chten Sie wahrscheinlich kein Basisimage verwenden und stattdessen ein Containerimage von Grund auf erstellen, eines basierend auf dem offiziellen Python-Docker-Image.</p> <p>Indem Sie auf die Reihenfolge der Anweisungen im <code>Dockerfile</code> und den Docker-Cache achten, k\u00f6nnen Sie die Build-Zeiten minimieren, um Ihre Produktivit\u00e4t zu erh\u00f6hen (und Langeweile zu vermeiden). \ud83d\ude0e</p> <p>In bestimmten Sonderf\u00e4llen m\u00f6chten Sie m\u00f6glicherweise das offizielle Docker-Image f\u00fcr ReadyAPI verwenden. \ud83e\udd13</p>"},{"location":"deployment/https/","title":"\u00dcber HTTPS","text":"<p>Es ist leicht anzunehmen, dass HTTPS etwas ist, was einfach nur \u201eaktiviert\u201c wird oder nicht.</p> <p>Aber es ist viel komplexer als das.</p> <p>Tipp</p> <p>Wenn Sie es eilig haben oder es Ihnen egal ist, fahren Sie mit den n\u00e4chsten Abschnitten fort, um Schritt-f\u00fcr-Schritt-Anleitungen f\u00fcr die Einrichtung der verschiedenen Technologien zu erhalten.</p> <p>Um die Grundlagen von HTTPS aus Sicht des Benutzers zu erlernen, schauen Sie sich https://howhttps.works/ an.</p> <p>Aus Sicht des Entwicklers sollten Sie beim Nachdenken \u00fcber HTTPS Folgendes beachten:</p> <ul> <li>F\u00fcr HTTPS muss der Server \u00fcber von einem Dritten generierte \u201eZertifikate\u201c verf\u00fcgen.<ul> <li>Diese Zertifikate werden tats\u00e4chlich vom Dritten erworben und nicht \u201egeneriert\u201c.</li> </ul> </li> <li>Zertifikate haben eine Lebensdauer.<ul> <li>Sie verfallen.</li> <li>Und dann m\u00fcssen sie vom Dritten erneuert, erneut erworben werden.</li> </ul> </li> <li>Die Verschl\u00fcsselung der Verbindung erfolgt auf TCP-Ebene.<ul> <li>Das ist eine Schicht unter HTTP.</li> <li>Die Handhabung von Zertifikaten und Verschl\u00fcsselung erfolgt also vor HTTP.</li> </ul> </li> <li>TCP wei\u00df nichts \u00fcber \u201eDomains\u201c. Nur \u00fcber IP-Adressen.<ul> <li>Die Informationen \u00fcber die angeforderte spezifische Domain befinden sich in den HTTP-Daten.</li> </ul> </li> <li>Die HTTPS-Zertifikate \u201ezertifizieren\u201c eine bestimmte Domain, aber das Protokoll und die Verschl\u00fcsselung erfolgen auf TCP-Ebene, ohne zu wissen, um welche Domain es sich handelt.</li> <li>Standardm\u00e4\u00dfig bedeutet das, dass Sie nur ein HTTPS-Zertifikat pro IP-Adresse haben k\u00f6nnen.<ul> <li>Ganz gleich, wie gro\u00df Ihr Server ist oder wie klein die einzelnen Anwendungen darauf sind.</li> <li>Hierf\u00fcr gibt es jedoch eine L\u00f6sung.</li> </ul> </li> <li>Es gibt eine Erweiterung zum TLS-Protokoll (dasjenige, das die Verschl\u00fcsselung auf TCP-Ebene, vor HTTP, verwaltet) namens SNI.<ul> <li>Mit dieser SNI-Erweiterung kann ein einzelner Server (mit einer einzelnen IP-Adresse) \u00fcber mehrere HTTPS-Zertifikate verf\u00fcgen und mehrere HTTPS-Domains/Anwendungen bedienen.</li> <li>Damit das funktioniert, muss eine einzelne Komponente (Programm), die auf dem Server ausgef\u00fchrt wird und welche die \u00f6ffentliche IP-Adresse \u00fcberwacht, alle HTTPS-Zertifikate des Servers haben.</li> </ul> </li> <li>Nachdem eine sichere Verbindung hergestellt wurde, ist das Kommunikationsprotokoll immer noch HTTP.<ul> <li>Die Inhalte sind verschl\u00fcsselt, auch wenn sie mit dem HTTP-Protokoll gesendet werden.</li> </ul> </li> </ul> <p>Es ist eine g\u00e4ngige Praxis, ein Programm/HTTP-Server auf dem Server (der Maschine, dem Host usw.) laufen zu lassen, welches alle HTTPS-Aspekte verwaltet: Empfangen der verschl\u00fcsselten HTTPS-Requests, Senden der entschl\u00fcsselten HTTP-Requests an die eigentliche HTTP-Anwendung die auf demselben Server l\u00e4uft (in diesem Fall die ReadyAPI-Anwendung), entgegennehmen der HTTP-Response von der Anwendung, verschl\u00fcsseln derselben mithilfe des entsprechenden HTTPS-Zertifikats und Zur\u00fccksenden zum Client \u00fcber HTTPS. Dieser Server wird oft als TLS-Terminierungsproxy bezeichnet.</p> <p>Einige der Optionen, die Sie als TLS-Terminierungsproxy verwenden k\u00f6nnen, sind:</p> <ul> <li>Traefik (kann auch Zertifikat-Erneuerungen durchf\u00fchren)</li> <li>Caddy (kann auch Zertifikat-Erneuerungen durchf\u00fchren)</li> <li>Nginx</li> <li>HAProxy</li> </ul>"},{"location":"deployment/https/#lets-encrypt","title":"Let's Encrypt","text":"<p>Vor Let's Encrypt wurden diese HTTPS-Zertifikate von vertrauensw\u00fcrdigen Dritten verkauft.</p> <p>Der Prozess zum Erwerb eines dieser Zertifikate war fr\u00fcher umst\u00e4ndlich, erforderte viel Papierarbeit und die Zertifikate waren ziemlich teuer.</p> <p>Aber dann wurde Let's Encrypt geschaffen.</p> <p>Es ist ein Projekt der Linux Foundation. Es stellt kostenlose HTTPS-Zertifikate automatisiert zur Verf\u00fcgung. Diese Zertifikate nutzen standardm\u00e4\u00dfig die gesamte kryptografische Sicherheit und sind kurzlebig (circa 3 Monate), sodass die Sicherheit tats\u00e4chlich besser ist, aufgrund der k\u00fcrzeren Lebensdauer.</p> <p>Die Domains werden sicher verifiziert und die Zertifikate werden automatisch generiert. Das erm\u00f6glicht auch die automatische Erneuerung dieser Zertifikate.</p> <p>Die Idee besteht darin, den Erwerb und die Erneuerung der Zertifikate zu automatisieren, sodass Sie sicheres HTTPS, kostenlos und f\u00fcr immer haben k\u00f6nnen.</p>"},{"location":"deployment/https/#https-fur-entwickler","title":"HTTPS f\u00fcr Entwickler","text":"<p>Hier ist ein Beispiel, wie eine HTTPS-API aussehen k\u00f6nnte, Schritt f\u00fcr Schritt, wobei vor allem die f\u00fcr Entwickler wichtigen Ideen ber\u00fccksichtigt werden.</p>"},{"location":"deployment/https/#domainname","title":"Domainname","text":"<p>Alles beginnt wahrscheinlich damit, dass Sie einen Domainnamen erwerben. Anschlie\u00dfend konfigurieren Sie ihn in einem DNS-Server (wahrscheinlich beim selben Cloud-Anbieter).</p> <p>Sie w\u00fcrden wahrscheinlich einen Cloud-Server (eine virtuelle Maschine) oder etwas \u00c4hnliches bekommen, und dieser h\u00e4tte eine feste \u00f6ffentliche IP-Adresse.</p> <p>In dem oder den DNS-Server(n) w\u00fcrden Sie einen Eintrag (einen \u201e<code>A record</code>\u201c) konfigurieren, um mit Ihrer Domain auf die \u00f6ffentliche IP-Adresse Ihres Servers zu verweisen.</p> <p>Sie w\u00fcrden dies wahrscheinlich nur einmal tun, beim ersten Mal, wenn Sie alles einrichten.</p> <p>Tipp</p> <p>Dieser Domainnamen-Aspekt liegt weit vor HTTPS, aber da alles von der Domain und der IP-Adresse abh\u00e4ngt, lohnt es sich, das hier zu erw\u00e4hnen.</p>"},{"location":"deployment/https/#dns","title":"DNS","text":"<p>Konzentrieren wir uns nun auf alle tats\u00e4chlichen HTTPS-Aspekte.</p> <p>Zuerst w\u00fcrde der Browser mithilfe der DNS-Server herausfinden, welches die IP f\u00fcr die Domain ist, in diesem Fall f\u00fcr <code>someapp.example.com</code>.</p> <p>Die DNS-Server geben dem Browser eine bestimmte IP-Adresse zur\u00fcck. Das w\u00e4re die von Ihrem Server verwendete \u00f6ffentliche IP-Adresse, die Sie in den DNS-Servern konfiguriert haben.</p> <p></p>"},{"location":"deployment/https/#tls-handshake-start","title":"TLS-Handshake-Start","text":"<p>Der Browser kommuniziert dann mit dieser IP-Adresse \u00fcber Port 443 (den HTTPS-Port).</p> <p>Der erste Teil der Kommunikation besteht lediglich darin, die Verbindung zwischen dem Client und dem Server herzustellen und die zu verwendenden kryptografischen Schl\u00fcssel usw. zu vereinbaren.</p> <p></p> <p>Diese Interaktion zwischen dem Client und dem Server zum Aufbau der TLS-Verbindung wird als TLS-Handshake bezeichnet.</p>"},{"location":"deployment/https/#tls-mit-sni-erweiterung","title":"TLS mit SNI-Erweiterung","text":"<p>Nur ein Prozess im Server kann an einem bestimmten Port einer bestimmten IP-Adresse lauschen. M\u00f6glicherweise gibt es andere Prozesse, die an anderen Ports dieselbe IP-Adresse abh\u00f6ren, jedoch nur einen f\u00fcr jede Kombination aus IP-Adresse und Port.</p> <p>TLS (HTTPS) verwendet standardm\u00e4\u00dfig den spezifischen Port <code>443</code>. Das ist also der Port, den wir brauchen.</p> <p>Da an diesem Port nur ein Prozess lauschen kann, w\u00e4re der Prozess, der dies tun w\u00fcrde, der TLS-Terminierungsproxy.</p> <p>Der TLS-Terminierungsproxy h\u00e4tte Zugriff auf ein oder mehrere TLS-Zertifikate (HTTPS-Zertifikate).</p> <p>Mithilfe der oben beschriebenen SNI-Erweiterung w\u00fcrde der TLS-Terminierungsproxy herausfinden, welches der verf\u00fcgbaren TLS-Zertifikate (HTTPS) er f\u00fcr diese Verbindung verwenden muss, und zwar das, welches mit der vom Client erwarteten Domain \u00fcbereinstimmt.</p> <p>In diesem Fall w\u00fcrde er das Zertifikat f\u00fcr <code>someapp.example.com</code> verwenden.</p> <p></p> <p>Der Client vertraut bereits der Entit\u00e4t, die das TLS-Zertifikat generiert hat (in diesem Fall Let's Encrypt, aber wir werden sp\u00e4ter mehr dar\u00fcber erfahren), sodass er verifizieren kann, dass das Zertifikat g\u00fcltig ist.</p> <p>Mithilfe des Zertifikats entscheiden der Client und der TLS-Terminierungsproxy dann, wie der Rest der TCP-Kommunikation verschl\u00fcsselt werden soll. Damit ist der TLS-Handshake abgeschlossen.</p> <p>Danach verf\u00fcgen der Client und der Server \u00fcber eine verschl\u00fcsselte TCP-Verbindung, via TLS. Und dann k\u00f6nnen sie diese Verbindung verwenden, um die eigentliche HTTP-Kommunikation zu beginnen.</p> <p>Und genau das ist HTTPS, es ist einfach HTTP innerhalb einer sicheren TLS-Verbindung, statt einer puren (unverschl\u00fcsselten) TCP-Verbindung.</p> <p>Tipp</p> <p>Beachten Sie, dass die Verschl\u00fcsselung der Kommunikation auf der TCP-Ebene und nicht auf der HTTP-Ebene erfolgt.</p>"},{"location":"deployment/https/#https-request","title":"HTTPS-Request","text":"<p>Da Client und Server (sprich, der Browser und der TLS-Terminierungsproxy) nun \u00fcber eine verschl\u00fcsselte TCP-Verbindung verf\u00fcgen, k\u00f6nnen sie die HTTP-Kommunikation starten.</p> <p>Der Client sendet also einen HTTPS-Request. Das ist einfach ein HTTP-Request \u00fcber eine verschl\u00fcsselte TLS-Verbindung.</p> <p></p>"},{"location":"deployment/https/#den-request-entschlusseln","title":"Den Request entschl\u00fcsseln","text":"<p>Der TLS-Terminierungsproxy w\u00fcrde die vereinbarte Verschl\u00fcsselung zum Entschl\u00fcsseln des Requests verwenden und den einfachen (entschl\u00fcsselten) HTTP-Request an den Prozess weiterleiten, der die Anwendung ausf\u00fchrt (z. B. einen Prozess, bei dem Uvicorn die ReadyAPI-Anwendung ausf\u00fchrt).</p> <p></p>"},{"location":"deployment/https/#http-response","title":"HTTP-Response","text":"<p>Die Anwendung w\u00fcrde den Request verarbeiten und eine einfache (unverschl\u00fcsselte) HTTP-Response an den TLS-Terminierungsproxy senden.</p> <p></p>"},{"location":"deployment/https/#https-response","title":"HTTPS-Response","text":"<p>Der TLS-Terminierungsproxy w\u00fcrde dann die Response mithilfe der zuvor vereinbarten Kryptografie (als das Zertifikat f\u00fcr <code>someapp.example.com</code> verhandelt wurde) verschl\u00fcsseln und sie an den Browser zur\u00fccksenden.</p> <p>Als N\u00e4chstes \u00fcberpr\u00fcft der Browser, ob die Response g\u00fcltig und mit dem richtigen kryptografischen Schl\u00fcssel usw. verschl\u00fcsselt ist. Anschlie\u00dfend entschl\u00fcsselt er die Response und verarbeitet sie.</p> <p></p> <p>Der Client (Browser) wei\u00df, dass die Response vom richtigen Server kommt, da dieser die Kryptografie verwendet, die zuvor mit dem HTTPS-Zertifikat vereinbart wurde.</p>"},{"location":"deployment/https/#mehrere-anwendungen","title":"Mehrere Anwendungen","text":"<p>Auf demselben Server (oder denselben Servern) k\u00f6nnten sich mehrere Anwendungen befinden, beispielsweise andere API-Programme oder eine Datenbank.</p> <p>Nur ein Prozess kann diese spezifische IP und den Port verarbeiten (in unserem Beispiel der TLS-Terminierungsproxy), aber die anderen Anwendungen/Prozesse k\u00f6nnen auch auf dem/den Server(n) ausgef\u00fchrt werden, solange sie nicht versuchen, dieselbe Kombination aus \u00f6ffentlicher IP und Port zu verwenden.</p> <p></p> <p>Auf diese Weise k\u00f6nnte der TLS-Terminierungsproxy HTTPS und Zertifikate f\u00fcr mehrere Domains, f\u00fcr mehrere Anwendungen, verarbeiten und die Requests dann jeweils an die richtige Anwendung weiterleiten.</p>"},{"location":"deployment/https/#verlangerung-des-zertifikats","title":"Verl\u00e4ngerung des Zertifikats","text":"<p>Irgendwann in der Zukunft w\u00fcrde jedes Zertifikat ablaufen (etwa 3 Monate nach dem Erwerb).</p> <p>Und dann g\u00e4be es ein anderes Programm (in manchen F\u00e4llen ist es ein anderes Programm, in manchen F\u00e4llen ist es derselbe TLS-Terminierungsproxy), das mit Let's Encrypt kommuniziert und das/die Zertifikat(e) erneuert.</p> <p></p> <p>Die TLS-Zertifikate sind einem Domainnamen zugeordnet, nicht einer IP-Adresse.</p> <p>Um die Zertifikate zu erneuern, muss das erneuernde Programm der Beh\u00f6rde (Let's Encrypt) nachweisen, dass es diese Domain tats\u00e4chlich besitzt und kontrolliert.</p> <p>Um dies zu erreichen und den unterschiedlichen Anwendungsanforderungen gerecht zu werden, gibt es mehrere M\u00f6glichkeiten. Einige beliebte Methoden sind:</p> <ul> <li>Einige DNS-Eintr\u00e4ge \u00e4ndern.<ul> <li>Hierf\u00fcr muss das erneuernde Programm die APIs des DNS-Anbieters unterst\u00fctzen. Je nachdem, welchen DNS-Anbieter Sie verwenden, kann dies eine Option sein oder auch nicht.</li> </ul> </li> <li>Als Server ausf\u00fchren (zumindest w\u00e4hrend des Zertifikatserwerbsvorgangs), auf der \u00f6ffentlichen IP-Adresse, die der Domain zugeordnet ist.<ul> <li>Wie oben erw\u00e4hnt, kann nur ein Prozess eine bestimmte IP und einen bestimmten Port \u00fcberwachen.</li> <li>Das ist einer der Gr\u00fcnde, warum es sehr n\u00fctzlich ist, wenn derselbe TLS-Terminierungsproxy auch den Zertifikats-Erneuerungsprozess \u00fcbernimmt.</li> <li>Andernfalls m\u00fcssen Sie m\u00f6glicherweise den TLS-Terminierungsproxy vor\u00fcbergehend stoppen, das Programm starten, welches die neuen Zertifikate beschafft, diese dann mit dem TLS-Terminierungsproxy konfigurieren und dann den TLS-Terminierungsproxy neu starten. Das ist nicht ideal, da Ihre Anwendung(en) w\u00e4hrend der Zeit, in der der TLS-Terminierungsproxy ausgeschaltet ist, nicht erreichbar ist/sind.</li> </ul> </li> </ul> <p>Dieser ganze Erneuerungsprozess, w\u00e4hrend die Anwendung weiterhin bereitgestellt wird, ist einer der Hauptgr\u00fcnde, warum Sie ein separates System zur Verarbeitung von HTTPS mit einem TLS-Terminierungsproxy haben m\u00f6chten, anstatt einfach die TLS-Zertifikate direkt mit dem Anwendungsserver zu verwenden (z. B. Uvicorn).</p>"},{"location":"deployment/https/#zusammenfassung","title":"Zusammenfassung","text":"<p>HTTPS zu haben ist sehr wichtig und in den meisten F\u00e4llen eine kritische Anforderung. Die meiste Arbeit, die Sie als Entwickler in Bezug auf HTTPS aufwenden m\u00fcssen, besteht lediglich darin, diese Konzepte zu verstehen und wie sie funktionieren.</p> <p>Sobald Sie jedoch die grundlegenden Informationen zu HTTPS f\u00fcr Entwickler kennen, k\u00f6nnen Sie verschiedene Tools problemlos kombinieren und konfigurieren, um alles auf einfache Weise zu verwalten.</p> <p>In einigen der n\u00e4chsten Kapitel zeige ich Ihnen einige konkrete Beispiele f\u00fcr die Einrichtung von HTTPS f\u00fcr ReadyAPI-Anwendungen. \ud83d\udd12</p>"},{"location":"deployment/manually/","title":"Einen Server manuell ausf\u00fchren \u2013 Uvicorn","text":"<p>Das Wichtigste, was Sie zum Ausf\u00fchren einer ReadyAPI-Anwendung auf einer entfernten Servermaschine ben\u00f6tigen, ist ein ASGI-Serverprogramm, wie Uvicorn.</p> <p>Es gibt 3 Hauptalternativen:</p> <ul> <li>Uvicorn: ein hochperformanter ASGI-Server.</li> <li>Hypercorn: ein ASGI-Server, der unter anderem mit HTTP/2 und Trio kompatibel ist.</li> <li>Daphne: Der f\u00fcr Django Channels entwickelte ASGI-Server.</li> </ul>"},{"location":"deployment/manually/#servermaschine-und-serverprogramm","title":"Servermaschine und Serverprogramm","text":"<p>Bei den Benennungen gibt es ein kleines Detail, das Sie beachten sollten. \ud83d\udca1</p> <p>Das Wort \u201eServer\u201c bezieht sich h\u00e4ufig sowohl auf den entfernten-/Cloud-Computer (die physische oder virtuelle Maschine) als auch auf das Programm, das auf dieser Maschine ausgef\u00fchrt wird (z. B. Uvicorn).</p> <p>Denken Sie einfach daran, wenn Sie \u201eServer\u201c im Allgemeinen lesen, dass es sich auf eines dieser beiden Dinge beziehen kann.</p> <p>Wenn man sich auf die entfernte Maschine bezieht, wird sie \u00fcblicherweise als Server, aber auch als Maschine, VM (virtuelle Maschine) oder Knoten bezeichnet. Diese Begriffe beziehen sich auf irgendeine Art von entfernten Rechner, normalerweise unter Linux, auf dem Sie Programme ausf\u00fchren.</p>"},{"location":"deployment/manually/#das-serverprogramm-installieren","title":"Das Serverprogramm installieren","text":"<p>Sie k\u00f6nnen einen ASGI-kompatiblen Server installieren mit:</p> UvicornHypercorn <ul> <li>Uvicorn, ein blitzschneller ASGI-Server, basierend auf uvloop und httptools.</li> </ul> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Tipp</p> <p>Durch das Hinzuf\u00fcgen von <code>standard</code> installiert und verwendet Uvicorn einige empfohlene zus\u00e4tzliche Abh\u00e4ngigkeiten.</p> <p>Inklusive <code>uvloop</code>, einen hochperformanten Drop-in-Ersatz f\u00fcr <code>asyncio</code>, welcher f\u00fcr einen gro\u00dfen Leistungsschub bei der Nebenl\u00e4ufigkeit sorgt.</p> <ul> <li>Hypercorn, ein ASGI-Server, der auch mit HTTP/2 kompatibel ist.</li> </ul> <pre><code>$ pip install hypercorn\n\n---&gt; 100%\n</code></pre> <p>... oder jeden anderen ASGI-Server.</p>"},{"location":"deployment/manually/#das-serverprogramm-ausfuhren","title":"Das Serverprogramm ausf\u00fchren","text":"<p>Anschlie\u00dfend k\u00f6nnen Sie Ihre Anwendung auf die gleiche Weise ausf\u00fchren, wie Sie es in den Tutorials getan haben, jedoch ohne die Option <code>--reload</code>, z. B.:</p> UvicornHypercorn <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n</code></pre> <pre><code>$ hypercorn main:app --bind 0.0.0.0:80\n\nRunning on 0.0.0.0:8080 over http (CTRL + C to quit)\n</code></pre> <p>Achtung</p> <p>Denken Sie daran, die Option <code>--reload</code> zu entfernen, wenn Sie diese verwendet haben.</p> <p>Die Option <code>--reload</code> verbraucht viel mehr Ressourcen, ist instabiler, usw.</p> <p>Sie hilft sehr w\u00e4hrend der Entwicklung, aber Sie sollten sie nicht in der Produktion verwenden.</p>"},{"location":"deployment/manually/#hypercorn-mit-trio","title":"Hypercorn mit Trio","text":"<p>Starlette und ReadyAPI basieren auf AnyIO, welches diese sowohl mit der Python-Standardbibliothek asyncio, als auch mit Trio kompatibel macht.</p> <p>Dennoch ist Uvicorn derzeit nur mit asyncio kompatibel und verwendet normalerweise <code>uvloop</code>, den leistungsstarken Drop-in-Ersatz f\u00fcr <code>asyncio</code>.</p> <p>Wenn Sie jedoch Trio direkt verwenden m\u00f6chten, k\u00f6nnen Sie Hypercorn verwenden, da dieses es unterst\u00fctzt. \u2728</p>"},{"location":"deployment/manually/#hypercorn-mit-trio-installieren","title":"Hypercorn mit Trio installieren","text":"<p>Zuerst m\u00fcssen Sie Hypercorn mit Trio-Unterst\u00fctzung installieren:</p> <pre><code>$ pip install \"hypercorn[trio]\"\n---&gt; 100%\n</code></pre>"},{"location":"deployment/manually/#mit-trio-ausfuhren","title":"Mit Trio ausf\u00fchren","text":"<p>Dann k\u00f6nnen Sie die Befehlszeilenoption <code>--worker-class</code> mit dem Wert <code>trio</code> \u00fcbergeben:</p> <pre><code>$ hypercorn main:app --worker-class trio\n</code></pre> <p>Und das startet Hypercorn mit Ihrer Anwendung und verwendet Trio als Backend.</p> <p>Jetzt k\u00f6nnen Sie Trio intern in Ihrer Anwendung verwenden. Oder noch besser: Sie k\u00f6nnen AnyIO verwenden, sodass Ihr Code sowohl mit Trio als auch asyncio kompatibel ist. \ud83c\udf89</p>"},{"location":"deployment/manually/#konzepte-des-deployments","title":"Konzepte des Deployments","text":"<p>Obige Beispiele f\u00fchren das Serverprogramm (z. B. Uvicorn) aus, starten einen einzelnen Prozess und \u00fcberwachen alle IPs (<code>0.0.0.0</code>) an einem vordefinierten Port (z. B. <code>80</code>).</p> <p>Das ist die Grundidee. Aber Sie m\u00f6chten sich wahrscheinlich um einige zus\u00e4tzliche Dinge k\u00fcmmern, wie zum Beispiel:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul> <p>In den n\u00e4chsten Kapiteln erz\u00e4hle ich Ihnen mehr \u00fcber jedes dieser Konzepte, wie Sie \u00fcber diese nachdenken, und gebe Ihnen einige konkrete Beispiele mit Strategien f\u00fcr den Umgang damit. \ud83d\ude80</p>"},{"location":"deployment/server-workers/","title":"Serverworker \u2013 Gunicorn mit Uvicorn","text":"<p>Schauen wir uns die Deployment-Konzepte von fr\u00fcher noch einmal an:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul> <p>Bis zu diesem Punkt, in allen Tutorials in der Dokumentation, haben Sie wahrscheinlich ein Serverprogramm wie Uvicorn ausgef\u00fchrt, in einem einzelnen Prozess.</p> <p>Wenn Sie Anwendungen bereitstellen, m\u00f6chten Sie wahrscheinlich eine gewisse Replikation von Prozessen, um mehrere CPU-Kerne zu nutzen und mehr Requests bearbeiten zu k\u00f6nnen.</p> <p>Wie Sie im vorherigen Kapitel \u00fcber Deployment-Konzepte gesehen haben, gibt es mehrere Strategien, die Sie anwenden k\u00f6nnen.</p> <p>Hier zeige ich Ihnen, wie Sie Gunicorn mit Uvicorn Workerprozessen verwenden.</p> <p>Info</p> <p>Wenn Sie Container verwenden, beispielsweise mit Docker oder Kubernetes, erz\u00e4hle ich Ihnen mehr dar\u00fcber im n\u00e4chsten Kapitel: ReadyAPI in Containern \u2013 Docker.</p> <p>Insbesondere wenn die Anwendung auf Kubernetes l\u00e4uft, werden Sie Gunicorn wahrscheinlich nicht verwenden wollen und stattdessen einen einzelnen Uvicorn-Prozess pro Container ausf\u00fchren wollen, aber ich werde Ihnen sp\u00e4ter in diesem Kapitel mehr dar\u00fcber erz\u00e4hlen.</p>"},{"location":"deployment/server-workers/#gunicorn-mit-uvicorn-workern","title":"Gunicorn mit Uvicorn-Workern","text":"<p>Gunicorn ist haupts\u00e4chlich ein Anwendungsserver, der den WSGI-Standard verwendet. Das bedeutet, dass Gunicorn Anwendungen wie Flask und Django ausliefern kann. Gunicorn selbst ist nicht mit ReadyAPI kompatibel, da ReadyAPI den neuesten ASGI-Standard verwendet.</p> <p>Aber Gunicorn kann als Prozessmanager arbeiten und Benutzer k\u00f6nnen ihm mitteilen, welche bestimmte Workerprozessklasse verwendet werden soll. Dann w\u00fcrde Gunicorn einen oder mehrere Workerprozesse starten, diese Klasse verwendend.</p> <p>Und Uvicorn hat eine Gunicorn-kompatible Workerklasse.</p> <p>Mit dieser Kombination w\u00fcrde Gunicorn als Prozessmanager fungieren und den Port und die IP abh\u00f6ren. Und er w\u00fcrde die Kommunikation an die Workerprozesse weiterleiten, welche die Uvicorn-Klasse ausf\u00fchren.</p> <p>Und dann w\u00e4re die Gunicorn-kompatible Uvicorn-Worker-Klasse daf\u00fcr verantwortlich, die von Gunicorn gesendeten Daten in den ASGI-Standard zu konvertieren, damit ReadyAPI diese verwenden kann.</p>"},{"location":"deployment/server-workers/#gunicorn-und-uvicorn-installieren","title":"Gunicorn und Uvicorn installieren","text":"<pre><code>$ pip install \"uvicorn[standard]\" gunicorn\n\n---&gt; 100%\n</code></pre> <p>Dadurch wird sowohl Uvicorn mit zus\u00e4tzlichen <code>standard</code>-Packages (um eine hohe Leistung zu erzielen) als auch Gunicorn installiert.</p>"},{"location":"deployment/server-workers/#gunicorn-mit-uvicorn-workern-ausfuhren","title":"Gunicorn mit Uvicorn-Workern ausf\u00fchren","text":"<p>Dann k\u00f6nnen Sie Gunicorn ausf\u00fchren mit:</p> <pre><code>$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80\n\n[19499] [INFO] Starting gunicorn 20.1.0\n[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)\n[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker\n[19511] [INFO] Booting worker with pid: 19511\n[19513] [INFO] Booting worker with pid: 19513\n[19514] [INFO] Booting worker with pid: 19514\n[19515] [INFO] Booting worker with pid: 19515\n[19511] [INFO] Started server process [19511]\n[19511] [INFO] Waiting for application startup.\n[19511] [INFO] Application startup complete.\n[19513] [INFO] Started server process [19513]\n[19513] [INFO] Waiting for application startup.\n[19513] [INFO] Application startup complete.\n[19514] [INFO] Started server process [19514]\n[19514] [INFO] Waiting for application startup.\n[19514] [INFO] Application startup complete.\n[19515] [INFO] Started server process [19515]\n[19515] [INFO] Waiting for application startup.\n[19515] [INFO] Application startup complete.\n</code></pre> <p>Sehen wir uns an, was jede dieser Optionen bedeutet:</p> <ul> <li> <p><code>main:app</code>: Das ist die gleiche Syntax, die auch von Uvicorn verwendet wird. <code>main</code> bedeutet das Python-Modul mit dem Namen <code>main</code>, also eine Datei <code>main.py</code>. Und <code>app</code> ist der Name der Variable, welche die ReadyAPI-Anwendung ist.</p> <ul> <li> <p>Stellen Sie sich einfach vor, dass <code>main:app</code> einer Python-<code>import</code>-Anweisung wie der folgenden entspricht:</p> <pre><code>from main import app\n</code></pre> </li> <li> <p>Der Doppelpunkt in <code>main:app</code> entspricht also dem Python-<code>import</code>-Teil in <code>from main import app</code>.</p> </li> </ul> </li> <li> <p><code>--workers</code>: Die Anzahl der zu verwendenden Workerprozesse, jeder f\u00fchrt einen Uvicorn-Worker aus, in diesem Fall 4 Worker.</p> </li> <li> <p><code>--worker-class</code>: Die Gunicorn-kompatible Workerklasse zur Verwendung in den Workerprozessen.</p> <ul> <li> <p>Hier \u00fcbergeben wir die Klasse, die Gunicorn etwa so importiert und verwendet:</p> <pre><code>import uvicorn.workers.UvicornWorker\n</code></pre> </li> </ul> </li> <li> <p><code>--bind</code>: Das teilt Gunicorn die IP und den Port mit, welche abgeh\u00f6rt werden sollen, wobei ein Doppelpunkt (<code>:</code>) verwendet wird, um die IP und den Port zu trennen.</p> <ul> <li>Wenn Sie Uvicorn direkt ausf\u00fchren w\u00fcrden, w\u00fcrden Sie anstelle von <code>--bind 0.0.0.0:80</code> (die Gunicorn-Option) stattdessen <code>--host 0.0.0.0</code> und <code>--port 80</code> verwenden.</li> </ul> </li> </ul> <p>In der Ausgabe k\u00f6nnen Sie sehen, dass die PID (Prozess-ID) jedes Prozesses angezeigt wird (es ist nur eine Zahl).</p> <p>Sie k\u00f6nnen sehen, dass:</p> <ul> <li>Der Gunicorn Prozessmanager beginnt, mit der PID <code>19499</code> (in Ihrem Fall ist es eine andere Nummer).</li> <li>Dann beginnt er zu lauschen: <code>Listening at: http://0.0.0.0:80</code>.</li> <li>Dann erkennt er, dass er die Workerklasse <code>uvicorn.workers.UvicornWorker</code> verwenden muss.</li> <li>Und dann werden 4 Worker gestartet, jeder mit seiner eigenen PID: <code>19511</code>, <code>19513</code>, <code>19514</code> und <code>19515</code>.</li> </ul> <p>Gunicorn w\u00fcrde sich bei Bedarf auch um die Verwaltung beendeter Prozesse und den Neustart von Prozessen k\u00fcmmern, um die Anzahl der Worker aufrechtzuerhalten. Das hilft also teilweise beim Neustarts-Konzept aus der obigen Liste.</p> <p>Dennoch m\u00f6chten Sie wahrscheinlich auch etwas au\u00dferhalb haben, um sicherzustellen, dass Gunicorn bei Bedarf neu gestartet wird, und er auch beim Hochfahren ausgef\u00fchrt wird, usw.</p>"},{"location":"deployment/server-workers/#uvicorn-mit-workern","title":"Uvicorn mit Workern","text":"<p>Uvicorn bietet ebenfalls die M\u00f6glichkeit, mehrere Workerprozesse zu starten und auszuf\u00fchren.</p> <p>Dennoch sind die F\u00e4higkeiten von Uvicorn zur Abwicklung von Workerprozessen derzeit eingeschr\u00e4nkter als die von Gunicorn. Wenn Sie also einen Prozessmanager auf dieser Ebene (auf der Python-Ebene) haben m\u00f6chten, ist es vermutlich besser, es mit Gunicorn als Prozessmanager zu versuchen.</p> <p>Wie auch immer, Sie w\u00fcrden es so ausf\u00fchren:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8080&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>Die einzige neue Option hier ist <code>--workers</code>, die Uvicorn anweist, 4 Workerprozesse zu starten.</p> <p>Sie k\u00f6nnen auch sehen, dass die PID jedes Prozesses angezeigt wird, <code>27365</code> f\u00fcr den \u00fcbergeordneten Prozess (dies ist der Prozessmanager) und eine f\u00fcr jeden Workerprozess: <code>27368</code>, <code>27369</code>, <code>27370</code> und <code>27367</code>.</p>"},{"location":"deployment/server-workers/#deployment-konzepte","title":"Deployment-Konzepte","text":"<p>Hier haben Sie gesehen, wie Sie mit Gunicorn (oder Uvicorn) Uvicorn-Workerprozesse verwalten, um die Ausf\u00fchrung der Anwendung zu parallelisieren, mehrere Kerne der CPU zu nutzen und in der Lage zu sein, mehr Requests zu bedienen.</p> <p>In der Liste der Deployment-Konzepte von oben w\u00fcrde die Verwendung von Workern haupts\u00e4chlich beim Replikation-Teil und ein wenig bei Neustarts helfen, aber Sie m\u00fcssen sich trotzdem um die anderen k\u00fcmmern:</p> <ul> <li>Sicherheit \u2013 HTTPS</li> <li>Beim Hochfahren ausf\u00fchren</li> <li>Neustarts</li> <li>Replikation (die Anzahl der laufenden Prozesse)</li> <li>Arbeitsspeicher</li> <li>Schritte vor dem Start</li> </ul>"},{"location":"deployment/server-workers/#container-und-docker","title":"Container und Docker","text":"<p>Im n\u00e4chsten Kapitel \u00fcber ReadyAPI in Containern \u2013 Docker werde ich einige Strategien erl\u00e4utern, die Sie f\u00fcr den Umgang mit den anderen Deployment-Konzepten verwenden k\u00f6nnen.</p> <p>Ich zeige Ihnen auch das offizielle Docker-Image, welches Gunicorn mit Uvicorn-Workern und einige Standardkonfigurationen enth\u00e4lt, die f\u00fcr einfache F\u00e4lle n\u00fctzlich sein k\u00f6nnen.</p> <p>Dort zeige ich Ihnen auch, wie Sie Ihr eigenes Image von Grund auf erstellen, um einen einzelnen Uvicorn-Prozess (ohne Gunicorn) auszuf\u00fchren. Es ist ein einfacher Vorgang und wahrscheinlich das, was Sie tun m\u00f6chten, wenn Sie ein verteiltes Containerverwaltungssystem wie Kubernetes verwenden.</p>"},{"location":"deployment/server-workers/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen Gunicorn (oder auch Uvicorn) als Prozessmanager mit Uvicorn-Workern verwenden, um Multikern-CPUs zu nutzen und mehrere Prozesse parallel auszuf\u00fchren.</p> <p>Sie k\u00f6nnen diese Tools und Ideen nutzen, wenn Sie Ihr eigenes Deployment-System einrichten und sich dabei selbst um die anderen Deployment-Konzepte k\u00fcmmern.</p> <p>Schauen Sie sich das n\u00e4chste Kapitel an, um mehr \u00fcber ReadyAPI mit Containern (z. B. Docker und Kubernetes) zu erfahren. Sie werden sehen, dass diese Tools auch einfache M\u00f6glichkeiten bieten, die anderen Deployment-Konzepte zu l\u00f6sen. \u2728</p>"},{"location":"deployment/versions/","title":"\u00dcber ReadyAPI-Versionen","text":"<p>ReadyAPI wird bereits in vielen Anwendungen und Systemen produktiv eingesetzt. Und die Testabdeckung wird bei 100 % gehalten. Aber seine Entwicklung geht immer noch schnell voran.</p> <p>Es werden regelm\u00e4\u00dfig neue Funktionen hinzugef\u00fcgt, Fehler werden regelm\u00e4\u00dfig behoben und der Code wird weiterhin kontinuierlich verbessert.</p> <p>Aus diesem Grund sind die aktuellen Versionen immer noch <code>0.x.x</code>, was darauf hindeutet, dass jede Version m\u00f6glicherweise nicht abw\u00e4rtskompatible \u00c4nderungen haben k\u00f6nnte. Dies folgt den Konventionen der semantischen Versionierung.</p> <p>Sie k\u00f6nnen jetzt Produktionsanwendungen mit ReadyAPI erstellen (und das tun Sie wahrscheinlich schon seit einiger Zeit), Sie m\u00fcssen nur sicherstellen, dass Sie eine Version verwenden, die korrekt mit dem Rest Ihres Codes funktioniert.</p>"},{"location":"deployment/versions/#readyapi-version-pinnen","title":"<code>readyapi</code>-Version pinnen","text":"<p>Als Erstes sollten Sie die Version von ReadyAPI, die Sie verwenden, an die h\u00f6chste Version \u201epinnen\u201c, von der Sie wissen, dass sie f\u00fcr Ihre Anwendung korrekt funktioniert.</p> <p>Angenommen, Sie verwenden in Ihrer Anwendung die Version <code>0.45.0</code>.</p> <p>Wenn Sie eine <code>requirements.txt</code>-Datei verwenden, k\u00f6nnen Sie die Version wie folgt angeben:</p> <pre><code>readyapi==0.45.0\n</code></pre> <p>Das w\u00fcrde bedeuten, dass Sie genau die Version <code>0.45.0</code> verwenden.</p> <p>Oder Sie k\u00f6nnen sie auch anpinnen mit:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Das w\u00fcrde bedeuten, dass Sie eine Version <code>0.45.0</code> oder h\u00f6her verwenden w\u00fcrden, aber kleiner als <code>0.46.0</code>, beispielsweise w\u00fcrde eine Version <code>0.45.2</code> immer noch akzeptiert.</p> <p>Wenn Sie zum Verwalten Ihrer Installationen andere Tools wie Poetry, Pipenv oder andere verwenden, sie verf\u00fcgen alle \u00fcber eine M\u00f6glichkeit, bestimmte Versionen f\u00fcr Ihre Packages zu definieren.</p>"},{"location":"deployment/versions/#verfugbare-versionen","title":"Verf\u00fcgbare Versionen","text":"<p>Die verf\u00fcgbaren Versionen k\u00f6nnen Sie in den Release Notes einsehen (z. B. um zu \u00fcberpr\u00fcfen, welches die neueste Version ist).</p>"},{"location":"deployment/versions/#uber-versionen","title":"\u00dcber Versionen","text":"<p>Gem\u00e4\u00df den Konventionen zur semantischen Versionierung k\u00f6nnte jede Version unter <code>1.0.0</code> potenziell nicht abw\u00e4rtskompatible \u00c4nderungen hinzuf\u00fcgen.</p> <p>ReadyAPI folgt auch der Konvention, dass jede \u201ePATCH\u201c-Versions\u00e4nderung f\u00fcr Bugfixes und abw\u00e4rtskompatible \u00c4nderungen gedacht ist.</p> <p>Tipp</p> <p>Der \u201ePATCH\u201c ist die letzte Zahl, zum Beispiel ist in <code>0.2.3</code> die PATCH-Version <code>3</code>.</p> <p>Sie sollten also in der Lage sein, eine Version wie folgt anzupinnen:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Nicht abw\u00e4rtskompatible \u00c4nderungen und neue Funktionen werden in \u201eMINOR\u201c-Versionen hinzugef\u00fcgt.</p> <p>Tipp</p> <p>\u201eMINOR\u201c ist die Zahl in der Mitte, zum Beispiel ist in <code>0.2.3</code> die MINOR-Version <code>2</code>.</p>"},{"location":"deployment/versions/#upgrade-der-readyapi-versionen","title":"Upgrade der ReadyAPI-Versionen","text":"<p>Sie sollten Tests f\u00fcr Ihre Anwendung hinzuf\u00fcgen.</p> <p>Mit ReadyAPI ist das sehr einfach (dank Starlette), schauen Sie sich die Dokumentation an: Testen</p> <p>Nachdem Sie Tests erstellt haben, k\u00f6nnen Sie die ReadyAPI-Version auf eine neuere Version aktualisieren und sicherstellen, dass Ihr gesamter Code ordnungsgem\u00e4\u00df funktioniert, indem Sie Ihre Tests ausf\u00fchren.</p> <p>Wenn alles funktioniert oder nachdem Sie die erforderlichen \u00c4nderungen vorgenommen haben und alle Ihre Tests bestehen, k\u00f6nnen Sie Ihr <code>readyapi</code> an die neue aktuelle Version pinnen.</p>"},{"location":"deployment/versions/#uber-starlette","title":"\u00dcber Starlette","text":"<p>Sie sollten die Version von <code>starlette</code> nicht pinnen.</p> <p>Verschiedene Versionen von ReadyAPI verwenden eine bestimmte neuere Version von Starlette.</p> <p>Sie k\u00f6nnen ReadyAPI also einfach die korrekte Starlette-Version verwenden lassen.</p>"},{"location":"deployment/versions/#uber-pydantic","title":"\u00dcber Pydantic","text":"<p>Pydantic integriert die Tests f\u00fcr ReadyAPI in seine eigenen Tests, sodass neue Versionen von Pydantic (\u00fcber <code>1.0.0</code>) immer mit ReadyAPI kompatibel sind.</p> <p>Sie k\u00f6nnen Pydantic an jede f\u00fcr Sie geeignete Version \u00fcber <code>1.0.0</code> und unter <code>2.0.0</code> anpinnen.</p> <p>Zum Beispiel: <pre><code>pydantic&gt;=1.2.0,&lt;2.0.0\n</code></pre></p>"},{"location":"how-to/","title":"How-To \u2013 Rezepte","text":"<p>Hier finden Sie verschiedene Rezepte und \u201eHow-To\u201c-Anleitungen zu verschiedenen Themen.</p> <p>Die meisten dieser Ideen sind mehr oder weniger unabh\u00e4ngig, und in den meisten F\u00e4llen m\u00fcssen Sie diese nur studieren, wenn sie direkt auf Ihr Projekt anwendbar sind.</p> <p>Wenn etwas f\u00fcr Ihr Projekt interessant und n\u00fctzlich erscheint, lesen Sie es, andernfalls \u00fcberspringen Sie es einfach.</p> <p>Tipp</p> <p>Wenn Sie strukturiert ReadyAPI lernen m\u00f6chten (empfohlen), lesen Sie stattdessen Kapitel f\u00fcr Kapitel das Tutorial \u2013 Benutzerhandbuch.</p>"},{"location":"how-to/conditional-openapi/","title":"Bedingte OpenAPI","text":"<p>Bei Bedarf k\u00f6nnen Sie OpenAPI mithilfe von Einstellungen und Umgebungsvariablen abh\u00e4ngig von der Umgebung bedingt konfigurieren und sogar vollst\u00e4ndig deaktivieren.</p>"},{"location":"how-to/conditional-openapi/#uber-sicherheit-apis-und-dokumentation","title":"\u00dcber Sicherheit, APIs und Dokumentation","text":"<p>Das Verstecken Ihrer Dokumentationsoberfl\u00e4chen in der Produktion sollte nicht die Methode sein, Ihre API zu sch\u00fctzen.</p> <p>Dadurch wird Ihrer API keine zus\u00e4tzliche Sicherheit hinzugef\u00fcgt, die Pfadoperationen sind weiterhin dort verf\u00fcgbar, wo sie sich befinden.</p> <p>Wenn Ihr Code eine Sicherheitsl\u00fccke aufweist, ist diese weiterhin vorhanden.</p> <p>Das Verstecken der Dokumentation macht es nur schwieriger zu verstehen, wie mit Ihrer API interagiert werden kann, und k\u00f6nnte es auch schwieriger machen, diese in der Produktion zu debuggen. Man k\u00f6nnte es einfach als eine Form von Security through obscurity betrachten.</p> <p>Wenn Sie Ihre API sichern m\u00f6chten, gibt es mehrere bessere Dinge, die Sie tun k\u00f6nnen, zum Beispiel:</p> <ul> <li>Stellen Sie sicher, dass Sie \u00fcber gut definierte Pydantic-Modelle f\u00fcr Ihre Requestbodys und Responses verf\u00fcgen.</li> <li>Konfigurieren Sie alle erforderlichen Berechtigungen und Rollen mithilfe von Abh\u00e4ngigkeiten.</li> <li>Speichern Sie niemals Klartext-Passw\u00f6rter, sondern nur Passwort-Hashes.</li> <li>Implementieren und verwenden Sie g\u00e4ngige kryptografische Tools wie Passlib und JWT-Tokens, usw.</li> <li>F\u00fcgen Sie bei Bedarf detailliertere Berechtigungskontrollen mit OAuth2-Scopes hinzu.</li> <li>... usw.</li> </ul> <p>Dennoch kann es sein, dass Sie einen ganz bestimmten Anwendungsfall haben, bei dem Sie die API-Dokumentation f\u00fcr eine bestimmte Umgebung (z. B. f\u00fcr die Produktion) oder abh\u00e4ngig von Konfigurationen aus Umgebungsvariablen wirklich deaktivieren m\u00fcssen.</p>"},{"location":"how-to/conditional-openapi/#bedingte-openapi-aus-einstellungen-und-umgebungsvariablen","title":"Bedingte OpenAPI aus Einstellungen und Umgebungsvariablen","text":"<p>Sie k\u00f6nnen problemlos dieselben Pydantic-Einstellungen verwenden, um Ihre generierte OpenAPI und die Dokumentationsoberfl\u00e4chen zu konfigurieren.</p> <p>Zum Beispiel:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = ReadyAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Hier deklarieren wir die Einstellung <code>openapi_url</code> mit dem gleichen Defaultwert <code>\"/openapi.json\"</code>.</p> <p>Und dann verwenden wir das beim Erstellen der <code>ReadyAPI</code>-App.</p> <p>Dann k\u00f6nnten Sie OpenAPI (einschlie\u00dflich der Dokumentationsoberfl\u00e4chen) deaktivieren, indem Sie die Umgebungsvariable <code>OPENAPI_URL</code> auf einen leeren String setzen, wie zum Beispiel:</p> <pre><code>$ OPENAPI_URL= uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Wenn Sie dann zu den URLs unter <code>/openapi.json</code>, <code>/docs</code> oder <code>/redoc</code> gehen, erhalten Sie lediglich einen <code>404 Not Found</code>-Fehler, wie:</p> <pre><code>{\n    \"detail\": \"Not Found\"\n}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/","title":"Swagger-Oberfl\u00e4che konfigurieren","text":"<p>Sie k\u00f6nnen einige zus\u00e4tzliche Parameter der Swagger-Oberfl\u00e4che konfigurieren.</p> <p>Um diese zu konfigurieren, \u00fcbergeben Sie das Argument <code>swagger_ui_parameters</code> beim Erstellen des <code>ReadyAPI()</code>-App-Objekts oder an die Funktion <code>get_swagger_ui_html()</code>.</p> <p><code>swagger_ui_parameters</code> empf\u00e4ngt ein Dict mit den Konfigurationen, die direkt an die Swagger-Oberfl\u00e4che \u00fcbergeben werden.</p> <p>ReadyAPI konvertiert die Konfigurationen nach JSON, um diese mit JavaScript kompatibel zu machen, da die Swagger-Oberfl\u00e4che das ben\u00f6tigt.</p>"},{"location":"how-to/configure-swagger-ui/#syntaxhervorhebung-deaktivieren","title":"Syntaxhervorhebung deaktivieren","text":"<p>Sie k\u00f6nnten beispielsweise die Syntaxhervorhebung in der Swagger-Oberfl\u00e4che deaktivieren.</p> <p>Ohne \u00c4nderung der Einstellungen ist die Syntaxhervorhebung standardm\u00e4\u00dfig aktiviert:</p> <p></p> <p>Sie k\u00f6nnen sie jedoch deaktivieren, indem Sie <code>syntaxHighlight</code> auf <code>False</code> setzen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>... und dann zeigt die Swagger-Oberfl\u00e4che die Syntaxhervorhebung nicht mehr an:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#das-theme-andern","title":"Das Theme \u00e4ndern","text":"<p>Auf die gleiche Weise k\u00f6nnten Sie das Theme der Syntaxhervorhebung mit dem Schl\u00fcssel <code>syntaxHighlight.theme</code> festlegen (beachten Sie, dass er einen Punkt in der Mitte hat):</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": {\"theme\": \"obsidian\"}})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Obige Konfiguration w\u00fcrde das Theme f\u00fcr die Farbe der Syntaxhervorhebung \u00e4ndern:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#defaultparameter-der-swagger-oberflache-andern","title":"Defaultparameter der Swagger-Oberfl\u00e4che \u00e4ndern","text":"<p>ReadyAPI enth\u00e4lt einige Defaultkonfigurationsparameter, die f\u00fcr die meisten Anwendungsf\u00e4lle geeignet sind.</p> <p>Es umfasst die folgenden Defaultkonfigurationen:</p> Python 3.8+ <pre><code># Code above omitted \ud83d\udc46\n\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.8+ <pre><code>import json\nfrom typing import Any, Dict, Optional\n\nfrom readyapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n\ndef get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre> <p>Sie k\u00f6nnen jede davon \u00fcberschreiben, indem Sie im Argument <code>swagger_ui_parameters</code> einen anderen Wert festlegen.</p> <p>Um beispielsweise <code>deepLinking</code> zu deaktivieren, k\u00f6nnten Sie folgende Einstellungen an <code>swagger_ui_parameters</code> \u00fcbergeben:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/#andere-parameter-der-swagger-oberflache","title":"Andere Parameter der Swagger-Oberfl\u00e4che","text":"<p>Um alle anderen m\u00f6glichen Konfigurationen zu sehen, die Sie verwenden k\u00f6nnen, lesen Sie die offizielle Dokumentation f\u00fcr die Parameter der Swagger-Oberfl\u00e4che.</p>"},{"location":"how-to/configure-swagger-ui/#javascript-basierte-einstellungen","title":"JavaScript-basierte Einstellungen","text":"<p>Die Swagger-Oberfl\u00e4che erlaubt, dass andere Konfigurationen auch JavaScript-Objekte sein k\u00f6nnen (z. B. JavaScript-Funktionen).</p> <p>ReadyAPI umfasst auch diese Nur-JavaScript-<code>presets</code>-Einstellungen:</p> <pre><code>presets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n</code></pre> <p>Dabei handelt es sich um JavaScript-Objekte, nicht um Strings, daher k\u00f6nnen Sie diese nicht direkt vom Python-Code aus \u00fcbergeben.</p> <p>Wenn Sie solche JavaScript-Konfigurationen verwenden m\u00fcssen, k\u00f6nnen Sie einen der fr\u00fcher genannten Wege verwenden. \u00dcberschreiben Sie alle Pfadoperationen der Swagger-Oberfl\u00e4che und schreiben Sie manuell jedes ben\u00f6tigte JavaScript.</p>"},{"location":"how-to/custom-docs-ui-assets/","title":"Statische Assets der Dokumentationsoberfl\u00e4che (selbst hosten)","text":"<p>Die API-Dokumentation verwendet Swagger UI und ReDoc, und jede dieser Dokumentationen ben\u00f6tigt einige JavaScript- und CSS-Dateien.</p> <p>Standardm\u00e4\u00dfig werden diese Dateien von einem CDN bereitgestellt.</p> <p>Es ist jedoch m\u00f6glich, das anzupassen, ein bestimmtes CDN festzulegen oder die Dateien selbst bereitzustellen.</p>"},{"location":"how-to/custom-docs-ui-assets/#benutzerdefiniertes-cdn-fur-javascript-und-css","title":"Benutzerdefiniertes CDN f\u00fcr JavaScript und CSS","text":"<p>Nehmen wir an, Sie m\u00f6chten ein anderes CDN verwenden, zum Beispiel m\u00f6chten Sie <code>https://unpkg.com/</code> verwenden.</p> <p>Das kann n\u00fctzlich sein, wenn Sie beispielsweise in einem Land leben, in dem bestimmte URLs eingeschr\u00e4nkt sind.</p>"},{"location":"how-to/custom-docs-ui-assets/#die-automatischen-dokumentationen-deaktivieren","title":"Die automatischen Dokumentationen deaktivieren","text":"<p>Der erste Schritt besteht darin, die automatischen Dokumentationen zu deaktivieren, da diese standardm\u00e4\u00dfig das Standard-CDN verwenden.</p> <p>Um diese zu deaktivieren, setzen Sie deren URLs beim Erstellen Ihrer <code>ReadyAPI</code>-App auf <code>None</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#die-benutzerdefinierten-dokumentationen-hinzufugen","title":"Die benutzerdefinierten Dokumentationen hinzuf\u00fcgen","text":"<p>Jetzt k\u00f6nnen Sie die Pfadoperationen f\u00fcr die benutzerdefinierten Dokumentationen erstellen.</p> <p>Sie k\u00f6nnen die internen Funktionen von ReadyAPI wiederverwenden, um die HTML-Seiten f\u00fcr die Dokumentation zu erstellen und ihnen die erforderlichen Argumente zu \u00fcbergeben:</p> <ul> <li><code>openapi_url</code>: die URL, unter welcher die HTML-Seite f\u00fcr die Dokumentation das OpenAPI-Schema f\u00fcr Ihre API abrufen kann. Sie k\u00f6nnen hier das Attribut <code>app.openapi_url</code> verwenden.</li> <li><code>title</code>: der Titel Ihrer API.</li> <li><code>oauth2_redirect_url</code>: Sie k\u00f6nnen hier <code>app.swagger_ui_oauth2_redirect_url</code> verwenden, um die Standardeinstellung zu verwenden.</li> <li><code>swagger_js_url</code>: die URL, unter welcher der HTML-Code f\u00fcr Ihre Swagger-UI-Dokumentation die JavaScript-Datei abrufen kann. Dies ist die benutzerdefinierte CDN-URL.</li> <li><code>swagger_css_url</code>: die URL, unter welcher der HTML-Code f\u00fcr Ihre Swagger-UI-Dokumentation die CSS-Datei abrufen kann. Dies ist die benutzerdefinierte CDN-URL.</li> </ul> <p>Und genau so f\u00fcr ReDoc ...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tipp</p> <p>Die Pfadoperation f\u00fcr <code>swagger_ui_redirect</code> ist ein Hilfsmittel bei der Verwendung von OAuth2.</p> <p>Wenn Sie Ihre API mit einem OAuth2-Anbieter integrieren, k\u00f6nnen Sie sich authentifizieren und mit den erworbenen Anmeldeinformationen zur API-Dokumentation zur\u00fcckkehren. Und mit ihr interagieren, die echte OAuth2-Authentifizierung verwendend.</p> <p>Swagger UI erledigt das hinter den Kulissen f\u00fcr Sie, ben\u00f6tigt aber diesen \u201eUmleitungs\u201c-Helfer.</p>"},{"location":"how-to/custom-docs-ui-assets/#eine-pfadoperation-erstellen-um-es-zu-testen","title":"Eine Pfadoperation erstellen, um es zu testen","text":"<p>Um nun testen zu k\u00f6nnen, ob alles funktioniert, erstellen Sie eine Pfadoperation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#es-ausprobieren","title":"Es ausprobieren","text":"<p>Jetzt sollten Sie in der Lage sein, zu Ihrer Dokumentation auf http://127.0.0.1:8000/docs zu gehen und die Seite neu zuladen, die Assets werden nun vom neuen CDN geladen.</p>"},{"location":"how-to/custom-docs-ui-assets/#javascript-und-css-fur-die-dokumentation-selbst-hosten","title":"JavaScript und CSS f\u00fcr die Dokumentation selbst hosten","text":"<p>Das Selbst Hosten von JavaScript und CSS kann n\u00fctzlich sein, wenn Sie beispielsweise m\u00f6chten, dass Ihre Anwendung auch offline, ohne bestehenden Internetzugang oder in einem lokalen Netzwerk weiter funktioniert.</p> <p>Hier erfahren Sie, wie Sie diese Dateien selbst in derselben ReadyAPI-App bereitstellen und die Dokumentation f\u00fcr deren Verwendung konfigurieren.</p>"},{"location":"how-to/custom-docs-ui-assets/#projektdateistruktur","title":"Projektdateistruktur","text":"<p>Nehmen wir an, die Dateistruktur Ihres Projekts sieht folgenderma\u00dfen aus:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n</code></pre> <p>Erstellen Sie jetzt ein Verzeichnis zum Speichern dieser statischen Dateien.</p> <p>Ihre neue Dateistruktur k\u00f6nnte so aussehen:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static/\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#die-dateien-herunterladen","title":"Die Dateien herunterladen","text":"<p>Laden Sie die f\u00fcr die Dokumentation ben\u00f6tigten statischen Dateien herunter und legen Sie diese im Verzeichnis <code>static/</code> ab.</p> <p>Sie k\u00f6nnen wahrscheinlich mit der rechten Maustaste auf jeden Link klicken und eine Option wie etwa <code>Link speichern unter...</code> ausw\u00e4hlen.</p> <p>Swagger UI verwendet folgende Dateien:</p> <ul> <li><code>swagger-ui-bundle.js</code></li> <li><code>swagger-ui.css</code></li> </ul> <p>Und ReDoc verwendet diese Datei:</p> <ul> <li><code>redoc.standalone.js</code></li> </ul> <p>Danach k\u00f6nnte Ihre Dateistruktur wie folgt aussehen:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static\n    \u251c\u2500\u2500 redoc.standalone.js\n    \u251c\u2500\u2500 swagger-ui-bundle.js\n    \u2514\u2500\u2500 swagger-ui.css\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#die-statischen-dateien-bereitstellen","title":"Die statischen Dateien bereitstellen","text":"<ul> <li>Importieren Sie <code>StaticFiles</code>.</li> <li>\u201eMounten\u201c Sie eine <code>StaticFiles()</code>-Instanz in einem bestimmten Pfad.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#die-statischen-dateien-testen","title":"Die statischen Dateien testen","text":"<p>Starten Sie Ihre Anwendung und gehen Sie auf http://127.0.0.1:8000/static/redoc.standalone.js.</p> <p>Sie sollten eine sehr lange JavaScript-Datei f\u00fcr ReDoc sehen.</p> <p>Sie k\u00f6nnte beginnen mit etwas wie:</p> <pre><code>/*! For license information please see redoc.standalone.js.LICENSE.txt */\n!function(e,t){\"object\"==typeof exports&amp;&amp;\"object\"==typeof module?module.exports=t(require(\"null\")):\n...\n</code></pre> <p>Das zeigt, dass Sie statische Dateien aus Ihrer Anwendung bereitstellen k\u00f6nnen und dass Sie die statischen Dateien f\u00fcr die Dokumentation an der richtigen Stelle platziert haben.</p> <p>Jetzt k\u00f6nnen wir die Anwendung so konfigurieren, dass sie diese statischen Dateien f\u00fcr die Dokumentation verwendet.</p>"},{"location":"how-to/custom-docs-ui-assets/#die-automatischen-dokumentationen-deaktivieren-fur-statische-dateien","title":"Die automatischen Dokumentationen deaktivieren, f\u00fcr statische Dateien","text":"<p>Wie bei der Verwendung eines benutzerdefinierten CDN besteht der erste Schritt darin, die automatischen Dokumentationen zu deaktivieren, da diese standardm\u00e4\u00dfig das CDN verwenden.</p> <p>Um diese zu deaktivieren, setzen Sie deren URLs beim Erstellen Ihrer <code>ReadyAPI</code>-App auf <code>None</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#die-benutzerdefinierten-dokumentationen-mit-statischen-dateien-hinzufugen","title":"Die benutzerdefinierten Dokumentationen, mit statischen Dateien, hinzuf\u00fcgen","text":"<p>Und genau wie bei einem benutzerdefinierten CDN k\u00f6nnen Sie jetzt die Pfadoperationen f\u00fcr die benutzerdefinierten Dokumentationen erstellen.</p> <p>Auch hier k\u00f6nnen Sie die internen Funktionen von ReadyAPI wiederverwenden, um die HTML-Seiten f\u00fcr die Dokumentationen zu erstellen, und diesen die erforderlichen Argumente \u00fcbergeben:</p> <ul> <li><code>openapi_url</code>: die URL, unter der die HTML-Seite f\u00fcr die Dokumentation das OpenAPI-Schema f\u00fcr Ihre API abrufen kann. Sie k\u00f6nnen hier das Attribut <code>app.openapi_url</code> verwenden.</li> <li><code>title</code>: der Titel Ihrer API.</li> <li><code>oauth2_redirect_url</code>: Sie k\u00f6nnen hier <code>app.swagger_ui_oauth2_redirect_url</code> verwenden, um die Standardeinstellung zu verwenden.</li> <li><code>swagger_js_url</code>: die URL, unter welcher der HTML-Code f\u00fcr Ihre Swagger-UI-Dokumentation die JavaScript-Datei abrufen kann. Das ist die, welche jetzt von Ihrer eigenen Anwendung bereitgestellt wird.</li> <li><code>swagger_css_url</code>: die URL, unter welcher der HTML-Code f\u00fcr Ihre Swagger-UI-Dokumentation die CSS-Datei abrufen kann. Das ist die, welche jetzt von Ihrer eigenen Anwendung bereitgestellt wird.</li> </ul> <p>Und genau so f\u00fcr ReDoc ...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tipp</p> <p>Die Pfadoperation f\u00fcr <code>swagger_ui_redirect</code> ist ein Hilfsmittel bei der Verwendung von OAuth2.</p> <p>Wenn Sie Ihre API mit einem OAuth2-Anbieter integrieren, k\u00f6nnen Sie sich authentifizieren und mit den erworbenen Anmeldeinformationen zur API-Dokumentation zur\u00fcckkehren. Und mit ihr interagieren, die echte OAuth2-Authentifizierung verwendend.</p> <p>Swagger UI erledigt das hinter den Kulissen f\u00fcr Sie, ben\u00f6tigt aber diesen \u201eUmleitungs\u201c-Helfer.</p>"},{"location":"how-to/custom-docs-ui-assets/#eine-pfadoperation-erstellen-um-statische-dateien-zu-testen","title":"Eine Pfadoperation erstellen, um statische Dateien zu testen","text":"<p>Um nun testen zu k\u00f6nnen, ob alles funktioniert, erstellen Sie eine Pfadoperation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#benutzeroberflache-mit-statischen-dateien-testen","title":"Benutzeroberfl\u00e4che, mit statischen Dateien, testen","text":"<p>Jetzt sollten Sie in der Lage sein, Ihr WLAN zu trennen, gehen Sie zu Ihrer Dokumentation unter http://127.0.0.1:8000/docs und laden Sie die Seite neu.</p> <p>Und selbst ohne Internet k\u00f6nnten Sie die Dokumentation f\u00fcr Ihre API sehen und damit interagieren.</p>"},{"location":"how-to/custom-request-and-route/","title":"Benutzerdefinierte Request- und APIRoute-Klasse","text":"<p>In einigen F\u00e4llen m\u00f6chten Sie m\u00f6glicherweise die von den Klassen <code>Request</code> und <code>APIRoute</code> verwendete Logik \u00fcberschreiben.</p> <p>Das kann insbesondere eine gute Alternative zur Logik in einer Middleware sein.</p> <p>Wenn Sie beispielsweise den Requestbody lesen oder manipulieren m\u00f6chten, bevor er von Ihrer Anwendung verarbeitet wird.</p> <p>Gefahr</p> <p>Dies ist eine \u201efortgeschrittene\u201c Funktion.</p> <p>Wenn Sie gerade erst mit ReadyAPI beginnen, m\u00f6chten Sie diesen Abschnitt vielleicht \u00fcberspringen.</p>"},{"location":"how-to/custom-request-and-route/#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":"<p>Einige Anwendungsf\u00e4lle sind:</p> <ul> <li>Konvertieren von Nicht-JSON-Requestbodys nach JSON (z. B. <code>msgpack</code>).</li> <li>Dekomprimierung gzip-komprimierter Requestbodys.</li> <li>Automatisches Loggen aller Requestbodys.</li> </ul>"},{"location":"how-to/custom-request-and-route/#handhaben-von-benutzerdefinierten-requestbody-kodierungen","title":"Handhaben von benutzerdefinierten Requestbody-Kodierungen","text":"<p>Sehen wir uns an, wie Sie eine benutzerdefinierte <code>Request</code>-Unterklasse verwenden, um gzip-Requests zu dekomprimieren.</p> <p>Und eine <code>APIRoute</code>-Unterklasse zur Verwendung dieser benutzerdefinierten Requestklasse.</p>"},{"location":"how-to/custom-request-and-route/#eine-benutzerdefinierte-gziprequest-klasse-erstellen","title":"Eine benutzerdefinierte <code>GzipRequest</code>-Klasse erstellen","text":"<p>Tipp</p> <p>Dies ist nur ein einfaches Beispiel, um zu demonstrieren, wie es funktioniert. Wenn Sie Gzip-Unterst\u00fctzung ben\u00f6tigen, k\u00f6nnen Sie die bereitgestellte <code>GzipMiddleware</code> verwenden.</p> <p>Zuerst erstellen wir eine <code>GzipRequest</code>-Klasse, welche die Methode <code>Request.body()</code> \u00fcberschreibt, um den Body bei Vorhandensein eines entsprechenden Headers zu dekomprimieren.</p> <p>Wenn der Header kein <code>gzip</code> enth\u00e4lt, wird nicht versucht, den Body zu dekomprimieren.</p> <p>Auf diese Weise kann dieselbe Routenklasse gzip-komprimierte oder unkomprimierte Requests verarbeiten.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre>"},{"location":"how-to/custom-request-and-route/#eine-benutzerdefinierte-gziproute-klasse-erstellen","title":"Eine benutzerdefinierte <code>GzipRoute</code>-Klasse erstellen","text":"<p>Als N\u00e4chstes erstellen wir eine benutzerdefinierte Unterklasse von <code>readyapi.routing.APIRoute</code>, welche <code>GzipRequest</code> nutzt.</p> <p>Dieses Mal wird die Methode <code>APIRoute.get_route_handler()</code> \u00fcberschrieben.</p> <p>Diese Methode gibt eine Funktion zur\u00fcck. Und diese Funktion empf\u00e4ngt einen Request und gibt eine Response zur\u00fcck.</p> <p>Hier verwenden wir sie, um aus dem urspr\u00fcnglichen Request einen <code>GzipRequest</code> zu erstellen.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre> <p>Technische Details</p> <p>Ein <code>Request</code> hat ein <code>request.scope</code>-Attribut, welches einfach ein Python-<code>dict</code> ist, welches die mit dem Request verbundenen Metadaten enth\u00e4lt.</p> <p>Ein <code>Request</code> hat auch ein <code>request.receive</code>, welches eine Funktion ist, die den Hauptteil des Requests empf\u00e4ngt.</p> <p>Das <code>scope</code>-<code>dict</code> und die <code>receive</code>-Funktion sind beide Teil der ASGI-Spezifikation.</p> <p>Und diese beiden Dinge, <code>scope</code> und <code>receive</code>, werden ben\u00f6tigt, um eine neue <code>Request</code>-Instanz zu erstellen.</p> <p>Um mehr \u00fcber den <code>Request</code> zu erfahren, schauen Sie sich Starlettes Dokumentation zu Requests an.</p> <p>Das Einzige, was die von <code>GzipRequest.get_route_handler</code> zur\u00fcckgegebene Funktion anders macht, ist die Konvertierung von <code>Request</code> in ein <code>GzipRequest</code>.</p> <p>Dabei k\u00fcmmert sich unser <code>GzipRequest</code> um die Dekomprimierung der Daten (falls erforderlich), bevor diese an unsere Pfadoperationen weitergegeben werden.</p> <p>Danach ist die gesamte Verarbeitungslogik dieselbe.</p> <p>Aufgrund unserer \u00c4nderungen in <code>GzipRequest.body</code> wird der Requestbody jedoch bei Bedarf automatisch dekomprimiert, wenn er von ReadyAPI geladen wird.</p>"},{"location":"how-to/custom-request-and-route/#zugriff-auf-den-requestbody-in-einem-exceptionhandler","title":"Zugriff auf den Requestbody in einem Exceptionhandler","text":"<p>Tipp</p> <p>Um dasselbe Problem zu l\u00f6sen, ist es wahrscheinlich viel einfacher, den <code>body</code> in einem benutzerdefinierten Handler f\u00fcr <code>RequestValidationError</code> zu verwenden (Fehlerbehandlung).</p> <p>Dieses Beispiel ist jedoch immer noch g\u00fcltig und zeigt, wie mit den internen Komponenten interagiert wird.</p> <p>Wir k\u00f6nnen denselben Ansatz auch verwenden, um in einem Exceptionhandler auf den Requestbody zuzugreifen.</p> <p>Alles, was wir tun m\u00fcssen, ist, den Request innerhalb eines <code>try</code>/<code>except</code>-Blocks zu handhaben:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre> <p>Wenn eine Exception auftritt, befindet sich die <code>Request</code>-Instanz weiterhin im G\u00fcltigkeitsbereich, sodass wir den Requestbody lesen und bei der Fehlerbehandlung verwenden k\u00f6nnen:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre>"},{"location":"how-to/custom-request-and-route/#benutzerdefinierte-apiroute-klasse-in-einem-router","title":"Benutzerdefinierte <code>APIRoute</code>-Klasse in einem Router","text":"<p>Sie k\u00f6nnen auch den Parameter <code>route_class</code> eines <code>APIRouter</code> festlegen:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre> <p>In diesem Beispiel verwenden die Pfadoperationen unter dem <code>router</code> die benutzerdefinierte <code>TimedRoute</code>-Klasse und haben in der Response einen zus\u00e4tzlichen <code>X-Response-Time</code>-Header mit der Zeit, die zum Generieren der Response ben\u00f6tigt wurde:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre>"},{"location":"how-to/extending-openapi/","title":"OpenAPI erweitern","text":"<p>In einigen F\u00e4llen m\u00fcssen Sie m\u00f6glicherweise das generierte OpenAPI-Schema \u00e4ndern.</p> <p>In diesem Abschnitt erfahren Sie, wie.</p>"},{"location":"how-to/extending-openapi/#der-normale-vorgang","title":"Der normale Vorgang","text":"<p>Der normale (Standard-)Prozess ist wie folgt.</p> <p>Eine <code>ReadyAPI</code>-Anwendung (-Instanz) verf\u00fcgt \u00fcber eine <code>.openapi()</code>-Methode, von der erwartet wird, dass sie das OpenAPI-Schema zur\u00fcckgibt.</p> <p>Als Teil der Erstellung des Anwendungsobjekts wird eine Pfadoperation f\u00fcr <code>/openapi.json</code> (oder welcher Wert f\u00fcr den Parameter <code>openapi_url</code> gesetzt wurde) registriert.</p> <p>Diese gibt lediglich eine JSON-Response zur\u00fcck, mit dem Ergebnis der Methode <code>.openapi()</code> der Anwendung.</p> <p>Standardm\u00e4\u00dfig \u00fcberpr\u00fcft die Methode <code>.openapi()</code> die Eigenschaft <code>.openapi_schema</code>, um zu sehen, ob diese Inhalt hat, und gibt diesen zur\u00fcck.</p> <p>Ist das nicht der Fall, wird der Inhalt mithilfe der Hilfsfunktion unter <code>readyapi.openapi.utils.get_openapi</code> generiert.</p> <p>Und diese Funktion <code>get_openapi()</code> erh\u00e4lt als Parameter:</p> <ul> <li><code>title</code>: Der OpenAPI-Titel, der in der Dokumentation angezeigt wird.</li> <li><code>version</code>: Die Version Ihrer API, z. B. <code>2.5.0</code>.</li> <li><code>openapi_version</code>: Die Version der verwendeten OpenAPI-Spezifikation. Standardm\u00e4\u00dfig die neueste Version: <code>3.1.0</code>.</li> <li><code>summary</code>: Eine kurze Zusammenfassung der API.</li> <li><code>description</code>: Die Beschreibung Ihrer API. Dies kann Markdown enthalten und wird in der Dokumentation angezeigt.</li> <li><code>routes</code>: Eine Liste von Routen, dies sind alle registrierten Pfadoperationen. Sie stammen von <code>app.routes</code>.</li> </ul> <p>Info</p> <p>Der Parameter <code>summary</code> ist in OpenAPI 3.1.0 und h\u00f6her verf\u00fcgbar und wird von ReadyAPI 0.99.0 und h\u00f6her unterst\u00fctzt.</p>"},{"location":"how-to/extending-openapi/#uberschreiben-der-standardeinstellungen","title":"\u00dcberschreiben der Standardeinstellungen","text":"<p>Mithilfe der oben genannten Informationen k\u00f6nnen Sie dieselbe Hilfsfunktion verwenden, um das OpenAPI-Schema zu generieren und jeden ben\u00f6tigten Teil zu \u00fcberschreiben.</p> <p>F\u00fcgen wir beispielsweise ReDocs OpenAPI-Erweiterung zum Einbinden eines benutzerdefinierten Logos hinzu.</p>"},{"location":"how-to/extending-openapi/#normales-readyapi","title":"Normales ReadyAPI","text":"<p>Schreiben Sie zun\u00e4chst wie gewohnt Ihre ganze ReadyAPI-Anwendung:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#das-openapi-schema-generieren","title":"Das OpenAPI-Schema generieren","text":"<p>Verwenden Sie dann dieselbe Hilfsfunktion, um das OpenAPI-Schema innerhalb einer <code>custom_openapi()</code>-Funktion zu generieren:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#das-openapi-schema-andern","title":"Das OpenAPI-Schema \u00e4ndern","text":"<p>Jetzt k\u00f6nnen Sie die ReDoc-Erweiterung hinzuf\u00fcgen und dem <code>info</code>-\u201eObjekt\u201c im OpenAPI-Schema ein benutzerdefiniertes <code>x-logo</code> hinzuf\u00fcgen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#zwischenspeichern-des-openapi-schemas","title":"Zwischenspeichern des OpenAPI-Schemas","text":"<p>Sie k\u00f6nnen die Eigenschaft <code>.openapi_schema</code> als \u201eCache\u201c verwenden, um Ihr generiertes Schema zu speichern.</p> <p>Auf diese Weise muss Ihre Anwendung das Schema nicht jedes Mal generieren, wenn ein Benutzer Ihre API-Dokumentation \u00f6ffnet.</p> <p>Es wird nur einmal generiert und dann wird dasselbe zwischengespeicherte Schema f\u00fcr die n\u00e4chsten Requests verwendet.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#die-methode-uberschreiben","title":"Die Methode \u00fcberschreiben","text":"<p>Jetzt k\u00f6nnen Sie die Methode <code>.openapi()</code> durch Ihre neue Funktion ersetzen.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#testen","title":"Testen","text":"<p>Sobald Sie auf http://127.0.0.1:8000/redoc gehen, werden Sie sehen, dass Ihr benutzerdefiniertes Logo verwendet wird (in diesem Beispiel das Logo von ReadyAPI):</p> <p></p>"},{"location":"how-to/general/","title":"Allgemeines \u2013 How-To \u2013 Rezepte","text":"<p>Hier finden Sie mehrere Verweise auf andere Stellen in der Dokumentation, f\u00fcr allgemeine oder h\u00e4ufige Fragen.</p>"},{"location":"how-to/general/#daten-filtern-sicherheit","title":"Daten filtern \u2013 Sicherheit","text":"<p>Um sicherzustellen, dass Sie nicht mehr Daten zur\u00fcckgeben, als Sie sollten, lesen Sie die Dokumentation unter Tutorial \u2013 Responsemodell \u2013 R\u00fcckgabetyp.</p>"},{"location":"how-to/general/#dokumentations-tags-openapi","title":"Dokumentations-Tags \u2013 OpenAPI","text":"<p>Um Tags zu Ihren Pfadoperationen hinzuzuf\u00fcgen und diese in der Oberfl\u00e4che der Dokumentation zu gruppieren, lesen Sie die Dokumentation unter Tutorial \u2013 Pfadoperation-Konfiguration \u2013 Tags.</p>"},{"location":"how-to/general/#zusammenfassung-und-beschreibung-in-der-dokumentation-openapi","title":"Zusammenfassung und Beschreibung in der Dokumentation \u2013 OpenAPI","text":"<p>Um Ihren Pfadoperationen eine Zusammenfassung und Beschreibung hinzuzuf\u00fcgen und diese in der Oberfl\u00e4che der Dokumentation anzuzeigen, lesen Sie die Dokumentation unter Tutorial \u2013 Pfadoperation-Konfiguration \u2013 Zusammenfassung und Beschreibung.</p>"},{"location":"how-to/general/#beschreibung-der-response-in-der-dokumentation-openapi","title":"Beschreibung der Response in der Dokumentation \u2013 OpenAPI","text":"<p>Um die Beschreibung der Response zu definieren, welche in der Oberfl\u00e4che der Dokumentation angezeigt wird, lesen Sie die Dokumentation unter Tutorial \u2013 Pfadoperation-Konfiguration \u2013 Beschreibung der Response.</p>"},{"location":"how-to/general/#pfadoperation-in-der-dokumentation-deprecaten-openapi","title":"Pfadoperation in der Dokumentation deprecaten \u2013 OpenAPI","text":"<p>Um eine Pfadoperation zu deprecaten \u2013 sie als veraltet zu markieren \u2013 und das in der Oberfl\u00e4che der Dokumentation anzuzeigen, lesen Sie die Dokumentation unter Tutorial \u2013 Pfadoperation-Konfiguration \u2013 Deprecaten.</p>"},{"location":"how-to/general/#daten-in-etwas-json-kompatibles-konvertieren","title":"Daten in etwas JSON-kompatibles konvertieren","text":"<p>Um Daten in etwas JSON-kompatibles zu konvertieren, lesen Sie die Dokumentation unter Tutorial \u2013 JSON-kompatibler Encoder.</p>"},{"location":"how-to/general/#openapi-metadaten-dokumentation","title":"OpenAPI-Metadaten \u2013 Dokumentation","text":"<p>Um Metadaten zu Ihrem OpenAPI-Schema hinzuzuf\u00fcgen, einschlie\u00dflich einer Lizenz, Version, Kontakt, usw., lesen Sie die Dokumentation unter Tutorial \u2013 Metadaten und URLs der Dokumentationen.</p>"},{"location":"how-to/general/#benutzerdefinierte-openapi-url","title":"Benutzerdefinierte OpenAPI-URL","text":"<p>Um die OpenAPI-URL anzupassen (oder zu entfernen), lesen Sie die Dokumentation unter Tutorial \u2013 Metadaten und URLs der Dokumentationen.</p>"},{"location":"how-to/general/#urls-der-openapi-dokumentationen","title":"URLs der OpenAPI-Dokumentationen","text":"<p>Um die URLs zu aktualisieren, die f\u00fcr die automatisch generierten Dokumentations-Oberfl\u00e4chen verwendet werden, lesen Sie die Dokumentation unter Tutorial \u2013 Metadaten und URLs der Dokumentationen.</p>"},{"location":"how-to/graphql/","title":"GraphQL","text":"<p>Da ReadyAPI auf dem ASGI-Standard basiert, ist es sehr einfach, jede GraphQL-Bibliothek zu integrieren, die auch mit ASGI kompatibel ist.</p> <p>Sie k\u00f6nnen normale ReadyAPI-Pfadoperationen mit GraphQL in derselben Anwendung kombinieren.</p> <p>Tipp</p> <p>GraphQL l\u00f6st einige sehr spezifische Anwendungsf\u00e4lle.</p> <p>Es hat Vorteile und Nachteile im Vergleich zu g\u00e4ngigen Web-APIs.</p> <p>Wiegen Sie ab, ob die Vorteile f\u00fcr Ihren Anwendungsfall die Nachteile ausgleichen. \ud83e\udd13</p>"},{"location":"how-to/graphql/#graphql-bibliotheken","title":"GraphQL-Bibliotheken","text":"<p>Hier sind einige der GraphQL-Bibliotheken, welche ASGI unterst\u00fctzen. Diese k\u00f6nnten Sie mit ReadyAPI verwenden:</p> <ul> <li>Strawberry \ud83c\udf53<ul> <li>Mit Dokumentation f\u00fcr ReadyAPI</li> </ul> </li> <li>Ariadne<ul> <li>Mit Dokumentation f\u00fcr ReadyAPI</li> </ul> </li> <li>Tartiflette<ul> <li>Mit Tartiflette ASGI, f\u00fcr ASGI-Integration</li> </ul> </li> <li>Graphene<ul> <li>Mit starlette-graphene3</li> </ul> </li> </ul>"},{"location":"how-to/graphql/#graphql-mit-strawberry","title":"GraphQL mit Strawberry","text":"<p>Wenn Sie mit GraphQL arbeiten m\u00f6chten oder m\u00fcssen, ist Strawberry die empfohlene Bibliothek, da deren Design dem Design von ReadyAPI am n\u00e4chsten kommt und alles auf Typannotationen basiert.</p> <p>Abh\u00e4ngig von Ihrem Anwendungsfall bevorzugen Sie vielleicht eine andere Bibliothek, aber wenn Sie mich fragen w\u00fcrden, w\u00fcrde ich Ihnen wahrscheinlich empfehlen, Strawberry auszuprobieren.</p> <p>Hier ist eine kleine Vorschau, wie Sie Strawberry mit ReadyAPI integrieren k\u00f6nnen:</p> Python 3.8+ <pre><code>import strawberry\nfrom readyapi import ReadyAPI\nfrom strawberry.readyapi import GraphQLRouter\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -&gt; User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQLRouter(schema)\n\napp = ReadyAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>Weitere Informationen zu Strawberry finden Sie in der Strawberry-Dokumentation.</p> <p>Und auch die Dokumentation zu Strawberry mit ReadyAPI.</p>"},{"location":"how-to/graphql/#altere-graphqlapp-von-starlette","title":"\u00c4ltere <code>GraphQLApp</code> von Starlette","text":"<p>Fr\u00fchere Versionen von Starlette enthielten eine <code>GraphQLApp</code>-Klasse zur Integration mit Graphene.</p> <p>Das wurde von Starlette deprecated, aber wenn Sie Code haben, der das verwendet, k\u00f6nnen Sie einfach zu starlette-graphene3 migrieren, welches denselben Anwendungsfall abdeckt und \u00fcber eine fast identische Schnittstelle verf\u00fcgt.</p> <p>Tipp</p> <p>Wenn Sie GraphQL ben\u00f6tigen, w\u00fcrde ich Ihnen trotzdem empfehlen, sich Strawberry anzuschauen, da es auf Typannotationen basiert, statt auf benutzerdefinierten Klassen und Typen.</p>"},{"location":"how-to/graphql/#mehr-daruber-lernen","title":"Mehr dar\u00fcber lernen","text":"<p>Weitere Informationen zu GraphQL finden Sie in der offiziellen GraphQL-Dokumentation.</p> <p>Sie k\u00f6nnen auch mehr \u00fcber jede der oben beschriebenen Bibliotheken in den jeweiligen Links lesen.</p>"},{"location":"how-to/separate-openapi-schemas/","title":"Separate OpenAPI-Schemas f\u00fcr Eingabe und Ausgabe oder nicht","text":"<p>Bei Verwendung von Pydantic v2 ist die generierte OpenAPI etwas genauer und korrekter als zuvor. \ud83d\ude0e</p> <p>Tats\u00e4chlich gibt es in einigen F\u00e4llen sogar zwei JSON-Schemas in OpenAPI f\u00fcr dasselbe Pydantic-Modell f\u00fcr Eingabe und Ausgabe, je nachdem, ob sie Defaultwerte haben.</p> <p>Sehen wir uns an, wie das funktioniert und wie Sie es bei Bedarf \u00e4ndern k\u00f6nnen.</p>"},{"location":"how-to/separate-openapi-schemas/#pydantic-modelle-fur-eingabe-und-ausgabe","title":"Pydantic-Modelle f\u00fcr Eingabe und Ausgabe","text":"<p>Nehmen wir an, Sie haben ein Pydantic-Modell mit Defaultwerten wie dieses:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#modell-fur-eingabe","title":"Modell f\u00fcr Eingabe","text":"<p>Wenn Sie dieses Modell wie hier als Eingabe verwenden:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>... dann ist das Feld <code>description</code> nicht erforderlich. Weil es den Defaultwert <code>None</code> hat.</p>"},{"location":"how-to/separate-openapi-schemas/#eingabemodell-in-der-dokumentation","title":"Eingabemodell in der Dokumentation","text":"<p>Sie k\u00f6nnen \u00fcberpr\u00fcfen, dass das Feld <code>description</code> in der Dokumentation kein rotes Sternchen enth\u00e4lt, es ist nicht als erforderlich markiert:</p>"},{"location":"how-to/separate-openapi-schemas/#modell-fur-die-ausgabe","title":"Modell f\u00fcr die Ausgabe","text":"<p>Wenn Sie jedoch dasselbe Modell als Ausgabe verwenden, wie hier:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>... dann, weil  <code>description</code> einen Defaultwert hat, wird es, wenn Sie f\u00fcr dieses Feld nichts zur\u00fcckgeben, immer noch diesen Defaultwert haben.</p>"},{"location":"how-to/separate-openapi-schemas/#modell-fur-ausgabe-responsedaten","title":"Modell f\u00fcr Ausgabe-Responsedaten","text":"<p>Wenn Sie mit der Dokumentation interagieren und die Response \u00fcberpr\u00fcfen, enth\u00e4lt die JSON-Response den Defaultwert (<code>null</code>), obwohl der Code nichts in eines der <code>description</code>-Felder geschrieben hat:</p> <p>Das bedeutet, dass es immer einen Wert hat, der Wert kann jedoch manchmal <code>None</code> sein (oder <code>null</code> in JSON).</p> <p>Das bedeutet, dass Clients, die Ihre API verwenden, nicht pr\u00fcfen m\u00fcssen, ob der Wert vorhanden ist oder nicht. Sie k\u00f6nnen davon ausgehen, dass das Feld immer vorhanden ist. In einigen F\u00e4llen hat es jedoch nur den Defaultwert <code>None</code>.</p> <p>Um dies in OpenAPI zu kennzeichnen, markieren Sie dieses Feld als erforderlich, da es immer vorhanden sein wird.</p> <p>Aus diesem Grund kann das JSON-Schema f\u00fcr ein Modell unterschiedlich sein, je nachdem, ob es f\u00fcr Eingabe oder Ausgabe verwendet wird:</p> <ul> <li>f\u00fcr die Eingabe ist <code>description</code> nicht erforderlich</li> <li>f\u00fcr die Ausgabe ist es erforderlich (und m\u00f6glicherweise <code>None</code> oder, in JSON-Begriffen, <code>null</code>)</li> </ul>"},{"location":"how-to/separate-openapi-schemas/#ausgabemodell-in-der-dokumentation","title":"Ausgabemodell in der Dokumentation","text":"<p>Sie k\u00f6nnen das Ausgabemodell auch in der Dokumentation \u00fcberpr\u00fcfen. Sowohl <code>name</code> als auch <code>description</code> sind mit einem roten Sternchen als erforderlich markiert:</p>"},{"location":"how-to/separate-openapi-schemas/#eingabe-und-ausgabemodell-in-der-dokumentation","title":"Eingabe- und Ausgabemodell in der Dokumentation","text":"<p>Und wenn Sie alle verf\u00fcgbaren Schemas (JSON-Schemas) in OpenAPI \u00fcberpr\u00fcfen, werden Sie feststellen, dass es zwei gibt, ein <code>Item-Input</code> und ein <code>Item-Output</code>.</p> <p>F\u00fcr <code>Item-Input</code> ist <code>description</code> nicht erforderlich, es hat kein rotes Sternchen.</p> <p>Aber f\u00fcr <code>Item-Output</code> ist <code>description</code> erforderlich, es hat ein rotes Sternchen.</p> <p>Mit dieser Funktion von Pydantic v2 ist Ihre API-Dokumentation pr\u00e4ziser, und wenn Sie \u00fcber automatisch generierte Clients und SDKs verf\u00fcgen, sind diese auch pr\u00e4ziser, mit einer besseren Entwicklererfahrung und Konsistenz. \ud83c\udf89</p>"},{"location":"how-to/separate-openapi-schemas/#schemas-nicht-trennen","title":"Schemas nicht trennen","text":"<p>Nun gibt es einige F\u00e4lle, in denen Sie m\u00f6glicherweise dasselbe Schema f\u00fcr Eingabe und Ausgabe haben m\u00f6chten.</p> <p>Der Hauptanwendungsfall hierf\u00fcr besteht wahrscheinlich darin, dass Sie das mal tun m\u00f6chten, wenn Sie bereits \u00fcber einige automatisch generierte Client-Codes/SDKs verf\u00fcgen und im Moment nicht alle automatisch generierten Client-Codes/SDKs aktualisieren m\u00f6chten, m\u00f6glicherweise sp\u00e4ter, aber nicht jetzt.</p> <p>In diesem Fall k\u00f6nnen Sie diese Funktion in ReadyAPI mit dem Parameter <code>separate_input_output_schemas=False</code> deaktivieren.</p> <p>Info</p> <p>Unterst\u00fctzung f\u00fcr <code>separate_input_output_schemas</code> wurde in ReadyAPI <code>0.102.0</code> hinzugef\u00fcgt. \ud83e\udd13</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#gleiches-schema-fur-eingabe-und-ausgabemodelle-in-der-dokumentation","title":"Gleiches Schema f\u00fcr Eingabe- und Ausgabemodelle in der Dokumentation","text":"<p>Und jetzt wird es ein einziges Schema f\u00fcr die Eingabe und Ausgabe des Modells geben, nur <code>Item</code>, und es wird <code>description</code> als nicht erforderlich kennzeichnen:</p> <p>Dies ist das gleiche Verhalten wie in Pydantic v1. \ud83e\udd13</p>"},{"location":"learn/","title":"Lernen","text":"<p>Hier finden Sie die einf\u00fchrenden Kapitel und Tutorials zum Erlernen von ReadyAPI.</p> <p>Sie k\u00f6nnten dies als Buch, als Kurs, als offizielle und empfohlene Methode zum Erlernen von ReadyAPI betrachten. \ud83d\ude0e</p>"},{"location":"resources/","title":"Ressourcen","text":"<p>Zus\u00e4tzliche Ressourcen, externe Links, Artikel und mehr. \u2708\ufe0f</p>"},{"location":"tutorial/","title":"Tutorial \u2013 Benutzerhandbuch","text":"<p>Dieses Tutorial zeigt Ihnen Schritt f\u00fcr Schritt, wie Sie ReadyAPI und die meisten seiner Funktionen verwenden k\u00f6nnen.</p> <p>Jeder Abschnitt baut schrittweise auf den vorhergehenden auf. Diese Abschnitte sind aber nach einzelnen Themen gegliedert, sodass Sie direkt zu einem bestimmten Thema \u00fcbergehen k\u00f6nnen, um Ihre speziellen API-Anforderungen zu l\u00f6sen.</p> <p>Au\u00dferdem dienen diese als zuk\u00fcnftige Referenz.</p> <p>Dadurch k\u00f6nnen Sie jederzeit  zur\u00fcckkommen und sehen genau das, was Sie ben\u00f6tigen.</p>"},{"location":"tutorial/#den-code-ausfuhren","title":"Den Code ausf\u00fchren","text":"<p>Alle Codebl\u00f6cke k\u00f6nnen kopiert und direkt verwendet werden (da es sich um getestete Python-Dateien handelt).</p> <p>Um eines der Beispiele auszuf\u00fchren, kopieren Sie den Code in eine Datei <code>main.py</code>, und starten Sie <code>uvicorn</code> mit:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Es wird ausdr\u00fccklich empfohlen, dass Sie den Code schreiben oder kopieren, ihn bearbeiten und lokal ausf\u00fchren.</p> <p>Die Verwendung in Ihrem eigenen Editor zeigt Ihnen die Vorteile von ReadyAPI am besten, wenn Sie sehen, wie wenig Code Sie schreiben m\u00fcssen, all die Typpr\u00fcfungen, die automatische Vervollst\u00e4ndigung usw.</p>"},{"location":"tutorial/#readyapi-installieren","title":"ReadyAPI installieren","text":"<p>Der erste Schritt besteht aus der Installation von ReadyAPI.</p> <p>F\u00fcr dieses Tutorial empfiehlt es sich, ReadyAPI mit allen optionalen Abh\u00e4ngigkeiten und Funktionen zu installieren:</p> <pre><code>$ pip install \"readyapi[all]\"\n\n---&gt; 100%\n</code></pre> <p>... das beinhaltet auch <code>uvicorn</code>, welchen Sie als Server verwenden k\u00f6nnen, der ihren Code ausf\u00fchrt.</p> <p>Hinweis</p> <p>Sie k\u00f6nnen die einzelnen Teile auch separat installieren.</p> <p>Das folgende w\u00fcrden Sie wahrscheinlich tun, wenn Sie Ihre Anwendung in der Produktion einsetzen:</p> <pre><code>pip install readyapi\n</code></pre> <p>Installieren Sie auch <code>uvicorn</code> als Server:</p> <pre><code>pip install \"uvicorn[standard]\"\n</code></pre> <p>Das gleiche gilt f\u00fcr jede der optionalen Abh\u00e4ngigkeiten, die Sie verwenden m\u00f6chten.</p>"},{"location":"tutorial/#handbuch-fur-fortgeschrittene-benutzer","title":"Handbuch f\u00fcr fortgeschrittene Benutzer","text":"<p>Es gibt auch ein Handbuch f\u00fcr fortgeschrittene Benutzer, welches Sie sp\u00e4ter nach diesem Tutorial \u2013 Benutzerhandbuch lesen k\u00f6nnen.</p> <p>Das Handbuch f\u00fcr fortgeschrittene Benutzer baut auf diesem Tutorial auf, verwendet dieselben Konzepte und bringt Ihnen einige zus\u00e4tzliche Funktionen bei.</p> <p>Allerdings sollten Sie zuerst das Tutorial \u2013 Benutzerhandbuch lesen (was Sie hier gerade tun).</p> <p>Die Dokumentation ist so konzipiert, dass Sie mit dem Tutorial \u2013 Benutzerhandbuch eine vollst\u00e4ndige Anwendung erstellen k\u00f6nnen und diese dann je nach Bedarf mit einigen der zus\u00e4tzlichen Ideen aus dem Handbuch f\u00fcr fortgeschrittene Benutzer vervollst\u00e4ndigen k\u00f6nnen.</p>"},{"location":"tutorial/background-tasks/","title":"Hintergrundtasks","text":"<p>Sie k\u00f6nnen Hintergrundtasks (Hintergrund-Aufgaben) definieren, die nach der R\u00fcckgabe einer Response ausgef\u00fchrt werden sollen.</p> <p>Das ist n\u00fctzlich f\u00fcr Vorg\u00e4nge, die nach einem Request ausgef\u00fchrt werden m\u00fcssen, bei denen der Client jedoch nicht unbedingt auf den Abschluss des Vorgangs warten muss, bevor er die Response erh\u00e4lt.</p> <p>Hierzu z\u00e4hlen beispielsweise:</p> <ul> <li>E-Mail-Benachrichtigungen, die nach dem Ausf\u00fchren einer Aktion gesendet werden:<ul> <li>Da die Verbindung zu einem E-Mail-Server und das Senden einer E-Mail in der Regel \u201elangsam\u201c ist (einige Sekunden), k\u00f6nnen Sie die Response sofort zur\u00fccksenden und die E-Mail-Benachrichtigung im Hintergrund senden.</li> </ul> </li> <li>Daten verarbeiten:<ul> <li>Angenommen, Sie erhalten eine Datei, die einen langsamen Prozess durchlaufen muss. Sie k\u00f6nnen als Response \u201eAccepted\u201c (HTTP 202) zur\u00fcckgeben und die Datei im Hintergrund verarbeiten.</li> </ul> </li> </ul>"},{"location":"tutorial/background-tasks/#backgroundtasks-verwenden","title":"<code>BackgroundTasks</code> verwenden","text":"<p>Importieren Sie zun\u00e4chst <code>BackgroundTasks</code> und definieren Sie einen Parameter in Ihrer Pfadoperation-Funktion mit der Typdeklaration <code>BackgroundTasks</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p>ReadyAPI erstellt f\u00fcr Sie das Objekt vom Typ <code>BackgroundTasks</code> und \u00fcbergibt es als diesen Parameter.</p>"},{"location":"tutorial/background-tasks/#eine-taskfunktion-erstellen","title":"Eine Taskfunktion erstellen","text":"<p>Erstellen Sie eine Funktion, die als Hintergrundtask ausgef\u00fchrt werden soll.</p> <p>Es handelt sich schlicht um eine Standard-Funktion, die Parameter empfangen kann.</p> <p>Es kann sich um eine <code>async def</code>- oder normale <code>def</code>-Funktion handeln. ReadyAPI wei\u00df, wie damit zu verfahren ist.</p> <p>In diesem Fall schreibt die Taskfunktion in eine Datei (den Versand einer E-Mail simulierend).</p> <p>Und da der Schreibvorgang nicht <code>async</code> und <code>await</code> verwendet, definieren wir die Funktion mit normalem <code>def</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre>"},{"location":"tutorial/background-tasks/#den-hintergrundtask-hinzufugen","title":"Den Hintergrundtask hinzuf\u00fcgen","text":"<p>\u00dcbergeben Sie innerhalb Ihrer Pfadoperation-Funktion Ihre Taskfunktion mit der Methode <code>.add_task()</code> an das Hintergrundtasks-Objekt:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p><code>.add_task()</code> erh\u00e4lt als Argumente:</p> <ul> <li>Eine Taskfunktion, die im Hintergrund ausgef\u00fchrt wird (<code>write_notification</code>).</li> <li>Eine beliebige Folge von Argumenten, die der Reihe nach an die Taskfunktion \u00fcbergeben werden sollen (<code>email</code>).</li> <li>Alle Schl\u00fcsselwort-Argumente, die an die Taskfunktion \u00fcbergeben werden sollen (<code>message=\"some notification\"</code>).</li> </ul>"},{"location":"tutorial/background-tasks/#dependency-injection","title":"Dependency Injection","text":"<p>Die Verwendung von <code>BackgroundTasks</code> funktioniert auch mit dem Dependency Injection System. Sie k\u00f6nnen einen Parameter vom Typ <code>BackgroundTasks</code> auf mehreren Ebenen deklarieren: in einer Pfadoperation-Funktion, in einer Abh\u00e4ngigkeit (Dependable), in einer Unterabh\u00e4ngigkeit usw.</p> <p>ReadyAPI wei\u00df, was jeweils zu tun ist und wie dasselbe Objekt wiederverwendet werden kann, sodass alle Hintergrundtasks zusammengef\u00fchrt und anschlie\u00dfend im Hintergrund ausgef\u00fchrt werden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>In obigem Beispiel werden die Nachrichten, nachdem die Response gesendet wurde, in die Datei <code>log.txt</code> geschrieben.</p> <p>Wenn im Request ein Query-Parameter enthalten war, wird dieser in einem Hintergrundtask in das Log geschrieben.</p> <p>Und dann schreibt ein weiterer Hintergrundtask, der in der Pfadoperation-Funktion erstellt wird, eine Nachricht unter Verwendung des Pfad-Parameters <code>email</code>.</p>"},{"location":"tutorial/background-tasks/#technische-details","title":"Technische Details","text":"<p>Die Klasse <code>BackgroundTasks</code> stammt direkt von <code>starlette.background</code>.</p> <p>Sie wird direkt in ReadyAPI importiert/inkludiert, sodass Sie sie von <code>readyapi</code> importieren k\u00f6nnen und vermeiden, versehentlich das alternative <code>BackgroundTask</code> (ohne das <code>s</code> am Ende) von <code>starlette.background</code> zu importieren.</p> <p>Indem Sie nur <code>BackgroundTasks</code> (und nicht <code>BackgroundTask</code>) verwenden, ist es dann m\u00f6glich, es als Pfadoperation-Funktion-Parameter zu verwenden und ReadyAPI den Rest f\u00fcr Sie erledigen zu lassen, genau wie bei der direkten Verwendung des <code>Request</code>-Objekts.</p> <p>Es ist immer noch m\u00f6glich, <code>BackgroundTask</code> allein in ReadyAPI zu verwenden, aber Sie m\u00fcssen das Objekt in Ihrem Code erstellen und eine Starlette-<code>Response</code> zur\u00fcckgeben, die es enth\u00e4lt.</p> <p>Weitere Details finden Sie in der offiziellen Starlette-Dokumentation f\u00fcr Hintergrundtasks.</p>"},{"location":"tutorial/background-tasks/#vorbehalt","title":"Vorbehalt","text":"<p>Wenn Sie umfangreiche Hintergrundberechnungen durchf\u00fchren m\u00fcssen und diese nicht unbedingt vom selben Prozess ausgef\u00fchrt werden m\u00fcssen (z. B. m\u00fcssen Sie Speicher, Variablen, usw. nicht gemeinsam nutzen), k\u00f6nnte die Verwendung anderer gr\u00f6\u00dferer Tools wie z. B. Celery von Vorteil sein.</p> <p>Sie erfordern in der Regel komplexere Konfigurationen und einen Nachrichten-/Job-Queue-Manager wie RabbitMQ oder Redis, erm\u00f6glichen Ihnen jedoch die Ausf\u00fchrung von Hintergrundtasks in mehreren Prozessen und insbesondere auf mehreren Servern.</p> <p>Wenn Sie jedoch \u00fcber dieselbe ReadyAPI-Anwendung auf Variablen und Objekte zugreifen oder kleine Hintergrundtasks ausf\u00fchren m\u00fcssen (z. B. das Senden einer E-Mail-Benachrichtigung), k\u00f6nnen Sie einfach <code>BackgroundTasks</code> verwenden.</p>"},{"location":"tutorial/background-tasks/#zusammenfassung","title":"Zusammenfassung","text":"<p>Importieren und verwenden Sie <code>BackgroundTasks</code> mit Parametern in Pfadoperation-Funktionen und Abh\u00e4ngigkeiten, um Hintergrundtasks hinzuzuf\u00fcgen.</p>"},{"location":"tutorial/bigger-applications/","title":"Gr\u00f6\u00dfere Anwendungen \u2013 mehrere Dateien","text":"<p>Wenn Sie eine Anwendung oder eine Web-API erstellen, ist es selten der Fall, dass Sie alles in einer einzigen Datei unterbringen k\u00f6nnen.</p> <p>ReadyAPI bietet ein praktisches Werkzeug zur Strukturierung Ihrer Anwendung bei gleichzeitiger Wahrung der Flexibilit\u00e4t.</p> <p>Info</p> <p>Wenn Sie von Flask kommen, w\u00e4re dies das \u00c4quivalent zu Flasks Blueprints.</p>"},{"location":"tutorial/bigger-applications/#eine-beispiel-dateistruktur","title":"Eine Beispiel-Dateistruktur","text":"<p>Nehmen wir an, Sie haben eine Dateistruktur wie diese:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py\n</code></pre> <p>Tipp</p> <p>Es gibt mehrere <code>__init__.py</code>-Dateien: eine in jedem Verzeichnis oder Unterverzeichnis.</p> <p>Das erm\u00f6glicht den Import von Code aus einer Datei in eine andere.</p> <p>In <code>app/main.py</code> k\u00f6nnten Sie beispielsweise eine Zeile wie diese haben:</p> <pre><code>from app.routers import items\n</code></pre> <ul> <li>Das Verzeichnis <code>app</code> enth\u00e4lt alles. Und es hat eine leere Datei <code>app/__init__.py</code>, es handelt sich also um ein \u201ePython-Package\u201c (eine Sammlung von \u201ePython-Modulen\u201c): <code>app</code>.</li> <li>Es enth\u00e4lt eine Datei <code>app/main.py</code>. Da sie sich in einem Python-Package (einem Verzeichnis mit einer Datei <code>__init__.py</code>) befindet, ist sie ein \u201eModul\u201c dieses Packages: <code>app.main</code>.</li> <li>Es gibt auch eine Datei <code>app/dependencies.py</code>, genau wie <code>app/main.py</code> ist sie ein \u201eModul\u201c: <code>app.dependencies</code>.</li> <li>Es gibt ein Unterverzeichnis <code>app/routers/</code> mit einer weiteren Datei <code>__init__.py</code>, es handelt sich also um ein \u201ePython-Subpackage\u201c: <code>app.routers</code>.</li> <li>Die Datei <code>app/routers/items.py</code> befindet sich in einem Package, <code>app/routers/</code>, also ist sie ein Submodul: <code>app.routers.items</code>.</li> <li>Das Gleiche gilt f\u00fcr <code>app/routers/users.py</code>, es ist ein weiteres Submodul: <code>app.routers.users</code>.</li> <li>Es gibt auch ein Unterverzeichnis <code>app/internal/</code> mit einer weiteren Datei <code>__init__.py</code>, es handelt sich also um ein weiteres \u201ePython-Subpackage\u201c: <code>app.internal</code>.</li> <li>Und die Datei <code>app/internal/admin.py</code> ist ein weiteres Submodul: <code>app.internal.admin</code>.</li> </ul> <p></p> <p>Die gleiche Dateistruktur mit Kommentaren:</p> <pre><code>.\n\u251c\u2500\u2500 app                  # \u201eapp\u201c ist ein Python-Package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py      # diese Datei macht \u201eapp\u201c zu einem \u201ePython-Package\u201c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py          # \u201emain\u201c-Modul, z. B. import app.main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py  # \u201edependencies\u201c-Modul, z. B. import app.dependencies\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers          # \u201erouters\u201c ist ein \u201ePython-Subpackage\u201c\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py  # macht \u201erouters\u201c zu einem \u201ePython-Subpackage\u201c\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py     # \u201eitems\u201c-Submodul, z. B. import app.routers.items\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py     # \u201eusers\u201c-Submodul, z. B. import app.routers.users\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal         # \u201einternal\u201c ist ein \u201ePython-Subpackage\u201c\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py  # macht \u201einternal\u201c zu einem \u201ePython-Subpackage\u201c\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py     # \u201eadmin\u201c-Submodul, z. B. import app.internal.admin\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter","title":"<code>APIRouter</code>","text":"<p>Nehmen wir an, die Datei, die nur f\u00fcr die Verwaltung von Benutzern zust\u00e4ndig ist, ist das Submodul unter <code>/app/routers/users.py</code>.</p> <p>Sie m\u00f6chten die Pfadoperationen f\u00fcr Ihre Benutzer vom Rest des Codes trennen, um ihn organisiert zu halten.</p> <p>Aber es ist immer noch Teil derselben ReadyAPI-Anwendung/Web-API (es ist Teil desselben \u201ePython-Packages\u201c).</p> <p>Sie k\u00f6nnen die Pfadoperationen f\u00fcr dieses Modul mit <code>APIRouter</code> erstellen.</p>"},{"location":"tutorial/bigger-applications/#apirouter-importieren","title":"<code>APIRouter</code> importieren","text":"<p>Sie importieren ihn und erstellen eine \u201eInstanz\u201c auf die gleiche Weise wie mit der Klasse <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/bigger-applications/#pfadoperationen-mit-apirouter","title":"Pfadoperationen mit <code>APIRouter</code>","text":"<p>Und dann verwenden Sie ihn, um Ihre Pfadoperationen zu deklarieren.</p> <p>Verwenden Sie ihn auf die gleiche Weise wie die Klasse <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre> <p>Sie k\u00f6nnen sich <code>APIRouter</code> als eine \u201eMini-<code>ReadyAPI</code>\u201c-Klasse vorstellen.</p> <p>Alle die gleichen Optionen werden unterst\u00fctzt.</p> <p>Alle die gleichen <code>parameters</code>, <code>responses</code>, <code>dependencies</code>, <code>tags</code>, usw.</p> <p>Tipp</p> <p>In diesem Beispiel hei\u00dft die Variable <code>router</code>, aber Sie k\u00f6nnen ihr einen beliebigen Namen geben.</p> <p>Wir werden diesen <code>APIRouter</code> in die Hauptanwendung <code>ReadyAPI</code> einbinden, aber zuerst k\u00fcmmern wir uns um die Abh\u00e4ngigkeiten und einen anderen <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#abhangigkeiten","title":"Abh\u00e4ngigkeiten","text":"<p>Wir sehen, dass wir einige Abh\u00e4ngigkeiten ben\u00f6tigen, die an mehreren Stellen der Anwendung verwendet werden.</p> <p>Also f\u00fcgen wir sie in ihr eigenes <code>dependencies</code>-Modul (<code>app/dependencies.py</code>) ein.</p> <p>Wir werden nun eine einfache Abh\u00e4ngigkeit verwenden, um einen benutzerdefinierten <code>X-Token</code>-Header zu lesen:</p> Python 3.9+Python 3.8+Python 3.8+ nicht annotiert app/dependencies.py<pre><code>from typing import Annotated\n\nfrom readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Tipp</p> <p>Um dieses Beispiel zu vereinfachen, verwenden wir einen erfundenen Header.</p> <p>Aber in der Praxis werden Sie mit den integrierten Sicherheits-Werkzeugen bessere Ergebnisse erzielen.</p>"},{"location":"tutorial/bigger-applications/#ein-weiteres-modul-mit-apirouter","title":"Ein weiteres Modul mit <code>APIRouter</code>.","text":"<p>Nehmen wir an, Sie haben im Modul unter <code>app/routers/items.py</code> auch die Endpunkte, die f\u00fcr die Verarbeitung von Artikeln (\u201eItems\u201c) aus Ihrer Anwendung vorgesehen sind.</p> <p>Sie haben Pfadoperationen f\u00fcr:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>Es ist alles die gleiche Struktur wie bei <code>app/routers/users.py</code>.</p> <p>Aber wir wollen schlauer sein und den Code etwas vereinfachen.</p> <p>Wir wissen, dass alle Pfadoperationen in diesem Modul folgendes haben:</p> <ul> <li>Pfad-<code>prefix</code>: <code>/items</code>.</li> <li><code>tags</code>: (nur ein Tag: <code>items</code>).</li> <li>Zus\u00e4tzliche <code>responses</code>.</li> <li><code>dependencies</code>: Sie alle ben\u00f6tigen die von uns erstellte <code>X-Token</code>-Abh\u00e4ngigkeit.</li> </ul> <p>Anstatt also alles zu jeder Pfadoperation hinzuzuf\u00fcgen, k\u00f6nnen wir es dem <code>APIRouter</code> hinzuf\u00fcgen.</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Da der Pfad jeder Pfadoperation mit <code>/</code> beginnen muss, wie in:</p> <pre><code>@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    ...\n</code></pre> <p>... darf das Pr\u00e4fix kein abschlie\u00dfendes <code>/</code> enthalten.</p> <p>Das Pr\u00e4fix lautet in diesem Fall also <code>/items</code>.</p> <p>Wir k\u00f6nnen auch eine Liste von <code>tags</code> und zus\u00e4tzliche <code>responses</code> hinzuf\u00fcgen, die auf alle in diesem Router enthaltenen Pfadoperationen angewendet werden.</p> <p>Und wir k\u00f6nnen eine Liste von <code>dependencies</code> hinzuf\u00fcgen, die allen Pfadoperationen im Router hinzugef\u00fcgt und f\u00fcr jeden an sie gerichteten Request ausgef\u00fchrt/aufgel\u00f6st werden.</p> <p>Tipp</p> <p>Beachten Sie, dass \u00e4hnlich wie bei Abh\u00e4ngigkeiten in Pfadoperation-Dekoratoren kein Wert an Ihre Pfadoperation-Funktion \u00fcbergeben wird.</p> <p>Das Endergebnis ist, dass die Pfade f\u00fcr diese Artikel jetzt wie folgt lauten:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>... wie wir es beabsichtigt hatten.</p> <ul> <li>Sie werden mit einer Liste von Tags gekennzeichnet, die einen einzelnen String <code>\"items\"</code> enth\u00e4lt.<ul> <li>Diese \u201eTags\u201c sind besonders n\u00fctzlich f\u00fcr die automatischen interaktiven Dokumentationssysteme (unter Verwendung von OpenAPI).</li> </ul> </li> <li>Alle enthalten die vordefinierten <code>responses</code>.</li> <li>F\u00fcr alle diese Pfadoperationen wird die Liste der <code>dependencies</code> ausgewertet/ausgef\u00fchrt, bevor sie selbst ausgef\u00fchrt werden.<ul> <li>Wenn Sie au\u00dferdem Abh\u00e4ngigkeiten in einer bestimmten Pfadoperation deklarieren, werden diese ebenfalls ausgef\u00fchrt.</li> <li>Zuerst werden die Router-Abh\u00e4ngigkeiten ausgef\u00fchrt, dann die <code>dependencies</code> im Dekorator und dann die normalen Parameterabh\u00e4ngigkeiten.</li> <li>Sie k\u00f6nnen auch <code>Security</code>-Abh\u00e4ngigkeiten mit <code>scopes</code> hinzuf\u00fcgen.</li> </ul> </li> </ul> <p>Tipp</p> <p><code>dependencies</code> im <code>APIRouter</code> k\u00f6nnen beispielsweise verwendet werden, um eine Authentifizierung f\u00fcr eine ganze Gruppe von Pfadoperationen zu erfordern. Selbst wenn die Abh\u00e4ngigkeiten nicht jeder einzeln hinzugef\u00fcgt werden.</p> <p>Check</p> <p>Die Parameter <code>prefix</code>, <code>tags</code>, <code>responses</code> und <code>dependencies</code> sind (wie in vielen anderen F\u00e4llen) nur ein Feature von ReadyAPI, um Ihnen dabei zu helfen, Codeverdoppelung zu vermeiden.</p>"},{"location":"tutorial/bigger-applications/#die-abhangigkeiten-importieren","title":"Die Abh\u00e4ngigkeiten importieren","text":"<p>Der folgende Code befindet sich im Modul <code>app.routers.items</code>, also in der Datei <code>app/routers/items.py</code>.</p> <p>Und wir m\u00fcssen die Abh\u00e4ngigkeitsfunktion aus dem Modul <code>app.dependencies</code> importieren, also aus der Datei <code>app/dependencies.py</code>.</p> <p>Daher verwenden wir einen relativen Import mit <code>..</code> f\u00fcr die Abh\u00e4ngigkeiten:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#wie-relative-importe-funktionieren","title":"Wie relative Importe funktionieren","text":"<p>Tipp</p> <p>Wenn Sie genau wissen, wie Importe funktionieren, fahren Sie mit dem n\u00e4chsten Abschnitt unten fort.</p> <p>Ein einzelner Punkt <code>.</code>, wie in:</p> <pre><code>from .dependencies import get_token_header\n</code></pre> <p>w\u00fcrde bedeuten:</p> <ul> <li>Beginnend im selben Package, in dem sich dieses Modul (die Datei <code>app/routers/items.py</code>) befindet (das Verzeichnis <code>app/routers/</code>) ...</li> <li>finde das Modul <code>dependencies</code> (eine imagin\u00e4re Datei unter <code>app/routers/dependencies.py</code>) ...</li> <li>und importiere daraus die Funktion <code>get_token_header</code>.</li> </ul> <p>Aber diese Datei existiert nicht, unsere Abh\u00e4ngigkeiten befinden sich in einer Datei unter <code>app/dependencies.py</code>.</p> <p>Erinnern Sie sich, wie unsere Anwendungs-/Dateistruktur aussieht:</p> <p></p> <p>Die beiden Punkte <code>..</code>, wie in:</p> <pre><code>from ..dependencies import get_token_header\n</code></pre> <p>bedeuten:</p> <ul> <li>Beginnend im selben Package, in dem sich dieses Modul (die Datei <code>app/routers/items.py</code>) befindet (das Verzeichnis <code>app/routers/</code>) ...</li> <li>gehe zum \u00fcbergeordneten Package (das Verzeichnis <code>app/</code>) ...</li> <li>und finde dort das Modul <code>dependencies</code> (die Datei unter <code>app/dependencies.py</code>) ...</li> <li>und importiere daraus die Funktion <code>get_token_header</code>.</li> </ul> <p>Das funktioniert korrekt! \ud83c\udf89</p> <p>Das Gleiche gilt, wenn wir drei Punkte <code>...</code> verwendet h\u00e4tten, wie in:</p> <pre><code>from ...dependencies import get_token_header\n</code></pre> <p>Das w\u00fcrde bedeuten:</p> <ul> <li>Beginnend im selben Package, in dem sich dieses Modul (die Datei <code>app/routers/items.py</code>) befindet (das Verzeichnis <code>app/routers/</code>) ...</li> <li>gehe zum \u00fcbergeordneten Package (das Verzeichnis <code>app/</code>) ...</li> <li>gehe dann zum \u00fcbergeordneten Package dieses Packages (es gibt kein \u00fcbergeordnetes Package, <code>app</code> ist die oberste Ebene \ud83d\ude31) ...</li> <li>und finde dort das Modul <code>dependencies</code> (die Datei unter <code>app/dependencies.py</code>) ...</li> <li>und importiere daraus die Funktion <code>get_token_header</code>.</li> </ul> <p>Das w\u00fcrde sich auf ein Paket oberhalb von <code>app/</code> beziehen, mit seiner eigenen Datei <code>__init__.py</code>, usw. Aber das haben wir nicht. Das w\u00fcrde in unserem Beispiel also einen Fehler ausl\u00f6sen. \ud83d\udea8</p> <p>Aber jetzt wissen Sie, wie es funktioniert, sodass Sie relative Importe in Ihren eigenen Anwendungen verwenden k\u00f6nnen, egal wie komplex diese sind. \ud83e\udd13</p>"},{"location":"tutorial/bigger-applications/#einige-benutzerdefinierte-tags-responses-und-dependencies-hinzufugen","title":"Einige benutzerdefinierte <code>tags</code>, <code>responses</code>, und <code>dependencies</code> hinzuf\u00fcgen","text":"<p>Wir f\u00fcgen weder das Pr\u00e4fix <code>/items</code> noch <code>tags=[\"items\"]</code> zu jeder Pfadoperation hinzu, da wir sie zum <code>APIRouter</code> hinzugef\u00fcgt haben.</p> <p>Aber wir k\u00f6nnen immer noch mehr <code>tags</code> hinzuf\u00fcgen, die auf eine bestimmte Pfadoperation angewendet werden, sowie einige zus\u00e4tzliche <code>responses</code>, die speziell f\u00fcr diese Pfadoperation gelten:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Tipp</p> <p>Diese letzte Pfadoperation wird eine Kombination von Tags haben: <code>[\"items\", \"custom\"]</code>.</p> <p>Und sie wird auch beide Responses in der Dokumentation haben, eine f\u00fcr <code>404</code> und eine f\u00fcr <code>403</code>.</p>"},{"location":"tutorial/bigger-applications/#das-haupt-readyapi","title":"Das Haupt-<code>ReadyAPI</code>.","text":"<p>Sehen wir uns nun das Modul unter <code>app/main.py</code> an.</p> <p>Hier importieren und verwenden Sie die Klasse <code>ReadyAPI</code>.</p> <p>Dies ist die Hauptdatei Ihrer Anwendung, die alles zusammen bindet.</p> <p>Und da sich der Gro\u00dfteil Ihrer Logik jetzt in seinem eigenen spezifischen Modul befindet, wird die Hauptdatei recht einfach sein.</p>"},{"location":"tutorial/bigger-applications/#readyapi-importieren","title":"<code>ReadyAPI</code> importieren","text":"<p>Sie importieren und erstellen wie gewohnt eine <code>ReadyAPI</code>-Klasse.</p> <p>Und wir k\u00f6nnen sogar globale Abh\u00e4ngigkeiten deklarieren, die mit den Abh\u00e4ngigkeiten f\u00fcr jeden <code>APIRouter</code> kombiniert werden:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#den-apirouter-importieren","title":"Den <code>APIRouter</code> importieren","text":"<p>Jetzt importieren wir die anderen Submodule, die <code>APIRouter</code> haben:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Da es sich bei den Dateien <code>app/routers/users.py</code> und <code>app/routers/items.py</code> um Submodule handelt, die Teil desselben Python-Packages <code>app</code> sind, k\u00f6nnen wir einen einzelnen Punkt <code>.</code> verwenden, um sie mit \u201erelativen Imports\u201c zu importieren.</p>"},{"location":"tutorial/bigger-applications/#wie-das-importieren-funktioniert","title":"Wie das Importieren funktioniert","text":"<p>Die Sektion:</p> <pre><code>from .routers import items, users\n</code></pre> <p>bedeutet:</p> <ul> <li>Beginnend im selben Package, in dem sich dieses Modul (die Datei <code>app/main.py</code>) befindet (das Verzeichnis <code>app/</code>) ...</li> <li>Suche nach dem Subpackage <code>routers</code> (das Verzeichnis unter <code>app/routers/</code>) ...</li> <li>und importiere daraus die Submodule <code>items</code> (die Datei unter <code>app/routers/items.py</code>) und <code>users</code> (die Datei unter <code>app/routers/users.py</code>) ...</li> </ul> <p>Das Modul <code>items</code> verf\u00fcgt \u00fcber eine Variable <code>router</code> (<code>items.router</code>). Das ist dieselbe, die wir in der Datei <code>app/routers/items.py</code> erstellt haben, es ist ein <code>APIRouter</code>-Objekt.</p> <p>Und dann machen wir das gleiche f\u00fcr das Modul <code>users</code>.</p> <p>Wir k\u00f6nnten sie auch wie folgt importieren:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Info</p> <p>Die erste Version ist ein \u201erelativer Import\u201c:</p> <pre><code>from .routers import items, users\n</code></pre> <p>Die zweite Version ist ein \u201eabsoluter Import\u201c:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Um mehr \u00fcber Python-Packages und -Module zu erfahren, lesen Sie die offizielle Python-Dokumentation \u00fcber Module.</p>"},{"location":"tutorial/bigger-applications/#namenskollisionen-vermeiden","title":"Namenskollisionen vermeiden","text":"<p>Wir importieren das Submodul <code>items</code> direkt, anstatt nur seine Variable <code>router</code> zu importieren.</p> <p>Das liegt daran, dass wir im Submodul <code>users</code> auch eine weitere Variable namens <code>router</code> haben.</p> <p>Wenn wir eine nach der anderen importiert h\u00e4tten, etwa:</p> <pre><code>from .routers.items import router\nfrom .routers.users import router\n</code></pre> <p>w\u00fcrde der <code>router</code> von <code>users</code> den von <code>items</code> \u00fcberschreiben und wir k\u00f6nnten sie nicht gleichzeitig verwenden.</p> <p>Um also beide in derselben Datei verwenden zu k\u00f6nnen, importieren wir die Submodule direkt:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#die-apirouter-fur-users-und-items-inkludieren","title":"Die <code>APIRouter</code> f\u00fcr <code>users</code> und <code>items</code> inkludieren","text":"<p>Inkludieren wir nun die <code>router</code> aus diesen Submodulen <code>users</code> und <code>items</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Info</p> <p><code>users.router</code> enth\u00e4lt den <code>APIRouter</code> in der Datei <code>app/routers/users.py</code>.</p> <p>Und <code>items.router</code> enth\u00e4lt den <code>APIRouter</code> in der Datei <code>app/routers/items.py</code>.</p> <p>Mit <code>app.include_router()</code> k\u00f6nnen wir jeden <code>APIRouter</code> zur Hauptanwendung <code>ReadyAPI</code> hinzuf\u00fcgen.</p> <p>Es wird alle Routen von diesem Router als Teil von dieser inkludieren.</p> <p>Technische Details</p> <p>Tats\u00e4chlich wird intern eine Pfadoperation f\u00fcr jede Pfadoperation erstellt, die im <code>APIRouter</code> deklariert wurde.</p> <p>Hinter den Kulissen wird es also tats\u00e4chlich so funktionieren, als ob alles dieselbe einzige Anwendung w\u00e4re.</p> <p>Check</p> <p>Bei der Einbindung von Routern m\u00fcssen Sie sich keine Gedanken \u00fcber die Performanz machen.</p> <p>Dies dauert Mikrosekunden und geschieht nur beim Start.</p> <p>Es hat also keinen Einfluss auf die Leistung. \u26a1</p>"},{"location":"tutorial/bigger-applications/#einen-apirouter-mit-benutzerdefinierten-prefix-tags-responses-und-dependencies-einfugen","title":"Einen <code>APIRouter</code> mit benutzerdefinierten <code>prefix</code>, <code>tags</code>, <code>responses</code> und <code>dependencies</code> einf\u00fcgen","text":"<p>Stellen wir uns nun vor, dass Ihre Organisation Ihnen die Datei <code>app/internal/admin.py</code> gegeben hat.</p> <p>Sie enth\u00e4lt einen <code>APIRouter</code> mit einigen administrativen Pfadoperationen, die Ihre Organisation zwischen mehreren Projekten teilt.</p> <p>In diesem Beispiel wird es ganz einfach sein. Nehmen wir jedoch an, dass wir, da sie mit anderen Projekten in der Organisation geteilt wird, sie nicht \u00e4ndern und kein <code>prefix</code>, <code>dependencies</code>, <code>tags</code>, usw. direkt zum <code>APIRouter</code> hinzuf\u00fcgen k\u00f6nnen:</p> app/internal/admin.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n</code></pre> <p>Aber wir m\u00f6chten immer noch ein benutzerdefiniertes <code>prefix</code> festlegen, wenn wir den <code>APIRouter</code> einbinden, sodass alle seine Pfadoperationen mit <code>/admin</code> beginnen, wir m\u00f6chten es mit den <code>dependencies</code> sichern, die wir bereits f\u00fcr dieses Projekt haben, und wir m\u00f6chten <code>tags</code> und <code>responses</code> hinzuf\u00fcgen.</p> <p>Wir k\u00f6nnen das alles deklarieren, ohne den urspr\u00fcnglichen <code>APIRouter</code> \u00e4ndern zu m\u00fcssen, indem wir diese Parameter an <code>app.include_router()</code> \u00fcbergeben:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Auf diese Weise bleibt der urspr\u00fcngliche <code>APIRouter</code> unver\u00e4ndert, sodass wir dieselbe <code>app/internal/admin.py</code>-Datei weiterhin mit anderen Projekten in der Organisation teilen k\u00f6nnen.</p> <p>Das Ergebnis ist, dass in unserer Anwendung jede der Pfadoperationen aus dem Modul <code>admin</code> Folgendes haben wird:</p> <ul> <li>Das Pr\u00e4fix <code>/admin</code>.</li> <li>Den Tag <code>admin</code>.</li> <li>Die Abh\u00e4ngigkeit <code>get_token_header</code>.</li> <li>Die Response <code>418</code>. \ud83c\udf75</li> </ul> <p>Dies wirkt sich jedoch nur auf diesen <code>APIRouter</code> in unserer Anwendung aus, nicht auf anderen Code, der ihn verwendet.</p> <p>So k\u00f6nnten beispielsweise andere Projekte denselben <code>APIRouter</code> mit einer anderen Authentifizierungsmethode verwenden.</p>"},{"location":"tutorial/bigger-applications/#eine-pfadoperation-hinzufugen","title":"Eine Pfadoperation hinzuf\u00fcgen","text":"<p>Wir k\u00f6nnen Pfadoperationen auch direkt zur <code>ReadyAPI</code>-App hinzuf\u00fcgen.</p> <p>Hier machen wir es ... nur um zu zeigen, dass wir es k\u00f6nnen \ud83e\udd37:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>und es wird korrekt funktionieren, zusammen mit allen anderen Pfadoperationen, die mit <code>app.include_router()</code> hinzugef\u00fcgt wurden.</p> <p>Sehr technische Details</p> <p>Hinweis: Dies ist ein sehr technisches Detail, das Sie wahrscheinlich einfach \u00fcberspringen k\u00f6nnen.</p> <p>Die <code>APIRouter</code> sind nicht \u201egemountet\u201c, sie sind nicht vom Rest der Anwendung isoliert.</p> <p>Das liegt daran, dass wir deren Pfadoperationen in das OpenAPI-Schema und die Benutzeroberfl\u00e4chen einbinden m\u00f6chten.</p> <p>Da wir sie nicht einfach isolieren und unabh\u00e4ngig vom Rest \u201emounten\u201c k\u00f6nnen, werden die Pfadoperationen \u201egeklont\u201c (neu erstellt) und nicht direkt einbezogen.</p>"},{"location":"tutorial/bigger-applications/#es-in-der-automatischen-api-dokumentation-ansehen","title":"Es in der automatischen API-Dokumentation ansehen","text":"<p>F\u00fchren Sie nun <code>uvicorn</code> aus, indem Sie das Modul <code>app.main</code> und die Variable <code>app</code> verwenden:</p> <pre><code>$ uvicorn app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>und \u00f6ffnen Sie die Dokumentation unter http://127.0.0.1:8000/docs.</p> <p>Sie sehen die automatische API-Dokumentation, einschlie\u00dflich der Pfade aller Submodule, mit den richtigen Pfaden (und Pr\u00e4fixen) und den richtigen Tags:</p> <p></p>"},{"location":"tutorial/bigger-applications/#den-gleichen-router-mehrmals-mit-unterschiedlichem-prefix-inkludieren","title":"Den gleichen Router mehrmals mit unterschiedlichem <code>prefix</code> inkludieren","text":"<p>Sie k\u00f6nnen <code>.include_router()</code> auch mehrmals mit demselben Router und unterschiedlichen Pr\u00e4fixen verwenden.</p> <p>Dies k\u00f6nnte beispielsweise n\u00fctzlich sein, um dieselbe API unter verschiedenen Pr\u00e4fixen verf\u00fcgbar zu machen, z. B. <code>/api/v1</code> und <code>/api/latest</code>.</p> <p>Dies ist eine fortgeschrittene Verwendung, die Sie m\u00f6glicherweise nicht wirklich ben\u00f6tigen, aber f\u00fcr den Fall, dass Sie sie ben\u00f6tigen, ist sie vorhanden.</p>"},{"location":"tutorial/bigger-applications/#einen-apirouter-in-einen-anderen-einfugen","title":"Einen <code>APIRouter</code> in einen anderen einf\u00fcgen","text":"<p>Auf die gleiche Weise, wie Sie einen <code>APIRouter</code> in eine <code>ReadyAPI</code>-Anwendung einbinden k\u00f6nnen, k\u00f6nnen Sie einen <code>APIRouter</code> in einen anderen <code>APIRouter</code> einbinden, indem Sie Folgendes verwenden:</p> <pre><code>router.include_router(other_router)\n</code></pre> <p>Stellen Sie sicher, dass Sie dies tun, bevor Sie <code>router</code> in die <code>ReadyAPI</code>-App einbinden, damit auch die Pfadoperationen von <code>other_router</code> inkludiert werden.</p>"},{"location":"tutorial/body-fields/","title":"Body \u2013 Felder","text":"<p>So wie Sie zus\u00e4tzliche Validation und Metadaten in Parametern der Pfadoperation-Funktion mittels <code>Query</code>, <code>Path</code> und <code>Body</code> deklarieren, k\u00f6nnen Sie auch innerhalb von Pydantic-Modellen zus\u00e4tzliche Validation und Metadaten deklarieren, mittels Pydantics <code>Field</code>.</p>"},{"location":"tutorial/body-fields/#field-importieren","title":"<code>Field</code> importieren","text":"<p>Importieren Sie es zuerst:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Achtung</p> <p>Beachten Sie, dass <code>Field</code> direkt von <code>pydantic</code> importiert wird, nicht von <code>readyapi</code>, wie die anderen (<code>Query</code>, <code>Path</code>, <code>Body</code>, usw.)</p>"},{"location":"tutorial/body-fields/#modellattribute-deklarieren","title":"Modellattribute deklarieren","text":"<p>Dann k\u00f6nnen Sie <code>Field</code> mit Modellattributen deklarieren:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p><code>Field</code> funktioniert genauso wie <code>Query</code>, <code>Path</code> und <code>Body</code>, es hat die gleichen Parameter, usw.</p> <p>Technische Details</p> <p>Tats\u00e4chlich erstellen <code>Query</code>, <code>Path</code> und andere, die sie kennenlernen werden, Instanzen von Unterklassen einer allgemeinen Klasse <code>Param</code>, die ihrerseits eine Unterklasse von Pydantics <code>FieldInfo</code>-Klasse ist.</p> <p>Und Pydantics <code>Field</code> gibt ebenfalls eine Instanz von <code>FieldInfo</code> zur\u00fcck.</p> <p><code>Body</code> gibt auch Instanzen einer Unterklasse von <code>FieldInfo</code> zur\u00fcck. Und sp\u00e4ter werden Sie andere sehen, die Unterklassen der <code>Body</code>-Klasse sind.</p> <p>Denken Sie daran, dass <code>Query</code>, <code>Path</code> und andere von <code>readyapi</code> tats\u00e4chlich Funktionen sind, die spezielle Klassen zur\u00fcckgeben.</p> <p>Tipp</p> <p>Beachten Sie, dass jedes Modellattribut mit einem Typ, Defaultwert und <code>Field</code> die gleiche Struktur hat wie ein Parameter einer Pfadoperation-Funktion, nur mit <code>Field</code> statt <code>Path</code>, <code>Query</code>, <code>Body</code>.</p>"},{"location":"tutorial/body-fields/#zusatzliche-information-hinzufugen","title":"Zus\u00e4tzliche Information hinzuf\u00fcgen","text":"<p>Sie k\u00f6nnen zus\u00e4tzliche Information in <code>Field</code>, <code>Query</code>, <code>Body</code>, usw. deklarieren. Und es wird im generierten JSON-Schema untergebracht.</p> <p>Sie werden sp\u00e4ter mehr dar\u00fcber lernen, wie man zus\u00e4tzliche Information unterbringt, wenn Sie lernen, Beispiele zu deklarieren.</p> <p>Achtung</p> <p>Extra-Schl\u00fcssel, die <code>Field</code> \u00fcberreicht werden, werden auch im resultierenden OpenAPI-Schema Ihrer Anwendung gelistet. Da diese Schl\u00fcssel nicht notwendigerweise Teil der OpenAPI-Spezifikation sind, k\u00f6nnten einige OpenAPI-Tools, wie etwa der OpenAPI-Validator, nicht mit Ihrem generierten Schema funktionieren.</p>"},{"location":"tutorial/body-fields/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen Pydantics <code>Field</code> verwenden, um zus\u00e4tzliche Validierungen und Metadaten f\u00fcr Modellattribute zu deklarieren.</p> <p>Sie k\u00f6nnen auch Extra-Schl\u00fcssel verwenden, um zus\u00e4tzliche JSON-Schema-Metadaten zu \u00fcberreichen.</p>"},{"location":"tutorial/body-multiple-params/","title":"Body \u2013 Mehrere Parameter","text":"<p>Jetzt, da wir gesehen haben, wie <code>Path</code> und <code>Query</code> verwendet werden, schauen wir uns fortgeschrittenere Verwendungsm\u00f6glichkeiten von Requestbody-Deklarationen an.</p>"},{"location":"tutorial/body-multiple-params/#path-query-und-body-parameter-vermischen","title":"<code>Path</code>-, <code>Query</code>- und Body-Parameter vermischen","text":"<p>Zuerst einmal, Sie k\u00f6nnen <code>Path</code>-, <code>Query</code>- und Requestbody-Parameter-Deklarationen frei mischen und ReadyAPI wird wissen, was zu tun ist.</p> <p>Und Sie k\u00f6nnen auch Body-Parameter als optional kennzeichnen, indem Sie den Defaultwert auf <code>None</code> setzen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass in diesem Fall das <code>item</code>, welches vom Body genommen wird, optional ist. Da es <code>None</code> als Defaultwert hat.</p>"},{"location":"tutorial/body-multiple-params/#mehrere-body-parameter","title":"Mehrere Body-Parameter","text":"<p>Im vorherigen Beispiel erwartete die Pfadoperation einen JSON-Body mit den Attributen eines <code>Item</code>s, etwa:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre> <p>Aber Sie k\u00f6nnen auch mehrere Body-Parameter deklarieren, z. B. <code>item</code> und <code>user</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <p>In diesem Fall wird ReadyAPI bemerken, dass es mehr als einen Body-Parameter in der Funktion gibt (zwei Parameter, die Pydantic-Modelle sind).</p> <p>Es wird deshalb die Parameternamen als Schl\u00fcssel (Feldnamen) im Body verwenden, und erwartet einen Body wie folgt:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    }\n}\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass, obwohl <code>item</code> wie zuvor deklariert wurde, es nun unter einem Schl\u00fcssel <code>item</code> im Body erwartet wird.</p> <p>ReadyAPI wird die automatische Konvertierung des Requests \u00fcbernehmen, sodass der Parameter <code>item</code> seinen spezifischen Inhalt bekommt, genau so wie der Parameter <code>user</code>.</p> <p>Es wird die Validierung dieser zusammengesetzten Daten \u00fcbernehmen, und sie im OpenAPI-Schema und der automatischen Dokumentation dokumentieren.</p>"},{"location":"tutorial/body-multiple-params/#einzelne-werte-im-body","title":"Einzelne Werte im Body","text":"<p>So wie <code>Query</code> und <code>Path</code> f\u00fcr Query- und Pfad-Parameter, hat ReadyAPI auch das \u00c4quivalent <code>Body</code>, um Extra-Daten f\u00fcr Body-Parameter zu definieren.</p> <p>Zum Beispiel, das vorherige Modell erweiternd, k\u00f6nnten Sie entscheiden, dass Sie einen weiteren Schl\u00fcssel <code>importance</code> haben m\u00f6chten, im selben Body, Seite an Seite mit <code>item</code> und <code>user</code>.</p> <p>Wenn Sie diesen Parameter einfach so hinzuf\u00fcgen, wird ReadyAPI annehmen, dass es ein Query-Parameter ist.</p> <p>Aber Sie k\u00f6nnen ReadyAPI instruieren, ihn als weiteren Body-Schl\u00fcssel zu erkennen, indem Sie <code>Body</code> verwenden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>In diesem Fall erwartet ReadyAPI einen Body wie:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    },\n    \"importance\": 5\n}\n</code></pre> <p>Wiederum wird es die Daten konvertieren, validieren, dokumentieren, usw.</p>"},{"location":"tutorial/body-multiple-params/#mehrere-body-parameter-und-query-parameter","title":"Mehrere Body-Parameter und Query-Parameter","text":"<p>Nat\u00fcrlich k\u00f6nnen Sie auch, wann immer Sie das brauchen, weitere Query-Parameter hinzuf\u00fcgen, zus\u00e4tzlich zu den Body-Parametern.</p> <p>Da einfache Werte standardm\u00e4\u00dfig als Query-Parameter interpretiert werden, m\u00fcssen Sie <code>Query</code> nicht explizit hinzuf\u00fcgen, Sie k\u00f6nnen einfach schreiben:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Oder in Python 3.10 und dar\u00fcber:</p> <pre><code>q: str | None = None\n</code></pre> <p>Zum Beispiel:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Info</p> <p><code>Body</code> hat die gleichen zus\u00e4tzlichen Validierungs- und Metadaten-Parameter wie <code>Query</code> und <code>Path</code> und andere, die Sie sp\u00e4ter kennenlernen.</p>"},{"location":"tutorial/body-multiple-params/#einen-einzelnen-body-parameter-einbetten","title":"Einen einzelnen Body-Parameter einbetten","text":"<p>Nehmen wir an, Sie haben nur einen einzelnen <code>item</code>-Body-Parameter, ein Pydantic-Modell <code>Item</code>.</p> <p>Normalerweise wird ReadyAPI dann seinen JSON-Body direkt erwarten.</p> <p>Aber wenn Sie m\u00f6chten, dass es einen JSON-Body erwartet, mit einem Schl\u00fcssel <code>item</code> und darin den Inhalt des Modells, so wie es das tut, wenn Sie mehrere Body-Parameter deklarieren, dann k\u00f6nnen Sie den speziellen <code>Body</code>-Parameter <code>embed</code> setzen:</p> <pre><code>item: Item = Body(embed=True)\n</code></pre> <p>so wie in:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>In diesem Fall erwartet ReadyAPI einen Body wie:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    }\n}\n</code></pre> <p>statt:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre>"},{"location":"tutorial/body-multiple-params/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen mehrere Body-Parameter zu ihrer Pfadoperation-Funktion hinzuf\u00fcgen, obwohl ein Request nur einen einzigen Body enthalten kann.</p> <p>ReadyAPI wird sich darum k\u00fcmmern, Ihnen korrekte Daten in Ihrer Funktion zu \u00fcberreichen, und das korrekte Schema in der Pfadoperation zu validieren und zu dokumentieren.</p> <p>Sie k\u00f6nnen auch einzelne Werte deklarieren, die als Teil des Bodys empfangen werden.</p> <p>Und Sie k\u00f6nnen ReadyAPI instruieren, den Body in einem Schl\u00fcssel unterzubringen, selbst wenn nur ein einzelner Body-Parameter deklariert ist.</p>"},{"location":"tutorial/body-nested-models/","title":"Body \u2013 Verschachtelte Modelle","text":"<p>Mit ReadyAPI k\u00f6nnen Sie (dank Pydantic) beliebig tief verschachtelte Modelle definieren, validieren und dokumentieren.</p>"},{"location":"tutorial/body-nested-models/#listen-als-felder","title":"Listen als Felder","text":"<p>Sie k\u00f6nnen ein Attribut als Kindtyp definieren, zum Beispiel eine Python-<code>list</code>e.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Das bewirkt, dass <code>tags</code> eine Liste ist, wenngleich es nichts \u00fcber den Typ der Elemente der Liste aussagt.</p>"},{"location":"tutorial/body-nested-models/#listen-mit-typ-parametern-als-felder","title":"Listen mit Typ-Parametern als Felder","text":"<p>Aber Python erlaubt es, Listen mit inneren Typen, auch \u201eTyp-Parameter\u201c genannt, zu deklarieren.</p>"},{"location":"tutorial/body-nested-models/#list-von-typing-importieren","title":"<code>List</code> von <code>typing</code> importieren","text":"<p>In Python 3.9 oder dar\u00fcber k\u00f6nnen Sie einfach <code>list</code> verwenden, um diese Typannotationen zu deklarieren, wie wir unten sehen werden. \ud83d\udca1</p> <p>In Python-Versionen vor 3.9 (3.6 und dar\u00fcber), m\u00fcssen Sie zuerst <code>List</code> von Pythons Standardmodul <code>typing</code> importieren.</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#eine-liste-mit-einem-typ-parameter-deklarieren","title":"Eine <code>list</code>e mit einem Typ-Parameter deklarieren","text":"<p>Um Typen wie <code>list</code>, <code>dict</code>, <code>tuple</code> mit inneren Typ-Parametern (inneren Typen) zu deklarieren:</p> <ul> <li>Wenn Sie eine Python-Version kleiner als 3.9 verwenden, importieren Sie das \u00c4quivalent zum entsprechenden Typ vom <code>typing</code>-Modul</li> <li>\u00dcberreichen Sie den/die inneren Typ(en) von eckigen Klammern umschlossen, <code>[</code> und <code>]</code>, als \u201eTyp-Parameter\u201c</li> </ul> <p>In Python 3.9 w\u00e4re das:</p> <pre><code>my_list: list[str]\n</code></pre> <p>Und in Python-Versionen vor 3.9:</p> <pre><code>from typing import List\n\nmy_list: List[str]\n</code></pre> <p>Das ist alles Standard-Python-Syntax f\u00fcr Typdeklarationen.</p> <p>Verwenden Sie dieselbe Standardsyntax f\u00fcr Modellattribute mit inneren Typen.</p> <p>In unserem Beispiel k\u00f6nnen wir also bewirken, dass <code>tags</code> spezifisch eine \u201eListe von Strings\u201c ist:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#set-typen","title":"Set-Typen","text":"<p>Aber dann denken wir dar\u00fcber nach und stellen fest, dass sich die Tags nicht wiederholen sollen, es sollen eindeutige Strings sein.</p> <p>Python hat einen Datentyp speziell f\u00fcr Mengen eindeutiger Dinge: das <code>set</code>.</p> <p>Deklarieren wir also <code>tags</code> als Set von Strings.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Jetzt, selbst wenn Sie einen Request mit duplizierten Daten erhalten, werden diese zu einem Set eindeutiger Dinge konvertiert.</p> <p>Und wann immer Sie diese Daten ausgeben, selbst wenn die Quelle Duplikate hatte, wird es als Set von eindeutigen Dingen ausgegeben.</p> <p>Und es wird entsprechend annotiert/dokumentiert.</p>"},{"location":"tutorial/body-nested-models/#verschachtelte-modelle","title":"Verschachtelte Modelle","text":"<p>Jedes Attribut eines Pydantic-Modells hat einen Typ.</p> <p>Aber dieser Typ kann selbst ein anderes Pydantic-Modell sein.</p> <p>Sie k\u00f6nnen also tief verschachtelte JSON-\u201eObjekte\u201c deklarieren, mit spezifischen Attributnamen, -typen, und -validierungen.</p> <p>Alles das beliebig tief verschachtelt.</p>"},{"location":"tutorial/body-nested-models/#ein-kindmodell-definieren","title":"Ein Kindmodell definieren","text":"<p>Wir k\u00f6nnen zum Beispiel ein <code>Image</code>-Modell definieren.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#das-kindmodell-als-typ-verwenden","title":"Das Kindmodell als Typ verwenden","text":"<p>Und dann k\u00f6nnen wir es als Typ eines Attributes verwenden.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Das w\u00fcrde bedeuten, dass ReadyAPI einen Body erwartet wie:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\"rock\", \"metal\", \"bar\"],\n    \"image\": {\n        \"url\": \"http://example.com/baz.jpg\",\n        \"name\": \"The Foo live\"\n    }\n}\n</code></pre> <p>Wiederum, nur mit dieser Deklaration erhalten Sie von ReadyAPI:</p> <ul> <li>Editor-Unterst\u00fctzung (Codevervollst\u00e4ndigung, usw.), selbst f\u00fcr verschachtelte Modelle</li> <li>Datenkonvertierung</li> <li>Datenvalidierung</li> <li>Automatische Dokumentation</li> </ul>"},{"location":"tutorial/body-nested-models/#spezielle-typen-und-validierungen","title":"Spezielle Typen und Validierungen","text":"<p>Abgesehen von normalen einfachen Typen, wie <code>str</code>, <code>int</code>, <code>float</code>, usw. k\u00f6nnen Sie komplexere einfache Typen verwenden, die von <code>str</code> erben.</p> <p>Um alle Optionen kennenzulernen, die Sie haben, schauen Sie sich Pydantics Typ\u00fcbersicht an. Sie werden im n\u00e4chsten Kapitel ein paar Beispiele kennenlernen.</p> <p>Da wir zum Beispiel im <code>Image</code>-Modell ein Feld <code>url</code> haben, k\u00f6nnen wir deklarieren, dass das eine Instanz von Pydantics <code>HttpUrl</code> sein soll, anstelle eines <code>str</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Es wird getestet, ob der String eine g\u00fcltige URL ist, und als solche wird er in JSON Schema / OpenAPI dokumentiert.</p>"},{"location":"tutorial/body-nested-models/#attribute-mit-listen-von-kindmodellen","title":"Attribute mit Listen von Kindmodellen","text":"<p>Sie k\u00f6nnen Pydantic-Modelle auch als Typen innerhalb von <code>list</code>, <code>set</code>, usw. verwenden:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Das wird einen JSON-Body erwarten (konvertieren, validieren, dokumentieren), wie:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\n        \"rock\",\n        \"metal\",\n        \"bar\"\n    ],\n    \"images\": [\n        {\n            \"url\": \"http://example.com/baz.jpg\",\n            \"name\": \"The Foo live\"\n        },\n        {\n            \"url\": \"http://example.com/dave.jpg\",\n            \"name\": \"The Baz\"\n        }\n    ]\n}\n</code></pre> <p>Info</p> <p>Beachten Sie, dass der <code>images</code>-Schl\u00fcssel jetzt eine Liste von Bild-Objekten hat.</p>"},{"location":"tutorial/body-nested-models/#tief-verschachtelte-modelle","title":"Tief verschachtelte Modelle","text":"<p>Sie k\u00f6nnen beliebig tief verschachtelte Modelle definieren:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <p>Info</p> <p>Beachten Sie, wie <code>Offer</code> eine Liste von <code>Item</code>s hat, von denen jedes seinerseits eine optionale Liste von <code>Image</code>s hat.</p>"},{"location":"tutorial/body-nested-models/#bodys-aus-reinen-listen","title":"Bodys aus reinen Listen","text":"<p>Wenn Sie m\u00f6chten, dass das \u00e4u\u00dferste Element des JSON-Bodys ein JSON-<code>array</code> (eine Python-<code>list</code>e) ist, k\u00f6nnen Sie den Typ im Funktionsparameter deklarieren, mit der gleichen Syntax wie in Pydantic-Modellen:</p> <pre><code>images: List[Image]\n</code></pre> <p>oder in Python 3.9 und dar\u00fcber:</p> <pre><code>images: list[Image]\n</code></pre> <p>so wie in:</p> Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    return images\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n</code></pre>"},{"location":"tutorial/body-nested-models/#editor-unterstutzung-uberall","title":"Editor-Unterst\u00fctzung \u00fcberall","text":"<p>Und Sie erhalten Editor-Unterst\u00fctzung \u00fcberall.</p> <p>Selbst f\u00fcr Dinge in Listen:</p> <p></p> <p>Sie w\u00fcrden diese Editor-Unterst\u00fctzung nicht erhalten, wenn Sie direkt mit <code>dict</code>, statt mit Pydantic-Modellen arbeiten w\u00fcrden.</p> <p>Aber Sie m\u00fcssen sich auch nicht weiter um die Modelle k\u00fcmmern, hereinkommende Dicts werden automatisch in sie konvertiert. Und was Sie zur\u00fcckgeben, wird automatisch nach JSON konvertiert.</p>"},{"location":"tutorial/body-nested-models/#bodys-mit-beliebigen-dicts","title":"Bodys mit beliebigen <code>dict</code>s","text":"<p>Sie k\u00f6nnen einen Body auch als <code>dict</code> deklarieren, mit Schl\u00fcsseln eines Typs und Werten eines anderen Typs.</p> <p>So brauchen Sie vorher nicht zu wissen, wie die Feld-/Attribut-Namen lauten (wie es bei Pydantic-Modellen der Fall w\u00e4re).</p> <p>Das ist n\u00fctzlich, wenn Sie Schl\u00fcssel empfangen, deren Namen Sie nicht bereits kennen.</p> <p>Ein anderer n\u00fctzlicher Anwendungsfall ist, wenn Sie Schl\u00fcssel eines anderen Typs haben wollen, z. B. <code>int</code>.</p> <p>Das schauen wir uns mal an.</p> <p>Im folgenden Beispiel akzeptieren Sie irgendein <code>dict</code>, solange es <code>int</code>-Schl\u00fcssel und <code>float</code>-Werte hat.</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n</code></pre> <p>Tipp</p> <p>Bedenken Sie, dass JSON nur <code>str</code> als Schl\u00fcssel unterst\u00fctzt.</p> <p>Aber Pydantic hat automatische Datenkonvertierung.</p> <p>Das bedeutet, dass Ihre API-Clients nur Strings senden k\u00f6nnen, aber solange diese Strings nur Zahlen enthalten, wird Pydantic sie konvertieren und validieren.</p> <p>Und das <code>dict</code> welches Sie als <code>weights</code> erhalten, wird <code>int</code>-Schl\u00fcssel und <code>float</code>-Werte haben.</p>"},{"location":"tutorial/body-nested-models/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mit ReadyAPI haben Sie die maximale Flexibilit\u00e4t von Pydantic-Modellen, w\u00e4hrend Ihr Code einfach, kurz und elegant bleibt.</p> <p>Aber mit all den Vorz\u00fcgen:</p> <ul> <li>Editor-Unterst\u00fctzung (Codevervollst\u00e4ndigung \u00fcberall)</li> <li>Datenkonvertierung (auch bekannt als Parsen, Serialisierung)</li> <li>Datenvalidierung</li> <li>Schema-Dokumentation</li> <li>Automatische Dokumentation</li> </ul>"},{"location":"tutorial/body-updates/","title":"Body \u2013 Aktualisierungen","text":""},{"location":"tutorial/body-updates/#ersetzendes-aktualisieren-mit-put","title":"Ersetzendes Aktualisieren mit <code>PUT</code>","text":"<p>Um einen Artikel zu aktualisieren, k\u00f6nnen Sie die HTTP <code>PUT</code> Operation verwenden.</p> <p>Sie k\u00f6nnen den <code>jsonable_encoder</code> verwenden, um die empfangenen Daten in etwas zu konvertieren, das als JSON gespeichert werden kann (in z. B. einer NoSQL-Datenbank). Zum Beispiel, um ein <code>datetime</code> in einen <code>str</code> zu konvertieren.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <p><code>PUT</code> wird verwendet, um Daten zu empfangen, die die existierenden Daten ersetzen sollen.</p>"},{"location":"tutorial/body-updates/#warnung-bezuglich-des-ersetzens","title":"Warnung bez\u00fcglich des Ersetzens","text":"<p>Das bedeutet, dass, wenn Sie den Artikel <code>bar</code> aktualisieren wollen, mittels <code>PUT</code> und folgendem Body:</p> <pre><code>{\n    \"name\": \"Barz\",\n    \"price\": 3,\n    \"description\": None,\n}\n</code></pre> <p>das Eingabemodell nun den Defaultwert <code>\"tax\": 10.5</code> hat, weil Sie das bereits gespeicherte Attribut <code>\"tax\": 20.2</code> nicht mit \u00fcbergeben haben.</p> <p>Die Daten werden darum mit einem \u201eneuen\u201c <code>tax</code>-Wert von <code>10.5</code> abgespeichert.</p>"},{"location":"tutorial/body-updates/#teilweises-ersetzen-mit-patch","title":"Teilweises Ersetzen mit <code>PATCH</code>","text":"<p>Sie k\u00f6nnen auch die HTTP <code>PATCH</code> Operation verwenden, um Daten teilweise zu ersetzen.</p> <p>Das bedeutet, sie senden nur die Daten, die Sie aktualisieren wollen, der Rest bleibt unver\u00e4ndert.</p> <p>Hinweis</p> <p><code>PATCH</code> wird seltener verwendet und ist weniger bekannt als <code>PUT</code>.</p> <p>Und viele Teams verwenden ausschlie\u00dflich <code>PUT</code>, selbst f\u00fcr nur Teil-Aktualisierungen.</p> <p>Es steht Ihnen frei, das zu verwenden, was Sie m\u00f6chten, ReadyAPI legt Ihnen keine Einschr\u00e4nkungen auf.</p> <p>Aber dieser Leitfaden zeigt Ihnen mehr oder weniger, wie die beiden normalerweise verwendet werden.</p>"},{"location":"tutorial/body-updates/#pydantics-exclude_unset-parameter-verwenden","title":"Pydantics <code>exclude_unset</code>-Parameter verwenden","text":"<p>Wenn Sie Teil-Aktualisierungen entgegennehmen, ist der <code>exclude_unset</code>-Parameter in der <code>.model_dump()</code>-Methode von Pydantic-Modellen sehr n\u00fctzlich.</p> <p>Wie in <code>item.model_dump(exclude_unset=True)</code>.</p> <p>Info</p> <p>In Pydantic v1 hie\u00df diese Methode <code>.dict()</code>, in Pydantic v2 wurde sie deprecated (aber immer noch unterst\u00fctzt) und in <code>.model_dump()</code> umbenannt.</p> <p>Die Beispiele hier verwenden <code>.dict()</code> f\u00fcr die Kompatibilit\u00e4t mit Pydantic v1, Sie sollten jedoch stattdessen <code>.model_dump()</code> verwenden, wenn Sie Pydantic v2 verwenden k\u00f6nnen.</p> <p>Das wird ein <code>dict</code> erstellen, mit nur den Daten, die gesetzt wurden als das <code>item</code>-Modell erstellt wurde, Defaultwerte ausgeschlossen.</p> <p>Sie k\u00f6nnen das verwenden, um ein <code>dict</code> zu erstellen, das nur die (im Request) gesendeten Daten enth\u00e4lt, ohne Defaultwerte:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#pydantics-update-parameter-verwenden","title":"Pydantics <code>update</code>-Parameter verwenden","text":"<p>Jetzt k\u00f6nnen Sie eine Kopie des existierenden Modells mittels <code>.model_copy()</code> erstellen, wobei Sie dem <code>update</code>-Parameter ein <code>dict</code> mit den zu \u00e4ndernden Daten \u00fcbergeben.</p> <p>Info</p> <p>In Pydantic v1 hie\u00df diese Methode <code>.copy()</code>, in Pydantic v2 wurde sie deprecated (aber immer noch unterst\u00fctzt) und in <code>.model_copy()</code> umbenannt.</p> <p>Die Beispiele hier verwenden <code>.copy()</code> f\u00fcr die Kompatibilit\u00e4t mit Pydantic v1, Sie sollten jedoch stattdessen <code>.model_copy()</code> verwenden, wenn Sie Pydantic v2 verwenden k\u00f6nnen.</p> <p>Wie in <code>stored_item_model.model_copy(update=update_data)</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#rekapitulation-zum-teilweisen-ersetzen","title":"Rekapitulation zum teilweisen Ersetzen","text":"<p>Zusammengefasst, um Teil-Ersetzungen vorzunehmen:</p> <ul> <li>(Optional) verwenden Sie <code>PATCH</code> statt <code>PUT</code>.</li> <li>Lesen Sie die bereits gespeicherten Daten aus.</li> <li>F\u00fcgen Sie diese in ein Pydantic-Modell ein.</li> <li>Erzeugen Sie aus dem empfangenen Modell ein <code>dict</code> ohne Defaultwerte (mittels <code>exclude_unset</code>).<ul> <li>So ersetzen Sie nur die tats\u00e4chlich vom Benutzer gesetzten Werte, statt dass bereits gespeicherte Werte mit Defaultwerten des Modells \u00fcberschrieben werden.</li> </ul> </li> <li>Erzeugen Sie eine Kopie ihres gespeicherten Modells, wobei Sie die Attribute mit den empfangenen Teil-Ersetzungen aktualisieren (mittels des <code>update</code>-Parameters).</li> <li>Konvertieren Sie das kopierte Modell zu etwas, das in ihrer Datenbank gespeichert werden kann (indem Sie beispielsweise <code>jsonable_encoder</code> verwenden).<ul> <li>Das ist vergleichbar dazu, die <code>.model_dump()</code>-Methode des Modells erneut aufzurufen, aber es wird sicherstellen, dass die Werte zu Daten konvertiert werden, die ihrerseits zu JSON konvertiert werden k\u00f6nnen, zum Beispiel <code>datetime</code> zu <code>str</code>.</li> </ul> </li> <li>Speichern Sie die Daten in Ihrer Datenbank.</li> <li>Geben Sie das aktualisierte Modell zur\u00fcck.</li> </ul> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen tats\u00e4chlich die gleiche Technik mit einer HTTP <code>PUT</code> Operation verwenden.</p> <p>Aber dieses Beispiel verwendet <code>PATCH</code>, da dieses f\u00fcr solche Anwendungsf\u00e4lle geschaffen wurde.</p> <p>Hinweis</p> <p>Beachten Sie, dass das hereinkommende Modell immer noch validiert wird.</p> <p>Wenn Sie also Teil-Aktualisierungen empfangen wollen, die alle Attribute auslassen k\u00f6nnen, m\u00fcssen Sie ein Modell haben, dessen Attribute alle als optional gekennzeichnet sind (mit Defaultwerten oder <code>None</code>).</p> <p>Um zu unterscheiden zwischen Modellen f\u00fcr Aktualisierungen, mit lauter optionalen Werten, und solchen f\u00fcr die Erzeugung, mit ben\u00f6tigten Werten, k\u00f6nnen Sie die Techniken verwenden, die in Extramodelle beschrieben wurden.</p>"},{"location":"tutorial/body/","title":"Requestbody","text":"<p>Wenn Sie Daten von einem Client (sagen wir, einem Browser) zu Ihrer API senden, dann senden Sie diese als einen Requestbody (Deutsch: Anfragek\u00f6rper).</p> <p>Ein Requestbody sind Daten, die vom Client zu Ihrer API gesendet werden. Ein Responsebody (Deutsch: Antwortk\u00f6rper) sind Daten, die Ihre API zum Client sendet.</p> <p>Ihre API sendet fast immer einen Responsebody. Aber Clients senden nicht unbedingt immer Requestbodys (sondern nur Metadaten).</p> <p>Um einen Requestbody zu deklarieren, verwenden Sie Pydantic-Modelle mit allen deren F\u00e4higkeiten und Vorz\u00fcgen.</p> <p>Info</p> <p>Um Daten zu versenden, sollten Sie eines von: <code>POST</code> (meistverwendet), <code>PUT</code>, <code>DELETE</code> oder <code>PATCH</code> verwenden.</p> <p>Senden Sie einen Body mit einem <code>GET</code>-Request, dann f\u00fchrt das laut Spezifikation zu undefiniertem Verhalten. Trotzdem wird es von ReadyAPI unterst\u00fctzt, f\u00fcr sehr komplexe/extreme Anwendungsf\u00e4lle.</p> <p>Da aber davon abgeraten wird, zeigt die interaktive Dokumentation mit Swagger-Benutzeroberfl\u00e4che die Dokumentation f\u00fcr den Body auch nicht an, wenn <code>GET</code> verwendet wird. Dazwischengeschaltete Proxys unterst\u00fctzen es m\u00f6glicherweise auch nicht.</p>"},{"location":"tutorial/body/#importieren-sie-pydantics-basemodel","title":"Importieren Sie Pydantics <code>BaseModel</code>","text":"<p>Zuerst m\u00fcssen Sie <code>BaseModel</code> von <code>pydantic</code> importieren:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/body/#erstellen-sie-ihr-datenmodell","title":"Erstellen Sie Ihr Datenmodell","text":"<p>Dann deklarieren Sie Ihr Datenmodell als eine Klasse, die von <code>BaseModel</code> erbt.</p> <p>Verwenden Sie Standard-Python-Typen f\u00fcr die Klassenattribute:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Wie auch bei Query-Parametern gilt, wenn ein Modellattribut einen Defaultwert hat, ist das Attribut nicht erforderlich. Ansonsten ist es erforderlich. Verwenden Sie <code>None</code>, um es als optional zu kennzeichnen.</p> <p>Zum Beispiel deklariert das obige Modell ein JSON \"<code>object</code>\" (oder Python-<code>dict</code>) wie dieses:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"An optional description\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n</code></pre> <p>Da <code>description</code> und <code>tax</code> optional sind (mit <code>None</code> als Defaultwert), w\u00e4re folgendes JSON \"<code>object</code>\" auch g\u00fcltig:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n</code></pre>"},{"location":"tutorial/body/#deklarieren-sie-es-als-parameter","title":"Deklarieren Sie es als Parameter","text":"<p>Um es zu Ihrer Pfadoperation hinzuzuf\u00fcgen, deklarieren Sie es auf die gleiche Weise, wie Sie Pfad- und Query-Parameter deklariert haben:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>... und deklarieren Sie seinen Typ als das Modell, welches Sie erstellt haben, <code>Item</code>.</p>"},{"location":"tutorial/body/#resultate","title":"Resultate","text":"<p>Mit nur dieser Python-Typdeklaration, wird ReadyAPI:</p> <ul> <li>Den Requestbody als JSON lesen.</li> <li>Die entsprechenden Typen konvertieren (falls n\u00f6tig).</li> <li>Diese Daten validieren.<ul> <li>Wenn die Daten ung\u00fcltig sind, einen klar lesbaren Fehler zur\u00fcckgeben, der anzeigt, wo und was die inkorrekten Daten waren.</li> </ul> </li> <li>Ihnen die erhaltenen Daten im Parameter <code>item</code> \u00fcbergeben.<ul> <li>Da Sie diesen in der Funktion als vom Typ <code>Item</code> deklariert haben, erhalten Sie die ganze Editor-Unterst\u00fctzung (Autovervollst\u00e4ndigung, usw.) f\u00fcr alle Attribute und deren Typen.</li> </ul> </li> <li>Eine JSON Schema Definition f\u00fcr Ihr Modell generieren, welche Sie \u00fcberall sonst verwenden k\u00f6nnen, wenn es f\u00fcr Ihr Projekt Sinn macht.</li> <li>Diese Schemas werden Teil des generierten OpenAPI-Schemas und werden von den UIs der automatischen Dokumentation verwendet.</li> </ul>"},{"location":"tutorial/body/#automatische-dokumentation","title":"Automatische Dokumentation","text":"<p>Die JSON-Schemas Ihrer Modelle werden Teil ihrer OpenAPI-generierten Schemas und werden in der interaktiven API Dokumentation angezeigt:</p> <p></p> <p>Und werden auch verwendet in der API-Dokumentation innerhalb jeder Pfadoperation, welche sie braucht:</p> <p></p>"},{"location":"tutorial/body/#editor-unterstutzung","title":"Editor Unterst\u00fctzung","text":"<p>In Ihrem Editor, innerhalb Ihrer Funktion, erhalten Sie Typhinweise und Code-Vervollst\u00e4ndigung \u00fcberall (was nicht der Fall w\u00e4re, wenn Sie ein <code>dict</code> anstelle eines Pydantic Modells erhalten h\u00e4tten):</p> <p></p> <p>Sie bekommen auch Fehler-Meldungen f\u00fcr inkorrekte Typoperationen:</p> <p></p> <p>Das ist nicht zuf\u00e4llig so, das ganze Framework wurde um dieses Design herum aufgebaut.</p> <p>Und es wurde in der Designphase gr\u00fcndlich getestet, vor der Implementierung, um sicherzustellen, dass es mit jedem Editor funktioniert.</p> <p>Es gab sogar ein paar \u00c4nderungen an Pydantic selbst, um das zu unterst\u00fctzen.</p> <p>Die vorherigen Screenshots zeigten Visual Studio Code.</p> <p>Aber Sie bekommen die gleiche Editor-Unterst\u00fctzung in PyCharm und in den meisten anderen Python-Editoren:</p> <p></p> <p>Tipp</p> <p>Wenn Sie PyCharm als Ihren Editor verwenden, probieren Sie das Pydantic PyCharm Plugin aus.</p> <p>Es verbessert die Editor-Unterst\u00fctzung f\u00fcr Pydantic-Modelle, mit:</p> <ul> <li>Code-Vervollst\u00e4ndigung</li> <li>Typ\u00fcberpr\u00fcfungen</li> <li>Refaktorisierung</li> <li>Suchen</li> <li>Inspektionen</li> </ul>"},{"location":"tutorial/body/#das-modell-verwenden","title":"Das Modell verwenden","text":"<p>Innerhalb der Funktion k\u00f6nnen Sie alle Attribute des Modells direkt verwenden:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre>"},{"location":"tutorial/body/#requestbody-pfad-parameter","title":"Requestbody- + Pfad-Parameter","text":"<p>Sie k\u00f6nnen Pfad- und Requestbody-Parameter gleichzeitig deklarieren.</p> <p>ReadyAPI erkennt, dass Funktionsparameter, die mit Pfad-Parametern \u00fcbereinstimmen, vom Pfad genommen werden sollen, und dass Funktionsparameter, welche Pydantic-Modelle sind, vom Requestbody genommen werden sollen.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre>"},{"location":"tutorial/body/#requestbody-pfad-query-parameter","title":"Requestbody- + Pfad- + Query-Parameter","text":"<p>Sie k\u00f6nnen auch zur gleichen Zeit Body-, Pfad- und Query-Parameter deklarieren.</p> <p>ReadyAPI wird jeden Parameter korrekt erkennen und die Daten vom richtigen Ort holen.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> <p>Die Funktionsparameter werden wie folgt erkannt:</p> <ul> <li>Wenn der Parameter auch im Pfad deklariert wurde, wird er als Pfad-Parameter interpretiert.</li> <li>Wenn der Parameter ein einfacher Typ ist (wie <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, usw.), wird er als Query-Parameter interpretiert.</li> <li>Wenn der Parameter vom Typ eines Pydantic-Modells ist, wird er als Requestbody interpretiert.</li> </ul> <p>Hinweis</p> <p>ReadyAPI wei\u00df, dass der Wert von <code>q</code> nicht erforderlich ist, wegen des definierten Defaultwertes <code>= None</code></p> <p>Das <code>Union</code> in <code>Union[str, None]</code> wird von ReadyAPI nicht verwendet, aber es erlaubt Ihrem Editor, Sie besser zu unterst\u00fctzen und Fehler zu erkennen.</p>"},{"location":"tutorial/body/#ohne-pydantic","title":"Ohne Pydantic","text":"<p>Wenn Sie keine Pydantic-Modelle verwenden wollen, k\u00f6nnen Sie auch Body-Parameter nehmen. Siehe die Dokumentation unter Body \u2013 Mehrere Parameter: Einfache Werte im Body.</p>"},{"location":"tutorial/cookie-params/","title":"Cookie-Parameter","text":"<p>So wie <code>Query</code>- und <code>Path</code>-Parameter k\u00f6nnen Sie auch Cookie-Parameter definieren.</p>"},{"location":"tutorial/cookie-params/#cookie-importieren","title":"<code>Cookie</code> importieren","text":"<p>Importieren Sie zuerst <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre>"},{"location":"tutorial/cookie-params/#cookie-parameter-deklarieren","title":"<code>Cookie</code>-Parameter deklarieren","text":"<p>Dann deklarieren Sie Ihre Cookie-Parameter, auf die gleiche Weise, wie Sie auch <code>Path</code>- und <code>Query</code>-Parameter deklarieren.</p> <p>Der erste Wert ist der Typ. Sie k\u00f6nnen <code>Cookie</code> die gehabten Extra Validierungs- und Beschreibungsparameter hinzuf\u00fcgen. Danach k\u00f6nnen Sie einen Defaultwert vergeben:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Technische Details</p> <p><code>Cookie</code> ist eine Schwesterklasse von <code>Path</code> und <code>Query</code>. Sie erbt von derselben gemeinsamen <code>Param</code>-Elternklasse.</p> <p>Aber erinnern Sie sich, dass, wenn Sie <code>Query</code>, <code>Path</code>, <code>Cookie</code> und andere von <code>readyapi</code> importieren, diese tats\u00e4chlich Funktionen sind, welche spezielle Klassen zur\u00fcckgeben.</p> <p>Info</p> <p>Um Cookies zu deklarieren, m\u00fcssen Sie <code>Cookie</code> verwenden, da diese Parameter sonst als Query-Parameter interpretiert werden w\u00fcrden.</p>"},{"location":"tutorial/cookie-params/#zusammenfassung","title":"Zusammenfassung","text":"<p>Deklarieren Sie Cookies mittels <code>Cookie</code>, auf die gleiche Weise wie bei <code>Query</code> und <code>Path</code>.</p>"},{"location":"tutorial/encoder/","title":"JSON-kompatibler Encoder","text":"<p>Es gibt F\u00e4lle, da m\u00f6chten Sie einen Datentyp (etwa ein Pydantic-Modell) in etwas konvertieren, das kompatibel mit JSON ist (etwa ein <code>dict</code>, eine <code>list</code>e, usw.).</p> <p>Zum Beispiel, wenn Sie es in einer Datenbank speichern m\u00f6chten.</p> <p>Daf\u00fcr bietet ReadyAPI eine Funktion <code>jsonable_encoder()</code>.</p>"},{"location":"tutorial/encoder/#jsonable_encoder-verwenden","title":"<code>jsonable_encoder</code> verwenden","text":"<p>Stellen wir uns vor, Sie haben eine Datenbank <code>fake_db</code>, die nur JSON-kompatible Daten entgegennimmt.</p> <p>Sie akzeptiert zum Beispiel keine <code>datetime</code>-Objekte, da die nicht kompatibel mit JSON sind.</p> <p>Ein <code>datetime</code>-Objekt m\u00fcsste also in einen <code>str</code> umgewandelt werden, der die Daten im ISO-Format enth\u00e4lt.</p> <p>Genauso w\u00fcrde die Datenbank kein Pydantic-Modell (ein Objekt mit Attributen) akzeptieren, sondern nur ein <code>dict</code>.</p> <p>Sie k\u00f6nnen f\u00fcr diese F\u00e4lle <code>jsonable_encoder</code> verwenden.</p> <p>Es nimmt ein Objekt entgegen, wie etwa ein Pydantic-Modell, und gibt eine JSON-kompatible Version zur\u00fcck:</p> Python 3.10+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <p>In diesem Beispiel wird das Pydantic-Modell in ein <code>dict</code>, und das <code>datetime</code>-Objekt in ein <code>str</code> konvertiert.</p> <p>Das Resultat dieses Aufrufs ist etwas, das mit Pythons Standard-<code>json.dumps()</code> kodiert werden kann.</p> <p>Es wird also kein gro\u00dfer <code>str</code> zur\u00fcckgegeben, der die Daten im JSON-Format (als String) enth\u00e4lt. Es wird eine Python-Standarddatenstruktur (z. B. ein <code>dict</code>) zur\u00fcckgegeben, mit Werten und Unterwerten, die alle mit JSON kompatibel sind.</p> <p>Hinweis</p> <p><code>jsonable_encoder</code> wird tats\u00e4chlich von ReadyAPI intern verwendet, um Daten zu konvertieren. Aber es ist in vielen anderen Szenarien hilfreich.</p>"},{"location":"tutorial/extra-data-types/","title":"Zus\u00e4tzliche Datentypen","text":"<p>Bisher haben Sie g\u00e4ngige Datentypen verwendet, wie zum Beispiel:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>bool</code></li> </ul> <p>Sie k\u00f6nnen aber auch komplexere Datentypen verwenden.</p> <p>Und Sie haben immer noch dieselbe Funktionalit\u00e4t wie bisher gesehen:</p> <ul> <li>Gro\u00dfartige Editor-Unterst\u00fctzung.</li> <li>Datenkonvertierung bei eingehenden Requests.</li> <li>Datenkonvertierung f\u00fcr Response-Daten.</li> <li>Datenvalidierung.</li> <li>Automatische Annotation und Dokumentation.</li> </ul>"},{"location":"tutorial/extra-data-types/#andere-datentypen","title":"Andere Datentypen","text":"<p>Hier sind einige der zus\u00e4tzlichen Datentypen, die Sie verwenden k\u00f6nnen:</p> <ul> <li><code>UUID</code>:<ul> <li>Ein standardm\u00e4\u00dfiger \u201euniversell eindeutiger Bezeichner\u201c (\u201eUniversally Unique Identifier\u201c), der in vielen Datenbanken und Systemen als ID \u00fcblich ist.</li> <li>Wird in Requests und Responses als <code>str</code> dargestellt.</li> </ul> </li> <li><code>datetime.datetime</code>:<ul> <li>Ein Python-<code>datetime.datetime</code>.</li> <li>Wird in Requests und Responses als <code>str</code> im ISO 8601-Format dargestellt, etwa: <code>2008-09-15T15:53:00+05:00</code>.</li> </ul> </li> <li><code>datetime.date</code>:<ul> <li>Python-<code>datetime.date</code>.</li> <li>Wird in Requests und Responses als <code>str</code> im ISO 8601-Format dargestellt, etwa: <code>2008-09-15</code>.</li> </ul> </li> <li><code>datetime.time</code>:<ul> <li>Ein Python-<code>datetime.time</code>.</li> <li>Wird in Requests und Responses als <code>str</code> im ISO 8601-Format dargestellt, etwa: <code>14:23:55.003</code>.</li> </ul> </li> <li><code>datetime.timedelta</code>:<ul> <li>Ein Python-<code>datetime.timedelta</code>.</li> <li>Wird in Requests und Responses als <code>float</code> der Gesamtsekunden dargestellt.</li> <li>Pydantic erm\u00f6glicht auch die Darstellung als \u201eISO 8601 Zeitdifferenz-Kodierung\u201c, Weitere Informationen finden Sie in der Dokumentation.</li> </ul> </li> <li><code>frozenset</code>:<ul> <li>Wird in Requests und Responses wie ein <code>set</code> behandelt:<ul> <li>Bei Requests wird eine Liste gelesen, Duplikate entfernt und in ein <code>set</code> umgewandelt.</li> <li>Bei Responses wird das <code>set</code> in eine <code>list</code>e umgewandelt.</li> <li>Das generierte Schema zeigt an, dass die <code>set</code>-Werte eindeutig sind (unter Verwendung von JSON Schemas <code>uniqueItems</code>).</li> </ul> </li> </ul> </li> <li><code>bytes</code>:<ul> <li>Standard-Python-<code>bytes</code>.</li> <li>In Requests und Responses werden sie als <code>str</code> behandelt.</li> <li>Das generierte Schema wird anzeigen, dass es sich um einen <code>str</code> mit <code>binary</code> \u201eFormat\u201c handelt.</li> </ul> </li> <li><code>Decimal</code>:<ul> <li>Standard-Python-<code>Decimal</code>.</li> <li>In Requests und Responses wird es wie ein <code>float</code> behandelt.</li> </ul> </li> <li>Sie k\u00f6nnen alle g\u00fcltigen Pydantic-Datentypen hier \u00fcberpr\u00fcfen: Pydantic data types.</li> </ul>"},{"location":"tutorial/extra-data-types/#beispiel","title":"Beispiel","text":"<p>Hier ist ein Beispiel f\u00fcr eine Pfadoperation mit Parametern, die einige der oben genannten Typen verwenden.</p> Python 3.10+ <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Beachten Sie, dass die Parameter innerhalb der Funktion ihren nat\u00fcrlichen Datentyp haben und Sie beispielsweise normale Datumsmanipulationen durchf\u00fchren k\u00f6nnen, wie zum Beispiel:</p> Python 3.10+ <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre>"},{"location":"tutorial/extra-models/","title":"Extramodelle","text":"<p>Fahren wir beim letzten Beispiel fort. Es gibt normalerweise mehrere zusammengeh\u00f6rende Modelle.</p> <p>Insbesondere Benutzermodelle, denn:</p> <ul> <li>Das hereinkommende Modell sollte ein Passwort haben k\u00f6nnen.</li> <li>Das herausgehende Modell sollte kein Passwort haben.</li> <li>Das Datenbankmodell sollte wahrscheinlich ein gehashtes Passwort haben.</li> </ul> <p>Gefahr</p> <p>Speichern Sie niemals das Klartext-Passwort eines Benutzers. Speichern Sie immer den \u201esicheren Hash\u201c, den Sie verifizieren k\u00f6nnen.</p> <p>Falls Ihnen das nichts sagt, in den Sicherheits-Kapiteln werden Sie lernen, was ein \u201ePasswort-Hash\u201c ist.</p>"},{"location":"tutorial/extra-models/#mehrere-modelle","title":"Mehrere Modelle","text":"<p>Hier der generelle Weg, wie die Modelle mit ihren Passwort-Feldern aussehen k\u00f6nnten, und an welchen Orten sie verwendet werden w\u00fcrden.</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> <p>Info</p> <p>In Pydantic v1 hie\u00df diese Methode <code>.dict()</code>, in Pydantic v2 wurde sie deprecated (aber immer noch unterst\u00fctzt) und in <code>.model_dump()</code> umbenannt.</p> <p>Die Beispiele hier verwenden <code>.dict()</code> f\u00fcr die Kompatibilit\u00e4t mit Pydantic v1, Sie sollten jedoch stattdessen <code>.model_dump()</code> verwenden, wenn Sie Pydantic v2 verwenden k\u00f6nnen.</p>"},{"location":"tutorial/extra-models/#uber-user_indict","title":"\u00dcber <code>**user_in.dict()</code>","text":""},{"location":"tutorial/extra-models/#pydantics-dict","title":"Pydantic's <code>.dict()</code>","text":"<p><code>user_in</code> ist ein Pydantic-Modell der Klasse <code>UserIn</code>.</p> <p>Pydantic-Modelle haben eine <code>.dict()</code>-Methode, die ein <code>dict</code> mit den Daten des Modells zur\u00fcckgibt.</p> <p>Wenn wir also ein Pydantic-Objekt <code>user_in</code> erstellen, etwa so:</p> <pre><code>user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n</code></pre> <p>und wir rufen seine <code>.dict()</code>-Methode auf:</p> <pre><code>user_dict = user_in.dict()\n</code></pre> <p>dann haben wir jetzt in der Variable <code>user_dict</code> ein <code>dict</code> mit den gleichen Daten (es ist ein <code>dict</code> statt eines Pydantic-Modellobjekts).</p> <p>Wenn wir es ausgeben:</p> <pre><code>print(user_dict)\n</code></pre> <p>bekommen wir ein Python-<code>dict</code>:</p> <pre><code>{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\n</code></pre>"},{"location":"tutorial/extra-models/#ein-dict-entpacken","title":"Ein <code>dict</code> entpacken","text":"<p>Wenn wir ein <code>dict</code> wie <code>user_dict</code> nehmen, und es einer Funktion (oder Klassenmethode) mittels <code>**user_dict</code> \u00fcbergeben, wird Python es \u201eentpacken\u201c. Es wird die Schl\u00fcssel und Werte von <code>user_dict</code> direkt als Schl\u00fcsselwort-Argumente \u00fcbergeben.</p> <p>Wenn wir also das <code>user_dict</code> von oben nehmen und schreiben:</p> <pre><code>UserInDB(**user_dict)\n</code></pre> <p>dann ist das ungef\u00e4hr \u00e4quivalent zu:</p> <pre><code>UserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n</code></pre> <p>Oder, pr\u00e4ziser, <code>user_dict</code> wird direkt verwendet, welche Werte es auch immer haben mag:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n)\n</code></pre>"},{"location":"tutorial/extra-models/#ein-pydantic-modell-aus-den-inhalten-eines-anderen-erstellen","title":"Ein Pydantic-Modell aus den Inhalten eines anderen erstellen.","text":"<p>Da wir in obigem Beispiel <code>user_dict</code> mittels <code>user_in.dict()</code> erzeugt haben, ist dieser Code:</p> <pre><code>user_dict = user_in.dict()\nUserInDB(**user_dict)\n</code></pre> <p>\u00e4quivalent zu:</p> <pre><code>UserInDB(**user_in.dict())\n</code></pre> <p>... weil <code>user_in.dict()</code> ein <code>dict</code> ist, und dann lassen wir Python es \u201eentpacken\u201c, indem wir es <code>UserInDB</code> \u00fcbergeben, mit vorangestelltem <code>**</code>.</p> <p>Wir erhalten also ein Pydantic-Modell aus den Daten eines anderen Pydantic-Modells.</p>"},{"location":"tutorial/extra-models/#ein-dict-entpacken-und-zusatzliche-schlusselwort-argumente","title":"Ein <code>dict</code> entpacken und zus\u00e4tzliche Schl\u00fcsselwort-Argumente","text":"<p>Und dann f\u00fcgen wir ein noch weiteres Schl\u00fcsselwort-Argument hinzu, <code>hashed_password=hashed_password</code>:</p> <pre><code>UserInDB(**user_in.dict(), hashed_password=hashed_password)\n</code></pre> <p>... was am Ende ergibt:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n</code></pre> <p>Achtung</p> <p>Die Hilfsfunktionen <code>fake_password_hasher</code> und <code>fake_save_user</code> demonstrieren nur den m\u00f6glichen Fluss der Daten und bieten nat\u00fcrlich keine echte Sicherheit.</p>"},{"location":"tutorial/extra-models/#verdopplung-vermeiden","title":"Verdopplung vermeiden","text":"<p>Reduzierung von Code-Verdoppelung ist eine der Kern-Ideen von ReadyAPI.</p> <p>Weil Verdoppelung von Code die Wahrscheinlichkeit von Fehlern, Sicherheitsproblemen, Desynchronisation (Code wird nur an einer Stelle ver\u00e4ndert, aber nicht an einer anderen), usw. erh\u00f6ht.</p> <p>Unsere Modelle teilen alle eine Menge der Daten und verdoppeln Attribut-Namen und -Typen.</p> <p>Das k\u00f6nnen wir besser machen.</p> <p>Wir deklarieren ein <code>UserBase</code>-Modell, das als Basis f\u00fcr unsere anderen Modelle dient. Dann k\u00f6nnen wir Unterklassen erstellen, die seine Attribute (Typdeklarationen, Validierungen, usw.) erben.</p> <p>Die ganze Datenkonvertierung, -validierung, -dokumentation, usw. wird immer noch wie gehabt funktionieren.</p> <p>Auf diese Weise beschreiben wir nur noch die Unterschiede zwischen den Modellen (mit Klartext-<code>password</code>, mit <code>hashed_password</code>, und ohne Passwort):</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#union-oder-anyof","title":"<code>Union</code>, oder <code>anyOf</code>","text":"<p>Sie k\u00f6nnen deklarieren, dass eine Response eine <code>Union</code> mehrerer Typen ist, sprich, einer dieser Typen.</p> <p>Das wird in OpenAPI mit <code>anyOf</code> angezeigt.</p> <p>Um das zu tun, verwenden Sie Pythons Standard-Typhinweis <code>typing.Union</code>:</p> <p>Hinweis</p> <p>Listen Sie, wenn Sie eine <code>Union</code> definieren, denjenigen Typ zuerst, der am spezifischsten ist, gefolgt von den weniger spezifischen Typen. Im Beispiel oben, in <code>Union[PlaneItem, CarItem]</code> also den spezifischeren <code>PlaneItem</code> vor dem weniger spezifischen <code>CarItem</code>.</p> Python 3.10+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/extra-models/#union-in-python-310","title":"<code>Union</code> in Python 3.10","text":"<p>In diesem Beispiel \u00fcbergeben wir dem Argument <code>response_model</code> den Wert <code>Union[PlaneItem, CarItem]</code>.</p> <p>Da wir es als Wert einem Argument \u00fcberreichen, statt es als Typannotation zu verwenden, m\u00fcssen wir <code>Union</code> verwenden, selbst in Python 3.10.</p> <p>Wenn es eine Typannotation gewesen w\u00e4re, h\u00e4tten wir auch den vertikalen Trennstrich verwenden k\u00f6nnen, wie in:</p> <pre><code>some_variable: PlaneItem | CarItem\n</code></pre> <p>Aber wenn wir das in der Zuweisung <code>response_model=PlaneItem | CarItem</code> machen, erhalten wir eine Fehlermeldung, da Python versucht, eine ung\u00fcltige Operation zwischen <code>PlaneItem</code> und <code>CarItem</code> durchzuf\u00fchren, statt es als Typannotation zu interpretieren.</p>"},{"location":"tutorial/extra-models/#listen-von-modellen","title":"Listen von Modellen","text":"<p>Genauso k\u00f6nnen Sie eine Response deklarieren, die eine Liste von Objekten ist.</p> <p>Verwenden Sie daf\u00fcr Pythons Standard <code>typing.List</code> (oder nur <code>list</code> in Python 3.9 und dar\u00fcber):</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n</code></pre>"},{"location":"tutorial/extra-models/#response-mit-beliebigem-dict","title":"Response mit beliebigem <code>dict</code>","text":"<p>Sie k\u00f6nne auch eine Response deklarieren, die ein beliebiges <code>dict</code> zur\u00fcckgibt, bei dem nur die Typen der Schl\u00fcssel und der Werte bekannt sind, ohne ein Pydantic-Modell zu verwenden.</p> <p>Das ist n\u00fctzlich, wenn Sie die g\u00fcltigen Feld-/Attribut-Namen von vorneherein nicht wissen (was f\u00fcr ein Pydantic-Modell notwendig ist).</p> <p>In diesem Fall k\u00f6nnen Sie <code>typing.Dict</code> verwenden (oder nur <code>dict</code> in Python 3.9 und dar\u00fcber):</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre>"},{"location":"tutorial/extra-models/#zusammenfassung","title":"Zusammenfassung","text":"<p>Verwenden Sie gerne mehrere Pydantic-Modelle und vererben Sie je nach Bedarf.</p> <p>Sie brauchen kein einzelnes Datenmodell pro Einheit, wenn diese Einheit verschiedene Zust\u00e4nde annehmen kann. So wie unsere Benutzer-\u201eEinheit\u201c, welche einen Zustand mit <code>password</code>, einen mit <code>password_hash</code> und einen ohne Passwort hatte.</p>"},{"location":"tutorial/first-steps/","title":"Erste Schritte","text":"<p>Die einfachste ReadyAPI-Datei k\u00f6nnte wie folgt aussehen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Kopieren Sie dies in eine Datei <code>main.py</code>.</p> <p>Starten Sie den Live-Server:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Hinweis</p> <p>Der Befehl <code>uvicorn main:app</code> bezieht sich auf:</p> <ul> <li><code>main</code>: die Datei <code>main.py</code> (das sogenannte Python-\u201eModul\u201c).</li> <li><code>app</code>: das Objekt, welches in der Datei <code>main.py</code> mit der Zeile <code>app = ReadyAPI()</code> erzeugt wurde.</li> <li><code>--reload</code>: l\u00e4sst den Server nach Code\u00e4nderungen neu starten. Verwenden Sie das nur w\u00e4hrend der Entwicklung.</li> </ul> <p>In der Konsolenausgabe sollte es eine Zeile geben, die ungef\u00e4hr so aussieht:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Diese Zeile zeigt die URL, unter der Ihre Anwendung auf Ihrem lokalen Computer bereitgestellt wird.</p>"},{"location":"tutorial/first-steps/#testen-sie-es","title":"Testen Sie es","text":"<p>\u00d6ffnen Sie Ihren Browser unter http://127.0.0.1:8000.</p> <p>Sie werden folgende JSON-Response sehen:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#interaktive-api-dokumentation","title":"Interaktive API-Dokumentation","text":"<p>Gehen Sie als N\u00e4chstes auf http://127.0.0.1:8000/docs .</p> <p>Sie werden die automatisch erzeugte, interaktive API-Dokumentation sehen (bereitgestellt durch Swagger UI):</p> <p></p>"},{"location":"tutorial/first-steps/#alternative-api-dokumentation","title":"Alternative API-Dokumentation","text":"<p>Gehen Sie nun auf http://127.0.0.1:8000/redoc.</p> <p>Dort sehen Sie die alternative, automatische Dokumentation (bereitgestellt durch ReDoc):</p> <p></p>"},{"location":"tutorial/first-steps/#openapi","title":"OpenAPI","text":"<p>ReadyAPI generiert ein \u201eSchema\u201c mit all Ihren APIs unter Verwendung des OpenAPI-Standards zur Definition von APIs.</p>"},{"location":"tutorial/first-steps/#schema","title":"\u201eSchema\u201c","text":"<p>Ein \u201eSchema\u201c ist eine Definition oder Beschreibung von etwas. Nicht der eigentliche Code, der es implementiert, sondern lediglich eine abstrakte Beschreibung.</p>"},{"location":"tutorial/first-steps/#api-schema","title":"API-\u201eSchema\u201c","text":"<p>In diesem Fall ist  OpenAPI eine Spezifikation, die vorschreibt, wie ein Schema f\u00fcr Ihre API zu definieren ist.</p> <p>Diese Schemadefinition enth\u00e4lt Ihre API-Pfade, die m\u00f6glichen Parameter, welche diese entgegennehmen, usw.</p>"},{"location":"tutorial/first-steps/#daten-schema","title":"Daten-\u201eSchema\u201c","text":"<p>Der Begriff \u201eSchema\u201c kann sich auch auf die Form von Daten beziehen, wie z. B. einen JSON-Inhalt.</p> <p>In diesem Fall sind die JSON-Attribute und deren Datentypen, usw. gemeint.</p>"},{"location":"tutorial/first-steps/#openapi-und-json-schema","title":"OpenAPI und JSON Schema","text":"<p>OpenAPI definiert ein API-Schema f\u00fcr Ihre API. Dieses Schema enth\u00e4lt Definitionen (oder \u201eSchemas\u201c) der Daten, die von Ihrer API unter Verwendung von JSON Schema, dem Standard f\u00fcr JSON-Datenschemata, gesendet und empfangen werden.</p>"},{"location":"tutorial/first-steps/#uberprufen-sie-die-openapijson","title":"\u00dcberpr\u00fcfen Sie die <code>openapi.json</code>","text":"<p>Falls Sie wissen m\u00f6chten, wie das rohe OpenAPI-Schema aussieht: ReadyAPI generiert automatisch ein JSON (Schema) mit den Beschreibungen Ihrer gesamten API.</p> <p>Sie k\u00f6nnen es direkt einsehen unter: http://127.0.0.1:8000/openapi.json.</p> <p>Es wird ein JSON angezeigt, welches ungef\u00e4hr so aussieht:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n</code></pre>"},{"location":"tutorial/first-steps/#wofur-openapi-gedacht-ist","title":"Wof\u00fcr OpenAPI gedacht ist","text":"<p>Das OpenAPI-Schema ist die Grundlage f\u00fcr die beiden enthaltenen interaktiven Dokumentationssysteme.</p> <p>Es gibt dutzende Alternativen, die alle auf OpenAPI basieren. Sie k\u00f6nnen jede dieser Alternativen problemlos zu Ihrer mit ReadyAPI erstellten Anwendung hinzuf\u00fcgen.</p> <p>Ebenfalls k\u00f6nnen Sie es verwenden, um automatisch Code f\u00fcr Clients zu generieren, die mit Ihrer API kommunizieren. Zum Beispiel f\u00fcr Frontend-, Mobile- oder IoT-Anwendungen.</p>"},{"location":"tutorial/first-steps/#ruckblick-schritt-fur-schritt","title":"R\u00fcckblick, Schritt f\u00fcr Schritt","text":""},{"location":"tutorial/first-steps/#schritt-1-importieren-von-readyapi","title":"Schritt 1: Importieren von <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>ReadyAPI</code> ist eine Python-Klasse, die die gesamte Funktionalit\u00e4t f\u00fcr Ihre API bereitstellt.</p> <p>Technische Details</p> <p><code>ReadyAPI</code>  ist eine Klasse, die direkt von <code>Starlette</code> erbt.</p> <p>Sie k\u00f6nnen alle Starlette-Funktionalit\u00e4ten auch mit <code>ReadyAPI</code> nutzen.</p>"},{"location":"tutorial/first-steps/#schritt-2-erzeugen-einer-readyapi-instanz","title":"Schritt 2: Erzeugen einer <code>ReadyAPI</code>-\u201eInstanz\u201c","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>In diesem Beispiel ist die Variable <code>app</code> eine \u201eInstanz\u201c der Klasse <code>ReadyAPI</code>.</p> <p>Dies wird der Hauptinteraktionspunkt f\u00fcr die Erstellung all Ihrer APIs sein.</p> <p>Die Variable <code>app</code> ist dieselbe, auf die sich der Befehl <code>uvicorn</code> bezieht:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Wenn Sie Ihre Anwendung wie folgt erstellen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nmy_awesome_api = ReadyAPI()\n\n\n@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Und in eine Datei <code>main.py</code> einf\u00fcgen, dann w\u00fcrden Sie <code>uvicorn</code> wie folgt aufrufen:</p> <pre><code>$ uvicorn main:my_awesome_api --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/first-steps/#schritt-3-erstellen-einer-pfadoperation","title":"Schritt 3: Erstellen einer Pfadoperation","text":""},{"location":"tutorial/first-steps/#pfad","title":"Pfad","text":"<p>\u201ePfad\u201c bezieht sich hier auf den letzten Teil der URL, beginnend mit dem ersten <code>/</code>.</p> <p>In einer URL wie:</p> <pre><code>https://example.com/items/foo\n</code></pre> <p>... w\u00e4re der Pfad folglich:</p> <pre><code>/items/foo\n</code></pre> <p>Info</p> <p>Ein \u201ePfad\u201c wird h\u00e4ufig auch als \u201eEndpunkt\u201c oder \u201eRoute\u201c bezeichnet.</p> <p>Bei der Erstellung einer API ist der \u201ePfad\u201c die wichtigste M\u00f6glichkeit zur Trennung von \u201eAnliegen\u201c und \u201eRessourcen\u201c.</p>"},{"location":"tutorial/first-steps/#operation","title":"Operation","text":"<p>\u201eOperation\u201c bezieht sich hier auf eine der HTTP-\u201eMethoden\u201c.</p> <p>Eine von diesen:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>... und die etwas Exotischeren:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>Im HTTP-Protokoll k\u00f6nnen Sie mit jedem Pfad \u00fcber eine (oder mehrere) dieser \u201eMethoden\u201c kommunizieren.</p> <p>Bei der Erstellung von APIs verwenden Sie normalerweise diese spezifischen HTTP-Methoden, um eine bestimmte Aktion durchzuf\u00fchren.</p> <p>Normalerweise verwenden Sie:</p> <ul> <li><code>POST</code>: um Daten zu erzeugen (create).</li> <li><code>GET</code>: um Daten zu lesen (read).</li> <li><code>PUT</code>: um Daten zu aktualisieren (update).</li> <li><code>DELETE</code>: um Daten zu l\u00f6schen (delete).</li> </ul> <p>In OpenAPI wird folglich jede dieser HTTP-Methoden als \u201eOperation\u201c bezeichnet.</p> <p>Wir werden sie auch \u201eOperationen\u201c nennen.</p>"},{"location":"tutorial/first-steps/#definieren-eines-pfadoperation-dekorators","title":"Definieren eines Pfadoperation-Dekorators","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Das <code>@app.get(\"/\")</code> sagt ReadyAPI, dass die Funktion direkt darunter f\u00fcr die Bearbeitung von Anfragen zust\u00e4ndig ist, die an:</p> <ul> <li>den Pfad <code>/</code></li> <li>unter der Verwendung der <code>get</code>-Operation gehen</li> </ul> <p><code>@decorator</code> Information</p> <p>Diese <code>@something</code>-Syntax wird in Python \u201eDekorator\u201c genannt.</p> <p>Sie platzieren ihn \u00fcber einer Funktion. Wie ein h\u00fcbscher, dekorativer Hut (daher kommt wohl der Begriff).</p> <p>Ein \u201eDekorator\u201c nimmt die darunter stehende Funktion und macht etwas damit.</p> <p>In unserem Fall teilt dieser Dekorator ReadyAPI mit, dass die folgende Funktion mit dem Pfad <code>/</code> und der Operation <code>get</code> zusammenh\u00e4ngt.</p> <p>Dies ist der \u201ePfadoperation-Dekorator\u201c.</p> <p>Sie k\u00f6nnen auch die anderen Operationen verwenden:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>Oder die exotischeren:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Tipp</p> <p>Es steht Ihnen frei, jede Operation (HTTP-Methode) so zu verwenden, wie Sie es m\u00f6chten.</p> <p>ReadyAPI erzwingt keine bestimmte Bedeutung.</p> <p>Die hier aufgef\u00fchrten Informationen dienen als Leitfaden und sind nicht verbindlich.</p> <p>Wenn Sie beispielsweise GraphQL verwenden, f\u00fchren Sie normalerweise alle Aktionen nur mit \u201ePOST\u201c-Operationen durch.</p>"},{"location":"tutorial/first-steps/#schritt-4-definieren-der-pfadoperation-funktion","title":"Schritt 4: Definieren der Pfadoperation-Funktion","text":"<p>Das ist unsere \u201ePfadoperation-Funktion\u201c:</p> <ul> <li>Pfad: ist <code>/</code>.</li> <li>Operation: ist <code>get</code>.</li> <li>Funktion: ist die Funktion direkt unter dem \u201eDekorator\u201c (unter <code>@app.get(\"/\")</code>).</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Dies ist eine Python-Funktion.</p> <p>Sie wird von ReadyAPI immer dann aufgerufen, wenn sie eine Anfrage an die URL \"<code>/</code>\" mittels einer <code>GET</code>-Operation erh\u00e4lt.</p> <p>In diesem Fall handelt es sich um eine <code>async</code>-Funktion.</p> <p>Sie k\u00f6nnten sie auch als normale Funktion anstelle von <code>async def</code> definieren:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Hinweis</p> <p>Wenn Sie den Unterschied nicht kennen, lesen Sie Async: \u201eIn Eile?\u201c.</p>"},{"location":"tutorial/first-steps/#schritt-5-den-inhalt-zuruckgeben","title":"Schritt 5: den Inhalt zur\u00fcckgeben","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Sie k\u00f6nnen ein <code>dict</code>, eine <code>list</code>, einzelne Werte wie <code>str</code>, <code>int</code>, usw. zur\u00fcckgeben.</p> <p>Sie k\u00f6nnen auch Pydantic-Modelle zur\u00fcckgeben (dazu sp\u00e4ter mehr).</p> <p>Es gibt viele andere Objekte und Modelle, die automatisch zu JSON konvertiert werden (einschlie\u00dflich ORMs usw.). Versuchen Sie, Ihre Lieblingsobjekte zu verwenden. Es ist sehr wahrscheinlich, dass sie bereits unterst\u00fctzt werden.</p>"},{"location":"tutorial/first-steps/#zusammenfassung","title":"Zusammenfassung","text":"<ul> <li>Importieren Sie <code>ReadyAPI</code>.</li> <li>Erstellen Sie eine <code>app</code> Instanz.</li> <li>Schreiben Sie einen Pfadoperation-Dekorator (wie z. B. <code>@app.get(\"/\")</code>).</li> <li>Schreiben Sie eine Pfadoperation-Funktion (wie z. B. oben <code>def root(): ...</code>).</li> <li>Starten Sie den Entwicklungsserver (z. B. <code>uvicorn main:app --reload</code>).</li> </ul>"},{"location":"tutorial/handling-errors/","title":"Fehlerbehandlung","text":"<p>Es gibt viele Situationen, in denen Sie einem Client, der Ihre API benutzt, einen Fehler zur\u00fcckgeben m\u00fcssen.</p> <p>Dieser Client k\u00f6nnte ein Browser mit einem Frontend, Code von jemand anderem, ein IoT-Ger\u00e4t, usw., sein.</p> <p>Sie m\u00fcssten beispielsweise einem Client sagen:</p> <ul> <li>Dass er nicht die notwendigen Berechtigungen hat, eine Aktion auszuf\u00fchren.</li> <li>Dass er zu einer Ressource keinen Zugriff hat.</li> <li>Dass die Ressource, auf die er zugreifen m\u00f6chte, nicht existiert.</li> <li>usw.</li> </ul> <p>In diesen F\u00e4llen geben Sie normalerweise einen HTTP-Statuscode im Bereich 400 (400 bis 499) zur\u00fcck.</p> <p>Das ist vergleichbar mit den HTTP-Statuscodes im Bereich 200 (von 200 bis 299). Diese \u201e200\u201cer Statuscodes bedeuten, dass der Request in einem bestimmten Aspekt ein \u201eSuccess\u201c (\u201eErfolg\u201c) war.</p> <p>Die Statuscodes im 400er-Bereich bedeuten hingegen, dass es einen Fehler gab.</p> <p>Erinnern Sie sich an all diese 404 Not Found Fehler (und Witze)?</p>"},{"location":"tutorial/handling-errors/#httpexception-verwenden","title":"<code>HTTPException</code> verwenden","text":"<p>Um HTTP-Responses mit Fehlern zum Client zur\u00fcckzugeben, verwenden Sie <code>HTTPException</code>.</p>"},{"location":"tutorial/handling-errors/#httpexception-importieren","title":"<code>HTTPException</code> importieren","text":"Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#eine-httpexception-in-ihrem-code-auslosen","title":"Eine <code>HTTPException</code> in Ihrem Code ausl\u00f6sen","text":"<p><code>HTTPException</code> ist eine normale Python-Exception mit einigen zus\u00e4tzlichen Daten, die f\u00fcr APIs relevant sind.</p> <p>Weil es eine Python-Exception ist, geben Sie sie nicht zur\u00fcck, (<code>return</code>), sondern Sie l\u00f6sen sie aus (<code>raise</code>).</p> <p>Das bedeutet auch, wenn Sie in einer Hilfsfunktion sind, die Sie von ihrer Pfadoperation-Funktion aus aufrufen, und Sie l\u00f6sen eine <code>HTTPException</code> von innerhalb dieser Hilfsfunktion aus, dann wird der Rest der Pfadoperation-Funktion nicht ausgef\u00fchrt, sondern der Request wird sofort abgebrochen und der HTTP-Error der <code>HTTP-Exception</code> wird zum Client gesendet.</p> <p>Der Vorteil, eine Exception auszul\u00f6sen (<code>raise</code>), statt sie zur\u00fcckzugeben (<code>return</code>) wird im Abschnitt \u00fcber Abh\u00e4ngigkeiten und Sicherheit klarer werden.</p> <p>Im folgenden Beispiel l\u00f6sen wir, wenn der Client eine ID anfragt, die nicht existiert, eine Exception mit dem Statuscode <code>404</code> aus.</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#die-resultierende-response","title":"Die resultierende Response","text":"<p>Wenn der Client <code>http://example.com/items/foo</code> anfragt (ein <code>item_id</code> <code>\"foo\"</code>), erh\u00e4lt dieser Client einen HTTP-Statuscode 200 und folgende JSON-Response:</p> <pre><code>{\n  \"item\": \"The Foo Wrestlers\"\n}\n</code></pre> <p>Aber wenn der Client <code>http://example.com/items/bar</code> anfragt (ein nicht-existierendes <code>item_id</code> <code>\"bar\"</code>), erh\u00e4lt er einen HTTP-Statuscode 404 (der \u201eNot Found\u201c-Fehler), und eine JSON-Response wie folgt:</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre> <p>Tipp</p> <p>Wenn Sie eine <code>HTTPException</code> ausl\u00f6sen, k\u00f6nnen Sie dem Parameter <code>detail</code> jeden Wert \u00fcbergeben, der nach JSON konvertiert werden kann, nicht nur <code>str</code>.</p> <p>Zum Beispiel ein <code>dict</code>, eine <code>list</code>, usw.</p> <p>Das wird automatisch von ReadyAPI gehandhabt und der Wert nach JSON konvertiert.</p>"},{"location":"tutorial/handling-errors/#benutzerdefinierte-header-hinzufugen","title":"Benutzerdefinierte Header hinzuf\u00fcgen","text":"<p>Es gibt Situationen, da ist es n\u00fctzlich, dem HTTP-Error benutzerdefinierte Header hinzuf\u00fcgen zu k\u00f6nnen, etwa in einigen Sicherheitsszenarien.</p> <p>Sie m\u00fcssen das wahrscheinlich nicht direkt in ihrem Code verwenden.</p> <p>Aber falls es in einem fortgeschrittenen Szenario notwendig ist, k\u00f6nnen Sie benutzerdefinierte Header wie folgt hinzuf\u00fcgen:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#benutzerdefinierte-exceptionhandler-definieren","title":"Benutzerdefinierte Exceptionhandler definieren","text":"<p>Sie k\u00f6nnen benutzerdefinierte Exceptionhandler hinzuf\u00fcgen, mithilfe derselben Werkzeuge f\u00fcr Exceptions von Starlette.</p> <p>Nehmen wir an, Sie haben eine benutzerdefinierte Exception <code>UnicornException</code>, die Sie (oder eine Bibliothek, die Sie verwenden) <code>raise</code>n k\u00f6nnten.</p> <p>Und Sie m\u00f6chten diese Exception global mit ReadyAPI handhaben.</p> <p>Sie k\u00f6nnten einen benutzerdefinierten Exceptionhandler mittels <code>@app.exception_handler()</code> hinzuf\u00fcgen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n</code></pre> <p>Wenn Sie nun <code>/unicorns/yolo</code> anfragen, <code>raise</code>d die Pfadoperation eine <code>UnicornException</code>.</p> <p>Aber diese wird von <code>unicorn_exception_handler</code> gehandhabt.</p> <p>Sie erhalten also einen sauberen Error mit einem Statuscode <code>418</code> und dem JSON-Inhalt:</p> <pre><code>{\"message\": \"Oops! yolo did something. There goes a rainbow...\"}\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.requests import Request</code> und <code>from starlette.responses import JSONResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette. Das Gleiche gilt f\u00fcr <code>Request</code>.</p>"},{"location":"tutorial/handling-errors/#die-default-exceptionhandler-uberschreiben","title":"Die Default-Exceptionhandler \u00fcberschreiben","text":"<p>ReadyAPI hat einige Default-Exceptionhandler.</p> <p>Diese Handler k\u00fcmmern sich darum, Default-JSON-Responses zur\u00fcckzugeben, wenn Sie eine <code>HTTPException</code> <code>raise</code>n, und wenn der Request ung\u00fcltige Daten enth\u00e4lt.</p> <p>Sie k\u00f6nnen diese Exceptionhandler mit ihren eigenen \u00fcberschreiben.</p>"},{"location":"tutorial/handling-errors/#requestvalidierung-exceptions-uberschreiben","title":"Requestvalidierung-Exceptions \u00fcberschreiben","text":"<p>Wenn ein Request ung\u00fcltige Daten enth\u00e4lt, l\u00f6st ReadyAPI intern einen <code>RequestValidationError</code> aus.</p> <p>Und bietet auch einen Default-Exceptionhandler daf\u00fcr.</p> <p>Um diesen zu \u00fcberschreiben, importieren Sie den <code>RequestValidationError</code> und verwenden Sie ihn in <code>@app.exception_handler(RequestValidationError)</code>, um Ihren Exceptionhandler zu dekorieren.</p> <p>Der Exceptionhandler wird einen <code>Request</code> und die Exception entgegennehmen.</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Wenn Sie nun <code>/items/foo</code> besuchen, erhalten Sie statt des Default-JSON-Errors:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>eine Textversion:</p> <pre><code>1 validation error\npath -&gt; item_id\n  value is not a valid integer (type=type_error.integer)\n</code></pre>"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","title":"<code>RequestValidationError</code> vs. <code>ValidationError</code>","text":"<p>Achtung</p> <p>Das folgende sind technische Details, die Sie \u00fcberspringen k\u00f6nnen, wenn sie f\u00fcr Sie nicht wichtig sind.</p> <p><code>RequestValidationError</code> ist eine Unterklasse von Pydantics <code>ValidationError</code>.</p> <p>ReadyAPI verwendet diesen, sodass Sie, wenn Sie ein Pydantic-Modell f\u00fcr <code>response_model</code> verwenden, und ihre Daten fehlerhaft sind, einen Fehler in ihrem Log sehen.</p> <p>Aber der Client/Benutzer sieht ihn nicht. Stattdessen erh\u00e4lt der Client einen \u201eInternal Server Error\u201c mit einem HTTP-Statuscode <code>500</code>.</p> <p>Das ist, wie es sein sollte, denn wenn Sie einen Pydantic-<code>ValidationError</code> in Ihrer Response oder irgendwo sonst in ihrem Code haben (es sei denn, im Request des Clients), ist das tats\u00e4chlich ein Bug in ihrem Code.</p> <p>Und w\u00e4hrend Sie den Fehler beheben, sollten ihre Clients/Benutzer keinen Zugriff auf interne Informationen \u00fcber den Fehler haben, da das eine Sicherheitsl\u00fccke aufdecken k\u00f6nnte.</p>"},{"location":"tutorial/handling-errors/#den-httpexception-handler-uberschreiben","title":"den <code>HTTPException</code>-Handler \u00fcberschreiben","text":"<p>Genauso k\u00f6nnen Sie den <code>HTTPException</code>-Handler \u00fcberschreiben.</p> <p>Zum Beispiel k\u00f6nnten Sie eine Klartext-Response statt JSON f\u00fcr diese Fehler zur\u00fcckgeben wollen:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import PlainTextResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p>"},{"location":"tutorial/handling-errors/#den-requestvalidationerror-body-verwenden","title":"Den <code>RequestValidationError</code>-Body verwenden","text":"<p>Der <code>RequestValidationError</code> enth\u00e4lt den empfangenen <code>body</code> mit den ung\u00fcltigen Daten.</p> <p>Sie k\u00f6nnten diesen verwenden, w\u00e4hrend Sie Ihre Anwendung entwickeln, um den Body zu loggen und zu debuggen, ihn zum Benutzer zur\u00fcckzugeben, usw.</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, Request, status\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )\n\n\nclass Item(BaseModel):\n    title: str\n    size: int\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Jetzt versuchen Sie, einen ung\u00fcltigen Artikel zu senden:</p> <pre><code>{\n  \"title\": \"towel\",\n  \"size\": \"XL\"\n}\n</code></pre> <p>Sie erhalten eine Response, die Ihnen sagt, dass die Daten ung\u00fcltig sind, und welche den empfangenen Body enth\u00e4lt.</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"body\",\n        \"size\"\n      ],\n      \"msg\": \"value is not a valid integer\",\n      \"type\": \"type_error.integer\"\n    }\n  ],\n  \"body\": {\n    \"title\": \"towel\",\n    \"size\": \"XL\"\n  }\n}\n</code></pre>"},{"location":"tutorial/handling-errors/#readyapis-httpexception-vs-starlettes-httpexception","title":"ReadyAPIs <code>HTTPException</code> vs. Starlettes <code>HTTPException</code>","text":"<p>ReadyAPI hat seine eigene <code>HTTPException</code>.</p> <p>Und ReadyAPIs <code>HTTPException</code>-Fehlerklasse erbt von Starlettes <code>HTTPException</code>-Fehlerklasse.</p> <p>Der einzige Unterschied besteht darin, dass ReadyAPIs <code>HTTPException</code> alles f\u00fcr das Feld <code>detail</code> akzeptiert, was nach JSON konvertiert werden kann, w\u00e4hrend Starlettes <code>HTTPException</code> nur Strings zul\u00e4sst.</p> <p>Sie k\u00f6nnen also weiterhin ReadyAPIs <code>HTTPException</code> wie \u00fcblich in Ihrem Code ausl\u00f6sen.</p> <p>Aber wenn Sie einen Exceptionhandler registrieren, registrieren Sie ihn f\u00fcr Starlettes <code>HTTPException</code>.</p> <p>Auf diese Weise wird Ihr Handler, wenn irgendein Teil von Starlettes internem Code, oder eine Starlette-Erweiterung, oder -Plugin eine Starlette-<code>HTTPException</code> ausl\u00f6st, in der Lage sein, diese zu fangen und zu handhaben.</p> <p>Damit wir in diesem Beispiel beide <code>HTTPException</code>s im selben Code haben k\u00f6nnen, benennen wir Starlettes Exception um zu <code>StarletteHTTPException</code>:</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\n</code></pre>"},{"location":"tutorial/handling-errors/#readyapis-exceptionhandler-wiederverwenden","title":"ReadyAPIs Exceptionhandler wiederverwenden","text":"<p>Wenn Sie die Exception zusammen mit denselben Default-Exceptionhandlern von ReadyAPI verwenden m\u00f6chten, k\u00f6nnen Sie die Default-Exceptionhandler von <code>readyapi.Exception_handlers</code> importieren und wiederverwenden:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom readyapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>In diesem Beispiel <code>print</code>en Sie nur den Fehler mit einer sehr ausdrucksstarken Nachricht, aber Sie sehen, worauf wir hinauswollen. Sie k\u00f6nnen mit der Exception etwas machen und dann einfach die Default-Exceptionhandler wiederverwenden.</p>"},{"location":"tutorial/header-params/","title":"Header-Parameter","text":"<p>So wie <code>Query</code>-, <code>Path</code>-, und <code>Cookie</code>-Parameter k\u00f6nnen Sie auch Header-Parameter definieren.</p>"},{"location":"tutorial/header-params/#header-importieren","title":"<code>Header</code> importieren","text":"<p>Importieren Sie zuerst <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre>"},{"location":"tutorial/header-params/#header-parameter-deklarieren","title":"<code>Header</code>-Parameter deklarieren","text":"<p>Dann deklarieren Sie Ihre Header-Parameter, auf die gleiche Weise, wie Sie auch <code>Path</code>-, <code>Query</code>-, und <code>Cookie</code>-Parameter deklarieren.</p> <p>Der erste Wert ist der Typ. Sie k\u00f6nnen <code>Header</code> die gehabten Extra Validierungs- und Beschreibungsparameter hinzuf\u00fcgen. Danach k\u00f6nnen Sie einen Defaultwert vergeben:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Technische Details</p> <p><code>Header</code> ist eine Schwesterklasse von <code>Path</code>, <code>Query</code> und <code>Cookie</code>. Sie erbt von derselben gemeinsamen <code>Param</code>-Elternklasse.</p> <p>Aber erinnern Sie sich, dass, wenn Sie <code>Query</code>, <code>Path</code>,  <code>Header</code> und andere von <code>readyapi</code> importieren, diese tats\u00e4chlich Funktionen sind, welche spezielle Klassen zur\u00fcckgeben.</p> <p>Info</p> <p>Um Header zu deklarieren, m\u00fcssen Sie <code>Header</code> verwenden, da diese Parameter sonst als Query-Parameter interpretiert werden w\u00fcrden.</p>"},{"location":"tutorial/header-params/#automatische-konvertierung","title":"Automatische Konvertierung","text":"<p><code>Header</code> hat weitere Funktionalit\u00e4t, zus\u00e4tzlich zu der, die <code>Path</code>, <code>Query</code> und <code>Cookie</code> bereitstellen.</p> <p>Die meisten Standard-Header benutzen als Trennzeichen einen Bindestrich, auch bekannt als das \u201eMinus-Symbol\u201c (<code>-</code>).</p> <p>Aber eine Variable wie <code>user-agent</code> ist in Python nicht g\u00fcltig.</p> <p>Darum wird <code>Header</code> standardm\u00e4\u00dfig in Parameternamen den Unterstrich (<code>_</code>) zu einem Bindestrich (<code>-</code>) konvertieren.</p> <p>HTTP-Header sind au\u00dferdem unabh\u00e4ngig von Gro\u00df-/Kleinschreibung, darum k\u00f6nnen Sie sie mittels der Standard-Python-Schreibweise deklarieren (auch bekannt als \"snake_case\").</p> <p>Sie k\u00f6nnen also <code>user_agent</code> schreiben, wie Sie es normalerweise in Python-Code machen w\u00fcrden, statt etwa die ersten Buchstaben gro\u00df zu schreiben, wie in <code>User_Agent</code>.</p> <p>Wenn Sie aus irgendeinem Grund das automatische Konvertieren von Unterstrichen zu Bindestrichen abschalten m\u00f6chten, setzen Sie den Parameter <code>convert_underscores</code> auf <code>False</code>.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Achtung</p> <p>Bevor Sie <code>convert_underscores</code> auf <code>False</code> setzen, bedenken Sie, dass manche HTTP-Proxys und Server die Verwendung von Headern mit Unterstrichen nicht erlauben.</p>"},{"location":"tutorial/header-params/#doppelte-header","title":"Doppelte Header","text":"<p>Es ist m\u00f6glich, doppelte Header zu empfangen. Also den gleichen Header mit unterschiedlichen Werten.</p> <p>Sie k\u00f6nnen solche F\u00e4lle deklarieren, indem Sie in der Typdeklaration eine Liste verwenden.</p> <p>Sie erhalten dann alle Werte von diesem doppelten Header als Python-<code>list</code>e.</p> <p>Um zum Beispiel einen Header <code>X-Token</code> zu deklarieren, der mehrmals vorkommen kann, schreiben Sie:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Wenn Sie mit einer Pfadoperation kommunizieren, die zwei HTTP-Header sendet, wie:</p> <pre><code>X-Token: foo\nX-Token: bar\n</code></pre> <p>Dann w\u00e4re die Response:</p> <pre><code>{\n    \"X-Token values\": [\n        \"bar\",\n        \"foo\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-params/#zusammenfassung","title":"Zusammenfassung","text":"<p>Deklarieren Sie Header mittels <code>Header</code>, auf die gleiche Weise wie bei <code>Query</code>, <code>Path</code> und <code>Cookie</code>.</p> <p>Machen Sie sich keine Sorgen um Unterstriche in ihren Variablen, ReadyAPI wird sich darum k\u00fcmmern, diese zu konvertieren.</p>"},{"location":"tutorial/metadata/","title":"Metadaten und URLs der Dokumentationen","text":"<p>Sie k\u00f6nnen mehrere Metadaten-Einstellungen f\u00fcr Ihre ReadyAPI-Anwendung konfigurieren.</p>"},{"location":"tutorial/metadata/#metadaten-fur-die-api","title":"Metadaten f\u00fcr die API","text":"<p>Sie k\u00f6nnen die folgenden Felder festlegen, welche in der OpenAPI-Spezifikation und den Benutzeroberfl\u00e4chen der automatischen API-Dokumentation verwendet werden:</p> Parameter Typ Beschreibung <code>title</code> <code>str</code> Der Titel der API. <code>summary</code> <code>str</code> Eine kurze Zusammenfassung der API. Verf\u00fcgbar seit OpenAPI 3.1.0, ReadyAPI 0.99.0. <code>description</code> <code>str</code> Eine kurze Beschreibung der API. Kann Markdown verwenden. <code>version</code> <code>string</code> Die Version der API. Das ist die Version Ihrer eigenen Anwendung, nicht die von OpenAPI. Zum Beispiel <code>2.5.0</code>. <code>terms_of_service</code> <code>str</code> Eine URL zu den Nutzungsbedingungen f\u00fcr die API. Falls angegeben, muss es sich um eine URL handeln. <code>contact</code> <code>dict</code> Die Kontaktinformationen f\u00fcr die verf\u00fcgbar gemachte API. Kann mehrere Felder enthalten. <code>contact</code>-FelderParameterTypBeschreibung<code>name</code><code>str</code>Der identifizierende Name der Kontaktperson/Organisation.<code>url</code><code>str</code>Die URL, die auf die Kontaktinformationen verweist. MUSS im Format einer URL vorliegen.<code>email</code><code>str</code>Die E-Mail-Adresse der Kontaktperson/Organisation. MUSS im Format einer E-Mail-Adresse vorliegen. <code>license_info</code> <code>dict</code> Die Lizenzinformationen f\u00fcr die verf\u00fcgbar gemachte API. Kann mehrere Felder enthalten. <code>license_info</code>-FelderParameterTypBeschreibung<code>name</code><code>str</code>ERFORDERLICH (wenn eine <code>license_info</code> festgelegt ist). Der f\u00fcr die API verwendete Lizenzname.<code>identifier</code><code>str</code>Ein SPDX-Lizenzausdruck f\u00fcr die API. Das Feld <code>identifier</code> und das Feld <code>url</code> schlie\u00dfen sich gegenseitig aus. Verf\u00fcgbar seit OpenAPI 3.1.0, ReadyAPI 0.99.0.<code>url</code><code>str</code>Eine URL zur Lizenz, die f\u00fcr die API verwendet wird. MUSS im Format einer URL vorliegen. <p>Sie k\u00f6nnen diese wie folgt setzen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen Markdown in das Feld <code>description</code> schreiben und es wird in der Ausgabe gerendert.</p> <p>Mit dieser Konfiguration w\u00fcrde die automatische API-Dokumentation wie folgt aussehen:</p> <p></p>"},{"location":"tutorial/metadata/#lizenz-id","title":"Lizenz-ID","text":"<p>Seit OpenAPI 3.1.0 und ReadyAPI 0.99.0 k\u00f6nnen Sie die <code>license_info</code> auch mit einem <code>identifier</code> anstelle einer <code>url</code> festlegen.</p> <p>Zum Beispiel:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre>"},{"location":"tutorial/metadata/#metadaten-fur-tags","title":"Metadaten f\u00fcr Tags","text":"<p>Sie k\u00f6nnen mit dem Parameter <code>openapi_tags</code> auch zus\u00e4tzliche Metadaten f\u00fcr die verschiedenen Tags hinzuf\u00fcgen, die zum Gruppieren Ihrer Pfadoperationen verwendet werden.</p> <p>Es wird eine Liste ben\u00f6tigt, die f\u00fcr jedes Tag ein Dict enth\u00e4lt.</p> <p>Jedes Dict kann Folgendes enthalten:</p> <ul> <li><code>name</code> (erforderlich): ein <code>str</code> mit demselben Tag-Namen, den Sie im Parameter <code>tags</code> in Ihren Pfadoperationen und <code>APIRouter</code>n verwenden.</li> <li><code>description</code>: ein <code>str</code> mit einer kurzen Beschreibung f\u00fcr das Tag. Sie kann Markdown enthalten und wird in der Benutzeroberfl\u00e4che der Dokumentation angezeigt.</li> <li><code>externalDocs</code>: ein <code>dict</code>, das externe Dokumentation beschreibt mit:<ul> <li><code>description</code>: ein <code>str</code> mit einer kurzen Beschreibung f\u00fcr die externe Dokumentation.</li> <li><code>url</code> (erforderlich): ein <code>str</code> mit der URL f\u00fcr die externe Dokumentation.</li> </ul> </li> </ul>"},{"location":"tutorial/metadata/#metadaten-fur-tags-erstellen","title":"Metadaten f\u00fcr Tags erstellen","text":"<p>Versuchen wir das an einem Beispiel mit Tags f\u00fcr <code>users</code> und <code>items</code>.</p> <p>Erstellen Sie Metadaten f\u00fcr Ihre Tags und \u00fcbergeben Sie sie an den Parameter <code>openapi_tags</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Beachten Sie, dass Sie Markdown in den Beschreibungen verwenden k\u00f6nnen. Beispielsweise wird \u201elogin\u201c in Fettschrift (login) und \u201efancy\u201c in Kursivschrift (fancy) angezeigt.</p> <p>Tipp</p> <p>Sie m\u00fcssen nicht f\u00fcr alle von Ihnen verwendeten Tags Metadaten hinzuf\u00fcgen.</p>"},{"location":"tutorial/metadata/#ihre-tags-verwenden","title":"Ihre Tags verwenden","text":"<p>Verwenden Sie den Parameter <code>tags</code> mit Ihren Pfadoperationen (und <code>APIRouter</code>n), um diese verschiedenen Tags zuzuweisen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Info</p> <p>Lesen Sie mehr zu Tags unter Pfadoperation-Konfiguration.</p>"},{"location":"tutorial/metadata/#die-dokumentation-anschauen","title":"Die Dokumentation anschauen","text":"<p>Wenn Sie nun die Dokumentation ansehen, werden dort alle zus\u00e4tzlichen Metadaten angezeigt:</p> <p></p>"},{"location":"tutorial/metadata/#reihenfolge-der-tags","title":"Reihenfolge der Tags","text":"<p>Die Reihenfolge der Tag-Metadaten-Dicts definiert auch die Reihenfolge, in der diese in der Benutzeroberfl\u00e4che der Dokumentation angezeigt werden.</p> <p>Auch wenn beispielsweise <code>users</code> im Alphabet nach <code>items</code> kommt, wird es vor diesen angezeigt, da wir seine Metadaten als erstes Dict der Liste hinzugef\u00fcgt haben.</p>"},{"location":"tutorial/metadata/#openapi-url","title":"OpenAPI-URL","text":"<p>Standardm\u00e4\u00dfig wird das OpenAPI-Schema unter <code>/openapi.json</code> bereitgestellt.</p> <p>Sie k\u00f6nnen das aber mit dem Parameter <code>openapi_url</code> konfigurieren.</p> <p>Um beispielsweise festzulegen, dass es unter <code>/api/v1/openapi.json</code> bereitgestellt wird:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Wenn Sie das OpenAPI-Schema vollst\u00e4ndig deaktivieren m\u00f6chten, k\u00f6nnen Sie <code>openapi_url=None</code> festlegen, wodurch auch die Dokumentationsbenutzeroberfl\u00e4chen deaktiviert werden, die es verwenden.</p>"},{"location":"tutorial/metadata/#urls-der-dokumentationen","title":"URLs der Dokumentationen","text":"<p>Sie k\u00f6nnen die beiden enthaltenen Dokumentationsbenutzeroberfl\u00e4chen konfigurieren:</p> <ul> <li>Swagger UI: bereitgestellt unter <code>/docs</code>.<ul> <li>Sie k\u00f6nnen deren URL mit dem Parameter <code>docs_url</code> festlegen.</li> <li>Sie k\u00f6nnen sie deaktivieren, indem Sie <code>docs_url=None</code> festlegen.</li> </ul> </li> <li>ReDoc: bereitgestellt unter <code>/redoc</code>.<ul> <li>Sie k\u00f6nnen deren URL mit dem Parameter <code>redoc_url</code> festlegen.</li> <li>Sie k\u00f6nnen sie deaktivieren, indem Sie <code>redoc_url=None</code> festlegen.</li> </ul> </li> </ul> <p>Um beispielsweise Swagger UI so einzustellen, dass sie unter <code>/documentation</code> bereitgestellt wird, und ReDoc zu deaktivieren:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"tutorial/middleware/","title":"Middleware","text":"<p>Sie k\u00f6nnen Middleware zu ReadyAPI-Anwendungen hinzuf\u00fcgen.</p> <p>Eine \u201eMiddleware\u201c ist eine Funktion, die mit jedem Request arbeitet, bevor er von einer bestimmten Pfadoperation verarbeitet wird. Und auch mit jeder Response, bevor sie zur\u00fcckgegeben wird.</p> <ul> <li>Sie nimmt jeden Request entgegen, der an Ihre Anwendung gesendet wird.</li> <li>Sie kann dann etwas mit diesem Request tun oder beliebigen Code ausf\u00fchren.</li> <li>Dann gibt sie den Request zur Verarbeitung durch den Rest der Anwendung weiter (durch eine bestimmte Pfadoperation).</li> <li>Sie nimmt dann die Response entgegen, die von der Anwendung generiert wurde (durch eine bestimmte Pfadoperation).</li> <li>Sie kann etwas mit dieser Response tun oder beliebigen Code ausf\u00fchren.</li> <li>Dann gibt sie die Response zur\u00fcck.</li> </ul> <p>Technische Details</p> <p>Wenn Sie Abh\u00e4ngigkeiten mit <code>yield</code> haben, wird der Exit-Code nach der Middleware ausgef\u00fchrt.</p> <p>Wenn es Hintergrundaufgaben gab (sp\u00e4ter dokumentiert), werden sie nach allen Middlewares ausgef\u00fchrt.</p>"},{"location":"tutorial/middleware/#erstellung-einer-middleware","title":"Erstellung einer Middleware","text":"<p>Um eine Middleware zu erstellen, verwenden Sie den Dekorator <code>@app.middleware(\"http\")</code> \u00fcber einer Funktion.</p> <p>Die Middleware-Funktion erh\u00e4lt:</p> <ul> <li>Den <code>request</code>.</li> <li>Eine Funktion <code>call_next</code>, die den <code>request</code> als Parameter erh\u00e4lt.<ul> <li>Diese Funktion gibt den <code>request</code> an die entsprechende Pfadoperation weiter.</li> <li>Dann gibt es die von der entsprechenden Pfadoperation generierte <code>response</code> zur\u00fcck.</li> </ul> </li> <li>Sie k\u00f6nnen die <code>response</code> dann weiter modifizieren, bevor Sie sie zur\u00fcckgeben.</li> </ul> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass benutzerdefinierte propriet\u00e4re Header hinzugef\u00fcgt werden k\u00f6nnen. Verwenden Sie daf\u00fcr das Pr\u00e4fix 'X-'.</p> <p>Wenn Sie jedoch benutzerdefinierte Header haben, die ein Client in einem Browser sehen soll, m\u00fcssen Sie sie zu Ihrer CORS-Konfigurationen (CORS (Cross-Origin Resource Sharing)) hinzuf\u00fcgen, indem Sie den Parameter <code>expose_headers</code> verwenden, der in der Starlette-CORS-Dokumentation dokumentiert ist.</p> <p>Technische Details</p> <p>Sie k\u00f6nnten auch <code>from starlette.requests import Request</code> verwenden.</p> <p>ReadyAPI bietet es als Komfort f\u00fcr Sie, den Entwickler, an. Aber es stammt direkt von Starlette.</p>"},{"location":"tutorial/middleware/#vor-und-nach-der-response","title":"Vor und nach der <code>response</code>","text":"<p>Sie k\u00f6nnen Code hinzuf\u00fcgen, der mit dem <code>request</code> ausgef\u00fchrt wird, bevor dieser von einer beliebigen Pfadoperation empfangen wird.</p> <p>Und auch nachdem die <code>response</code> generiert wurde, bevor sie zur\u00fcckgegeben wird.</p> <p>Sie k\u00f6nnten beispielsweise einen benutzerdefinierten Header <code>X-Process-Time</code> hinzuf\u00fcgen, der die Zeit in Sekunden enth\u00e4lt, die ben\u00f6tigt wurde, um den Request zu verarbeiten und eine Response zu generieren:</p> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"tutorial/middleware/#andere-middlewares","title":"Andere Middlewares","text":"<p>Sie k\u00f6nnen sp\u00e4ter mehr \u00fcber andere Middlewares in Handbuch f\u00fcr fortgeschrittene Benutzer: Fortgeschrittene Middleware lesen.</p> <p>In der n\u00e4chsten Sektion erfahren Sie, wie Sie CORS mit einer Middleware behandeln k\u00f6nnen.</p>"},{"location":"tutorial/path-operation-configuration/","title":"Pfadoperation-Konfiguration","text":"<p>Es gibt mehrere Konfigurations-Parameter, die Sie Ihrem Pfadoperation-Dekorator \u00fcbergeben k\u00f6nnen.</p> <p>Achtung</p> <p>Beachten Sie, dass diese Parameter direkt dem Pfadoperation-Dekorator \u00fcbergeben werden, nicht der Pfadoperation-Funktion.</p>"},{"location":"tutorial/path-operation-configuration/#response-statuscode","title":"Response-Statuscode","text":"<p>Sie k\u00f6nnen den (HTTP-)<code>status_code</code> definieren, den die Response Ihrer Pfadoperation verwenden soll.</p> <p>Sie k\u00f6nnen direkt den <code>int</code>-Code \u00fcbergeben, etwa <code>404</code>.</p> <p>Aber falls Sie sich nicht mehr erinnern, wof\u00fcr jede Nummer steht, k\u00f6nnen Sie die Abk\u00fcrzungs-Konstanten in <code>status</code> verwenden:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Dieser Statuscode wird in der Response verwendet und zum OpenAPI-Schema hinzugef\u00fcgt.</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette import status</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.status</code>-Codes auch via <code>readyapi.status</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Sie kommen aber direkt von Starlette.</p>"},{"location":"tutorial/path-operation-configuration/#tags","title":"Tags","text":"<p>Sie k\u00f6nnen Ihrer Pfadoperation Tags hinzuf\u00fcgen, mittels des Parameters <code>tags</code>, dem eine <code>list</code>e von <code>str</code>s \u00fcbergeben wird (in der Regel nur ein <code>str</code>):</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <p>Diese werden zum OpenAPI-Schema hinzugef\u00fcgt und von den automatischen Dokumentations-Benutzeroberfl\u00e4chen verwendet:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#tags-mittels-enumeration","title":"Tags mittels Enumeration","text":"<p>Wenn Sie eine gro\u00dfe Anwendung haben, k\u00f6nnen sich am Ende viele Tags anh\u00e4ufen, und Sie m\u00f6chten sicherstellen, dass Sie f\u00fcr verwandte Pfadoperationen immer den gleichen Tag nehmen.</p> <p>In diesem Fall macht es Sinn, die Tags in einem <code>Enum</code> zu speichern.</p> <p>ReadyAPI unterst\u00fctzt diese genauso wie einfache Strings:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#zusammenfassung-und-beschreibung","title":"Zusammenfassung und Beschreibung","text":"<p>Sie k\u00f6nnen eine Zusammenfassung (<code>summary</code>) und eine Beschreibung (<code>description</code>) hinzuf\u00fcgen:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#beschreibung-mittels-docstring","title":"Beschreibung mittels Docstring","text":"<p>Da Beschreibungen oft mehrere Zeilen lang sind, k\u00f6nnen Sie die Beschreibung der Pfadoperation im Docstring der Funktion deklarieren, und ReadyAPI wird sie daraus auslesen.</p> <p>Sie k\u00f6nnen im Docstring Markdown schreiben, es wird korrekt interpretiert und angezeigt (die Einr\u00fcckung des Docstring beachtend).</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>In der interaktiven Dokumentation sieht das dann so aus:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#beschreibung-der-response","title":"Beschreibung der Response","text":"<p>Die Response k\u00f6nnen Sie mit dem Parameter <code>response_description</code> beschreiben:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Info</p> <p>beachten Sie, dass sich <code>response_description</code> speziell auf die Response bezieht, w\u00e4hrend <code>description</code> sich generell auf die Pfadoperation bezieht.</p> <p>Check</p> <p>OpenAPI verlangt, dass jede Pfadoperation \u00fcber eine Beschreibung der Response verf\u00fcgt.</p> <p>Daher, wenn Sie keine vergeben, wird ReadyAPI automatisch eine f\u00fcr \u201eErfolgreiche Response\u201c erstellen.</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#eine-pfadoperation-deprecaten","title":"Eine Pfadoperation deprecaten","text":"<p>Wenn Sie eine Pfadoperation als deprecated kennzeichnen m\u00f6chten, ohne sie zu entfernen, f\u00fcgen Sie den Parameter <code>deprecated</code> hinzu:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Sie wird in der interaktiven Dokumentation gut sichtbar als deprecated markiert werden:</p> <p></p> <p>Vergleichen Sie, wie deprecatete und nicht-deprecatete Pfadoperationen aussehen:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen auf einfache Weise Metadaten f\u00fcr Ihre Pfadoperationen definieren, indem Sie den Pfadoperation-Dekoratoren Parameter hinzuf\u00fcgen.</p>"},{"location":"tutorial/path-params-numeric-validations/","title":"Pfad-Parameter und Validierung von Zahlen","text":"<p>So wie Sie mit <code>Query</code> f\u00fcr Query-Parameter zus\u00e4tzliche Validierungen und Metadaten hinzuf\u00fcgen k\u00f6nnen, k\u00f6nnen Sie das mittels <code>Path</code> auch f\u00fcr Pfad-Parameter tun.</p>"},{"location":"tutorial/path-params-numeric-validations/#path-importieren","title":"<code>Path</code> importieren","text":"<p>Importieren Sie zuerst <code>Path</code> von <code>readyapi</code>, und importieren Sie <code>Annotated</code>.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Info</p> <p>ReadyAPI unterst\u00fctzt (und empfiehlt die Verwendung von) <code>Annotated</code> seit Version 0.95.0.</p> <p>Wenn Sie eine \u00e4ltere Version haben, werden Sie Fehler angezeigt bekommen, wenn Sie versuchen, <code>Annotated</code> zu verwenden.</p> <p>Bitte aktualisieren Sie ReadyAPI daher mindestens zu Version 0.95.1, bevor Sie <code>Annotated</code> verwenden.</p>"},{"location":"tutorial/path-params-numeric-validations/#metadaten-deklarieren","title":"Metadaten deklarieren","text":"<p>Sie k\u00f6nnen die gleichen Parameter deklarieren wie f\u00fcr <code>Query</code>.</p> <p>Um zum Beispiel einen <code>title</code>-Metadaten-Wert f\u00fcr den Pfad-Parameter <code>item_id</code> zu deklarieren, schreiben Sie:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Hinweis</p> <p>Ein Pfad-Parameter ist immer erforderlich, weil er Teil des Pfads sein muss.</p> <p>Sie sollten ihn daher mit <code>...</code> deklarieren, um ihn als erforderlich auszuzeichnen.</p> <p>Doch selbst wenn Sie ihn mit <code>None</code> deklarieren, oder einen Defaultwert setzen, bewirkt das nichts, er bleibt immer erforderlich.</p>"},{"location":"tutorial/path-params-numeric-validations/#sortieren-sie-die-parameter-wie-sie-mochten","title":"Sortieren Sie die Parameter, wie Sie m\u00f6chten","text":"<p>Tipp</p> <p>Wenn Sie <code>Annotated</code> verwenden, ist das folgende nicht so wichtig / nicht notwendig.</p> <p>Nehmen wir an, Sie m\u00f6chten den Query-Parameter <code>q</code> als erforderlichen <code>str</code> deklarieren.</p> <p>Und Sie m\u00fcssen sonst nichts anderes f\u00fcr den Parameter deklarieren, Sie brauchen also nicht wirklich <code>Query</code>.</p> <p>Aber Sie brauchen <code>Path</code> f\u00fcr den <code>item_id</code>-Pfad-Parameter. Und Sie m\u00f6chten aus irgendeinem Grund nicht <code>Annotated</code> verwenden.</p> <p>Python wird sich beschweren, wenn Sie einen Parameter mit Defaultwert vor einen Parameter ohne Defaultwert setzen.</p> <p>Aber Sie k\u00f6nnen die Reihenfolge der Parameter \u00e4ndern, den Query-Parameter ohne Defaultwert zuerst.</p> <p>F\u00fcr ReadyAPI ist es nicht wichtig. Es erkennt die Parameter anhand ihres Namens, ihrer Typen, und ihrer Defaultwerte (<code>Query</code>, <code>Path</code>, usw.). Es k\u00fcmmert sich nicht um die Reihenfolge.</p> <p>Sie k\u00f6nnen Ihre Funktion also so deklarieren:</p> Python 3.8 nicht annotiert <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Aber bedenken Sie, dass Sie dieses Problem nicht haben, wenn Sie <code>Annotated</code> verwenden, da Sie nicht die Funktions-Parameter-Defaultwerte f\u00fcr <code>Query()</code> oder <code>Path()</code> verwenden.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#sortieren-sie-die-parameter-wie-sie-mochten-tricks","title":"Sortieren Sie die Parameter wie Sie m\u00f6chten: Tricks","text":"<p>Tipp</p> <p>Wenn Sie <code>Annotated</code> verwenden, ist das folgende nicht so wichtig / nicht notwendig.</p> <p>Hier ein kleiner Trick, der n\u00fctzlich sein kann, aber Sie werden ihn nicht oft brauchen.</p> <p>Wenn Sie eines der folgenden Dinge tun m\u00f6chten:</p> <ul> <li>den <code>q</code>-Parameter ohne <code>Query</code> oder irgendeinem Defaultwert deklarieren</li> <li>den Pfad-Parameter <code>item_id</code> mittels <code>Path</code> deklarieren</li> <li>die Parameter in einer unterschiedlichen Reihenfolge haben</li> <li><code>Annotated</code> nicht verwenden</li> </ul> <p>... dann hat Python eine kleine Spezial-Syntax f\u00fcr Sie.</p> <p>\u00dcbergeben Sie der Funktion <code>*</code> als ersten Parameter.</p> <p>Python macht nichts mit diesem <code>*</code>, aber es wird wissen, dass alle folgenden Parameter als Keyword-Argumente (Schl\u00fcssel-Wert-Paare), auch bekannt als <code>kwargs</code>, verwendet werden. Selbst wenn diese keinen Defaultwert haben.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#besser-mit-annotated","title":"Besser mit <code>Annotated</code>","text":"<p>Bedenken Sie, dass Sie, wenn Sie <code>Annotated</code> verwenden, dieses Problem nicht haben, weil Sie keine Defaultwerte f\u00fcr Ihre Funktionsparameter haben. Sie m\u00fcssen daher wahrscheinlich auch nicht <code>*</code> verwenden.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validierung-von-zahlen-groer-oder-gleich","title":"Validierung von Zahlen: Gr\u00f6\u00dfer oder gleich","text":"<p>Mit <code>Query</code> und <code>Path</code> (und anderen, die Sie sp\u00e4ter kennenlernen), k\u00f6nnen Sie Zahlenbeschr\u00e4nkungen deklarieren.</p> <p>Hier, mit <code>ge=1</code>, wird festgelegt, dass <code>item_id</code> eine Ganzzahl ben\u00f6tigt, die gr\u00f6\u00dfer oder gleich <code>1</code> ist (<code>g</code>reater than or <code>e</code>qual).</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validierung-von-zahlen-groer-und-kleiner-oder-gleich","title":"Validierung von Zahlen: Gr\u00f6\u00dfer und kleiner oder gleich","text":"<p>Das Gleiche trifft zu auf:</p> <ul> <li><code>gt</code>: <code>g</code>reater <code>t</code>han \u2013 gr\u00f6\u00dfer als</li> <li><code>le</code>: <code>l</code>ess than or <code>e</code>qual \u2013 kleiner oder gleich</li> </ul> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validierung-von-zahlen-floats-groer-und-kleiner","title":"Validierung von Zahlen: Floats, gr\u00f6\u00dfer und kleiner","text":"<p>Zahlenvalidierung funktioniert auch f\u00fcr <code>float</code>-Werte.</p> <p>Hier wird es wichtig, in der Lage zu sein, <code>gt</code> zu deklarieren, und nicht nur <code>ge</code>, da Sie hiermit bestimmen k\u00f6nnen, dass ein Wert, zum Beispiel, gr\u00f6\u00dfer als <code>0</code> sein muss, obwohl er kleiner als <code>1</code> ist.</p> <p><code>0.5</code> w\u00e4re also ein g\u00fcltiger Wert, aber nicht <code>0.0</code> oder <code>0</code>.</p> <p>Das gleiche gilt f\u00fcr <code>lt</code>.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mit <code>Query</code> und <code>Path</code> (und anderen, die Sie noch nicht gesehen haben) k\u00f6nnen Sie Metadaten und Stringvalidierungen deklarieren, so wie in Query-Parameter und Stringvalidierungen beschrieben.</p> <p>Und Sie k\u00f6nnen auch Validierungen f\u00fcr Zahlen deklarieren:</p> <ul> <li><code>gt</code>: <code>g</code>reater <code>t</code>han \u2013 gr\u00f6\u00dfer als</li> <li><code>ge</code>: <code>g</code>reater than or <code>e</code>qual \u2013 gr\u00f6\u00dfer oder gleich</li> <li><code>lt</code>: <code>l</code>ess <code>t</code>han \u2013 kleiner als</li> <li><code>le</code>: <code>l</code>ess than or <code>e</code>qual \u2013 kleiner oder gleich</li> </ul> <p>Info</p> <p><code>Query</code>, <code>Path</code>, und andere Klassen, die Sie sp\u00e4ter kennenlernen, sind Unterklassen einer allgemeinen <code>Param</code>-Klasse.</p> <p>Sie alle teilen die gleichen Parameter f\u00fcr zus\u00e4tzliche Validierung und Metadaten, die Sie gesehen haben.</p> <p>Technische Details</p> <p><code>Query</code>, <code>Path</code> und andere, die Sie von <code>readyapi</code> importieren, sind tats\u00e4chlich Funktionen.</p> <p>Die, wenn sie aufgerufen werden, Instanzen der Klassen mit demselben Namen zur\u00fcckgeben.</p> <p>Sie importieren also <code>Query</code>, welches eine Funktion ist. Aber wenn Sie es aufrufen, gibt es eine Instanz der Klasse zur\u00fcck, die auch <code>Query</code> genannt wird.</p> <p>Diese Funktionen existieren (statt die Klassen direkt zu verwenden), damit Ihr Editor keine Fehlermeldungen \u00fcber ihre Typen ausgibt.</p> <p>Auf diese Weise k\u00f6nnen Sie Ihren Editor und Ihre Programmier-Tools verwenden, ohne besondere Einstellungen vornehmen zu m\u00fcssen, um diese Fehlermeldungen stummzuschalten.</p>"},{"location":"tutorial/path-params/","title":"Pfad-Parameter","text":"<p>Sie k\u00f6nnen Pfad-\u201eParameter\u201c oder -\u201eVariablen\u201c mit der gleichen Syntax deklarieren, welche in Python-Format-Strings verwendet wird:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n</code></pre> <p>Der Wert des Pfad-Parameters <code>item_id</code> wird Ihrer Funktion als das Argument <code>item_id</code> \u00fcbergeben.</p> <p>Wenn Sie dieses Beispiel ausf\u00fchren und auf http://127.0.0.1:8000/items/foo gehen, sehen Sie als Response:</p> <pre><code>{\"item_id\":\"foo\"}\n</code></pre>"},{"location":"tutorial/path-params/#pfad-parameter-mit-typen","title":"Pfad-Parameter mit Typen","text":"<p>Sie k\u00f6nnen den Typ eines Pfad-Parameters in der Argumentliste der Funktion deklarieren, mit Standard-Python-Typannotationen:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>In diesem Fall wird <code>item_id</code> als <code>int</code> deklariert, also als Ganzzahl.</p> <p>Check</p> <p>Dadurch erhalten Sie Editor-Unterst\u00fctzung innerhalb Ihrer Funktion, mit Fehlerpr\u00fcfungen, Codevervollst\u00e4ndigung, usw.</p>"},{"location":"tutorial/path-params/#daten-konversion","title":"Daten-Konversion","text":"<p>Wenn Sie dieses Beispiel ausf\u00fchren und Ihren Browser unter http://127.0.0.1:8000/items/3 \u00f6ffnen, sehen Sie als Response:</p> <pre><code>{\"item_id\":3}\n</code></pre> <p>Check</p> <p>Beachten Sie, dass der Wert, den Ihre Funktion erh\u00e4lt und zur\u00fcckgibt, die Zahl <code>3</code> ist, also ein <code>int</code>. Nicht der String <code>\"3\"</code>, also ein <code>str</code>.</p> <p>Sprich, mit dieser Typdeklaration wird ReadyAPI die Anfrage automatisch \u201eparsen\u201c.</p>"},{"location":"tutorial/path-params/#datenvalidierung","title":"Datenvalidierung","text":"<p>Wenn Sie aber im Browser http://127.0.0.1:8000/items/foo besuchen, erhalten Sie eine h\u00fcbsche HTTP-Fehlermeldung:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"type\": \"int_parsing\",\n      \"loc\": [\n        \"path\",\n        \"item_id\"\n      ],\n      \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n      \"input\": \"foo\",\n      \"url\": \"https://errors.pydantic.dev/2.1/v/int_parsing\"\n    }\n  ]\n}\n</code></pre> <p>Der Pfad-Parameter <code>item_id</code> hatte den Wert <code>\"foo\"</code>, was kein <code>int</code> ist.</p> <p>Die gleiche Fehlermeldung w\u00fcrde angezeigt werden, wenn Sie ein <code>float</code> (also eine Kommazahl) statt eines <code>int</code>s \u00fcbergeben w\u00fcrden, wie etwa in: http://127.0.0.1:8000/items/4.2</p> <p>Check</p> <p>Sprich, mit der gleichen Python-Typdeklaration gibt Ihnen ReadyAPI Datenvalidierung.</p> <p>Beachten Sie, dass die Fehlermeldung auch direkt die Stelle anzeigt, wo die Validierung nicht erfolgreich war.</p> <p>Das ist unglaublich hilfreich, wenn Sie Code entwickeln und debuggen, welcher mit ihrer API interagiert.</p>"},{"location":"tutorial/path-params/#dokumentation","title":"Dokumentation","text":"<p>Wenn Sie die Seite http://127.0.0.1:8000/docs in Ihrem Browser \u00f6ffnen, sehen Sie eine automatische, interaktive API-Dokumentation:</p> <p></p> <p>Check</p> <p>Wiederum, mit dieser gleichen Python-Typdeklaration gibt Ihnen ReadyAPI eine automatische, interaktive Dokumentation (verwendet die Swagger-Benutzeroberfl\u00e4che).</p> <p>Beachten Sie, dass der Pfad-Parameter dort als Ganzzahl deklariert ist.</p>"},{"location":"tutorial/path-params/#nutzliche-standards-alternative-dokumentation","title":"N\u00fctzliche Standards. Alternative Dokumentation","text":"<p>Und weil das generierte Schema vom OpenAPI-Standard kommt, gibt es viele kompatible Tools.</p> <p>Zum Beispiel bietet ReadyAPI selbst eine alternative API-Dokumentation (verwendet ReDoc), welche Sie unter http://127.0.0.1:8000/redoc einsehen k\u00f6nnen:</p> <p></p> <p>Und viele weitere kompatible Tools. Inklusive Codegenerierung f\u00fcr viele Sprachen.</p>"},{"location":"tutorial/path-params/#pydantic","title":"Pydantic","text":"<p>Die ganze Datenvalidierung wird hinter den Kulissen von Pydantic durchgef\u00fchrt, Sie profitieren also von dessen Vorteilen. Und Sie wissen, dass Sie in guten H\u00e4nden sind.</p> <p>Sie k\u00f6nnen f\u00fcr Typ Deklarationen auch <code>str</code>, <code>float</code>, <code>bool</code> und viele andere komplexe Datentypen verwenden.</p> <p>Mehrere davon werden wir in den n\u00e4chsten Kapiteln erkunden.</p>"},{"location":"tutorial/path-params/#die-reihenfolge-ist-wichtig","title":"Die Reihenfolge ist wichtig","text":"<p>Wenn Sie Pfadoperationen erstellen, haben Sie manchmal einen fixen Pfad.</p> <p>Etwa <code>/users/me</code>, um Daten \u00fcber den aktuellen Benutzer zu erhalten.</p> <p>Und Sie haben auch einen Pfad <code>/users/{user_id}</code>, um Daten \u00fcber einen spezifischen Benutzer zu erhalten, mittels einer Benutzer-ID.</p> <p>Weil Pfadoperationen in ihrer Reihenfolge ausgewertet werden, m\u00fcssen Sie sicherstellen, dass der Pfad <code>/users/me</code> vor <code>/users/{user_id}</code> deklariert wurde:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n</code></pre> <p>Ansonsten w\u00fcrde der Pfad f\u00fcr <code>/users/{user_id}</code> auch <code>/users/me</code> auswerten, und annehmen, dass ein Parameter <code>user_id</code> mit dem Wert <code>\"me\"</code> \u00fcbergeben wurde.</p> <p>Sie k\u00f6nnen eine Pfadoperation auch nicht erneut definieren:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]\n</code></pre> <p>Die erste Definition wird immer verwendet werden, da ihr Pfad zuerst \u00fcbereinstimmt.</p>"},{"location":"tutorial/path-params/#vordefinierte-parameterwerte","title":"Vordefinierte Parameterwerte","text":"<p>Wenn Sie eine Pfadoperation haben, welche einen Pfad-Parameter hat, aber Sie wollen, dass dessen g\u00fcltige Werte vordefiniert sind, k\u00f6nnen Sie ein Standard-Python <code>Enum</code> verwenden.</p>"},{"location":"tutorial/path-params/#erstellen-sie-eine-enum-klasse","title":"Erstellen Sie eine <code>Enum</code>-Klasse","text":"<p>Importieren Sie <code>Enum</code> und erstellen Sie eine Unterklasse, die von <code>str</code> und <code>Enum</code> erbt.</p> <p>Indem Sie von <code>str</code> erben, wei\u00df die API Dokumentation, dass die Werte des Enums vom Typ <code>str</code> sein m\u00fcssen, und wird in der Lage sein, korrekt zu rendern.</p> <p>Erstellen Sie dann Klassen-Attribute mit festgelegten Werten, welches die erlaubten Werte sein werden:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Info</p> <p>Enumerationen (oder kurz Enums) gibt es in Python seit Version 3.4.</p> <p>Tipp</p> <p>Falls Sie sich fragen, was \u201eAlexNet\u201c, \u201eResNet\u201c und \u201eLeNet\u201c ist, das sind Namen von Modellen f\u00fcr maschinelles Lernen.</p>"},{"location":"tutorial/path-params/#deklarieren-sie-einen-pfad-parameter","title":"Deklarieren Sie einen Pfad-Parameter","text":"<p>Dann erstellen Sie einen Pfad-Parameter, der als Typ die gerade erstellte Enum-Klasse hat (<code>ModelName</code>):</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#testen-sie-es-in-der-api-dokumentation","title":"Testen Sie es in der API-Dokumentation","text":"<p>Weil die erlaubten Werte f\u00fcr den Pfad-Parameter nun vordefiniert sind, kann die interaktive Dokumentation sie als Auswahl-Drop-Down anzeigen:</p> <p></p>"},{"location":"tutorial/path-params/#mit-python-enums-arbeiten","title":"Mit Python-Enums arbeiten","text":"<p>Der Pfad-Parameter wird ein Member eines Enums sein.</p>"},{"location":"tutorial/path-params/#enum-member-vergleichen","title":"Enum-Member vergleichen","text":"<p>Sie k\u00f6nnen ihn mit einem Member Ihres Enums <code>ModelName</code> vergleichen:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#enum-wert-erhalten","title":"Enum-Wert erhalten","text":"<p>Den tats\u00e4chlichen Wert (in diesem Fall ein <code>str</code>) erhalten Sie via <code>model_name.value</code>, oder generell, <code>ihr_enum_member.value</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen den Wert <code>\"lenet\"</code> au\u00dferdem mittels <code>ModelName.lenet.value</code> abrufen.</p>"},{"location":"tutorial/path-params/#enum-member-zuruckgeben","title":"Enum-Member zur\u00fcckgeben","text":"<p>Sie k\u00f6nnen Enum-Member in ihrer Pfadoperation zur\u00fcckgeben, sogar verschachtelt in einem JSON-Body (z. B. als <code>dict</code>).</p> <p>Diese werden zu ihren entsprechenden Werten konvertiert (in diesem Fall Strings), bevor sie zum Client \u00fcbertragen werden:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>In Ihrem Client erhalten Sie eine JSON-Response, wie etwa:</p> <pre><code>{\n  \"model_name\": \"alexnet\",\n  \"message\": \"Deep Learning FTW!\"\n}\n</code></pre>"},{"location":"tutorial/path-params/#pfad-parameter-die-pfade-enthalten","title":"Pfad Parameter die Pfade enthalten","text":"<p>Angenommen, Sie haben eine Pfadoperation mit einem Pfad <code>/files/{file_path}</code>.</p> <p>Aber <code>file_path</code> soll selbst einen Pfad enthalten, etwa <code>home/johndoe/myfile.txt</code>.</p> <p>Sprich, die URL f\u00fcr diese Datei w\u00e4re etwas wie: <code>/files/home/johndoe/myfile.txt</code>.</p>"},{"location":"tutorial/path-params/#openapi-unterstutzung","title":"OpenAPI Unterst\u00fctzung","text":"<p>OpenAPI bietet nicht die M\u00f6glichkeit, dass ein Pfad-Parameter seinerseits einen Pfad enthalten kann, das w\u00fcrde zu Szenarios f\u00fchren, die schwierig zu testen und zu definieren sind.</p> <p>Trotzdem k\u00f6nnen Sie das in ReadyAPI tun, indem Sie eines der internen Tools von Starlette verwenden.</p> <p>Die Dokumentation w\u00fcrde weiterhin funktionieren, allerdings wird nicht dokumentiert werden, dass der Parameter ein Pfad sein sollte.</p>"},{"location":"tutorial/path-params/#pfad-konverter","title":"Pfad Konverter","text":"<p>Mittels einer Option direkt von Starlette k\u00f6nnen Sie einen Pfad-Parameter deklarieren, der einen Pfad enthalten soll, indem Sie eine URL wie folgt definieren:</p> <pre><code>/files/{file_path:path}\n</code></pre> <p>In diesem Fall ist der Name des Parameters <code>file_path</code>. Der letzte Teil, <code>:path</code>, sagt aus, dass der Parameter ein Pfad sein soll.</p> <p>Sie verwenden das also wie folgt:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre> <p>Tipp</p> <p>Der Parameter k\u00f6nnte einen f\u00fchrenden Schr\u00e4gstrich (<code>/</code>) haben, wie etwa in <code>/home/johndoe/myfile.txt</code>.</p> <p>In dem Fall w\u00e4re die URL: <code>/files//home/johndoe/myfile.txt</code>, mit einem doppelten Schr\u00e4gstrich (<code>//</code>) zwischen <code>files</code> und <code>home</code>.</p>"},{"location":"tutorial/path-params/#zusammenfassung","title":"Zusammenfassung","text":"<p>In ReadyAPI erhalten Sie mittels kurzer, intuitiver Typdeklarationen:</p> <ul> <li>Editor-Unterst\u00fctzung: Fehlerpr\u00fcfungen, Codevervollst\u00e4ndigung, usw.</li> <li>Daten \"parsen\"</li> <li>Datenvalidierung</li> <li>API-Annotationen und automatische Dokumentation</li> </ul> <p>Und Sie m\u00fcssen sie nur einmal deklarieren.</p> <p>Das ist wahrscheinlich der sichtbarste Unterschied zwischen ReadyAPI und alternativen Frameworks (abgesehen von der reinen Performanz).</p>"},{"location":"tutorial/query-params-str-validations/","title":"Query-Parameter und Stringvalidierung","text":"<p>ReadyAPI erlaubt es Ihnen, Ihre Parameter zus\u00e4tzlich zu validieren, und zus\u00e4tzliche Informationen hinzuzuf\u00fcgen.</p> <p>Nehmen wir als Beispiel die folgende Anwendung:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Der Query-Parameter <code>q</code> hat den Typ <code>Union[str, None]</code> (oder <code>str | None</code> in Python 3.10), was bedeutet, er ist entweder ein <code>str</code> oder <code>None</code>. Der Defaultwert ist <code>None</code>, also wei\u00df ReadyAPI, der Parameter ist nicht erforderlich.</p> <p>Hinweis</p> <p>ReadyAPI wei\u00df nur dank des definierten Defaultwertes <code>=None</code>, dass der Wert von <code>q</code> nicht erforderlich ist</p> <p><code>Union[str, None]</code> hingegen erlaubt ihren Editor, Sie besser zu unterst\u00fctzen und Fehler zu erkennen.</p>"},{"location":"tutorial/query-params-str-validations/#zusatzliche-validierung","title":"Zus\u00e4tzliche Validierung","text":"<p>Wir werden bewirken, dass, obwohl <code>q</code> optional ist, wenn es gegeben ist, seine L\u00e4nge 50 Zeichen nicht \u00fcberschreitet.</p>"},{"location":"tutorial/query-params-str-validations/#query-und-annotated-importieren","title":"<code>Query</code> und <code>Annotated</code> importieren","text":"<p>Importieren Sie zuerst:</p> <ul> <li><code>Query</code> von <code>readyapi</code></li> <li><code>Annotated</code> von <code>typing</code> (oder von <code>typing_extensions</code> in Python unter 3.9)</li> </ul> Python 3.10+Python 3.8+ <p>In Python 3.9 oder dar\u00fcber, ist <code>Annotated</code> Teil der Standardbibliothek, also k\u00f6nnen Sie es von <code>typing</code> importieren.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>In Versionen unter Python 3.9 importieren Sie <code>Annotated</code> von <code>typing_extensions</code>.</p> <p>Es wird bereits mit ReadyAPI installiert sein.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Info</p> <p>ReadyAPI unterst\u00fctzt (und empfiehlt die Verwendung von) <code>Annotated</code> seit Version 0.95.0.</p> <p>Wenn Sie eine \u00e4ltere Version haben, werden Sie Fehler angezeigt bekommen, wenn Sie versuchen, <code>Annotated</code> zu verwenden.</p> <p>Bitte aktualisieren Sie ReadyAPI daher mindestens zu Version 0.95.1, bevor Sie <code>Annotated</code> verwenden.</p>"},{"location":"tutorial/query-params-str-validations/#annotated-im-typ-des-q-parameters-verwenden","title":"<code>Annotated</code> im Typ des <code>q</code>-Parameters verwenden","text":"<p>Erinnern Sie sich, wie ich in Einf\u00fchrung in Python-Typen sagte, dass Sie mittels <code>Annotated</code> Metadaten zu Ihren Parametern hinzuf\u00fcgen k\u00f6nnen?</p> <p>Jetzt ist es an der Zeit, das mit ReadyAPI auszuprobieren. \ud83d\ude80</p> <p>Wir hatten diese Typannotation:</p> Python 3.10+Python 3.8+ <pre><code>q: str | None = None\n</code></pre> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Wir wrappen das nun in <code>Annotated</code>, sodass daraus wird:</p> Python 3.10+Python 3.8+ <pre><code>q: Annotated[str | None] = None\n</code></pre> <pre><code>q: Annotated[Union[str, None]] = None\n</code></pre> <p>Beide Versionen bedeuten dasselbe: <code>q</code> ist ein Parameter, der <code>str</code> oder <code>None</code> sein kann. Standardm\u00e4\u00dfig ist er <code>None</code>.</p> <p>Wenden wir uns jetzt den spannenden Dingen zu. \ud83c\udf89</p>"},{"location":"tutorial/query-params-str-validations/#query-zu-annotated-im-q-parameter-hinzufugen","title":"<code>Query</code> zu <code>Annotated</code> im <code>q</code>-Parameter hinzuf\u00fcgen","text":"<p>Jetzt, da wir <code>Annotated</code> f\u00fcr unsere Metadaten deklariert haben, f\u00fcgen Sie <code>Query</code> hinzu, und setzen Sie den Parameter <code>max_length</code> auf <code>50</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Beachten Sie, dass der Defaultwert immer noch <code>None</code> ist, sodass der Parameter immer noch optional ist.</p> <p>Aber jetzt, mit <code>Query(max_length=50)</code> innerhalb von <code>Annotated</code>, sagen wir ReadyAPI, dass es diesen Wert aus den Query-Parametern extrahieren soll (das h\u00e4tte es sowieso gemacht \ud83e\udd37) und dass wir eine zus\u00e4tzliche Validierung f\u00fcr diesen Wert haben wollen (darum machen wir das, um die zus\u00e4tzliche Validierung zu bekommen). \ud83d\ude0e</p> <p>ReadyAPI wird nun:</p> <ul> <li>Die Daten validieren und sicherstellen, dass sie nicht l\u00e4nger als 50 Zeichen sind</li> <li>Dem Client einen verst\u00e4ndlichen Fehler anzeigen, wenn die Daten ung\u00fcltig sind</li> <li>Den Parameter in der OpenAPI-Schema-Pfadoperation dokumentieren (sodass er in der automatischen Dokumentation angezeigt wird)</li> </ul>"},{"location":"tutorial/query-params-str-validations/#alternativ-alt-query-als-defaultwert","title":"Alternativ (alt): <code>Query</code> als Defaultwert","text":"<p>Fr\u00fchere Versionen von ReadyAPI (vor 0.95.0) ben\u00f6tigten <code>Query</code> als Defaultwert des Parameters, statt es innerhalb von <code>Annotated</code> unterzubringen. Die Chance ist gro\u00df, dass Sie Quellcode sehen, der das immer noch so macht, darum erkl\u00e4re ich es Ihnen.</p> <p>Tipp</p> <p>Verwenden Sie f\u00fcr neuen Code, und wann immer m\u00f6glich, <code>Annotated</code>, wie oben erkl\u00e4rt. Es gibt mehrere Vorteile (unten erl\u00e4utert) und keine Nachteile. \ud83c\udf70</p> <p>So w\u00fcrden Sie <code>Query()</code> als Defaultwert Ihres Funktionsparameters verwenden, den Parameter <code>max_length</code> auf 50 gesetzt:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Da wir in diesem Fall (ohne die Verwendung von <code>Annotated</code>) den Parameter-Defaultwert <code>None</code> mit <code>Query()</code> ersetzen, m\u00fcssen wir nun dessen Defaultwert mit dem Parameter <code>Query(default=None)</code> deklarieren. Das dient demselben Zweck, <code>None</code> als Defaultwert f\u00fcr den Funktionsparameter zu setzen (zumindest f\u00fcr ReadyAPI).</p> <p>Sprich:</p> <pre><code>q: Union[str, None] = Query(default=None)\n</code></pre> <p>... macht den Parameter optional, mit dem Defaultwert <code>None</code>, genauso wie:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Und in Python 3.10 und dar\u00fcber macht:</p> <pre><code>q: str | None = Query(default=None)\n</code></pre> <p>... den Parameter optional, mit dem Defaultwert <code>None</code>, genauso wie:</p> <pre><code>q: str | None = None\n</code></pre> <p>Nur, dass die <code>Query</code>-Versionen den Parameter explizit als Query-Parameter deklarieren.</p> <p>Info</p> <p>Bedenken Sie, dass:</p> <pre><code>= None\n</code></pre> <p>oder:</p> <pre><code>= Query(default=None)\n</code></pre> <p>der wichtigste Teil ist, um einen Parameter optional zu machen, da dieses <code>None</code> der Defaultwert ist, und das ist es, was diesen Parameter nicht erforderlich macht.</p> <p>Der Teil mit <code>Union[str, None]</code> erlaubt es Ihrem Editor, Sie besser zu unterst\u00fctzen, aber er sagt ReadyAPI nicht, dass dieser Parameter optional ist.</p> <p>Jetzt k\u00f6nnen wir <code>Query</code> weitere Parameter \u00fcbergeben. Fangen wir mit dem <code>max_length</code> Parameter an, der auf Strings angewendet wird:</p> <pre><code>q: Union[str, None] = Query(default=None, max_length=50)\n</code></pre> <p>Das wird die Daten validieren, einen verst\u00e4ndlichen Fehler ausgeben, wenn die Daten nicht g\u00fcltig sind, und den Parameter in der OpenAPI-Schema-Pfadoperation dokumentieren.</p>"},{"location":"tutorial/query-params-str-validations/#query-als-defaultwert-oder-in-annotated","title":"<code>Query</code> als Defaultwert oder in <code>Annotated</code>","text":"<p>Bedenken Sie, dass wenn Sie <code>Query</code> innerhalb von <code>Annotated</code> benutzen, Sie den <code>default</code>-Parameter f\u00fcr <code>Query</code> nicht verwenden d\u00fcrfen.</p> <p>Setzen Sie stattdessen den Defaultwert des Funktionsparameters, sonst w\u00e4re es inkonsistent.</p> <p>Zum Beispiel ist das nicht erlaubt:</p> <pre><code>q: Annotated[str, Query(default=\"rick\")] = \"morty\"\n</code></pre> <p>... denn es wird nicht klar, ob der Defaultwert <code>\"rick\"</code> oder <code>\"morty\"</code> sein soll.</p> <p>Sie w\u00fcrden also (bevorzugt) schreiben:</p> <pre><code>q: Annotated[str, Query()] = \"rick\"\n</code></pre> <p>In \u00e4lterem Code werden Sie auch finden:</p> <pre><code>q: str = Query(default=\"rick\")\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#vorzuge-von-annotated","title":"Vorz\u00fcge von <code>Annotated</code>","text":"<p>Es wird empfohlen, <code>Annotated</code> zu verwenden, statt des Defaultwertes im Funktionsparameter, das ist aus mehreren Gr\u00fcnden besser: \ud83e\udd13</p> <p>Der Defaultwert des Funktionsparameters ist der tats\u00e4chliche Defaultwert, das spielt generell intuitiver mit Python zusammen. \ud83d\ude0c</p> <p>Sie k\u00f6nnen die Funktion ohne ReadyAPI an anderen Stellen aufrufen, und es wird wie erwartet funktionieren. Wenn es einen erforderlichen Parameter gibt (ohne Defaultwert), und Sie f\u00fchren die Funktion ohne den ben\u00f6tigten Parameter aus, dann wird Ihr Editor Sie das mit einem Fehler wissen lassen, und Python wird sich auch beschweren.</p> <p>Wenn Sie aber nicht <code>Annotated</code> benutzen und stattdessen die (alte) Variante mit einem Defaultwert, dann m\u00fcssen Sie, wenn Sie die Funktion ohne ReadyAPI an anderen Stellen aufrufen, sich daran erinnern, die Argumente der Funktion zu \u00fcbergeben, damit es richtig funktioniert. Ansonsten erhalten Sie unerwartete Werte (z. B. <code>QueryInfo</code> oder etwas \u00c4hnliches, statt <code>str</code>). Ihr Editor kann ihnen nicht helfen, und Python wird die Funktion ohne Beschwerden ausf\u00fchren, es sei denn, die Operationen innerhalb l\u00f6sen einen Fehler aus.</p> <p>Da <code>Annotated</code> mehrere Metadaten haben kann, k\u00f6nnen Sie dieselbe Funktion auch mit anderen Tools verwenden, wie etwa Cligenius. \ud83d\ude80</p>"},{"location":"tutorial/query-params-str-validations/#mehr-validierungen-hinzufugen","title":"Mehr Validierungen hinzuf\u00fcgen","text":"<p>Sie k\u00f6nnen auch einen Parameter <code>min_length</code> hinzuf\u00fcgen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#regulare-ausdrucke-hinzufugen","title":"Regul\u00e4re Ausdr\u00fccke hinzuf\u00fcgen","text":"<p>Sie k\u00f6nnen einen Regul\u00e4ren Ausdruck <code>pattern</code> definieren, mit dem der Parameter \u00fcbereinstimmen muss:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Dieses bestimmte regul\u00e4re Suchmuster pr\u00fcft, ob der erhaltene Parameter-Wert:</p> <ul> <li><code>^</code>: mit den nachfolgenden Zeichen startet, keine Zeichen davor hat.</li> <li><code>fixedquery</code>: den exakten Text <code>fixedquery</code> hat.</li> <li><code>$</code>: danach endet, keine weiteren Zeichen hat als <code>fixedquery</code>.</li> </ul> <p>Wenn Sie sich verloren f\u00fchlen bei all diesen \u201eRegul\u00e4rer Ausdruck\u201c-Konzepten, keine Sorge. Regul\u00e4re Ausdr\u00fccke sind f\u00fcr viele Menschen ein schwieriges Thema. Sie k\u00f6nnen auch ohne regul\u00e4re Ausdr\u00fccke eine ganze Menge machen.</p> <p>Aber wenn Sie sie brauchen und sie lernen, wissen Sie, dass Sie sie bereits direkt in ReadyAPI verwenden k\u00f6nnen.</p>"},{"location":"tutorial/query-params-str-validations/#pydantic-v1-regex-statt-pattern","title":"Pydantic v1 <code>regex</code> statt <code>pattern</code>","text":"<p>Vor Pydantic Version 2 und vor ReadyAPI Version 0.100.0, war der Name des Parameters <code>regex</code> statt <code>pattern</code>, aber das ist jetzt deprecated.</p> <p>Sie k\u00f6nnten immer noch Code sehen, der den alten Namen verwendet:</p> Pydantic v1 Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Beachten Sie aber, dass das deprecated ist, und zum neuen Namen <code>pattern</code> ge\u00e4ndert werden sollte. \ud83e\udd13</p>"},{"location":"tutorial/query-params-str-validations/#defaultwerte","title":"Defaultwerte","text":"<p>Sie k\u00f6nnen nat\u00fcrlich andere Defaultwerte als <code>None</code> verwenden.</p> <p>Beispielsweise k\u00f6nnten Sie den <code>q</code> Query-Parameter so deklarieren, dass er eine <code>min_length</code> von <code>3</code> hat, und den Defaultwert <code>\"fixedquery\"</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Hinweis</p> <p>Ein Parameter ist optional (nicht erforderlich), wenn er irgendeinen Defaultwert, auch <code>None</code>, hat.</p>"},{"location":"tutorial/query-params-str-validations/#erforderliche-parameter","title":"Erforderliche Parameter","text":"<p>Wenn wir keine Validierungen oder Metadaten haben, k\u00f6nnen wir den <code>q</code> Query-Parameter erforderlich machen, indem wir einfach keinen Defaultwert deklarieren, wie in:</p> <pre><code>q: str\n</code></pre> <p>statt:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Aber jetzt deklarieren wir den Parameter mit <code>Query</code>, wie in:</p> AnnotiertNicht annotiert <pre><code>q: Annotated[Union[str, None], Query(min_length=3)] = None\n</code></pre> <pre><code>q: Union[str, None] = Query(default=None, min_length=3)\n</code></pre> <p>Wenn Sie einen Parameter erforderlich machen wollen, w\u00e4hrend Sie <code>Query</code> verwenden, deklarieren Sie ebenfalls einfach keinen Defaultwert:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#erforderlich-kann-none-sein","title":"Erforderlich, kann <code>None</code> sein","text":"<p>Sie k\u00f6nnen deklarieren, dass ein Parameter <code>None</code> akzeptiert, aber dennoch erforderlich ist. Das zwingt Clients, den Wert zu senden, selbst wenn er <code>None</code> ist.</p> <p>Um das zu machen, deklarieren Sie, dass <code>None</code> ein g\u00fcltiger Typ ist, aber verwenden Sie dennoch <code>...</code> als Default:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tipp</p> <p>Pydantic, welches die gesamte Datenvalidierung und Serialisierung in ReadyAPI antreibt, hat ein spezielles Verhalten, wenn Sie <code>Optional</code> oder <code>Union[Something, None]</code> ohne Defaultwert verwenden, Sie k\u00f6nnen mehr dar\u00fcber in der Pydantic-Dokumentation unter Required fields erfahren.</p> <p>Tipp</p> <p>Denken Sie daran, dass Sie in den meisten F\u00e4llen, wenn etwas erforderlich ist, einfach den Defaultwert weglassen k\u00f6nnen. Sie m\u00fcssen also normalerweise <code>...</code> nicht verwenden.</p>"},{"location":"tutorial/query-params-str-validations/#query-parameter-liste-mehrere-werte","title":"Query-Parameter-Liste / Mehrere Werte","text":"<p>Wenn Sie einen Query-Parameter explizit mit <code>Query</code> auszeichnen, k\u00f6nnen Sie ihn auch eine Liste von Werten empfangen lassen, oder anders gesagt, mehrere Werte.</p> <p>Um zum Beispiel einen Query-Parameter <code>q</code> zu deklarieren, der mehrere Male in der URL vorkommen kann, schreiben Sie:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Dann, mit einer URL wie:</p> <pre><code>http://localhost:8000/items/?q=foo&amp;q=bar\n</code></pre> <p>bekommen Sie alle <code>q</code>-Query-Parameter-Werte (<code>foo</code> und <code>bar</code>) in einer Python-Liste \u2013 <code>list</code> \u2013 in ihrer Pfadoperation-Funktion, im Funktionsparameter <code>q</code>, \u00fcberreicht.</p> <p>Die Response f\u00fcr diese URL w\u00e4re also:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre> <p>Tipp</p> <p>Um einen Query-Parameter vom Typ <code>list</code> zu deklarieren, wie im Beispiel oben, m\u00fcssen Sie explizit <code>Query</code> verwenden, sonst w\u00fcrde der Parameter als Requestbody interpretiert werden.</p> <p>Die interaktive API-Dokumentation wird entsprechend aktualisiert und erlaubt jetzt mehrere Werte.</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#query-parameter-liste-mehrere-werte-mit-defaults","title":"Query-Parameter-Liste / Mehrere Werte mit Defaults","text":"<p>Und Sie k\u00f6nnen auch eine Default-<code>list</code>e von Werten definieren, wenn keine \u00fcbergeben werden:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Wenn Sie auf:</p> <pre><code>http://localhost:8000/items/\n</code></pre> <p>gehen, wird der Default f\u00fcr <code>q</code> verwendet: <code>[\"foo\", \"bar\"]</code>, und als Response erhalten Sie:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#list-alleine-verwenden","title":"<code>list</code> alleine verwenden","text":"<p>Sie k\u00f6nnen auch <code>list</code> direkt verwenden, anstelle von <code>List[str]</code> (oder <code>list[str]</code> in Python 3.9+):</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass ReadyAPI in diesem Fall den Inhalt der Liste nicht \u00fcberpr\u00fcft.</p> <p>Zum Beispiel w\u00fcrde <code>List[int]</code> \u00fcberpr\u00fcfen (und dokumentieren) dass die Liste Ganzzahlen enth\u00e4lt. <code>list</code> alleine macht das nicht.</p>"},{"location":"tutorial/query-params-str-validations/#deklarieren-von-mehr-metadaten","title":"Deklarieren von mehr Metadaten","text":"<p>Sie k\u00f6nnen mehr Informationen zum Parameter hinzuf\u00fcgen.</p> <p>Diese Informationen werden zur generierten OpenAPI hinzugef\u00fcgt, und von den Dokumentations-Oberfl\u00e4chen und von externen Tools verwendet.</p> <p>Hinweis</p> <p>Beachten Sie, dass verschiedene Tools OpenAPI m\u00f6glicherweise unterschiedlich gut unterst\u00fctzen.</p> <p>Einige k\u00f6nnten noch nicht alle zus\u00e4tzlichen Informationen anzeigen, die Sie deklariert haben, obwohl in den meisten F\u00e4llen geplant ist, das fehlende Feature zu implementieren.</p> <p>Sie k\u00f6nnen einen Titel hinzuf\u00fcgen \u2013 <code>title</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Und eine Beschreibung \u2013 <code>description</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#alias-parameter","title":"Alias-Parameter","text":"<p>Stellen Sie sich vor, der Parameter soll <code>item-query</code> sein.</p> <p>Wie in:</p> <pre><code>http://127.0.0.1:8000/items/?item-query=foobaritems\n</code></pre> <p>Aber <code>item-query</code> ist kein g\u00fcltiger Name f\u00fcr eine Variable in Python.</p> <p>Am \u00e4hnlichsten w\u00e4re <code>item_query</code>.</p> <p>Aber Sie m\u00f6chten dennoch exakt <code>item-query</code> verwenden.</p> <p>Dann k\u00f6nnen Sie einen <code>alias</code> deklarieren, und dieser Alias wird verwendet, um den Parameter-Wert zu finden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#parameter-als-deprecated-ausweisen","title":"Parameter als deprecated ausweisen","text":"<p>Nehmen wir an, Sie m\u00f6gen diesen Parameter nicht mehr.</p> <p>Sie m\u00fcssen ihn eine Weile dort belassen, weil Clients ihn benutzen, aber Sie m\u00f6chten, dass die Dokumentation klar anzeigt, dass er deprecated ist.</p> <p>In diesem Fall f\u00fcgen Sie den Parameter <code>deprecated=True</code> zu <code>Query</code> hinzu.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Die Dokumentation wird das so anzeigen:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#parameter-von-openapi-ausschlieen","title":"Parameter von OpenAPI ausschlie\u00dfen","text":"<p>Um einen Query-Parameter vom generierten OpenAPI-Schema auszuschlie\u00dfen (und daher von automatischen Dokumentations-Systemen), setzen Sie den Parameter <code>include_in_schema</code> in <code>Query</code> auf <code>False</code>.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: str | None = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen zus\u00e4tzliche Validierungen und Metadaten zu ihren Parametern hinzuf\u00fcgen.</p> <p>Allgemeine Validierungen und Metadaten:</p> <ul> <li><code>alias</code></li> <li><code>title</code></li> <li><code>description</code></li> <li><code>deprecated</code></li> </ul> <p>Validierungen spezifisch f\u00fcr Strings:</p> <ul> <li><code>min_length</code></li> <li><code>max_length</code></li> <li><code>pattern</code></li> </ul> <p>In diesen Beispielen haben Sie gesehen, wie Sie Validierungen f\u00fcr Strings hinzuf\u00fcgen.</p> <p>In den n\u00e4chsten Kapiteln sehen wir, wie man Validierungen f\u00fcr andere Typen hinzuf\u00fcgt, etwa f\u00fcr Zahlen.</p>"},{"location":"tutorial/query-params/","title":"Query-Parameter","text":"<p>Wenn Sie in ihrer Funktion Parameter deklarieren, die nicht Teil der Pfad-Parameter sind, dann werden diese automatisch als \u201eQuery\u201c-Parameter interpretiert.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n</code></pre> <p>Query-Parameter (Deutsch: Abfrage-Parameter) sind die Schl\u00fcssel-Wert-Paare, die nach dem <code>?</code> in einer URL aufgelistet sind, getrennt durch <code>&amp;</code>-Zeichen.</p> <p>Zum Beispiel sind in der URL:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>... die Query-Parameter:</p> <ul> <li><code>skip</code>: mit dem Wert <code>0</code></li> <li><code>limit</code>: mit dem Wert <code>10</code></li> </ul> <p>Da sie Teil der URL sind, sind sie \u201enaturgem\u00e4\u00df\u201c Strings.</p> <p>Aber wenn Sie sie mit Python-Typen deklarieren (im obigen Beispiel als <code>int</code>), werden sie zu diesem Typ konvertiert, und gegen diesen validiert.</p> <p>Die gleichen Prozesse, die f\u00fcr Pfad-Parameter stattfinden, werden auch auf Query-Parameter angewendet:</p> <ul> <li>Editor Unterst\u00fctzung (nat\u00fcrlich)</li> <li>\u201eParsen\u201c der Daten</li> <li>Datenvalidierung</li> <li>Automatische Dokumentation</li> </ul>"},{"location":"tutorial/query-params/#defaultwerte","title":"Defaultwerte","text":"<p>Da Query-Parameter nicht ein festgelegter Teil des Pfades sind, k\u00f6nnen sie optional sein und Defaultwerte haben.</p> <p>Im obigen Beispiel haben sie die Defaultwerte <code>skip=0</code> und <code>limit=10</code>.</p> <p>Wenn Sie also zur URL:</p> <pre><code>http://127.0.0.1:8000/items/\n</code></pre> <p>gehen, so ist das das gleiche wie die URL:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>Aber wenn Sie zum Beispiel zu:</p> <pre><code>http://127.0.0.1:8000/items/?skip=20\n</code></pre> <p>gehen, werden die Parameter-Werte Ihrer Funktion sein:</p> <ul> <li><code>skip=20</code>: da Sie das in der URL gesetzt haben</li> <li><code>limit=10</code>: weil das der Defaultwert ist</li> </ul>"},{"location":"tutorial/query-params/#optionale-parameter","title":"Optionale Parameter","text":"<p>Auf die gleiche Weise k\u00f6nnen Sie optionale Query-Parameter deklarieren, indem Sie deren Defaultwert auf <code>None</code> setzen:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <p>In diesem Fall wird der Funktionsparameter <code>q</code> optional, und standardm\u00e4\u00dfig <code>None</code> sein.</p> <p>Check</p> <p>Beachten Sie auch, dass ReadyAPI intelligent genug ist, um zu erkennen, dass <code>item_id</code> ein Pfad-Parameter ist und <code>q</code> keiner, daher muss letzteres ein Query-Parameter sein.</p>"},{"location":"tutorial/query-params/#query-parameter-typkonvertierung","title":"Query-Parameter Typkonvertierung","text":"<p>Sie k\u00f6nnen auch <code>bool</code>-Typen deklarieren und sie werden konvertiert:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <p>Wenn Sie nun zu:</p> <pre><code>http://127.0.0.1:8000/items/foo?short=1\n</code></pre> <p>oder</p> <pre><code>http://127.0.0.1:8000/items/foo?short=True\n</code></pre> <p>oder</p> <pre><code>http://127.0.0.1:8000/items/foo?short=true\n</code></pre> <p>oder</p> <pre><code>http://127.0.0.1:8000/items/foo?short=on\n</code></pre> <p>oder</p> <pre><code>http://127.0.0.1:8000/items/foo?short=yes\n</code></pre> <p>gehen, oder zu irgendeiner anderen Variante der Gro\u00df-/Kleinschreibung (Alles gro\u00df, Anfangsbuchstabe gro\u00df, usw.), dann wird Ihre Funktion den Parameter <code>short</code> mit dem <code>bool</code>-Wert <code>True</code> sehen, ansonsten mit dem Wert <code>False</code>.</p>"},{"location":"tutorial/query-params/#mehrere-pfad-und-query-parameter","title":"Mehrere Pfad- und Query-Parameter","text":"<p>Sie k\u00f6nnen mehrere Pfad-Parameter und Query-Parameter gleichzeitig deklarieren, ReadyAPI wei\u00df, was welches ist.</p> <p>Und Sie m\u00fcssen sie auch nicht in einer spezifischen Reihenfolge deklarieren.</p> <p>Parameter werden anhand ihres Namens erkannt:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre>"},{"location":"tutorial/query-params/#erforderliche-query-parameter","title":"Erforderliche Query-Parameter","text":"<p>Wenn Sie einen Defaultwert f\u00fcr Nicht-Pfad-Parameter deklarieren (Bis jetzt haben wir nur Query-Parameter gesehen), dann ist der Parameter nicht erforderlich.</p> <p>Wenn Sie keinen spezifischen Wert haben wollen, sondern der Parameter einfach optional sein soll, dann setzen Sie den Defaultwert auf <code>None</code>.</p> <p>Aber wenn Sie wollen, dass ein Query-Parameter erforderlich ist, vergeben Sie einfach keinen Defaultwert:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n</code></pre> <p>Hier ist <code>needy</code> ein erforderlicher Query-Parameter vom Typ <code>str</code>.</p> <p>Wenn Sie in Ihrem Browser eine URL wie:</p> <pre><code>http://127.0.0.1:8000/items/foo-item\n</code></pre> <p>... \u00f6ffnen, ohne den ben\u00f6tigten Parameter <code>needy</code>, dann erhalten Sie einen Fehler wie den folgenden:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"type\": \"missing\",\n      \"loc\": [\n        \"query\",\n        \"needy\"\n      ],\n      \"msg\": \"Field required\",\n      \"input\": null,\n      \"url\": \"https://errors.pydantic.dev/2.1/v/missing\"\n    }\n  ]\n}\n</code></pre> <p>Da <code>needy</code> ein erforderlicher Parameter ist, m\u00fcssen Sie ihn in der URL setzen:</p> <pre><code>http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n</code></pre> <p>... Das funktioniert:</p> <pre><code>{\n    \"item_id\": \"foo-item\",\n    \"needy\": \"sooooneedy\"\n}\n</code></pre> <p>Und nat\u00fcrlich k\u00f6nnen Sie einige Parameter als erforderlich, einige mit Defaultwert, und einige als vollst\u00e4ndig optional definieren:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <p>In diesem Fall gibt es drei Query-Parameter:</p> <ul> <li><code>needy</code>, ein erforderlicher <code>str</code>.</li> <li><code>skip</code>, ein <code>int</code> mit einem Defaultwert <code>0</code>.</li> <li><code>limit</code>, ein optionales <code>int</code>.</li> </ul> <p>Tipp</p> <p>Sie k\u00f6nnen auch <code>Enum</code>s verwenden, auf die gleiche Weise wie mit Pfad-Parametern.</p>"},{"location":"tutorial/request-files/","title":"Dateien im Request","text":"<p>Mit <code>File</code> k\u00f6nnen sie vom Client hochzuladende Dateien definieren.</p> <p>Info</p> <p>Um hochgeladene Dateien zu empfangen, installieren Sie zuerst <code>python-multipart</code>.</p> <p>Z. B. <code>pip install python-multipart</code>.</p> <p>Das, weil hochgeladene Dateien als \u201eFormulardaten\u201c gesendet werden.</p>"},{"location":"tutorial/request-files/#file-importieren","title":"<code>File</code> importieren","text":"<p>Importieren Sie <code>File</code> und <code>UploadFile</code> von <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#file-parameter-definieren","title":"<code>File</code>-Parameter definieren","text":"<p>Erstellen Sie Datei-Parameter, so wie Sie es auch mit <code>Body</code> und <code>Form</code> machen w\u00fcrden:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Info</p> <p><code>File</code> ist eine Klasse, die direkt von <code>Form</code> erbt.</p> <p>Aber erinnern Sie sich, dass, wenn Sie <code>Query</code>, <code>Path</code>,  <code>File</code> und andere von <code>readyapi</code> importieren, diese tats\u00e4chlich Funktionen sind, welche spezielle Klassen zur\u00fcckgeben</p> <p>Tipp</p> <p>Um Dateibodys zu deklarieren, m\u00fcssen Sie <code>File</code> verwenden, da diese Parameter sonst als Query-Parameter oder Body(-JSON)-Parameter interpretiert werden w\u00fcrden.</p> <p>Die Dateien werden als \u201eFormulardaten\u201c hochgeladen.</p> <p>Wenn Sie den Typ Ihrer Pfadoperation-Funktion als <code>bytes</code> deklarieren, wird ReadyAPI die Datei f\u00fcr Sie auslesen, und Sie erhalten den Inhalt als <code>bytes</code>.</p> <p>Bedenken Sie, dass das bedeutet, dass sich der gesamte Inhalt der Datei im Arbeitsspeicher befindet. Das wird f\u00fcr kleinere Dateien gut funktionieren.</p> <p>Aber es gibt viele F\u00e4lle, in denen Sie davon profitieren, <code>UploadFile</code> zu verwenden.</p>"},{"location":"tutorial/request-files/#datei-parameter-mit-uploadfile","title":"Datei-Parameter mit <code>UploadFile</code>","text":"<p>Definieren Sie einen Datei-Parameter mit dem Typ <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p><code>UploadFile</code> zu verwenden, hat mehrere Vorz\u00fcge gegen\u00fcber <code>bytes</code>:</p> <ul> <li>Sie m\u00fcssen <code>File()</code> nicht als Parameter-Defaultwert verwenden.</li> <li>Es wird eine \u201eSpool\u201c-Datei verwendet:<ul> <li>Eine Datei, die bis zu einem bestimmten Gr\u00f6\u00dfen-Limit im Arbeitsspeicher behalten wird, und wenn das Limit \u00fcberschritten wird, auf der Festplatte gespeichert wird.</li> </ul> </li> <li>Das bedeutet, es wird f\u00fcr gro\u00dfe Dateien wie Bilder, Videos, gro\u00dfe Bin\u00e4rdateien, usw. gut funktionieren, ohne den ganzen Arbeitsspeicher aufzubrauchen.</li> <li>Sie k\u00f6nnen Metadaten aus der hochgeladenen Datei auslesen.</li> <li>Es hat eine file-like <code>async</code>hrone Schnittstelle.</li> <li>Es stellt ein tats\u00e4chliches Python-<code>SpooledTemporaryFile</code>-Objekt bereit, welches Sie direkt anderen Bibliotheken \u00fcbergeben k\u00f6nnen, die ein dateiartiges Objekt erwarten.</li> </ul>"},{"location":"tutorial/request-files/#uploadfile","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> hat die folgenden Attribute:</p> <ul> <li><code>filename</code>: Ein <code>str</code> mit dem urspr\u00fcnglichen Namen der hochgeladenen Datei (z. B. <code>meinbild.jpg</code>).</li> <li><code>content_type</code>: Ein <code>str</code> mit dem Inhaltstyp (MIME-Typ / Medientyp) (z. B. <code>image/jpeg</code>).</li> <li><code>file</code>: Ein <code>SpooledTemporaryFile</code> (ein file-like Objekt). Das ist das tats\u00e4chliche Python-Objekt, das Sie direkt anderen Funktionen oder Bibliotheken \u00fcbergeben k\u00f6nnen, welche ein \u201efile-like\u201c-Objekt erwarten.</li> </ul> <p><code>UploadFile</code> hat die folgenden <code>async</code>hronen Methoden. Sie alle rufen die entsprechenden Methoden des darunterliegenden Datei-Objekts auf (wobei intern <code>SpooledTemporaryFile</code> verwendet wird).</p> <ul> <li><code>write(daten)</code>: Schreibt <code>daten</code> (<code>str</code> oder <code>bytes</code>) in die Datei.</li> <li><code>read(anzahl)</code>: Liest <code>anzahl</code> (<code>int</code>) bytes/Zeichen aus der Datei.</li> <li><code>seek(versatz)</code>: Geht zur Position <code>versatz</code> (<code>int</code>) in der Datei.<ul> <li>Z. B. w\u00fcrde <code>await myfile.seek(0)</code> zum Anfang der Datei gehen.</li> <li>Das ist besonders dann n\u00fctzlich, wenn Sie <code>await myfile.read()</code> einmal ausf\u00fchren und dann diese Inhalte erneut auslesen m\u00fcssen.</li> </ul> </li> <li><code>close()</code>: Schlie\u00dft die Datei.</li> </ul> <p>Da alle diese Methoden <code>async</code>hron sind, m\u00fcssen Sie sie <code>await</code>en (\u201eerwarten\u201c).</p> <p>Zum Beispiel k\u00f6nnen Sie innerhalb einer <code>async</code> Pfadoperation-Funktion den Inhalt wie folgt auslesen:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>Wenn Sie sich innerhalb einer normalen <code>def</code>-Pfadoperation-Funktion befinden, k\u00f6nnen Sie direkt auf <code>UploadFile.file</code> zugreifen, zum Beispiel:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p>Technische Details zu <code>async</code></p> <p>Wenn Sie die <code>async</code>-Methoden verwenden, f\u00fchrt ReadyAPI die Datei-Methoden in einem Threadpool aus und erwartet sie.</p> <p>Technische Details zu Starlette</p> <p>ReadyAPIs <code>UploadFile</code> erbt direkt von Starlettes <code>UploadFile</code>, f\u00fcgt aber ein paar notwendige Teile hinzu, um es kompatibel mit Pydantic und anderen Teilen von ReadyAPI zu machen.</p>"},{"location":"tutorial/request-files/#was-sind-formulardaten","title":"Was sind \u201eFormulardaten\u201c","text":"<p>HTML-Formulare (<code>&lt;form&gt;&lt;/form&gt;</code>) senden die Daten in einer \u201espeziellen\u201c Kodierung zum Server, welche sich von JSON unterscheidet.</p> <p>ReadyAPI stellt sicher, dass diese Daten korrekt ausgelesen werden, statt JSON zu erwarten.</p> <p>Technische Details</p> <p>Daten aus Formularen werden, wenn es keine Dateien sind, normalerweise mit dem \u201emedia type\u201c <code>application/x-www-form-urlencoded</code> kodiert.</p> <p>Sollte das Formular aber Dateien enthalten, dann werden diese mit <code>multipart/form-data</code> kodiert. Wenn Sie <code>File</code> verwenden, wird ReadyAPI wissen, dass es die Dateien vom korrekten Teil des Bodys holen muss.</p> <p>Wenn Sie mehr \u00fcber Formularfelder und ihre Kodierungen lesen m\u00f6chten, besuchen Sie die MDN-Webdokumentation f\u00fcr <code>POST</code>.</p> <p>Achtung</p> <p>Sie k\u00f6nnen mehrere <code>File</code>- und <code>Form</code>-Parameter in einer Pfadoperation deklarieren, aber Sie k\u00f6nnen nicht gleichzeitig auch <code>Body</code>-Felder deklarieren, welche Sie als JSON erwarten, da der Request den Body mittels <code>multipart/form-data</code> statt <code>application/json</code> kodiert.</p> <p>Das ist keine Limitation von ReadyAPI, sondern Teil des HTTP-Protokolls.</p>"},{"location":"tutorial/request-files/#optionaler-datei-upload","title":"Optionaler Datei-Upload","text":"<p>Sie k\u00f6nnen eine Datei optional machen, indem Sie Standard-Typannotationen verwenden und den Defaultwert auf <code>None</code> setzen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploadfile-mit-zusatzlichen-metadaten","title":"<code>UploadFile</code> mit zus\u00e4tzlichen Metadaten","text":"<p>Sie k\u00f6nnen auch <code>File()</code> zusammen mit <code>UploadFile</code> verwenden, um zum Beispiel zus\u00e4tzliche Metadaten zu setzen:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#mehrere-datei-uploads","title":"Mehrere Datei-Uploads","text":"<p>Es ist auch m\u00f6glich, mehrere Dateien gleichzeitig hochzuladen.</p> <p>Diese werden demselben Formularfeld zugeordnet, welches mit den Formulardaten gesendet wird.</p> <p>Um das zu machen, deklarieren Sie eine Liste von <code>bytes</code> oder <code>UploadFile</code>s:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Sie erhalten, wie deklariert, eine <code>list</code>e von <code>bytes</code> oder <code>UploadFile</code>s.</p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette.responses import HTMLResponse</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.responses</code> auch via <code>readyapi.responses</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Die meisten verf\u00fcgbaren Responses kommen aber direkt von Starlette.</p>"},{"location":"tutorial/request-files/#mehrere-datei-uploads-mit-zusatzlichen-metadaten","title":"Mehrere Datei-Uploads mit zus\u00e4tzlichen Metadaten","text":"<p>Und so wie zuvor k\u00f6nnen Sie <code>File()</code> verwenden, um zus\u00e4tzliche Parameter zu setzen, sogar f\u00fcr <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request-files/#zusammenfassung","title":"Zusammenfassung","text":"<p>Verwenden Sie <code>File</code>, <code>bytes</code> und <code>UploadFile</code>, um hochladbare Dateien im Request zu deklarieren, die als Formulardaten gesendet werden.</p>"},{"location":"tutorial/request-forms-and-files/","title":"Formulardaten und Dateien im Request","text":"<p>Sie k\u00f6nnen gleichzeitig Dateien und Formulardaten mit <code>File</code> und <code>Form</code> definieren.</p> <p>Info</p> <p>Um hochgeladene Dateien und/oder Formulardaten zu empfangen, installieren Sie zuerst <code>python-multipart</code>.</p> <p>Z. B. <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms-and-files/#file-und-form-importieren","title":"<code>File</code> und <code>Form</code> importieren","text":"Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#file-und-form-parameter-definieren","title":"<code>File</code> und <code>Form</code>-Parameter definieren","text":"<p>Erstellen Sie Datei- und Formularparameter, so wie Sie es auch mit <code>Body</code> und <code>Query</code> machen w\u00fcrden:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Die Datei- und Formularfelder werden als Formulardaten hochgeladen, und Sie erhalten diese Dateien und Formularfelder.</p> <p>Und Sie k\u00f6nnen einige der Dateien als <code>bytes</code> und einige als <code>UploadFile</code> deklarieren.</p> <p>Achtung</p> <p>Sie k\u00f6nnen mehrere <code>File</code>- und <code>Form</code>-Parameter in einer Pfadoperation deklarieren, aber Sie k\u00f6nnen nicht gleichzeitig auch <code>Body</code>-Felder deklarieren, welche Sie als JSON erwarten, da der Request den Body mittels <code>multipart/form-data</code> statt <code>application/json</code> kodiert.</p> <p>Das ist keine Limitation von ReadyAPI, sondern Teil des HTTP-Protokolls.</p>"},{"location":"tutorial/request-forms-and-files/#zusammenfassung","title":"Zusammenfassung","text":"<p>Verwenden Sie <code>File</code> und <code>Form</code> zusammen, wenn Sie Daten und Dateien zusammen im selben Request empfangen m\u00fcssen.</p>"},{"location":"tutorial/request-forms/","title":"Formulardaten","text":"<p>Wenn Sie Felder aus Formularen statt JSON empfangen m\u00fcssen, k\u00f6nnen Sie <code>Form</code> verwenden.</p> <p>Info</p> <p>Um Formulare zu verwenden, installieren Sie zuerst <code>python-multipart</code>.</p> <p>Z. B. <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms/#form-importieren","title":"<code>Form</code> importieren","text":"<p>Importieren Sie <code>Form</code> von <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/request-forms/#form-parameter-definieren","title":"<code>Form</code>-Parameter definieren","text":"<p>Erstellen Sie Formular-Parameter, so wie Sie es auch mit <code>Body</code> und <code>Query</code> machen w\u00fcrden:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> <p>Zum Beispiel stellt eine der M\u00f6glichkeiten, die OAuth2 Spezifikation zu verwenden (genannt \u201epassword flow\u201c), die Bedingung, einen <code>username</code> und ein <code>password</code> als Formularfelder zu senden.</p> <p>Die Spec erfordert, dass die Felder exakt <code>username</code> und <code>password</code> genannt werden und als Formularfelder, nicht JSON, gesendet werden.</p> <p>Mit <code>Form</code> haben Sie die gleichen Konfigurationsm\u00f6glichkeiten wie mit <code>Body</code> (und <code>Query</code>, <code>Path</code>, <code>Cookie</code>), inklusive Validierung, Beispielen, einem Alias (z. B. <code>user-name</code> statt <code>username</code>), usw.</p> <p>Info</p> <p><code>Form</code> ist eine Klasse, die direkt von <code>Body</code> erbt.</p> <p>Tipp</p> <p>Um Formularbodys zu deklarieren, verwenden Sie explizit <code>Form</code>, da diese Parameter sonst als Query-Parameter oder Body(-JSON)-Parameter interpretiert werden w\u00fcrden.</p>"},{"location":"tutorial/request-forms/#uber-formularfelder","title":"\u00dcber \u201eFormularfelder\u201c","text":"<p>HTML-Formulare (<code>&lt;form&gt;&lt;/form&gt;</code>) senden die Daten in einer \u201espeziellen\u201c Kodierung zum Server, welche sich von JSON unterscheidet.</p> <p>ReadyAPI stellt sicher, dass diese Daten korrekt ausgelesen werden, statt JSON zu erwarten.</p> <p>Technische Details</p> <p>Daten aus Formularen werden normalerweise mit dem \u201emedia type\u201c <code>application/x-www-form-urlencoded</code> kodiert.</p> <p>Wenn das Formular stattdessen Dateien enth\u00e4lt, werden diese mit <code>multipart/form-data</code> kodiert. Im n\u00e4chsten Kapitel erfahren Sie mehr \u00fcber die Handhabung von Dateien.</p> <p>Wenn Sie mehr \u00fcber Formularfelder und ihre Kodierungen lesen m\u00f6chten, besuchen Sie die MDN-Webdokumentation f\u00fcr <code>POST</code>.</p> <p>Achtung</p> <p>Sie k\u00f6nnen mehrere <code>Form</code>-Parameter in einer Pfadoperation deklarieren, aber Sie k\u00f6nnen nicht gleichzeitig auch <code>Body</code>-Felder deklarieren, welche Sie als JSON erwarten, da der Request den Body mittels <code>application/x-www-form-urlencoded</code> statt <code>application/json</code> kodiert.</p> <p>Das ist keine Limitation von ReadyAPI, sondern Teil des HTTP-Protokolls.</p>"},{"location":"tutorial/request-forms/#zusammenfassung","title":"Zusammenfassung","text":"<p>Verwenden Sie <code>Form</code>, um Eingabe-Parameter f\u00fcr Formulardaten zu deklarieren.</p>"},{"location":"tutorial/response-model/","title":"Responsemodell \u2013 R\u00fcckgabetyp","text":"<p>Sie k\u00f6nnen den Typ der Response deklarieren, indem Sie den R\u00fcckgabetyp der Pfadoperation annotieren.</p> <p>Hierbei k\u00f6nnen Sie Typannotationen genauso verwenden, wie Sie es bei Werten von Funktions-Parametern machen; verwenden Sie Pydantic-Modelle, Listen, Dicts und skalare Werte wie Nummern, Booleans, usw.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI wird diesen R\u00fcckgabetyp verwenden, um:</p> <ul> <li>Die zur\u00fcckzugebenden Daten zu validieren.<ul> <li>Wenn die Daten ung\u00fcltig sind (Sie haben z. B. ein Feld vergessen), bedeutet das, Ihr Anwendungscode ist fehlerhaft, er gibt nicht zur\u00fcck, was er sollte, und daher wird ein Server-Error ausgegeben, statt falscher Daten. So k\u00f6nnen Sie und ihre Clients sicher sein, dass diese die erwarteten Daten, in der richtigen Form erhalten.</li> </ul> </li> <li>In der OpenAPI Pfadoperation ein JSON-Schema f\u00fcr die Response hinzuzuf\u00fcgen.<ul> <li>Dieses wird von der automatischen Dokumentation verwendet.</li> <li>Es wird auch von automatisch Client-Code-generierenden Tools verwendet.</li> </ul> </li> </ul> <p>Aber am wichtigsten:</p> <ul> <li>Es wird die Ausgabedaten auf das limitieren und filtern, was im R\u00fcckgabetyp definiert ist.<ul> <li>Das ist insbesondere f\u00fcr die Sicherheit wichtig, mehr dazu unten.</li> </ul> </li> </ul>"},{"location":"tutorial/response-model/#response_model-parameter","title":"<code>response_model</code>-Parameter","text":"<p>Es gibt F\u00e4lle, da m\u00f6chten oder m\u00fcssen Sie Daten zur\u00fcckgeben, die nicht genau dem entsprechen, was der Typ deklariert.</p> <p>Zum Beispiel k\u00f6nnten Sie ein Dict zur\u00fcckgeben wollen, oder ein Datenbank-Objekt, aber es als Pydantic-Modell deklarieren. Auf diese Weise \u00fcbernimmt das Pydantic-Modell alle Datendokumentation, -validierung, usw. f\u00fcr das Objekt, welches Sie zur\u00fcckgeben (z. B. ein Dict oder ein Datenbank-Objekt).</p> <p>W\u00fcrden Sie eine hierf\u00fcr eine R\u00fcckgabetyp-Annotation verwenden, dann w\u00fcrden Tools und Editoren (korrekterweise) Fehler ausgeben, die Ihnen sagen, dass Ihre Funktion einen Typ zur\u00fcckgibt (z. B. ein Dict), der sich unterscheidet von dem, was Sie deklariert haben (z. B. ein Pydantic-Modell).</p> <p>In solchen F\u00e4llen k\u00f6nnen Sie statt des R\u00fcckgabetyps den Pfadoperation-Dekorator-Parameter <code>response_model</code> verwenden.</p> <p>Sie k\u00f6nnen <code>response_model</code> in jeder m\u00f6glichen Pfadoperation verwenden:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>usw.</li> </ul> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass <code>response_model</code> ein Parameter der \u201eDekorator\u201c-Methode ist (<code>get</code>, <code>post</code>, usw.). Nicht der Pfadoperation-Funktion, so wie die anderen Parameter.</p> <p><code>response_model</code> nimmt denselben Typ entgegen, den Sie auch f\u00fcr ein Pydantic-Modellfeld deklarieren w\u00fcrden, also etwa ein Pydantic-Modell, aber es kann auch z. B. eine <code>list</code>e von Pydantic-Modellen sein, wie etwa <code>List[Item]</code>.</p> <p>ReadyAPI wird dieses <code>response_model</code> nehmen, um die Daten zu dokumentieren, validieren, usw. und auch, um die Ausgabedaten entsprechend der Typdeklaration zu konvertieren und filtern.</p> <p>Tipp</p> <p>Wenn Sie in Ihrem Editor strikte Typchecks haben, mypy, usw., k\u00f6nnen Sie den Funktions-R\u00fcckgabetyp als <code>Any</code> deklarieren.</p> <p>So sagen Sie dem Editor, dass Sie absichtlich irgendetwas zur\u00fcckgeben. Aber ReadyAPI wird trotzdem die Dokumentation, Validierung, Filterung, usw. der Daten \u00fcbernehmen, via <code>response_model</code>.</p>"},{"location":"tutorial/response-model/#response_model-prioritat","title":"<code>response_model</code>-Priorit\u00e4t","text":"<p>Wenn sowohl R\u00fcckgabetyp als auch <code>response_model</code> deklariert sind, hat <code>response_model</code> die Priorit\u00e4t und wird von ReadyAPI bevorzugt verwendet.</p> <p>So k\u00f6nnen Sie korrekte Typannotationen zu ihrer Funktion hinzuf\u00fcgen, die von ihrem Editor und Tools wie mypy verwendet werden. Und dennoch \u00fcbernimmt ReadyAPI die Validierung und Dokumentation, usw., der Daten anhand von <code>response_model</code>.</p> <p>Sie k\u00f6nnen auch <code>response_model=None</code> verwenden, um das Erstellen eines Responsemodells f\u00fcr diese Pfadoperation zu unterbinden. Sie k\u00f6nnten das tun wollen, wenn sie Dinge annotieren, die nicht g\u00fcltige Pydantic-Felder sind. Ein Beispiel dazu werden Sie in einer der Abschnitte unten sehen.</p>"},{"location":"tutorial/response-model/#dieselben-eingabedaten-zuruckgeben","title":"Dieselben Eingabedaten zur\u00fcckgeben","text":"<p>Im Folgenden deklarieren wir ein <code>UserIn</code>-Modell; es enth\u00e4lt ein Klartext-Passwort:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Info</p> <p>Um <code>EmailStr</code> zu verwenden, installieren Sie zuerst <code>email-validator</code>.</p> <p>Z. B. <code>pip install email-validator</code> oder <code>pip install pydantic[email]</code>.</p> <p>Wir verwenden dieses Modell, um sowohl unsere Eingabe- als auch Ausgabedaten zu deklarieren:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Immer wenn jetzt ein Browser einen Benutzer mit Passwort erzeugt, gibt die API dasselbe Passwort in der Response zur\u00fcck.</p> <p>Hier ist das m\u00f6glicherweise kein Problem, da es derselbe Benutzer ist, der das Passwort sendet.</p> <p>Aber wenn wir dasselbe Modell f\u00fcr eine andere Pfadoperation verwenden, k\u00f6nnten wir das Passwort dieses Benutzers zu jedem Client schicken.</p> <p>Gefahr</p> <p>Speichern Sie niemals das Klartext-Passwort eines Benutzers, oder versenden Sie es in einer Response wie dieser, wenn Sie sich nicht der resultierenden Gefahren bewusst sind und nicht wissen, was Sie tun.</p>"},{"location":"tutorial/response-model/#ausgabemodell-hinzufugen","title":"Ausgabemodell hinzuf\u00fcgen","text":"<p>Wir k\u00f6nnen stattdessen ein Eingabemodell mit dem Klartext-Passwort, und ein Ausgabemodell ohne das Passwort erstellen:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Obwohl unsere Pfadoperation-Funktion hier denselben <code>user</code> von der Eingabe zur\u00fcckgibt, der das Passwort enth\u00e4lt:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>... haben wir deklariert, dass <code>response_model</code> das Modell <code>UserOut</code> ist, welches das Passwort nicht enth\u00e4lt:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Darum wird ReadyAPI sich darum k\u00fcmmern, dass alle Daten, die nicht im Ausgabemodell deklariert sind, herausgefiltert werden (mittels Pydantic).</p>"},{"location":"tutorial/response-model/#response_model-oder-ruckgabewert","title":"<code>response_model</code> oder R\u00fcckgabewert","text":"<p>Da unsere zwei Modelle in diesem Fall unterschiedlich sind, w\u00fcrde, wenn wir den R\u00fcckgabewert der Funktion als <code>UserOut</code> deklarieren, der Editor sich beschweren, dass wir einen ung\u00fcltigen Typ zur\u00fcckgeben, weil das unterschiedliche Klassen sind.</p> <p>Darum m\u00fcssen wir es in diesem Fall im <code>response_model</code>-Parameter deklarieren.</p> <p>... aber lesen Sie weiter, um zu sehen, wie man das anders l\u00f6sen kann.</p>"},{"location":"tutorial/response-model/#ruckgabewert-und-datenfilterung","title":"R\u00fcckgabewert und Datenfilterung","text":"<p>F\u00fchren wir unser vorheriges Beispiel fort. Wir wollten die Funktion mit einem Typ annotieren, aber etwas zur\u00fcckgeben, das weniger Daten enth\u00e4lt.</p> <p>Wir m\u00f6chten auch, dass ReadyAPI die Daten weiterhin, dem Responsemodell entsprechend, filtert.</p> <p>Im vorherigen Beispiel mussten wir den <code>response_model</code>-Parameter verwenden, weil die Klassen unterschiedlich waren. Das bedeutet aber auch, wir bekommen keine Unterst\u00fctzung vom Editor und anderen Tools, die den Funktions-R\u00fcckgabewert \u00fcberpr\u00fcfen.</p> <p>Aber in den meisten F\u00e4llen, wenn wir so etwas machen, wollen wir nur, dass das Modell einige der Daten filtert/entfernt, so wie in diesem Beispiel.</p> <p>Und in solchen F\u00e4llen k\u00f6nnen wir Klassen und Vererbung verwenden, um Vorteil aus den Typannotationen in der Funktion zu ziehen, was vom Editor und von Tools besser unterst\u00fctzt wird, w\u00e4hrend wir gleichzeitig ReadyAPIs Datenfilterung behalten.</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <p>Damit erhalten wir Tool-Unterst\u00fctzung, vom Editor und mypy, da dieser Code hinsichtlich der Typen korrekt ist, aber wir erhalten auch die Datenfilterung von ReadyAPI.</p> <p>Wie funktioniert das? Schauen wir uns das mal an. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#typannotationen-und-tooling","title":"Typannotationen und Tooling","text":"<p>Sehen wir uns zun\u00e4chst an, wie Editor, mypy und andere Tools dies sehen w\u00fcrden.</p> <p><code>BaseUser</code> verf\u00fcgt \u00fcber die Basis-Felder. Dann erbt <code>UserIn</code> von <code>BaseUser</code> und f\u00fcgt das Feld <code>Passwort</code> hinzu, sodass dass es nun alle Felder beider Modelle hat.</p> <p>Wir annotieren den Funktionsr\u00fcckgabetyp als <code>BaseUser</code>, geben aber tats\u00e4chlich eine <code>UserIn</code>-Instanz zur\u00fcck.</p> <p>F\u00fcr den Editor, mypy und andere Tools ist das kein Problem, da <code>UserIn</code> eine Unterklasse von <code>BaseUser</code> ist (Salopp: <code>UserIn</code> ist ein <code>BaseUser</code>). Es handelt sich um einen g\u00fcltigen Typ, solange irgendetwas \u00fcberreicht wird, das ein <code>BaseUser</code> ist.</p>"},{"location":"tutorial/response-model/#readyapi-datenfilterung","title":"ReadyAPI Datenfilterung","text":"<p>ReadyAPI seinerseits wird den R\u00fcckgabetyp sehen und sicherstellen, dass das, was zur\u00fcckgegeben wird, nur diejenigen Felder enth\u00e4lt, welche im Typ deklariert sind.</p> <p>ReadyAPI macht intern mehrere Dinge mit Pydantic, um sicherzustellen, dass obige \u00c4hnlichkeitsregeln der Klassenvererbung nicht auf die Filterung der zur\u00fcckgegebenen Daten angewendet werden, sonst k\u00f6nnten Sie am Ende mehr Daten zur\u00fcckgeben als gewollt.</p> <p>Auf diese Weise erhalten Sie das beste beider Welten: Sowohl Typannotationen mit Tool-Unterst\u00fctzung als auch Datenfilterung.</p>"},{"location":"tutorial/response-model/#anzeige-in-der-dokumentation","title":"Anzeige in der Dokumentation","text":"<p>Wenn Sie sich die automatische Dokumentation betrachten, k\u00f6nnen Sie sehen, dass Eingabe- und Ausgabemodell beide ihr eigenes JSON-Schema haben:</p> <p></p> <p>Und beide Modelle werden auch in der interaktiven API-Dokumentation verwendet:</p> <p></p>"},{"location":"tutorial/response-model/#andere-ruckgabetyp-annotationen","title":"Andere R\u00fcckgabetyp-Annotationen","text":"<p>Es kann F\u00e4lle geben, bei denen Sie etwas zur\u00fcckgeben, das kein g\u00fcltiges Pydantic-Feld ist, und Sie annotieren es in der Funktion nur, um Unterst\u00fctzung von Tools zu erhalten (Editor, mypy, usw.).</p>"},{"location":"tutorial/response-model/#eine-response-direkt-zuruckgeben","title":"Eine Response direkt zur\u00fcckgeben","text":"<p>Der h\u00e4ufigste Anwendungsfall ist, wenn Sie eine Response direkt zur\u00fcckgeben, wie es sp\u00e4ter im Handbuch f\u00fcr fortgeschrittene Benutzer erl\u00e4utert wird.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import JSONResponse, RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n</code></pre> <p>Dieser einfache Anwendungsfall wird automatisch von ReadyAPI gehandhabt, weil die Annotation des R\u00fcckgabetyps die Klasse (oder eine Unterklasse von) <code>Response</code> ist.</p> <p>Und Tools werden auch gl\u00fccklich sein, weil sowohl <code>RedirectResponse</code> als auch <code>JSONResponse</code> Unterklassen von <code>Response</code> sind, die Typannotation ist daher korrekt.</p>"},{"location":"tutorial/response-model/#eine-unterklasse-von-response-annotieren","title":"Eine Unterklasse von Response annotieren","text":"<p>Sie k\u00f6nnen auch eine Unterklasse von <code>Response</code> in der Typannotation verwenden.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -&gt; RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n</code></pre> <p>Das wird ebenfalls funktionieren, weil <code>RedirectResponse</code> eine Unterklasse von <code>Response</code> ist, und ReadyAPI sich um diesen einfachen Anwendungsfall automatisch k\u00fcmmert.</p>"},{"location":"tutorial/response-model/#ungultige-ruckgabetyp-annotationen","title":"Ung\u00fcltige R\u00fcckgabetyp-Annotationen","text":"<p>Aber wenn Sie ein beliebiges anderes Objekt zur\u00fcckgeben, das kein g\u00fcltiger Pydantic-Typ ist (z. B. ein Datenbank-Objekt), und Sie annotieren es so in der Funktion, wird ReadyAPI versuchen, ein Pydantic-Responsemodell von dieser Typannotation zu erstellen, und scheitern.</p> <p>Das gleiche wird passieren, wenn Sie eine Union mehrerer Typen haben, und einer oder mehrere sind nicht g\u00fcltige Pydantic-Typen. Zum Beispiel funktioniert folgendes nicht \ud83d\udca5:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>... das scheitert, da die Typannotation kein Pydantic-Typ ist, und auch keine einzelne <code>Response</code>-Klasse, oder -Unterklasse, es ist eine Union (eines von beiden) von <code>Response</code> und <code>dict</code>.</p>"},{"location":"tutorial/response-model/#responsemodell-deaktivieren","title":"Responsemodell deaktivieren","text":"<p>Beim Beispiel oben fortsetzend, m\u00f6gen Sie vielleicht die standardm\u00e4\u00dfige Datenvalidierung, -Dokumentation, -Filterung, usw., die von ReadyAPI durchgef\u00fchrt wird, nicht haben.</p> <p>Aber Sie m\u00f6chten dennoch den R\u00fcckgabetyp in der Funktion annotieren, um Unterst\u00fctzung von Editoren und Typcheckern (z. B. mypy) zu erhalten.</p> <p>In diesem Fall k\u00f6nnen Sie die Generierung des Responsemodells abschalten, indem Sie <code>response_model=None</code> setzen:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>Das bewirkt, dass ReadyAPI die Generierung des Responsemodells unterl\u00e4sst, und damit k\u00f6nnen Sie jede gew\u00fcnschte R\u00fcckgabetyp-Annotation haben, ohne dass es Ihre ReadyAPI-Anwendung beeinflusst. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#parameter-fur-die-enkodierung-des-responsemodells","title":"Parameter f\u00fcr die Enkodierung des Responsemodells","text":"<p>Ihr Responsemodell k\u00f6nnte Defaultwerte haben, wie:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <ul> <li><code>description: Union[str, None] = None</code> (oder <code>str | None = None</code> in Python 3.10) hat einen Defaultwert <code>None</code>.</li> <li><code>tax: float = 10.5</code> hat einen Defaultwert <code>10.5</code>.</li> <li><code>tags: List[str] = []</code> hat eine leere Liste als Defaultwert: <code>[]</code>.</li> </ul> <p>Aber Sie m\u00f6chten diese vielleicht vom Resultat ausschlie\u00dfen, wenn Sie gar nicht gesetzt wurden.</p> <p>Wenn Sie zum Beispiel Modelle mit vielen optionalen Attributen in einer NoSQL-Datenbank haben, und Sie m\u00f6chten nicht ellenlange JSON-Responses voller Defaultwerte senden.</p>"},{"location":"tutorial/response-model/#den-response_model_exclude_unset-parameter-verwenden","title":"Den <code>response_model_exclude_unset</code>-Parameter verwenden","text":"<p>Sie k\u00f6nnen den Pfadoperation-Dekorator-Parameter <code>response_model_exclude_unset=True</code> setzen:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <p>Die Defaultwerte werden dann nicht in der Response enthalten sein, sondern nur die tats\u00e4chlich gesetzten Werte.</p> <p>Wenn Sie also den Artikel mit der ID <code>foo</code> bei der Pfadoperation anfragen, wird (ohne die Defaultwerte) die Response sein:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 50.2\n}\n</code></pre> <p>Info</p> <p>In Pydantic v1 hie\u00df diese Methode <code>.dict()</code>, in Pydantic v2 wurde sie deprecated (aber immer noch unterst\u00fctzt) und in <code>.model_dump()</code> umbenannt.</p> <p>Die Beispiele hier verwenden <code>.dict()</code> f\u00fcr die Kompatibilit\u00e4t mit Pydantic v1, Sie sollten jedoch stattdessen <code>.model_dump()</code> verwenden, wenn Sie Pydantic v2 verwenden k\u00f6nnen.</p> <p>Info</p> <p>ReadyAPI verwendet <code>.dict()</code> von Pydantic Modellen, mit dessen <code>exclude_unset</code>-Parameter, um das zu erreichen.</p> <p>Info</p> <p>Sie k\u00f6nnen auch:</p> <ul> <li><code>response_model_exclude_defaults=True</code></li> <li><code>response_model_exclude_none=True</code></li> </ul> <p>verwenden, wie in der Pydantic Dokumentation f\u00fcr <code>exclude_defaults</code> und <code>exclude_none</code> beschrieben.</p>"},{"location":"tutorial/response-model/#daten-mit-werten-fur-felder-mit-defaultwerten","title":"Daten mit Werten f\u00fcr Felder mit Defaultwerten","text":"<p>Aber wenn ihre Daten Werte f\u00fcr Modellfelder mit Defaultwerten haben, wie etwa der Artikel mit der ID <code>bar</code>:</p> <pre><code>{\n    \"name\": \"Bar\",\n    \"description\": \"The bartenders\",\n    \"price\": 62,\n    \"tax\": 20.2\n}\n</code></pre> <p>dann werden diese Werte in der Response enthalten sein.</p>"},{"location":"tutorial/response-model/#daten-mit-den-gleichen-werten-wie-die-defaultwerte","title":"Daten mit den gleichen Werten wie die Defaultwerte","text":"<p>Wenn Daten die gleichen Werte haben wie ihre Defaultwerte, wie etwa der Artikel mit der ID <code>baz</code>:</p> <pre><code>{\n    \"name\": \"Baz\",\n    \"description\": None,\n    \"price\": 50.2,\n    \"tax\": 10.5,\n    \"tags\": []\n}\n</code></pre> <p>dann ist ReadyAPI klug genug (tats\u00e4chlich ist Pydantic klug genug) zu erkennen, dass, obwohl <code>description</code>, <code>tax</code>, und <code>tags</code> die gleichen Werte haben wie ihre Defaultwerte, sie explizit gesetzt wurden (statt dass sie von den Defaultwerten genommen wurden).</p> <p>Diese Felder werden also in der JSON-Response enthalten sein.</p> <p>Tipp</p> <p>Beachten Sie, dass Defaultwerte alles M\u00f6gliche sein k\u00f6nnen, nicht nur <code>None</code>.</p> <p>Sie k\u00f6nnen eine Liste (<code>[]</code>), ein <code>float</code> <code>10.5</code>, usw. sein.</p>"},{"location":"tutorial/response-model/#response_model_include-und-response_model_exclude","title":"<code>response_model_include</code> und <code>response_model_exclude</code>","text":"<p>Sie k\u00f6nnen auch die Parameter <code>response_model_include</code> und <code>response_model_exclude</code> im Pfadoperation-Dekorator verwenden.</p> <p>Diese nehmen ein <code>set</code> von <code>str</code>s entgegen, welches Namen von Attributen sind, die eingeschlossen (ohne die Anderen) oder ausgeschlossen (nur die Anderen) werden sollen.</p> <p>Das kann als schnelle Abk\u00fcrzung verwendet werden, wenn Sie nur ein Pydantic-Modell haben und ein paar Daten von der Ausgabe ausschlie\u00dfen wollen.</p> <p>Tipp</p> <p>Es wird dennoch empfohlen, dass Sie die Ideen von oben verwenden, also mehrere Klassen statt dieser Parameter.</p> <p>Der Grund ist, dass das das generierte JSON-Schema in der OpenAPI ihrer Anwendung (und deren Dokumentation) dennoch das komplette Modell abbildet, selbst wenn Sie <code>response_model_include</code> oder <code>response_model_exclude</code> verwenden, um einige Attribute auszuschlie\u00dfen.</p> <p>Das trifft auch auf <code>response_model_by_alias</code> zu, welches \u00e4hnlich funktioniert.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <p>Tipp</p> <p>Die Syntax <code>{\"name\", \"description\"}</code> erzeugt ein <code>set</code> mit diesen zwei Werten.</p> <p>\u00c4quivalent zu <code>set([\"name\", \"description\"])</code>.</p>"},{"location":"tutorial/response-model/#listen-statt-sets-verwenden","title":"<code>list</code>en statt <code>set</code>s verwenden","text":"<p>Wenn Sie vergessen, ein <code>set</code> zu verwenden, und stattdessen eine <code>list</code>e oder ein <code>tuple</code> \u00fcbergeben, wird ReadyAPI die dennoch in ein <code>set</code> konvertieren, und es wird korrekt funktionieren:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/response-model/#zusammenfassung","title":"Zusammenfassung","text":"<p>Verwenden Sie den Parameter <code>response_model</code> im Pfadoperation-Dekorator, um Responsemodelle zu definieren, und besonders, um private Daten herauszufiltern.</p> <p>Verwenden Sie <code>response_model_exclude_unset</code>, um nur explizit gesetzte Werte zur\u00fcckzugeben.</p>"},{"location":"tutorial/response-status-code/","title":"Response-Statuscode","text":"<p>So wie ein Responsemodell, k\u00f6nnen Sie auch einen HTTP-Statuscode f\u00fcr die Response deklarieren, mithilfe des Parameters <code>status_code</code>, und zwar in jeder der Pfadoperationen:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>usw.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Hinweis</p> <p>Beachten Sie, dass <code>status_code</code> ein Parameter der \u201eDekorator\u201c-Methode ist (<code>get</code>, <code>post</code>, usw.). Nicht der Pfadoperation-Funktion, so wie die anderen Parameter und der Body.</p> <p>Dem <code>status_code</code>-Parameter wird eine Zahl mit dem HTTP-Statuscode \u00fcbergeben.</p> <p>Info</p> <p>Alternativ kann <code>status_code</code> auch ein <code>IntEnum</code> erhalten, so wie Pythons <code>http.HTTPStatus</code>.</p> <p>Das wird:</p> <ul> <li>Diesen Statuscode mit der Response zur\u00fccksenden.</li> <li>Ihn als solchen im OpenAPI-Schema dokumentieren (und somit in den Benutzeroberfl\u00e4chen):</li> </ul> <p></p> <p>Hinweis</p> <p>Einige Responsecodes (siehe n\u00e4chster Abschnitt) kennzeichnen, dass die Response keinen Body hat.</p> <p>ReadyAPI versteht das und wird in der OpenAPI-Dokumentation anzeigen, dass es keinen Responsebody gibt.</p>"},{"location":"tutorial/response-status-code/#uber-http-statuscodes","title":"\u00dcber HTTP-Statuscodes","text":"<p>Hinweis</p> <p>Wenn Sie bereits wissen, was HTTP-Statuscodes sind, \u00fcberspringen Sie dieses Kapitel und fahren Sie mit dem n\u00e4chsten fort.</p> <p>In HTTP senden Sie als Teil der Response einen aus drei Ziffern bestehenden numerischen Statuscode.</p> <p>Diese Statuscodes haben einen Namen zugeordnet, um sie besser zu erkennen, aber der wichtige Teil ist die Zahl.</p> <p>Kurz:</p> <ul> <li><code>100</code> und dar\u00fcber stehen f\u00fcr \u201eInformation\u201c. Diese verwenden Sie selten direkt. Responses mit diesen Statuscodes k\u00f6nnen keinen Body haben.</li> <li><code>200</code> und dar\u00fcber stehen f\u00fcr Responses, die \u201eSuccessful\u201c (\u201eErfolgreich\u201c) waren. Diese verwenden Sie am h\u00e4ufigsten.<ul> <li><code>200</code> ist der Default-Statuscode, welcher bedeutet, alles ist \u201eOK\u201c.</li> <li>Ein anderes Beispiel ist <code>201</code>, \u201eCreated\u201c (\u201eErzeugt\u201c). Wird in der Regel verwendet, wenn ein neuer Datensatz in der Datenbank erzeugt wurde.</li> <li>Ein spezieller Fall ist <code>204</code>, \u201eNo Content\u201c (\u201eKein Inhalt\u201c). Diese Response wird verwendet, wenn es keinen Inhalt gibt, der zum Client zur\u00fcckgeschickt wird, diese Response hat also keinen Body.</li> </ul> </li> <li><code>300</code> und dar\u00fcber steht f\u00fcr \u201eRedirection\u201c (\u201eUmleitung\u201c).  Responses mit diesen Statuscodes k\u00f6nnen einen oder keinen Body haben, mit Ausnahme von <code>304</code>, \u201eNot Modified\u201c (\u201eNicht ver\u00e4ndert\u201c), welche keinen haben darf.</li> <li><code>400</code> und dar\u00fcber stehen f\u00fcr \u201eClient error\u201c-Responses (\u201eClient-Fehler\u201c). Auch diese verwenden Sie am h\u00e4ufigsten.<ul> <li>Ein Beispiel ist <code>404</code>, f\u00fcr eine \u201eNot Found\u201c-Response (\u201eNicht gefunden\u201c).</li> <li>F\u00fcr allgemeine Fehler beim Client k\u00f6nnen Sie einfach <code>400</code> verwenden.</li> </ul> </li> <li><code>500</code> und dar\u00fcber stehen f\u00fcr Server-Fehler. Diese verwenden Sie fast nie direkt. Wenn etwas an irgendeiner Stelle in Ihrem Anwendungscode oder im Server schiefl\u00e4uft, wird automatisch einer dieser Fehler-Statuscodes zur\u00fcckgegeben.</li> </ul> <p>Tipp</p> <p>Um mehr \u00fcber Statuscodes zu lernen, und welcher wof\u00fcr verwendet wird, lesen Sie die MDN Dokumentation \u00fcber HTTP-Statuscodes.</p>"},{"location":"tutorial/response-status-code/#abkurzung-um-die-namen-zu-erinnern","title":"Abk\u00fcrzung, um die Namen zu erinnern","text":"<p>Schauen wir uns das vorherige Beispiel noch einmal an:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p><code>201</code> ist der Statuscode f\u00fcr \u201eCreated\u201c (\u201eErzeugt\u201c).</p> <p>Aber Sie m\u00fcssen sich nicht daran erinnern, welcher dieser Codes was bedeutet.</p> <p>Sie k\u00f6nnen die Hilfsvariablen von <code>readyapi.status</code> verwenden.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Diese sind nur eine Annehmlichkeit und enthalten dieselbe Nummer, aber auf diese Weise k\u00f6nnen Sie die Autovervollst\u00e4ndigung Ihres Editors verwenden, um sie zu finden:</p> <p></p> <p>Technische Details</p> <p>Sie k\u00f6nnen auch <code>from starlette import status</code> verwenden.</p> <p>ReadyAPI bietet dieselben <code>starlette.status</code>-Codes auch via <code>readyapi.status</code> an, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Sie kommen aber direkt von Starlette.</p>"},{"location":"tutorial/response-status-code/#den-defaultwert-andern","title":"Den Defaultwert \u00e4ndern","text":"<p>Sp\u00e4ter sehen Sie, im Handbuch f\u00fcr fortgeschrittene Benutzer, wie Sie einen anderen Statuscode zur\u00fcckgeben k\u00f6nnen, als den Default, den Sie hier deklarieren.</p>"},{"location":"tutorial/schema-extra-example/","title":"Beispiel-Request-Daten deklarieren","text":"<p>Sie k\u00f6nnen Beispiele f\u00fcr die Daten deklarieren, die Ihre Anwendung empfangen kann.</p> <p>Hier sind mehrere M\u00f6glichkeiten, das zu tun.</p>"},{"location":"tutorial/schema-extra-example/#zusatzliche-json-schemadaten-in-pydantic-modellen","title":"Zus\u00e4tzliche JSON-Schemadaten in Pydantic-Modellen","text":"<p>Sie k\u00f6nnen <code>examples</code> (\u201eBeispiele\u201c) f\u00fcr ein Pydantic-Modell deklarieren, welche dem generierten JSON-Schema hinzugef\u00fcgt werden.</p> Pydantic v2Pydantic v1 Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Diese zus\u00e4tzlichen Informationen werden unver\u00e4ndert zum f\u00fcr dieses Modell ausgegebenen JSON-Schema hinzugef\u00fcgt und in der API-Dokumentation verwendet.</p> Pydantic v2Pydantic v1 <p>In Pydantic Version 2 w\u00fcrden Sie das Attribut <code>model_config</code> verwenden, das ein <code>dict</code> akzeptiert, wie beschrieben in Pydantic-Dokumentation: Configuration.</p> <p>Sie k\u00f6nnen <code>json_schema_extra</code> setzen, mit einem <code>dict</code>, das alle zus\u00e4tzlichen Daten enth\u00e4lt, die im generierten JSON-Schema angezeigt werden sollen, einschlie\u00dflich <code>examples</code>.</p> <p>In Pydantic Version 1 w\u00fcrden Sie eine interne Klasse <code>Config</code> und <code>schema_extra</code> verwenden, wie beschrieben in Pydantic-Dokumentation: Schema customization.</p> <p>Sie k\u00f6nnen <code>schema_extra</code> setzen, mit einem <code>dict</code>, das alle zus\u00e4tzlichen Daten enth\u00e4lt, die im generierten JSON-Schema angezeigt werden sollen, einschlie\u00dflich <code>examples</code>.</p> <p>Tipp</p> <p>Mit derselben Technik k\u00f6nnen Sie das JSON-Schema erweitern und Ihre eigenen benutzerdefinierten Zusatzinformationen hinzuf\u00fcgen.</p> <p>Sie k\u00f6nnten das beispielsweise verwenden, um Metadaten f\u00fcr eine Frontend-Benutzeroberfl\u00e4che usw. hinzuzuf\u00fcgen.</p> <p>Info</p> <p>OpenAPI 3.1.0 (verwendet seit ReadyAPI 0.99.0) hat Unterst\u00fctzung f\u00fcr <code>examples</code> hinzugef\u00fcgt, was Teil des JSON Schema Standards ist.</p> <p>Zuvor unterst\u00fctzte es nur das Schl\u00fcsselwort <code>example</code> mit einem einzigen Beispiel. Dieses wird weiterhin von OpenAPI 3.1.0 unterst\u00fctzt, ist jedoch deprecated und nicht Teil des JSON Schema Standards. Wir empfehlen Ihnen daher, von <code>example</code> nach <code>examples</code> zu migrieren. \ud83e\udd13</p> <p>Mehr erfahren Sie am Ende dieser Seite.</p>"},{"location":"tutorial/schema-extra-example/#zusatzliche-argumente-fur-field","title":"Zus\u00e4tzliche Argumente f\u00fcr <code>Field</code>","text":"<p>Wenn Sie <code>Field()</code> mit Pydantic-Modellen verwenden, k\u00f6nnen Sie ebenfalls zus\u00e4tzliche <code>examples</code> deklarieren:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#examples-im-json-schema-openapi","title":"<code>examples</code> im JSON-Schema \u2013 OpenAPI","text":"<p>Bei Verwendung von:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>k\u00f6nnen Sie auch eine Gruppe von <code>examples</code> mit zus\u00e4tzlichen Informationen deklarieren, die zu ihren JSON-Schemas innerhalb von OpenAPI hinzugef\u00fcgt werden.</p>"},{"location":"tutorial/schema-extra-example/#body-mit-examples","title":"<code>Body</code> mit <code>examples</code>","text":"<p>Hier \u00fcbergeben wir <code>examples</code>, welches ein einzelnes Beispiel f\u00fcr die in <code>Body()</code> erwarteten Daten enth\u00e4lt:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#beispiel-in-der-dokumentations-benutzeroberflache","title":"Beispiel in der Dokumentations-Benutzeroberfl\u00e4che","text":"<p>Mit jeder der oben genannten Methoden w\u00fcrde es in <code>/docs</code> so aussehen:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#body-mit-mehreren-examples","title":"<code>Body</code> mit mehreren <code>examples</code>","text":"<p>Sie k\u00f6nnen nat\u00fcrlich auch mehrere <code>examples</code> \u00fcbergeben:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Wenn Sie das tun, werden die Beispiele Teil des internen JSON-Schemas f\u00fcr diese Body-Daten.</p> <p>W\u00e4hrend dies geschrieben wird, unterst\u00fctzt Swagger UI, das f\u00fcr die Anzeige der Dokumentations-Benutzeroberfl\u00e4che zust\u00e4ndige Tool, jedoch nicht die Anzeige mehrerer Beispiele f\u00fcr die Daten in JSON Schema. Aber lesen Sie unten f\u00fcr einen Workaround weiter.</p>"},{"location":"tutorial/schema-extra-example/#openapi-spezifische-examples","title":"OpenAPI-spezifische <code>examples</code>","text":"<p>Schon bevor JSON Schema <code>examples</code> unterst\u00fctzte, unterst\u00fctzte OpenAPI ein anderes Feld, das auch <code>examples</code> genannt wurde.</p> <p>Diese OpenAPI-spezifischen <code>examples</code> finden sich in einem anderen Abschnitt der OpenAPI-Spezifikation. Sie sind Details f\u00fcr jede Pfadoperation, nicht f\u00fcr jedes JSON-Schema.</p> <p>Und Swagger UI unterst\u00fctzt dieses spezielle Feld <code>examples</code> schon seit einiger Zeit. Sie k\u00f6nnen es also verwenden, um verschiedene Beispiele in der Benutzeroberfl\u00e4che der Dokumentation anzuzeigen.</p> <p>Das Format dieses OpenAPI-spezifischen Felds <code>examples</code> ist ein <code>dict</code> mit mehreren Beispielen (anstelle einer <code>list</code>e), jedes mit zus\u00e4tzlichen Informationen, die auch zu OpenAPI hinzugef\u00fcgt werden.</p> <p>Dies erfolgt nicht innerhalb jedes in OpenAPI enthaltenen JSON-Schemas, sondern au\u00dferhalb, in der Pfadoperation.</p>"},{"location":"tutorial/schema-extra-example/#verwendung-des-parameters-openapi_examples","title":"Verwendung des Parameters <code>openapi_examples</code>","text":"<p>Sie k\u00f6nnen die OpenAPI-spezifischen <code>examples</code> in ReadyAPI mit dem Parameter <code>openapi_examples</code> deklarieren, f\u00fcr:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>Die Schl\u00fcssel des <code>dict</code> identifizieren jedes Beispiel, und jeder Wert (<code>\"value\"</code>) ist ein weiteres <code>dict</code>.</p> <p>Jedes spezifische Beispiel-<code>dict</code> in den <code>examples</code> kann Folgendes enthalten:</p> <ul> <li><code>summary</code>: Kurze Beschreibung f\u00fcr das Beispiel.</li> <li><code>description</code>: Eine lange Beschreibung, die Markdown-Text enthalten kann.</li> <li><code>value</code>: Dies ist das tats\u00e4chlich angezeigte Beispiel, z. B. ein <code>dict</code>.</li> <li><code>externalValue</code>: Alternative zu <code>value</code>, eine URL, die auf das Beispiel verweist. Allerdings wird dies m\u00f6glicherweise nicht von so vielen Tools unterst\u00fctzt wie <code>value</code>.</li> </ul> <p>Sie k\u00f6nnen es so verwenden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"ReadyAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#openapi-beispiele-in-der-dokumentations-benutzeroberflache","title":"OpenAPI-Beispiele in der Dokumentations-Benutzeroberfl\u00e4che","text":"<p>Wenn <code>openapi_examples</code> zu <code>Body()</code> hinzugef\u00fcgt wird, w\u00fcrde <code>/docs</code> so aussehen:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#technische-details","title":"Technische Details","text":"<p>Tipp</p> <p>Wenn Sie bereits ReadyAPI Version 0.99.0 oder h\u00f6her verwenden, k\u00f6nnen Sie diese Details wahrscheinlich \u00fcberspringen.</p> <p>Sie sind f\u00fcr \u00e4ltere Versionen relevanter, bevor OpenAPI 3.1.0 verf\u00fcgbar war.</p> <p>Sie k\u00f6nnen dies als eine kurze Geschichtsstunde zu OpenAPI und JSON Schema betrachten. \ud83e\udd13</p> <p>Achtung</p> <p>Dies sind sehr technische Details zu den Standards JSON Schema und OpenAPI.</p> <p>Wenn die oben genannten Ideen bereits f\u00fcr Sie funktionieren, reicht das m\u00f6glicherweise aus und Sie ben\u00f6tigen diese Details wahrscheinlich nicht, \u00fcberspringen Sie sie gerne.</p> <p>Vor OpenAPI 3.1.0 verwendete OpenAPI eine \u00e4ltere und modifizierte Version von JSON Schema.</p> <p>JSON Schema hatte keine <code>examples</code>, daher f\u00fcgte OpenAPI seiner eigenen modifizierten Version ein eigenes <code>example</code>-Feld hinzu.</p> <p>OpenAPI f\u00fcgte auch die Felder <code>example</code> und <code>examples</code> zu anderen Teilen der Spezifikation hinzu:</p> <ul> <li><code>Parameter Object</code> (in der Spezifikation), das verwendet wurde von ReadyAPIs:<ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> </ul> </li> <li><code>Request Body Object</code> im Feld <code>content</code> des <code>Media Type Object</code>s (in der Spezifikation), das verwendet wurde von ReadyAPIs:<ul> <li><code>Body()</code></li> <li><code>File()</code></li> <li><code>Form()</code></li> </ul> </li> </ul> <p>Info</p> <p>Dieser alte, OpenAPI-spezifische <code>examples</code>-Parameter hei\u00dft seit ReadyAPI <code>0.103.0</code> jetzt <code>openapi_examples</code>.</p>"},{"location":"tutorial/schema-extra-example/#json-schemas-feld-examples","title":"JSON Schemas Feld <code>examples</code>","text":"<p>Aber dann f\u00fcgte JSON Schema ein <code>examples</code>-Feld zu einer neuen Version der Spezifikation hinzu.</p> <p>Und dann basierte das neue OpenAPI 3.1.0 auf der neuesten Version (JSON Schema 2020-12), die dieses neue Feld <code>examples</code> enthielt.</p> <p>Und jetzt hat dieses neue <code>examples</code>-Feld Vorrang vor dem alten (und benutzerdefinierten) <code>example</code>-Feld, im Singular, das jetzt deprecated ist.</p> <p>Dieses neue <code>examples</code>-Feld in JSON Schema ist nur eine <code>list</code>e von Beispielen, kein Dict mit zus\u00e4tzlichen Metadaten wie an den anderen Stellen in OpenAPI (oben beschrieben).</p> <p>Info</p> <p>Selbst, nachdem OpenAPI 3.1.0 ver\u00f6ffentlicht wurde, mit dieser neuen, einfacheren Integration mit JSON Schema, unterst\u00fctzte Swagger UI, das Tool, das die automatische Dokumentation bereitstellt, eine Zeit lang OpenAPI 3.1.0 nicht (das tut es seit Version 5.0.0 \ud83c\udf89).</p> <p>Aus diesem Grund verwendeten Versionen von ReadyAPI vor 0.99.0 immer noch Versionen von OpenAPI vor 3.1.0.</p>"},{"location":"tutorial/schema-extra-example/#pydantic-und-readyapi-examples","title":"Pydantic- und ReadyAPI-<code>examples</code>","text":"<p>Wenn Sie <code>examples</code> innerhalb eines Pydantic-Modells hinzuf\u00fcgen, indem Sie <code>schema_extra</code> oder <code>Field(examples=[\"something\"])</code> verwenden, wird dieses Beispiel dem JSON-Schema f\u00fcr dieses Pydantic-Modell hinzugef\u00fcgt.</p> <p>Und dieses JSON-Schema des Pydantic-Modells ist in der OpenAPI Ihrer API enthalten und wird dann in der Benutzeroberfl\u00e4che der Dokumentation verwendet.</p> <p>In Versionen von ReadyAPI vor 0.99.0 (0.99.0 und h\u00f6her verwenden das neuere OpenAPI 3.1.0), wenn Sie <code>example</code> oder <code>examples</code> mit einem der anderen Werkzeuge (<code>Query()</code>, <code>Body()</code>, usw.) verwendet haben, wurden diese Beispiele nicht zum JSON-Schema hinzugef\u00fcgt, das diese Daten beschreibt (nicht einmal zur OpenAPI-eigenen Version von JSON Schema), sondern direkt zur Pfadoperation-Deklaration in OpenAPI (au\u00dferhalb der Teile von OpenAPI, die JSON Schema verwenden).</p> <p>Aber jetzt, da ReadyAPI 0.99.0 und h\u00f6her, OpenAPI 3.1.0 verwendet, das JSON Schema 2020-12 verwendet, und Swagger UI 5.0.0 und h\u00f6her, ist alles konsistenter und die Beispiele sind in JSON Schema enthalten.</p>"},{"location":"tutorial/schema-extra-example/#swagger-benutzeroberflache-und-openapi-spezifische-examples","title":"Swagger-Benutzeroberfl\u00e4che und OpenAPI-spezifische <code>examples</code>.","text":"<p>Da die Swagger-Benutzeroberfl\u00e4che derzeit nicht mehrere JSON Schema Beispiele unterst\u00fctzt (Stand: 26.08.2023), hatten Benutzer keine M\u00f6glichkeit, mehrere Beispiele in der Dokumentation anzuzeigen.</p> <p>Um dieses Problem zu l\u00f6sen, hat ReadyAPI <code>0.103.0</code> Unterst\u00fctzung f\u00fcr die Deklaration desselben alten OpenAPI-spezifischen <code>examples</code>-Felds mit dem neuen Parameter <code>openapi_examples</code> hinzugef\u00fcgt. \ud83e\udd13</p>"},{"location":"tutorial/schema-extra-example/#zusammenfassung","title":"Zusammenfassung","text":"<p>Ich habe immer gesagt, dass ich Geschichte nicht so sehr mag ... und jetzt schauen Sie mich an, wie ich \u201eTechnikgeschichte\u201c-Unterricht gebe. \ud83d\ude05</p> <p>Kurz gesagt: Upgraden Sie auf ReadyAPI 0.99.0 oder h\u00f6her, und die Dinge sind viel einfacher, konsistenter und intuitiver, und Sie m\u00fcssen nicht alle diese historischen Details kennen. \ud83d\ude0e</p>"},{"location":"tutorial/static-files/","title":"Statische Dateien","text":"<p>Mit <code>StaticFiles</code> k\u00f6nnen Sie statische Dateien aus einem Verzeichnis automatisch bereitstellen.</p>"},{"location":"tutorial/static-files/#staticfiles-verwenden","title":"<code>StaticFiles</code> verwenden","text":"<ul> <li>Importieren Sie <code>StaticFiles</code>.</li> <li>\u201eMounten\u201c Sie eine <code>StaticFiles()</code>-Instanz in einem bestimmten Pfad.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre> <p>Technische Details</p> <p>Sie k\u00f6nnten auch <code>from starlette.staticfiles import StaticFiles</code> verwenden.</p> <p>ReadyAPI stellt dasselbe <code>starlette.staticfiles</code> auch via <code>readyapi.staticfiles</code> bereit, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Es kommt aber tats\u00e4chlich direkt von Starlette.</p>"},{"location":"tutorial/static-files/#was-ist-mounten","title":"Was ist \u201eMounten\u201c?","text":"<p>\u201eMounten\u201c bedeutet das Hinzuf\u00fcgen einer vollst\u00e4ndigen \u201eunabh\u00e4ngigen\u201c Anwendung an einem bestimmten Pfad, die sich dann um die Handhabung aller Unterpfade k\u00fcmmert.</p> <p>Dies unterscheidet sich von der Verwendung eines <code>APIRouter</code>, da eine gemountete Anwendung v\u00f6llig unabh\u00e4ngig ist. Die OpenAPI und Dokumentation Ihrer Hauptanwendung enthalten nichts von der gemounteten Anwendung, usw.</p> <p>Weitere Informationen hierzu finden Sie im Handbuch f\u00fcr fortgeschrittene Benutzer.</p>"},{"location":"tutorial/static-files/#einzelheiten","title":"Einzelheiten","text":"<p>Das erste <code>\"/static\"</code> bezieht sich auf den Unterpfad, auf dem diese \u201eUnteranwendung\u201c \u201egemountet\u201c wird. Daher wird jeder Pfad, der mit <code>\"/static\"</code> beginnt, von ihr verarbeitet.</p> <p>Das <code>directory=\"static\"</code> bezieht sich auf den Namen des Verzeichnisses, das Ihre statischen Dateien enth\u00e4lt.</p> <p>Das <code>name=\"static\"</code> gibt dieser Unteranwendung einen Namen, der intern von ReadyAPI verwendet werden kann.</p> <p>Alle diese Parameter k\u00f6nnen anders als \"<code>static</code>\" lauten, passen Sie sie an die Bed\u00fcrfnisse und spezifischen Details Ihrer eigenen Anwendung an.</p>"},{"location":"tutorial/static-files/#weitere-informationen","title":"Weitere Informationen","text":"<p>Weitere Details und Optionen finden Sie in der Dokumentation von Starlette zu statischen Dateien.</p>"},{"location":"tutorial/testing/","title":"Testen","text":"<p>Dank Starlette ist das Testen von ReadyAPI-Anwendungen einfach und macht Spa\u00df.</p> <p>Es basiert auf HTTPX, welches wiederum auf der Grundlage von requests konzipiert wurde, es ist also sehr vertraut und intuitiv.</p> <p>Damit k\u00f6nnen Sie pytest direkt mit ReadyAPI verwenden.</p>"},{"location":"tutorial/testing/#verwendung-von-testclient","title":"Verwendung von <code>TestClient</code>","text":"<p>Info</p> <p>Um <code>TestClient</code> zu verwenden, installieren Sie zun\u00e4chst <code>httpx</code>.</p> <p>Z. B. <code>pip install httpx</code>.</p> <p>Importieren Sie <code>TestClient</code>.</p> <p>Erstellen Sie einen <code>TestClient</code>, indem Sie ihm Ihre ReadyAPI-Anwendung \u00fcbergeben.</p> <p>Erstellen Sie Funktionen mit einem Namen, der mit <code>test_</code> beginnt (das sind <code>pytest</code>-Konventionen).</p> <p>Verwenden Sie das <code>TestClient</code>-Objekt auf die gleiche Weise wie <code>httpx</code>.</p> <p>Schreiben Sie einfache <code>assert</code>-Anweisungen mit den Standard-Python-Ausdr\u00fccken, die Sie \u00fcberpr\u00fcfen m\u00fcssen (wiederum, Standard-<code>pytest</code>).</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>Tipp</p> <p>Beachten Sie, dass die Testfunktionen normal <code>def</code> und nicht <code>async def</code> sind.</p> <p>Und die Anrufe an den Client sind ebenfalls normale Anrufe, die nicht <code>await</code> verwenden.</p> <p>Dadurch k\u00f6nnen Sie <code>pytest</code> ohne Komplikationen direkt nutzen.</p> <p>Technische Details</p> <p>Sie k\u00f6nnten auch <code>from starlette.testclient import TestClient</code> verwenden.</p> <p>ReadyAPI stellt denselben <code>starlette.testclient</code> auch via <code>readyapi.testclient</code> bereit, als Annehmlichkeit f\u00fcr Sie, den Entwickler. Es kommt aber tats\u00e4chlich direkt von Starlette.</p> <p>Tipp</p> <p>Wenn Sie in Ihren Tests neben dem Senden von Anfragen an Ihre ReadyAPI-Anwendung auch <code>async</code>-Funktionen aufrufen m\u00f6chten (z. B. asynchrone Datenbankfunktionen), werfen Sie einen Blick auf die Async-Tests im Handbuch f\u00fcr fortgeschrittene Benutzer.</p>"},{"location":"tutorial/testing/#tests-separieren","title":"Tests separieren","text":"<p>In einer echten Anwendung w\u00fcrden Sie Ihre Tests wahrscheinlich in einer anderen Datei haben.</p> <p>Und Ihre ReadyAPI-Anwendung k\u00f6nnte auch aus mehreren Dateien/Modulen, usw. bestehen.</p>"},{"location":"tutorial/testing/#readyapi-anwendungsdatei","title":"ReadyAPI Anwendungsdatei","text":"<p>Nehmen wir an, Sie haben eine Dateistruktur wie in Gr\u00f6\u00dfere Anwendungen beschrieben:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n</code></pre> <p>In der Datei <code>main.py</code> haben Sie Ihre ReadyAPI-Anwendung:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/testing/#testdatei","title":"Testdatei","text":"<p>Dann k\u00f6nnten Sie eine Datei <code>test_main.py</code> mit Ihren Tests haben. Sie k\u00f6nnte sich im selben Python-Package befinden (dasselbe Verzeichnis mit einer <code>__init__.py</code>-Datei):</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Da sich diese Datei im selben Package befindet, k\u00f6nnen Sie relative Importe verwenden, um das Objekt <code>app</code> aus dem <code>main</code>-Modul (<code>main.py</code>) zu importieren:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>... und haben den Code f\u00fcr die Tests wie zuvor.</p>"},{"location":"tutorial/testing/#testen-erweitertes-beispiel","title":"Testen: erweitertes Beispiel","text":"<p>Nun erweitern wir dieses Beispiel und f\u00fcgen weitere Details hinzu, um zu sehen, wie verschiedene Teile getestet werden.</p>"},{"location":"tutorial/testing/#erweiterte-readyapi-anwendungsdatei","title":"Erweiterte ReadyAPI-Anwendungsdatei","text":"<p>Fahren wir mit der gleichen Dateistruktur wie zuvor fort:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Nehmen wir an, dass die Datei <code>main.py</code> mit Ihrer ReadyAPI-Anwendung jetzt einige andere Pfadoperationen hat.</p> <p>Sie verf\u00fcgt \u00fcber eine <code>GET</code>-Operation, die einen Fehler zur\u00fcckgeben k\u00f6nnte.</p> <p>Sie verf\u00fcgt \u00fcber eine <code>POST</code>-Operation, die mehrere Fehler zur\u00fcckgeben k\u00f6nnte.</p> <p>Beide Pfadoperationen erfordern einen <code>X-Token</code>-Header.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ nicht annotiertPython 3.8+ nicht annotiert <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre>"},{"location":"tutorial/testing/#erweiterte-testdatei","title":"Erweiterte Testdatei","text":"<p>Anschlie\u00dfend k\u00f6nnten Sie <code>test_main.py</code> mit den erweiterten Tests aktualisieren:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n</code></pre> <p>Wenn Sie m\u00f6chten, dass der Client Informationen im Request \u00fcbergibt und Sie nicht wissen, wie das geht, k\u00f6nnen Sie suchen (googeln), wie es mit <code>httpx</code> gemacht wird, oder sogar, wie es mit <code>requests</code> gemacht wird, da das Design von HTTPX auf dem Design von Requests basiert.</p> <p>Dann machen Sie in Ihren Tests einfach das gleiche.</p> <p>Z. B.:</p> <ul> <li>Um einen Pfad- oder Query-Parameter zu \u00fcbergeben, f\u00fcgen Sie ihn der URL selbst hinzu.</li> <li>Um einen JSON-Body zu \u00fcbergeben, \u00fcbergeben Sie ein Python-Objekt (z. B. ein <code>dict</code>) an den Parameter <code>json</code>.</li> <li>Wenn Sie Formulardaten anstelle von JSON senden m\u00fcssen, verwenden Sie stattdessen den <code>data</code>-Parameter.</li> <li>Um Header zu \u00fcbergeben, verwenden Sie ein <code>dict</code> im <code>headers</code>-Parameter.</li> <li>F\u00fcr Cookies ein <code>dict</code> im <code>cookies</code>-Parameter.</li> </ul> <p>Weitere Informationen zum \u00dcbergeben von Daten an das Backend (mithilfe von <code>httpx</code> oder dem <code>TestClient</code>) finden Sie in der HTTPX-Dokumentation.</p> <p>Info</p> <p>Beachten Sie, dass der <code>TestClient</code> Daten empf\u00e4ngt, die nach JSON konvertiert werden k\u00f6nnen, keine Pydantic-Modelle.</p> <p>Wenn Sie ein Pydantic-Modell in Ihrem Test haben und dessen Daten w\u00e4hrend des Testens an die Anwendung senden m\u00f6chten, k\u00f6nnen Sie den <code>jsonable_encoder</code> verwenden, der in JSON-kompatibler Encoder beschrieben wird.</p>"},{"location":"tutorial/testing/#tests-ausfuhren","title":"Tests ausf\u00fchren","text":"<p>Danach m\u00fcssen Sie nur noch <code>pytest</code> installieren:</p> <pre><code>$ pip install pytest\n\n---&gt; 100%\n</code></pre> <p>Es erkennt die Dateien und Tests automatisch, f\u00fchrt sie aus und berichtet Ihnen die Ergebnisse.</p> <p>F\u00fchren Sie die Tests aus, mit:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 6 items\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;......                            [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/dependencies/","title":"Abh\u00e4ngigkeiten","text":"<p>ReadyAPI hat ein sehr m\u00e4chtiges, aber intuitives Dependency Injection System.</p> <p>Es ist so konzipiert, sehr einfach zu verwenden zu sein und es jedem Entwickler sehr leicht zu machen, andere Komponenten mit ReadyAPI zu integrieren.</p>"},{"location":"tutorial/dependencies/#was-ist-dependency-injection","title":"Was ist \u201eDependency Injection\u201c","text":"<p>\u201eDependency Injection\u201c bedeutet in der Programmierung, dass es f\u00fcr Ihren Code (in diesem Fall Ihre Pfadoperation-Funktionen) eine M\u00f6glichkeit gibt, Dinge zu deklarieren, die er verwenden m\u00f6chte und die er zum Funktionieren ben\u00f6tigt: \u201eAbh\u00e4ngigkeiten\u201c \u2013 \u201eDependencies\u201c.</p> <p>Das System (in diesem Fall ReadyAPI) k\u00fcmmert sich dann darum, Ihren Code mit den erforderlichen Abh\u00e4ngigkeiten zu versorgen (\u201edie Abh\u00e4ngigkeiten einf\u00fcgen\u201c \u2013 \u201einject the dependencies\u201c).</p> <p>Das ist sehr n\u00fctzlich, wenn Sie:</p> <ul> <li>Eine gemeinsame Logik haben (die gleiche Code-Logik immer und immer wieder).</li> <li>Datenbankverbindungen teilen.</li> <li>Sicherheit, Authentifizierung, Rollenanforderungen, usw. durchsetzen.</li> <li>Und viele andere Dinge ...</li> </ul> <p>All dies, w\u00e4hrend Sie Codeverdoppelung minimieren.</p>"},{"location":"tutorial/dependencies/#erste-schritte","title":"Erste Schritte","text":"<p>Sehen wir uns ein sehr einfaches Beispiel an. Es ist so einfach, dass es vorerst nicht sehr n\u00fctzlich ist.</p> <p>Aber so k\u00f6nnen wir uns besser auf die Funktionsweise des Dependency Injection Systems konzentrieren.</p>"},{"location":"tutorial/dependencies/#erstellen-sie-eine-abhangigkeit-dependable","title":"Erstellen Sie eine Abh\u00e4ngigkeit (\u201eDependable\u201c)","text":"<p>Konzentrieren wir uns zun\u00e4chst auf die Abh\u00e4ngigkeit - die Dependency.</p> <p>Es handelt sich einfach um eine Funktion, die die gleichen Parameter entgegennimmt wie eine Pfadoperation-Funktion:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Das war's schon.</p> <p>Zwei Zeilen.</p> <p>Und sie hat die gleiche Form und Struktur wie alle Ihre Pfadoperation-Funktionen.</p> <p>Sie k\u00f6nnen sie sich als Pfadoperation-Funktion ohne den \u201eDekorator\u201c (ohne <code>@app.get(\"/some-path\")</code>) vorstellen.</p> <p>Und sie kann alles zur\u00fcckgeben, was Sie m\u00f6chten.</p> <p>In diesem Fall erwartet diese Abh\u00e4ngigkeit:</p> <ul> <li>Einen optionalen Query-Parameter <code>q</code>, der ein <code>str</code> ist.</li> <li>Einen optionalen Query-Parameter <code>skip</code>, der ein <code>int</code> ist und standardm\u00e4\u00dfig <code>0</code> ist.</li> <li>Einen optionalen Query-Parameter <code>limit</code>, der ein <code>int</code> ist und standardm\u00e4\u00dfig <code>100</code> ist.</li> </ul> <p>Und dann wird einfach ein <code>dict</code> zur\u00fcckgegeben, welches diese Werte enth\u00e4lt.</p> <p>Info</p> <p>ReadyAPI unterst\u00fctzt (und empfiehlt die Verwendung von) <code>Annotated</code> seit Version 0.95.0.</p> <p>Wenn Sie eine \u00e4ltere Version haben, werden Sie Fehler angezeigt bekommen, wenn Sie versuchen, <code>Annotated</code> zu verwenden.</p> <p>Bitte aktualisieren Sie ReadyAPI daher mindestens zu Version 0.95.1, bevor Sie <code>Annotated</code> verwenden.</p>"},{"location":"tutorial/dependencies/#depends-importieren","title":"<code>Depends</code> importieren","text":"Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre>"},{"location":"tutorial/dependencies/#deklarieren-der-abhangigkeit-im-dependant","title":"Deklarieren der Abh\u00e4ngigkeit im \u201eDependant\u201c","text":"<p>So wie auch <code>Body</code>, <code>Query</code>, usw., verwenden Sie <code>Depends</code> mit den Parametern Ihrer Pfadoperation-Funktion:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Obwohl Sie <code>Depends</code> in den Parametern Ihrer Funktion genauso verwenden wie <code>Body</code>, <code>Query</code>, usw., funktioniert <code>Depends</code> etwas anders.</p> <p>Sie \u00fcbergeben <code>Depends</code> nur einen einzigen Parameter.</p> <p>Dieser Parameter muss so etwas wie eine Funktion sein.</p> <p>Sie rufen diese nicht direkt auf (f\u00fcgen Sie am Ende keine Klammern hinzu), sondern \u00fcbergeben sie einfach als Parameter an <code>Depends()</code>.</p> <p>Und diese Funktion akzeptiert Parameter auf die gleiche Weise wie Pfadoperation-Funktionen.</p> <p>Tipp</p> <p>Im n\u00e4chsten Kapitel erfahren Sie, welche anderen \u201eDinge\u201c, au\u00dfer Funktionen, Sie als Abh\u00e4ngigkeiten verwenden k\u00f6nnen.</p> <p>Immer wenn ein neuer Request eintrifft, k\u00fcmmert sich ReadyAPI darum:</p> <ul> <li>Ihre Abh\u00e4ngigkeitsfunktion (\u201eDependable\u201c) mit den richtigen Parametern aufzurufen.</li> <li>Sich das Ergebnis von dieser Funktion zu holen.</li> <li>Dieses Ergebnis dem Parameter Ihrer Pfadoperation-Funktion zuzuweisen.</li> </ul> <pre><code>graph TB\n\ncommon_parameters([\"common_parameters\"])\nread_items[\"/items/\"]\nread_users[\"/users/\"]\n\ncommon_parameters --&gt; read_items\ncommon_parameters --&gt; read_users</code></pre> <p>Auf diese Weise schreiben Sie gemeinsam genutzten Code nur einmal, und ReadyAPI k\u00fcmmert sich darum, ihn f\u00fcr Ihre Pfadoperationen aufzurufen.</p> <p>Check</p> <p>Beachten Sie, dass Sie keine spezielle Klasse erstellen und diese irgendwo an ReadyAPI \u00fcbergeben m\u00fcssen, um sie zu \u201eregistrieren\u201c oder so \u00e4hnlich.</p> <p>Sie \u00fcbergeben es einfach an <code>Depends</code> und ReadyAPI wei\u00df, wie der Rest erledigt wird.</p>"},{"location":"tutorial/dependencies/#annotated-abhangigkeiten-wiederverwenden","title":"<code>Annotated</code>-Abh\u00e4ngigkeiten wiederverwenden","text":"<p>In den Beispielen oben sehen Sie, dass es ein kleines bisschen Codeverdoppelung gibt.</p> <p>Wenn Sie die Abh\u00e4ngigkeit <code>common_parameters()</code> verwenden, m\u00fcssen Sie den gesamten Parameter mit der Typannotation und <code>Depends()</code> schreiben:</p> <pre><code>commons: Annotated[dict, Depends(common_parameters)]\n</code></pre> <p>Da wir jedoch <code>Annotated</code> verwenden, k\u00f6nnen wir diesen <code>Annotated</code>-Wert in einer Variablen speichern und an mehreren Stellen verwenden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <p>Tipp</p> <p>Das ist schlicht Standard-Python, es wird als \u201eTypalias\u201c bezeichnet und ist eigentlich nicht ReadyAPI-spezifisch.</p> <p>Da ReadyAPI jedoch auf Standard-Python, einschlie\u00dflich <code>Annotated</code>, basiert, k\u00f6nnen Sie diesen Trick in Ihrem Code verwenden. \ud83d\ude0e</p> <p>Die Abh\u00e4ngigkeiten funktionieren weiterhin wie erwartet, und das Beste daran ist, dass die Typinformationen erhalten bleiben, was bedeutet, dass Ihr Editor Ihnen weiterhin automatische Vervollst\u00e4ndigung, Inline-Fehler, usw. bieten kann. Das Gleiche gilt f\u00fcr andere Tools wie <code>mypy</code>.</p> <p>Das ist besonders n\u00fctzlich, wenn Sie es in einer gro\u00dfen Codebasis verwenden, in der Sie in vielen Pfadoperationen immer wieder dieselben Abh\u00e4ngigkeiten verwenden.</p>"},{"location":"tutorial/dependencies/#async-oder-nicht-async","title":"<code>async</code> oder nicht <code>async</code>","text":"<p>Da Abh\u00e4ngigkeiten auch von ReadyAPI aufgerufen werden (so wie Ihre Pfadoperation-Funktionen), gelten beim Definieren Ihrer Funktionen die gleichen Regeln.</p> <p>Sie k\u00f6nnen <code>async def</code> oder einfach <code>def</code> verwenden.</p> <p>Und Sie k\u00f6nnen Abh\u00e4ngigkeiten mit <code>async def</code> innerhalb normaler <code>def</code>-Pfadoperation-Funktionen oder <code>def</code>-Abh\u00e4ngigkeiten innerhalb von <code>async def</code>-Pfadoperation-Funktionen, usw. deklarieren.</p> <p>Es spielt keine Rolle. ReadyAPI wei\u00df, was zu tun ist.</p> <p>Hinweis</p> <p>Wenn Ihnen das nichts sagt, lesen Sie den Async: \u201eIn Eile?\u201c-Abschnitt \u00fcber <code>async</code> und <code>await</code> in der Dokumentation.</p>"},{"location":"tutorial/dependencies/#integriert-in-openapi","title":"Integriert in OpenAPI","text":"<p>Alle Requestdeklarationen, -validierungen und -anforderungen Ihrer Abh\u00e4ngigkeiten (und Unterabh\u00e4ngigkeiten) werden in dasselbe OpenAPI-Schema integriert.</p> <p>Die interaktive Dokumentation enth\u00e4lt also auch alle Informationen aus diesen Abh\u00e4ngigkeiten:</p> <p></p>"},{"location":"tutorial/dependencies/#einfache-verwendung","title":"Einfache Verwendung","text":"<p>N\u00e4her betrachtet, werden Pfadoperation-Funktionen deklariert, um verwendet zu werden, wann immer ein Pfad und eine Operation \u00fcbereinstimmen, und dann k\u00fcmmert sich ReadyAPI darum, die Funktion mit den richtigen Parametern aufzurufen, die Daten aus der Anfrage extrahierend.</p> <p>Tats\u00e4chlich funktionieren alle (oder die meisten) Webframeworks auf die gleiche Weise.</p> <p>Sie rufen diese Funktionen niemals direkt auf. Sie werden von Ihrem Framework aufgerufen (in diesem Fall ReadyAPI).</p> <p>Mit dem Dependency Injection System k\u00f6nnen Sie ReadyAPI ebenfalls mitteilen, dass Ihre Pfadoperation-Funktion von etwas anderem \u201eabh\u00e4ngt\u201c, das vor Ihrer Pfadoperation-Funktion ausgef\u00fchrt werden soll, und ReadyAPI k\u00fcmmert sich darum, es auszuf\u00fchren und die Ergebnisse zu \u201einjizieren\u201c.</p> <p>Andere gebr\u00e4uchliche Begriffe f\u00fcr dieselbe Idee der \u201eAbh\u00e4ngigkeitsinjektion\u201c sind:</p> <ul> <li>Ressourcen</li> <li>Provider</li> <li>Services</li> <li>Injectables</li> <li>Komponenten</li> </ul>"},{"location":"tutorial/dependencies/#readyapi-plugins","title":"ReadyAPI-Plugins","text":"<p>Integrationen und \u201ePlugins\u201c k\u00f6nnen mit dem Dependency Injection System erstellt werden. Aber tats\u00e4chlich besteht keine Notwendigkeit, \u201ePlugins\u201c zu erstellen, da es durch die Verwendung von Abh\u00e4ngigkeiten m\u00f6glich ist, eine unendliche Anzahl von Integrationen und Interaktionen zu deklarieren, die dann f\u00fcr Ihre Pfadoperation-Funktionen verf\u00fcgbar sind.</p> <p>Und Abh\u00e4ngigkeiten k\u00f6nnen auf sehr einfache und intuitive Weise erstellt werden, sodass Sie einfach die ben\u00f6tigten Python-Packages importieren und sie in wenigen Codezeilen, im wahrsten Sinne des Wortes, mit Ihren API-Funktionen integrieren.</p> <p>Beispiele hierf\u00fcr finden Sie in den n\u00e4chsten Kapiteln zu relationalen und NoSQL-Datenbanken, Sicherheit usw.</p>"},{"location":"tutorial/dependencies/#readyapi-kompatibilitat","title":"ReadyAPI-Kompatibilit\u00e4t","text":"<p>Die Einfachheit des Dependency Injection Systems macht ReadyAPI kompatibel mit:</p> <ul> <li>allen relationalen Datenbanken</li> <li>NoSQL-Datenbanken</li> <li>externen Packages</li> <li>externen APIs</li> <li>Authentifizierungs- und Autorisierungssystemen</li> <li>API-Nutzungs-\u00dcberwachungssystemen</li> <li>Responsedaten-Injektionssystemen</li> <li>usw.</li> </ul>"},{"location":"tutorial/dependencies/#einfach-und-leistungsstark","title":"Einfach und leistungsstark","text":"<p>Obwohl das hierarchische Dependency Injection System sehr einfach zu definieren und zu verwenden ist, ist es dennoch sehr m\u00e4chtig.</p> <p>Sie k\u00f6nnen Abh\u00e4ngigkeiten definieren, die selbst wiederum Abh\u00e4ngigkeiten definieren k\u00f6nnen.</p> <p>Am Ende wird ein hierarchischer Baum von Abh\u00e4ngigkeiten erstellt, und das Dependency Injection System k\u00fcmmert sich darum, alle diese Abh\u00e4ngigkeiten (und deren Unterabh\u00e4ngigkeiten) f\u00fcr Sie aufzul\u00f6sen und die Ergebnisse bei jedem Schritt einzubinden (zu injizieren).</p> <p>Nehmen wir zum Beispiel an, Sie haben vier API-Endpunkte (Pfadoperationen):</p> <ul> <li><code>/items/public/</code></li> <li><code>/items/private/</code></li> <li><code>/users/{user_id}/activate</code></li> <li><code>/items/pro/</code></li> </ul> <p>Dann k\u00f6nnten Sie f\u00fcr jeden davon unterschiedliche Berechtigungsanforderungen hinzuf\u00fcgen, nur mit Abh\u00e4ngigkeiten und Unterabh\u00e4ngigkeiten:</p> <pre><code>graph TB\n\ncurrent_user([\"current_user\"])\nactive_user([\"active_user\"])\nadmin_user([\"admin_user\"])\npaying_user([\"paying_user\"])\n\npublic[\"/items/public/\"]\nprivate[\"/items/private/\"]\nactivate_user[\"/users/{user_id}/activate\"]\npro_items[\"/items/pro/\"]\n\ncurrent_user --&gt; active_user\nactive_user --&gt; admin_user\nactive_user --&gt; paying_user\n\ncurrent_user --&gt; public\nactive_user --&gt; private\nadmin_user --&gt; activate_user\npaying_user --&gt; pro_items</code></pre>"},{"location":"tutorial/dependencies/#integriert-mit-openapi","title":"Integriert mit OpenAPI","text":"<p>Alle diese Abh\u00e4ngigkeiten, w\u00e4hrend sie ihre Anforderungen deklarieren, f\u00fcgen auch Parameter, Validierungen, usw. zu Ihren Pfadoperationen hinzu.</p> <p>ReadyAPI k\u00fcmmert sich darum, alles zum OpenAPI-Schema hinzuzuf\u00fcgen, damit es in den interaktiven Dokumentationssystemen angezeigt wird.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/","title":"Klassen als Abh\u00e4ngigkeiten","text":"<p>Bevor wir tiefer in das Dependency Injection System eintauchen, lassen Sie uns das vorherige Beispiel verbessern.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#ein-dict-aus-dem-vorherigen-beispiel","title":"Ein <code>dict</code> aus dem vorherigen Beispiel","text":"<p>Im vorherigen Beispiel haben wir ein <code>dict</code> von unserer Abh\u00e4ngigkeit (\u201eDependable\u201c) zur\u00fcckgegeben:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Aber dann haben wir ein <code>dict</code> im Parameter <code>commons</code> der Pfadoperation-Funktion.</p> <p>Und wir wissen, dass Editoren nicht viel Unterst\u00fctzung (wie etwa Code-Vervollst\u00e4ndigung) f\u00fcr <code>dict</code>s bieten k\u00f6nnen, weil sie ihre Schl\u00fcssel- und Werttypen nicht kennen.</p> <p>Das k\u00f6nnen wir besser machen ...</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#was-macht-eine-abhangigkeit-aus","title":"Was macht eine Abh\u00e4ngigkeit aus","text":"<p>Bisher haben Sie Abh\u00e4ngigkeiten gesehen, die als Funktionen deklariert wurden.</p> <p>Das ist jedoch nicht die einzige M\u00f6glichkeit, Abh\u00e4ngigkeiten zu deklarieren (obwohl es wahrscheinlich die gebr\u00e4uchlichste ist).</p> <p>Der springende Punkt ist, dass eine Abh\u00e4ngigkeit aufrufbar (\u201ecallable\u201c) sein sollte.</p> <p>Ein \u201eCallable\u201c in Python ist etwas, das wie eine Funktion aufgerufen werden kann (\u201eto call\u201c).</p> <p>Wenn Sie also ein Objekt <code>something</code> haben (das m\u00f6glicherweise keine Funktion ist) und Sie es wie folgt aufrufen (ausf\u00fchren) k\u00f6nnen:</p> <pre><code>something()\n</code></pre> <p>oder</p> <pre><code>something(some_argument, some_keyword_argument=\"foo\")\n</code></pre> <p>dann ist das ein \u201eCallable\u201c (ein \u201eAufrufbares\u201c).</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#klassen-als-abhangigkeiten_1","title":"Klassen als Abh\u00e4ngigkeiten","text":"<p>M\u00f6glicherweise stellen Sie fest, dass Sie zum Erstellen einer Instanz einer Python-Klasse die gleiche Syntax verwenden.</p> <p>Zum Beispiel:</p> <pre><code>class Cat:\n    def __init__(self, name: str):\n        self.name = name\n\n\nfluffy = Cat(name=\"Mr Fluffy\")\n</code></pre> <p>In diesem Fall ist <code>fluffy</code> eine Instanz der Klasse <code>Cat</code>.</p> <p>Und um <code>fluffy</code> zu erzeugen, rufen Sie <code>Cat</code> auf.</p> <p>Eine Python-Klasse ist also auch ein Callable.</p> <p>Darum k\u00f6nnen Sie in ReadyAPI auch eine Python-Klasse als Abh\u00e4ngigkeit verwenden.</p> <p>Was ReadyAPI tats\u00e4chlich pr\u00fcft, ist, ob es sich um ein \u201eCallable\u201c (Funktion, Klasse oder irgendetwas anderes) handelt und ob die Parameter definiert sind.</p> <p>Wenn Sie ReadyAPI ein \u201eCallable\u201c als Abh\u00e4ngigkeit \u00fcbergeben, analysiert es die Parameter dieses \u201eCallables\u201c und verarbeitet sie auf die gleiche Weise wie die Parameter einer Pfadoperation-Funktion. Einschlie\u00dflich Unterabh\u00e4ngigkeiten.</p> <p>Das gilt auch f\u00fcr Callables ohne Parameter. So wie es auch f\u00fcr Pfadoperation-Funktionen ohne Parameter gilt.</p> <p>Dann k\u00f6nnen wir das \u201eDependable\u201c <code>common_parameters</code> der Abh\u00e4ngigkeit von oben in die Klasse <code>CommonQueryParams</code> \u00e4ndern:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Achten Sie auf die Methode <code>__init__</code>, die zum Erstellen der Instanz der Klasse verwendet wird:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>... sie hat die gleichen Parameter wie unsere vorherige <code>common_parameters</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Diese Parameter werden von ReadyAPI verwendet, um die Abh\u00e4ngigkeit \u201eaufzul\u00f6sen\u201c.</p> <p>In beiden F\u00e4llen wird sie haben:</p> <ul> <li>Einen optionalen <code>q</code>-Query-Parameter, der ein <code>str</code> ist.</li> <li>Einen <code>skip</code>-Query-Parameter, der ein <code>int</code> ist, mit einem Defaultwert <code>0</code>.</li> <li>Einen <code>limit</code>-Query-Parameter, der ein <code>int</code> ist, mit einem Defaultwert <code>100</code>.</li> </ul> <p>In beiden F\u00e4llen werden die Daten konvertiert, validiert, im OpenAPI-Schema dokumentiert, usw.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#verwendung","title":"Verwendung","text":"<p>Jetzt k\u00f6nnen Sie Ihre Abh\u00e4ngigkeit mithilfe dieser Klasse deklarieren.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>ReadyAPI ruft die Klasse <code>CommonQueryParams</code> auf. Dadurch wird eine \u201eInstanz\u201c dieser Klasse erstellt und die Instanz wird als Parameter <code>commons</code> an Ihre Funktion \u00fcberreicht.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#typannotation-vs-depends","title":"Typannotation vs. <code>Depends</code>","text":"<p>Beachten Sie, wie wir <code>CommonQueryParams</code> im obigen Code zweimal schreiben:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>Das letzte <code>CommonQueryParams</code>, in:</p> <pre><code>... Depends(CommonQueryParams)\n</code></pre> <p>... ist das, was ReadyAPI tats\u00e4chlich verwendet, um die Abh\u00e4ngigkeit zu ermitteln.</p> <p>Aus diesem extrahiert ReadyAPI die deklarierten Parameter, und dieses ist es, was ReadyAPI auch aufruft.</p> <p>In diesem Fall hat das erste <code>CommonQueryParams</code> in:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>commons: Annotated[CommonQueryParams, ...\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons: CommonQueryParams ...\n</code></pre> <p>... keine besondere Bedeutung f\u00fcr ReadyAPI. ReadyAPI verwendet es nicht f\u00fcr die Datenkonvertierung, -validierung, usw. (da es daf\u00fcr <code>Depends(CommonQueryParams)</code> verwendet).</p> <p>Sie k\u00f6nnten tats\u00e4chlich einfach schreiben:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>commons: Annotated[Any, Depends(CommonQueryParams)]\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons = Depends(CommonQueryParams)\n</code></pre> <p>... wie in:</p> Python 3.10+ <pre><code>from typing import Annotated, Any\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Any, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Es wird jedoch empfohlen, den Typ zu deklarieren, da Ihr Editor so wei\u00df, was als Parameter <code>commons</code> \u00fcbergeben wird, und Ihnen dann bei der Codevervollst\u00e4ndigung, Typpr\u00fcfungen, usw. helfen kann:</p> <p></p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#abkurzung","title":"Abk\u00fcrzung","text":"<p>Aber Sie sehen, dass wir hier etwas Codeduplizierung haben, indem wir <code>CommonQueryParams</code> zweimal schreiben:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>ReadyAPI bietet eine Abk\u00fcrzung f\u00fcr diese F\u00e4lle, wo die Abh\u00e4ngigkeit speziell eine Klasse ist, welche ReadyAPI aufruft, um eine Instanz der Klasse selbst zu erstellen.</p> <p>In diesem speziellen Fall k\u00f6nnen Sie Folgendes tun:</p> <p>Anstatt zu schreiben:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>... schreiben Sie:</p> Python 3.8+Python 3.8 nicht annotiert <pre><code>commons: Annotated[CommonQueryParams, Depends()]\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>commons: CommonQueryParams = Depends()\n</code></pre> <p>Sie deklarieren die Abh\u00e4ngigkeit als Typ des Parameters und verwenden <code>Depends()</code> ohne Parameter, anstatt die vollst\u00e4ndige Klasse erneut in <code>Depends(CommonQueryParams)</code> schreiben zu m\u00fcssen.</p> <p>Dasselbe Beispiel w\u00fcrde dann so aussehen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>... und ReadyAPI wird wissen, was zu tun ist.</p> <p>Tipp</p> <p>Wenn Sie das eher verwirrt, als Ihnen zu helfen, ignorieren Sie es, Sie brauchen es nicht.</p> <p>Es ist nur eine Abk\u00fcrzung. Es geht ReadyAPI darum, Ihnen dabei zu helfen, Codeverdoppelung zu minimieren.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","title":"Abh\u00e4ngigkeiten in Pfadoperation-Dekoratoren","text":"<p>Manchmal ben\u00f6tigen Sie den R\u00fcckgabewert einer Abh\u00e4ngigkeit innerhalb Ihrer Pfadoperation-Funktion nicht wirklich.</p> <p>Oder die Abh\u00e4ngigkeit gibt keinen Wert zur\u00fcck.</p> <p>Aber Sie m\u00fcssen Sie trotzdem ausf\u00fchren/aufl\u00f6sen.</p> <p>In diesen F\u00e4llen k\u00f6nnen Sie, anstatt einen Parameter der Pfadoperation-Funktion mit <code>Depends</code> zu deklarieren, eine <code>list</code>e von <code>dependencies</code> zum Pfadoperation-Dekorator hinzuf\u00fcgen.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-zum-pfadoperation-dekorator-hinzufugen","title":"<code>dependencies</code> zum Pfadoperation-Dekorator hinzuf\u00fcgen","text":"<p>Der Pfadoperation-Dekorator erh\u00e4lt ein optionales Argument <code>dependencies</code>.</p> <p>Es sollte eine <code>list</code>e von <code>Depends()</code> sein:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Diese Abh\u00e4ngigkeiten werden auf die gleiche Weise wie normale Abh\u00e4ngigkeiten ausgef\u00fchrt/aufgel\u00f6st. Aber ihr Wert (falls sie einen zur\u00fcckgeben) wird nicht an Ihre Pfadoperation-Funktion \u00fcbergeben.</p> <p>Tipp</p> <p>Einige Editoren pr\u00fcfen, ob Funktionsparameter nicht verwendet werden, und zeigen das als Fehler an.</p> <p>Wenn Sie <code>dependencies</code> im Pfadoperation-Dekorator verwenden, stellen Sie sicher, dass sie ausgef\u00fchrt werden, w\u00e4hrend gleichzeitig Ihr Editor/Ihre Tools keine Fehlermeldungen ausgeben.</p> <p>Damit wird auch vermieden, neue Entwickler m\u00f6glicherweise zu verwirren, die einen nicht verwendeten Parameter in Ihrem Code sehen und ihn f\u00fcr unn\u00f6tig halten k\u00f6nnten.</p> <p>Info</p> <p>In diesem Beispiel verwenden wir zwei erfundene benutzerdefinierte Header <code>X-Key</code> und <code>X-Token</code>.</p> <p>Aber in realen F\u00e4llen w\u00fcrden Sie bei der Implementierung von Sicherheit mehr Vorteile durch die Verwendung der integrierten Sicherheits-Werkzeuge (siehe n\u00e4chstes Kapitel) erzielen.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#abhangigkeitsfehler-und-ruckgabewerte","title":"Abh\u00e4ngigkeitsfehler und -R\u00fcckgabewerte","text":"<p>Sie k\u00f6nnen dieselben Abh\u00e4ngigkeits-Funktionen verwenden, die Sie normalerweise verwenden.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#abhangigkeitsanforderungen","title":"Abh\u00e4ngigkeitsanforderungen","text":"<p>Sie k\u00f6nnen Anforderungen f\u00fcr einen Request (wie Header) oder andere Unterabh\u00e4ngigkeiten deklarieren:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#exceptions-auslosen","title":"Exceptions ausl\u00f6sen","text":"<p>Die Abh\u00e4ngigkeiten k\u00f6nnen Exceptions <code>raise</code>n, genau wie normale Abh\u00e4ngigkeiten:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#ruckgabewerte","title":"R\u00fcckgabewerte","text":"<p>Und sie k\u00f6nnen Werte zur\u00fcckgeben oder nicht, die Werte werden nicht verwendet.</p> <p>Sie k\u00f6nnen also eine normale Abh\u00e4ngigkeit (die einen Wert zur\u00fcckgibt), die Sie bereits an anderer Stelle verwenden, wiederverwenden, und auch wenn der Wert nicht verwendet wird, wird die Abh\u00e4ngigkeit ausgef\u00fchrt:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#abhangigkeiten-fur-eine-gruppe-von-pfadoperationen","title":"Abh\u00e4ngigkeiten f\u00fcr eine Gruppe von Pfadoperationen","text":"<p>Wenn Sie sp\u00e4ter lesen, wie Sie gr\u00f6\u00dfere Anwendungen strukturieren (Gr\u00f6\u00dfere Anwendungen \u2013 Mehrere Dateien), m\u00f6glicherweise mit mehreren Dateien, lernen Sie, wie Sie einen einzelnen <code>dependencies</code>-Parameter f\u00fcr eine Gruppe von Pfadoperationen deklarieren.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#globale-abhangigkeiten","title":"Globale Abh\u00e4ngigkeiten","text":"<p>Als N\u00e4chstes werden wir sehen, wie man Abh\u00e4ngigkeiten zur gesamten <code>ReadyAPI</code>-Anwendung hinzuf\u00fcgt, sodass sie f\u00fcr jede Pfadoperation gelten.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/","title":"Abh\u00e4ngigkeiten mit yield","text":"<p>ReadyAPI unterst\u00fctzt Abh\u00e4ngigkeiten, die nach Abschluss einige zus\u00e4tzliche Schritte ausf\u00fchren.</p> <p>Verwenden Sie dazu <code>yield</code> statt <code>return</code> und schreiben Sie die zus\u00e4tzlichen Schritte / den zus\u00e4tzlichen Code danach.</p> <p>Tipp</p> <p>Stellen Sie sicher, dass Sie <code>yield</code> nur einmal pro Abh\u00e4ngigkeit verwenden.</p> <p>Technische Details</p> <p>Jede Funktion, die dekoriert werden kann mit:</p> <ul> <li><code>@contextlib.contextmanager</code> oder</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>kann auch als g\u00fcltige ReadyAPI-Abh\u00e4ngigkeit verwendet werden.</p> <p>Tats\u00e4chlich verwendet ReadyAPI diese beiden Dekoratoren intern.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#eine-datenbank-abhangigkeit-mit-yield","title":"Eine Datenbank-Abh\u00e4ngigkeit mit <code>yield</code>.","text":"<p>Sie k\u00f6nnten damit beispielsweise eine Datenbanksession erstellen und diese nach Abschluss schlie\u00dfen.</p> <p>Nur der Code vor und einschlie\u00dflich der <code>yield</code>-Anweisung wird ausgef\u00fchrt, bevor eine Response erzeugt wird:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Der ge<code>yield</code>ete Wert ist das, was in Pfadoperationen und andere Abh\u00e4ngigkeiten eingef\u00fcgt wird:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Der auf die <code>yield</code>-Anweisung folgende Code wird ausgef\u00fchrt, nachdem die Response gesendet wurde:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Tipp</p> <p>Sie k\u00f6nnen <code>async</code>hrone oder regul\u00e4re Funktionen verwenden.</p> <p>ReadyAPI wird bei jeder das Richtige tun, so wie auch bei normalen Abh\u00e4ngigkeiten.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#eine-abhangigkeit-mit-yield-und-try","title":"Eine Abh\u00e4ngigkeit mit <code>yield</code> und <code>try</code>.","text":"<p>Wenn Sie einen <code>try</code>-Block in einer Abh\u00e4ngigkeit mit <code>yield</code> verwenden, empfangen Sie alle Exceptions, die bei Verwendung der Abh\u00e4ngigkeit geworfen wurden.</p> <p>Wenn beispielsweise ein Code irgendwann in der Mitte, in einer anderen Abh\u00e4ngigkeit oder in einer Pfadoperation, ein \u201eRollback\u201c einer Datenbanktransaktion oder einen anderen Fehler verursacht, empfangen Sie die resultierende Exception in Ihrer Abh\u00e4ngigkeit.</p> <p>Sie k\u00f6nnen also mit <code>except SomeException</code> diese bestimmte Exception innerhalb der Abh\u00e4ngigkeit handhaben.</p> <p>Auf die gleiche Weise k\u00f6nnen Sie <code>finally</code> verwenden, um sicherzustellen, dass die Exit-Schritte ausgef\u00fchrt werden, unabh\u00e4ngig davon, ob eine Exception geworfen wurde oder nicht.</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-with-yield/#unterabhangigkeiten-mit-yield","title":"Unterabh\u00e4ngigkeiten mit <code>yield</code>.","text":"<p>Sie k\u00f6nnen Unterabh\u00e4ngigkeiten und \u201eB\u00e4ume\u201c von Unterabh\u00e4ngigkeiten beliebiger Gr\u00f6\u00dfe und Form haben, und einige oder alle davon k\u00f6nnen <code>yield</code> verwenden.</p> <p>ReadyAPI stellt sicher, dass der \u201eExit-Code\u201c in jeder Abh\u00e4ngigkeit mit <code>yield</code> in der richtigen Reihenfolge ausgef\u00fchrt wird.</p> <p>Beispielsweise kann <code>dependency_c</code> von <code>dependency_b</code> und <code>dependency_b</code> von <code>dependency_a</code> abh\u00e4ngen:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Und alle k\u00f6nnen <code>yield</code> verwenden.</p> <p>In diesem Fall ben\u00f6tigt <code>dependency_c</code> zum Ausf\u00fchren seines Exit-Codes, dass der Wert von <code>dependency_b</code> (hier <code>dep_b</code> genannt) verf\u00fcgbar ist.</p> <p>Und wiederum ben\u00f6tigt <code>dependency_b</code> den Wert von <code>dependency_a</code> (hier <code>dep_a</code> genannt) f\u00fcr seinen Exit-Code.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Auf die gleiche Weise k\u00f6nnten Sie einige Abh\u00e4ngigkeiten mit <code>yield</code> und einige andere Abh\u00e4ngigkeiten mit <code>return</code> haben, und alle k\u00f6nnen beliebig voneinander abh\u00e4ngen.</p> <p>Und Sie k\u00f6nnten eine einzelne Abh\u00e4ngigkeit haben, die auf mehreren ge<code>yield</code>eten Abh\u00e4ngigkeiten basiert, usw.</p> <p>Sie k\u00f6nnen beliebige Kombinationen von Abh\u00e4ngigkeiten haben.</p> <p>ReadyAPI stellt sicher, dass alles in der richtigen Reihenfolge ausgef\u00fchrt wird.</p> <p>Technische Details</p> <p>Dieses funktioniert dank Pythons Kontextmanager.</p> <p>ReadyAPI verwendet sie intern, um das zu erreichen.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#abhangigkeiten-mit-yield-und-httpexception","title":"Abh\u00e4ngigkeiten mit <code>yield</code> und <code>HTTPException</code>.","text":"<p>Sie haben gesehen, dass Ihre Abh\u00e4ngigkeiten <code>yield</code> verwenden k\u00f6nnen und <code>try</code>-Bl\u00f6cke haben k\u00f6nnen, die Exceptions abfangen.</p> <p>Auf die gleiche Weise k\u00f6nnten Sie im Exit-Code nach dem <code>yield</code> eine <code>HTTPException</code> oder \u00e4hnliches ausl\u00f6sen.</p> <p>Tipp</p> <p>Dies ist eine etwas fortgeschrittene Technik, die Sie in den meisten F\u00e4llen nicht wirklich ben\u00f6tigen, da Sie Exceptions (einschlie\u00dflich <code>HTTPException</code>) innerhalb des restlichen Anwendungscodes ausl\u00f6sen k\u00f6nnen, beispielsweise in der Pfadoperation-Funktion.</p> <p>Aber es ist f\u00fcr Sie da, wenn Sie es brauchen. \ud83e\udd13</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Eine Alternative zum Abfangen von Exceptions (und m\u00f6glicherweise auch zum Ausl\u00f6sen einer weiteren <code>HTTPException</code>) besteht darin, einen benutzerdefinierten Exceptionhandler zu erstellen.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#ausfuhrung-von-abhangigkeiten-mit-yield","title":"Ausf\u00fchrung von Abh\u00e4ngigkeiten mit <code>yield</code>","text":"<p>Die Ausf\u00fchrungsreihenfolge \u00e4hnelt mehr oder weniger dem folgenden Diagramm. Die Zeit verl\u00e4uft von oben nach unten. Und jede Spalte ist einer der interagierenden oder Code-ausf\u00fchrenden Teilnehmer.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exceptionhandler\nparticipant dep as Abh\u00e4ngigkeit mit yield\nparticipant operation as Pfadoperation\nparticipant tasks as Hintergrundtasks\n\n    Note over client,operation: Kann Exceptions ausl\u00f6sen, inklusive HTTPException\n    client -&gt;&gt; dep: Startet den Request\n    Note over dep: F\u00fchrt den Code bis zum yield aus\n    opt L\u00f6st Exception aus\n        dep --&gt;&gt; handler: L\u00f6st Exception aus\n        handler --&gt;&gt; client: HTTP-Error-Response\n    end\n    dep -&gt;&gt; operation: F\u00fchrt Abh\u00e4ngigkeit aus, z. B. DB-Session\n    opt L\u00f6st aus\n        operation --&gt;&gt; dep: L\u00f6st Exception aus (z. B. HTTPException)\n        opt Handhabt\n            dep --&gt;&gt; dep: Kann Exception abfangen, eine neue HTTPException ausl\u00f6sen, andere Exceptions ausl\u00f6sen\n            dep --&gt;&gt; handler: Leitet Exception automatisch weiter\n        end\n        handler --&gt;&gt; client: HTTP-Error-Response\n    end\n    operation -&gt;&gt; client: Sendet Response an Client\n    Note over client,operation: Response wurde gesendet, kann nicht mehr ge\u00e4ndert werden\n    opt Tasks\n        operation --&gt;&gt; tasks: Sendet Hintergrundtasks\n    end\n    opt L\u00f6st andere Exception aus\n        tasks --&gt;&gt; tasks: Handhabt Exception im Hintergrundtask-Code\n    end</code></pre> <p>Info</p> <p>Es wird nur eine Response an den Client gesendet. Es kann eine Error-Response oder die Response der Pfadoperation sein.</p> <p>Nachdem eine dieser Responses gesendet wurde, kann keine weitere Response gesendet werden.</p> <p>Tipp</p> <p>Obiges Diagramm verwendet <code>HTTPException</code>, aber Sie k\u00f6nnen auch jede andere Exception ausl\u00f6sen, die Sie in einer Abh\u00e4ngigkeit mit <code>yield</code> abfangen, oder mit einem benutzerdefinierten Exceptionhandler erstellt haben.</p> <p>Wenn Sie eine Exception ausl\u00f6sen, wird diese mit yield an die Abh\u00e4ngigkeiten \u00fcbergeben, einschlie\u00dflich <code>HTTPException</code>, und dann erneut an die Exceptionhandler. Wenn es f\u00fcr diese Exception keinen Exceptionhandler gibt, wird sie von der internen Default-<code>ServerErrorMiddleware</code> gehandhabt, was einen HTTP-Statuscode 500 zur\u00fcckgibt, um den Client dar\u00fcber zu informieren, dass ein Fehler auf dem Server aufgetreten ist.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#abhangigkeiten-mit-yield-httpexception-und-hintergrundtasks","title":"Abh\u00e4ngigkeiten mit <code>yield</code>, <code>HTTPException</code> und Hintergrundtasks","text":"<p>Achtung</p> <p>Sie ben\u00f6tigen diese technischen Details h\u00f6chstwahrscheinlich nicht, Sie k\u00f6nnen diesen Abschnitt \u00fcberspringen und weiter unten fortfahren.</p> <p>Diese Details sind vor allem dann n\u00fctzlich, wenn Sie eine Version von ReadyAPI vor 0.106.0 verwendet haben und Ressourcen aus Abh\u00e4ngigkeiten mit <code>yield</code> in Hintergrundtasks verwendet haben.</p> <p>Vor ReadyAPI 0.106.0 war das Ausl\u00f6sen von Exceptions nach <code>yield</code> nicht m\u00f6glich, der Exit-Code in Abh\u00e4ngigkeiten mit <code>yield</code> wurde ausgef\u00fchrt, nachdem die Response gesendet wurde, die Exceptionhandler w\u00e4ren also bereits ausgef\u00fchrt worden.</p> <p>Dies wurde haupts\u00e4chlich so konzipiert, damit die gleichen Objekte, die durch Abh\u00e4ngigkeiten ge<code>yield</code>et werden, innerhalb von Hintergrundtasks verwendet werden k\u00f6nnen, da der Exit-Code ausgef\u00fchrt wird, nachdem die Hintergrundtasks abgeschlossen sind.</p> <p>Da dies jedoch bedeuten w\u00fcrde, darauf zu warten, dass die Response durch das Netzwerk reist, w\u00e4hrend eine Ressource unn\u00f6tigerweise in einer Abh\u00e4ngigkeit mit yield gehalten wird (z. B. eine Datenbankverbindung), wurde dies in ReadyAPI 0.106.0 ge\u00e4ndert.</p> <p>Tipp</p> <p>Dar\u00fcber hinaus handelt es sich bei einem Hintergrundtask normalerweise um einen unabh\u00e4ngigen Satz von Logik, der separat behandelt werden sollte, mit eigenen Ressourcen (z. B. einer eigenen Datenbankverbindung).</p> <p>Auf diese Weise erhalten Sie wahrscheinlich saubereren Code.</p> <p>Wenn Sie sich fr\u00fcher auf dieses Verhalten verlassen haben, sollten Sie jetzt die Ressourcen f\u00fcr Hintergrundtasks innerhalb des Hintergrundtasks selbst erstellen und intern nur Daten verwenden, die nicht von den Ressourcen von Abh\u00e4ngigkeiten mit <code>yield</code> abh\u00e4ngen.</p> <p>Anstatt beispielsweise dieselbe Datenbanksitzung zu verwenden, w\u00fcrden Sie eine neue Datenbanksitzung innerhalb des Hintergrundtasks erstellen und die Objekte mithilfe dieser neuen Sitzung aus der Datenbank abrufen. Und anstatt das Objekt aus der Datenbank als Parameter an die Hintergrundtask-Funktion zu \u00fcbergeben, w\u00fcrden Sie die ID dieses Objekts \u00fcbergeben und das Objekt dann innerhalb der Hintergrundtask-Funktion erneut laden.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#kontextmanager","title":"Kontextmanager","text":""},{"location":"tutorial/dependencies/dependencies-with-yield/#was-sind-kontextmanager","title":"Was sind \u201eKontextmanager\u201c","text":"<p>\u201eKontextmanager\u201c (Englisch \u201eContext Manager\u201c) sind bestimmte Python-Objekte, die Sie in einer <code>with</code>-Anweisung verwenden k\u00f6nnen.</p> <p>Beispielsweise k\u00f6nnen Sie <code>with</code> verwenden, um eine Datei auszulesen:</p> <pre><code>with open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n</code></pre> <p>Im Hintergrund erstellt das <code>open(\"./somefile.txt\")</code> ein Objekt, das als \u201eKontextmanager\u201c bezeichnet wird.</p> <p>Dieser stellt sicher dass, wenn der <code>with</code>-Block beendet ist, die Datei geschlossen wird, auch wenn Exceptions geworfen wurden.</p> <p>Wenn Sie eine Abh\u00e4ngigkeit mit <code>yield</code> erstellen, erstellt ReadyAPI daf\u00fcr intern einen Kontextmanager und kombiniert ihn mit einigen anderen zugeh\u00f6rigen Tools.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#kontextmanager-in-abhangigkeiten-mit-yield-verwenden","title":"Kontextmanager in Abh\u00e4ngigkeiten mit <code>yield</code> verwenden","text":"<p>Achtung</p> <p>Dies ist mehr oder weniger eine \u201efortgeschrittene\u201c Idee.</p> <p>Wenn Sie gerade erst mit ReadyAPI beginnen, m\u00f6chten Sie das vielleicht vorerst \u00fcberspringen.</p> <p>In Python k\u00f6nnen Sie Kontextmanager erstellen, indem Sie eine Klasse mit zwei Methoden erzeugen: <code>__enter__()</code> und <code>__exit__()</code>.</p> <p>Sie k\u00f6nnen solche auch innerhalb von ReadyAPI-Abh\u00e4ngigkeiten mit <code>yield</code> verwenden, indem Sie <code>with</code>- oder <code>async with</code>-Anweisungen innerhalb der Abh\u00e4ngigkeits-Funktion verwenden:</p> Python 3.8+ <pre><code>class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n</code></pre> <p>Tipp</p> <p>Andere M\u00f6glichkeiten, einen Kontextmanager zu erstellen, sind:</p> <ul> <li><code>@contextlib.contextmanager</code> oder</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>Verwenden Sie diese, um eine Funktion zu dekorieren, die ein einziges <code>yield</code> hat.</p> <p>Das ist es auch, was ReadyAPI intern f\u00fcr Abh\u00e4ngigkeiten mit <code>yield</code> verwendet.</p> <p>Aber Sie m\u00fcssen die Dekoratoren nicht f\u00fcr ReadyAPI-Abh\u00e4ngigkeiten verwenden (und das sollten Sie auch nicht).</p> <p>ReadyAPI erledigt das intern f\u00fcr Sie.</p>"},{"location":"tutorial/dependencies/global-dependencies/","title":"Globale Abh\u00e4ngigkeiten","text":"<p>Bei einigen Anwendungstypen m\u00f6chten Sie m\u00f6glicherweise Abh\u00e4ngigkeiten zur gesamten Anwendung hinzuf\u00fcgen.</p> <p>\u00c4hnlich wie Sie <code>dependencies</code> zu den Pfadoperation-Dekoratoren hinzuf\u00fcgen k\u00f6nnen, k\u00f6nnen Sie sie auch zur <code>ReadyAPI</code>-Anwendung hinzuf\u00fcgen.</p> <p>In diesem Fall werden sie auf alle Pfadoperationen in der Anwendung angewendet:</p> Python 3.9+ <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Und alle Ideen aus dem Abschnitt \u00fcber das Hinzuf\u00fcgen von <code>dependencies</code> zu den Pfadoperation-Dekoratoren gelten weiterhin, aber in diesem Fall f\u00fcr alle Pfadoperationen in der Anwendung.</p>"},{"location":"tutorial/dependencies/global-dependencies/#abhangigkeiten-fur-gruppen-von-pfadoperationen","title":"Abh\u00e4ngigkeiten f\u00fcr Gruppen von Pfadoperationen","text":"<p>Wenn Sie sp\u00e4ter lesen, wie Sie gr\u00f6\u00dfere Anwendungen strukturieren (Bigger Applications - Multiple Files), m\u00f6glicherweise mit mehreren Dateien, lernen Sie, wie Sie einen einzelnen <code>dependencies</code>-Parameter f\u00fcr eine Gruppe von Pfadoperationen deklarieren.</p>"},{"location":"tutorial/dependencies/sub-dependencies/","title":"Unterabh\u00e4ngigkeiten","text":"<p>Sie k\u00f6nnen Abh\u00e4ngigkeiten erstellen, die Unterabh\u00e4ngigkeiten haben.</p> <p>Diese k\u00f6nnen so tief verschachtelt sein, wie n\u00f6tig.</p> <p>ReadyAPI k\u00fcmmert sich darum, sie aufzul\u00f6sen.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#erste-abhangigkeit-dependable","title":"Erste Abh\u00e4ngigkeit, \u201eDependable\u201c","text":"<p>Sie k\u00f6nnten eine erste Abh\u00e4ngigkeit (\u201eDependable\u201c) wie folgt erstellen:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Diese deklariert einen optionalen Abfrageparameter <code>q</code> vom Typ <code>str</code> und gibt ihn dann einfach zur\u00fcck.</p> <p>Das ist recht einfach (nicht sehr n\u00fctzlich), hilft uns aber dabei, uns auf die Funktionsweise der Unterabh\u00e4ngigkeiten zu konzentrieren.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#zweite-abhangigkeit-dependable-und-dependant","title":"Zweite Abh\u00e4ngigkeit, \u201eDependable\u201c und \u201eDependant\u201c","text":"<p>Dann k\u00f6nnen Sie eine weitere Abh\u00e4ngigkeitsfunktion (ein \u201eDependable\u201c) erstellen, die gleichzeitig eine eigene Abh\u00e4ngigkeit deklariert (also auch ein \u201eDependant\u201c ist):</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Betrachten wir die deklarierten Parameter:</p> <ul> <li>Obwohl diese Funktion selbst eine Abh\u00e4ngigkeit ist (\u201eDependable\u201c, etwas h\u00e4ngt von ihr ab), deklariert sie auch eine andere Abh\u00e4ngigkeit (\u201eDependant\u201c, sie h\u00e4ngt von etwas anderem ab).<ul> <li>Sie h\u00e4ngt von <code>query_extractor</code> ab und weist den von diesem zur\u00fcckgegebenen Wert dem Parameter <code>q</code> zu.</li> </ul> </li> <li>Sie deklariert au\u00dferdem ein optionales <code>last_query</code>-Cookie, ein <code>str</code>.<ul> <li>Wenn der Benutzer keine Query <code>q</code> \u00fcbermittelt hat, verwenden wir die zuletzt \u00fcbermittelte Query, die wir zuvor in einem Cookie gespeichert haben.</li> </ul> </li> </ul>"},{"location":"tutorial/dependencies/sub-dependencies/#die-abhangigkeit-verwenden","title":"Die Abh\u00e4ngigkeit verwenden","text":"<p>Diese Abh\u00e4ngigkeit verwenden wir nun wie folgt:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Info</p> <p>Beachten Sie, dass wir in der Pfadoperation-Funktion nur eine einzige Abh\u00e4ngigkeit deklarieren, den <code>query_or_cookie_extractor</code>.</p> <p>Aber ReadyAPI wird wissen, dass es zuerst <code>query_extractor</code> aufl\u00f6sen muss, um dessen Resultat <code>query_or_cookie_extractor</code> zu \u00fcbergeben, wenn dieses aufgerufen wird.</p> <pre><code>graph TB\n\nquery_extractor([\"query_extractor\"])\nquery_or_cookie_extractor([\"query_or_cookie_extractor\"])\n\nread_query[\"/items/\"]\n\nquery_extractor --&gt; query_or_cookie_extractor --&gt; read_query</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#dieselbe-abhangigkeit-mehrmals-verwenden","title":"Dieselbe Abh\u00e4ngigkeit mehrmals verwenden","text":"<p>Wenn eine Ihrer Abh\u00e4ngigkeiten mehrmals f\u00fcr dieselbe Pfadoperation deklariert wird, beispielsweise wenn mehrere Abh\u00e4ngigkeiten eine gemeinsame Unterabh\u00e4ngigkeit haben, wird ReadyAPI diese Unterabh\u00e4ngigkeit nur einmal pro Request aufrufen.</p> <p>Und es speichert den zur\u00fcckgegebenen Wert in einem \u201eCache\u201c und \u00fcbergibt diesen gecachten Wert an alle \u201eDependanten\u201c, die ihn in diesem spezifischen Request ben\u00f6tigen, anstatt die Abh\u00e4ngigkeit mehrmals f\u00fcr denselben Request aufzurufen.</p> <p>In einem fortgeschrittenen Szenario, bei dem Sie wissen, dass die Abh\u00e4ngigkeit bei jedem Schritt (m\u00f6glicherweise mehrmals) in derselben Anfrage aufgerufen werden muss, anstatt den zwischengespeicherten Wert zu verwenden, k\u00f6nnen Sie den Parameter <code>use_cache=False</code> festlegen, wenn Sie <code>Depends</code> verwenden:</p> Python 3.8+Python 3.8+ nicht annotiert <pre><code>async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n</code></pre> <p>Tipp</p> <p>Bevorzugen Sie die <code>Annotated</code>-Version, falls m\u00f6glich.</p> <pre><code>async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#zusammenfassung","title":"Zusammenfassung","text":"<p>Abgesehen von all den ausgefallenen W\u00f6rtern, die hier verwendet werden, ist das Dependency Injection-System recht simpel.</p> <p>Einfach Funktionen, die genauso aussehen wie Pfadoperation-Funktionen.</p> <p>Dennoch ist es sehr m\u00e4chtig und erm\u00f6glicht Ihnen die Deklaration beliebig tief verschachtelter Abh\u00e4ngigkeits-\u201eGraphen\u201c (B\u00e4ume).</p> <p>Tipp</p> <p>All dies scheint angesichts dieser einfachen Beispiele m\u00f6glicherweise nicht so n\u00fctzlich zu sein.</p> <p>Aber Sie werden in den Kapiteln \u00fcber Sicherheit sehen, wie n\u00fctzlich das ist.</p> <p>Und Sie werden auch sehen, wie viel Code Sie dadurch einsparen.</p>"},{"location":"tutorial/security/","title":"Sicherheit","text":"<p>Es gibt viele Wege, Sicherheit, Authentifizierung und Autorisierung zu handhaben.</p> <p>Und normalerweise ist es ein komplexes und \u201eschwieriges\u201c Thema.</p> <p>In vielen Frameworks und Systemen erfordert allein die Handhabung von Sicherheit und Authentifizierung viel Aufwand und Code (in vielen F\u00e4llen kann er 50 % oder mehr des gesamten geschriebenen Codes ausmachen).</p> <p>ReadyAPI bietet mehrere Tools, die Ihnen helfen, schnell und auf standardisierte Weise mit Sicherheit umzugehen, ohne alle Sicherheits-Spezifikationen studieren und erlernen zu m\u00fcssen.</p> <p>Aber schauen wir uns zun\u00e4chst ein paar kleine Konzepte an.</p>"},{"location":"tutorial/security/#in-eile","title":"In Eile?","text":"<p>Wenn Ihnen diese Begriffe egal sind und Sie einfach jetzt Sicherheit mit Authentifizierung basierend auf Benutzername und Passwort hinzuf\u00fcgen m\u00fcssen, fahren Sie mit den n\u00e4chsten Kapiteln fort.</p>"},{"location":"tutorial/security/#oauth2","title":"OAuth2","text":"<p>OAuth2 ist eine Spezifikation, die verschiedene M\u00f6glichkeiten zur Handhabung von Authentifizierung und Autorisierung definiert.</p> <p>Es handelt sich um eine recht umfangreiche Spezifikation, und sie deckt mehrere komplexe Anwendungsf\u00e4lle ab.</p> <p>Sie umfasst M\u00f6glichkeiten zur Authentifizierung mithilfe eines \u201eDritten\u201c (\u201ethird party\u201c).</p> <p>Das ist es, was alle diese \u201eLogin mit Facebook, Google, Twitter, GitHub\u201c-Systeme unter der Haube verwenden.</p>"},{"location":"tutorial/security/#oauth-1","title":"OAuth 1","text":"<p>Es gab ein OAuth 1, das sich stark von OAuth2 unterscheidet und komplexer ist, da es direkte Spezifikationen enth\u00e4lt, wie die Kommunikation verschl\u00fcsselt wird.</p> <p>Heutzutage ist es nicht sehr popul\u00e4r und wird kaum verwendet.</p> <p>OAuth2 spezifiziert nicht, wie die Kommunikation verschl\u00fcsselt werden soll, sondern erwartet, dass Ihre Anwendung mit HTTPS bereitgestellt wird.</p> <p>Tipp</p> <p>Im Abschnitt \u00fcber Deployment erfahren Sie, wie Sie HTTPS mithilfe von Traefik und Let's Encrypt kostenlos einrichten.</p>"},{"location":"tutorial/security/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect ist eine weitere Spezifikation, die auf OAuth2 basiert.</p> <p>Sie erweitert lediglich OAuth2, indem sie einige Dinge spezifiziert, die in OAuth2 relativ mehrdeutig sind, um zu versuchen, es interoperabler zu machen.</p> <p>Beispielsweise verwendet der Google Login OpenID Connect (welches seinerseits OAuth2 verwendet).</p> <p>Aber der Facebook Login unterst\u00fctzt OpenID Connect nicht. Es hat seine eigene Variante von OAuth2.</p>"},{"location":"tutorial/security/#openid-nicht-openid-connect","title":"OpenID (nicht \u201eOpenID Connect\u201c)","text":"<p>Es gab auch eine \u201eOpenID\u201c-Spezifikation. Sie versuchte das Gleiche zu l\u00f6sen wie OpenID Connect, basierte aber nicht auf OAuth2.</p> <p>Es handelte sich also um ein komplett zus\u00e4tzliches System.</p> <p>Heutzutage ist es nicht sehr popul\u00e4r und wird kaum verwendet.</p>"},{"location":"tutorial/security/#openapi","title":"OpenAPI","text":"<p>OpenAPI (fr\u00fcher bekannt als Swagger) ist die offene Spezifikation zum Erstellen von APIs (jetzt Teil der Linux Foundation).</p> <p>ReadyAPI basiert auf OpenAPI.</p> <p>Das ist es, was erlaubt, mehrere automatische interaktive Dokumentations-Oberfl\u00e4chen, Codegenerierung, usw. zu haben.</p> <p>OpenAPI bietet die M\u00f6glichkeit, mehrere Sicherheits\u201esysteme\u201c zu definieren.</p> <p>Durch deren Verwendung k\u00f6nnen Sie alle diese Standards-basierten Tools nutzen, einschlie\u00dflich dieser interaktiven Dokumentationssysteme.</p> <p>OpenAPI definiert die folgenden Sicherheitsschemas:</p> <ul> <li><code>apiKey</code>: ein anwendungsspezifischer Schl\u00fcssel, der stammen kann von:<ul> <li>Einem Query-Parameter.</li> <li>Einem Header.</li> <li>Einem Cookie.</li> </ul> </li> <li><code>http</code>: Standard-HTTP-Authentifizierungssysteme, einschlie\u00dflich:<ul> <li><code>bearer</code>: ein Header <code>Authorization</code> mit dem Wert <code>Bearer</code> plus einem Token. Dies wird von OAuth2 geerbt.</li> <li>HTTP Basic Authentication.</li> <li>HTTP Digest, usw.</li> </ul> </li> <li><code>oauth2</code>: Alle OAuth2-Methoden zum Umgang mit Sicherheit (genannt \u201eFlows\u201c).<ul> <li>Mehrere dieser Flows eignen sich zum Aufbau eines OAuth 2.0-Authentifizierungsanbieters (wie Google, Facebook, Twitter, GitHub usw.):<ul> <li><code>implicit</code></li> <li><code>clientCredentials</code></li> <li><code>authorizationCode</code></li> </ul> </li> <li>Es gibt jedoch einen bestimmten \u201eFlow\u201c, der perfekt f\u00fcr die direkte Abwicklung der Authentifizierung in derselben Anwendung verwendet werden kann:<ul> <li><code>password</code>: Einige der n\u00e4chsten Kapitel werden Beispiele daf\u00fcr behandeln.</li> </ul> </li> </ul> </li> <li><code>openIdConnect</code>: bietet eine M\u00f6glichkeit, zu definieren, wie OAuth2-Authentifizierungsdaten automatisch ermittelt werden k\u00f6nnen.<ul> <li>Diese automatische Erkennung ist es, die in der OpenID Connect Spezifikation definiert ist.</li> </ul> </li> </ul> <p>Tipp</p> <p>Auch die Integration anderer Authentifizierungs-/Autorisierungsanbieter wie Google, Facebook, Twitter, GitHub, usw. ist m\u00f6glich und relativ einfach.</p> <p>Das komplexeste Problem besteht darin, einen Authentifizierungs-/Autorisierungsanbieter wie solche aufzubauen, aber ReadyAPI reicht Ihnen die Tools, das einfach zu erledigen, w\u00e4hrend Ihnen die schwere Arbeit abgenommen wird.</p>"},{"location":"tutorial/security/#readyapi-tools","title":"ReadyAPI Tools","text":"<p>ReadyAPI stellt f\u00fcr jedes dieser Sicherheitsschemas im Modul <code>readyapi.security</code> verschiedene Tools bereit, die die Verwendung dieser Sicherheitsmechanismen vereinfachen.</p> <p>In den n\u00e4chsten Kapiteln erfahren Sie, wie Sie mit diesen von ReadyAPI bereitgestellten Tools Sicherheit zu Ihrer API hinzuf\u00fcgen.</p> <p>Und Sie werden auch sehen, wie dies automatisch in das interaktive Dokumentationssystem integriert wird.</p>"},{"location":"tutorial/security/first-steps/","title":"Sicherheit \u2013 Erste Schritte","text":"<p>Stellen wir uns vor, dass Sie Ihre Backend-API auf einer Domain haben.</p> <p>Und Sie haben ein Frontend auf einer anderen Domain oder in einem anderen Pfad derselben Domain (oder in einer mobilen Anwendung).</p> <p>Und Sie m\u00f6chten eine M\u00f6glichkeit haben, dass sich das Frontend mithilfe eines Benutzernamens und eines Passworts beim Backend authentisieren kann.</p> <p>Wir k\u00f6nnen OAuth2 verwenden, um das mit ReadyAPI zu erstellen.</p> <p>Aber ersparen wir Ihnen die Zeit, die gesamte lange Spezifikation zu lesen, nur um die kleinen Informationen zu finden, die Sie ben\u00f6tigen.</p> <p>Lassen Sie uns die von ReadyAPI bereitgestellten Tools verwenden, um Sicherheit zu gew\u00e4hrleisten.</p>"},{"location":"tutorial/security/first-steps/#wie-es-aussieht","title":"Wie es aussieht","text":"<p>Lassen Sie uns zun\u00e4chst einfach den Code verwenden und sehen, wie er funktioniert, und dann kommen wir zur\u00fcck, um zu verstehen, was passiert.</p>"},{"location":"tutorial/security/first-steps/#mainpy-erstellen","title":"<code>main.py</code> erstellen","text":"<p>Kopieren Sie das Beispiel in eine Datei <code>main.py</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre>"},{"location":"tutorial/security/first-steps/#ausfuhren","title":"Ausf\u00fchren","text":"<p>Info</p> <p>Um hochgeladene Dateien zu empfangen, installieren Sie zuerst <code>python-multipart</code>.</p> <p>Z. B. <code>pip install python-multipart</code>.</p> <p>Das, weil OAuth2 \u201eFormulardaten\u201c zum Senden von <code>username</code> und <code>password</code> verwendet.</p> <p>F\u00fchren Sie das Beispiel aus mit:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/security/first-steps/#uberprufen","title":"\u00dcberpr\u00fcfen","text":"<p>Gehen Sie zu der interaktiven Dokumentation unter: http://127.0.0.1:8000/docs.</p> <p>Sie werden etwa Folgendes sehen:</p> <p></p> <p>Authorize-Button!</p> <p>Sie haben bereits einen gl\u00e4nzenden, neuen \u201eAuthorize\u201c-Button.</p> <p>Und Ihre Pfadoperation hat in der oberen rechten Ecke ein kleines Schloss, auf das Sie klicken k\u00f6nnen.</p> <p>Und wenn Sie darauf klicken, erhalten Sie ein kleines Anmeldeformular zur Eingabe eines <code>username</code> und <code>password</code> (und anderer optionaler Felder):</p> <p></p> <p>Hinweis</p> <p>Es spielt keine Rolle, was Sie in das Formular eingeben, es wird noch nicht funktionieren. Wir kommen dahin.</p> <p>Dies ist nat\u00fcrlich nicht das Frontend f\u00fcr die Endbenutzer, aber es ist ein gro\u00dfartiges automatisches Tool, um Ihre gesamte API interaktiv zu dokumentieren.</p> <p>Es kann vom Frontend-Team verwendet werden (das auch Sie selbst sein k\u00f6nnen).</p> <p>Es kann von Anwendungen und Systemen Dritter verwendet werden.</p> <p>Und es kann auch von Ihnen selbst verwendet werden, um dieselbe Anwendung zu debuggen, zu pr\u00fcfen und zu testen.</p>"},{"location":"tutorial/security/first-steps/#der-password-flow","title":"Der <code>password</code>-Flow","text":"<p>Lassen Sie uns nun etwas zur\u00fcckgehen und verstehen, was das alles ist.</p> <p>Der <code>password</code>-\u201eFlow\u201c ist eine der in OAuth2 definierten Wege (\u201eFlows\u201c) zur Handhabung von Sicherheit und Authentifizierung.</p> <p>OAuth2 wurde so konzipiert, dass das Backend oder die API unabh\u00e4ngig vom Server sein kann, der den Benutzer authentifiziert.</p> <p>In diesem Fall handhabt jedoch dieselbe ReadyAPI-Anwendung sowohl die API als auch die Authentifizierung.</p> <p>Betrachten wir es also aus dieser vereinfachten Sicht:</p> <ul> <li>Der Benutzer gibt den <code>username</code> und das <code>password</code> im Frontend ein und dr\u00fcckt <code>Enter</code>.</li> <li>Das Frontend (das im Browser des Benutzers l\u00e4uft) sendet diesen <code>username</code> und das <code>password</code> an eine bestimmte URL in unserer API (deklariert mit <code>tokenUrl=\"token\"</code>).</li> <li>Die API \u00fcberpr\u00fcft den <code>username</code> und das <code>password</code> und antwortet mit einem \u201eToken\u201c (wir haben davon noch nichts implementiert).<ul> <li>Ein \u201eToken\u201c ist lediglich ein String mit einem Inhalt, den wir sp\u00e4ter verwenden k\u00f6nnen, um diesen Benutzer zu verifizieren.</li> <li>Normalerweise l\u00e4uft ein Token nach einiger Zeit ab.<ul> <li>Daher muss sich der Benutzer irgendwann sp\u00e4ter erneut anmelden.</li> <li>Und wenn der Token gestohlen wird, ist das Risiko geringer. Es handelt sich nicht um einen dauerhaften Schl\u00fcssel, der (in den meisten F\u00e4llen) f\u00fcr immer funktioniert.</li> </ul> </li> </ul> </li> <li>Das Frontend speichert diesen Token vor\u00fcbergehend irgendwo.</li> <li>Der Benutzer klickt im Frontend, um zu einem anderen Abschnitt der Frontend-Web-Anwendung zu gelangen.</li> <li>Das Frontend muss weitere Daten von der API abrufen.<ul> <li>Es ben\u00f6tigt jedoch eine Authentifizierung f\u00fcr diesen bestimmten Endpunkt.</li> <li>Um sich also bei unserer API zu authentifizieren, sendet es einen Header <code>Authorization</code> mit dem Wert <code>Bearer</code> plus dem Token.</li> <li>Wenn der Token <code>foobar</code> enthielte, w\u00e4re der Inhalt des <code>Authorization</code>-Headers: <code>Bearer foobar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/security/first-steps/#readyapis-oauth2passwordbearer","title":"ReadyAPIs <code>OAuth2PasswordBearer</code>","text":"<p>ReadyAPI bietet mehrere Tools auf unterschiedlichen Abstraktionsebenen zur Implementierung dieser Sicherheitsfunktionen.</p> <p>In diesem Beispiel verwenden wir OAuth2 mit dem Password-Flow und einem Bearer-Token. Wir machen das mit der Klasse <code>OAuth2PasswordBearer</code>.</p> <p>Info</p> <p>Ein \u201eBearer\u201c-Token ist nicht die einzige Option.</p> <p>Aber es ist die beste f\u00fcr unseren Anwendungsfall.</p> <p>Und es ist wahrscheinlich auch f\u00fcr die meisten anderen Anwendungsf\u00e4lle die beste, es sei denn, Sie sind ein OAuth2-Experte und wissen genau, warum es eine andere Option gibt, die Ihren Anforderungen besser entspricht.</p> <p>In dem Fall gibt Ihnen ReadyAPI ebenfalls die Tools, die Sie zum Erstellen brauchen.</p> <p>Wenn wir eine Instanz der Klasse <code>OAuth2PasswordBearer</code> erstellen, \u00fcbergeben wir den Parameter <code>tokenUrl</code>. Dieser Parameter enth\u00e4lt die URL, die der Client (das Frontend, das im Browser des Benutzers ausgef\u00fchrt wird) verwendet, wenn er den <code>username</code> und das <code>password</code> sendet, um einen Token zu erhalten.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Tipp</p> <p>Hier bezieht sich <code>tokenUrl=\"token\"</code> auf eine relative URL <code>token</code>, die wir noch nicht erstellt haben. Da es sich um eine relative URL handelt, entspricht sie <code>./token</code>.</p> <p>Da wir eine relative URL verwenden, w\u00fcrde sich das, wenn sich Ihre API unter <code>https://example.com/</code> befindet, auf <code>https://example.com/token</code> beziehen. Wenn sich Ihre API jedoch unter <code>https://example.com/api/v1/</code> bef\u00e4nde, w\u00fcrde es sich auf <code>https://example.com/api/v1/token</code> beziehen.</p> <p>Die Verwendung einer relativen URL ist wichtig, um sicherzustellen, dass Ihre Anwendung auch in einem fortgeschrittenen Anwendungsfall, wie hinter einem Proxy, weiterhin funktioniert.</p> <p>Dieser Parameter erstellt nicht diesen Endpunkt / diese Pfadoperation, sondern deklariert, dass die URL <code>/token</code> diejenige sein wird, die der Client verwenden soll, um den Token abzurufen. Diese Information wird in OpenAPI und dann in den interaktiven API-Dokumentationssystemen verwendet.</p> <p>Wir werden demn\u00e4chst auch die eigentliche Pfadoperation erstellen.</p> <p>Info</p> <p>Wenn Sie ein sehr strenger \u201ePythonista\u201c sind, missf\u00e4llt Ihnen m\u00f6glicherweise die Schreibweise des Parameternamens <code>tokenUrl</code> anstelle von <code>token_url</code>.</p> <p>Das liegt daran, dass ReadyAPI denselben Namen wie in der OpenAPI-Spezifikation verwendet. Sodass Sie, wenn Sie mehr \u00fcber eines dieser Sicherheitsschemas herausfinden m\u00f6chten, den Namen einfach kopieren und einf\u00fcgen k\u00f6nnen, um weitere Informationen dar\u00fcber zu erhalten.</p> <p>Die Variable <code>oauth2_scheme</code> ist eine Instanz von <code>OAuth2PasswordBearer</code>, aber auch ein \u201eCallable\u201c.</p> <p>Es k\u00f6nnte wie folgt aufgerufen werden:</p> <pre><code>oauth2_scheme(some, parameters)\n</code></pre> <p>Es kann also mit <code>Depends</code> verwendet werden.</p>"},{"location":"tutorial/security/first-steps/#verwendung","title":"Verwendung","text":"<p>Jetzt k\u00f6nnen Sie dieses <code>oauth2_scheme</code> als Abh\u00e4ngigkeit <code>Depends</code> \u00fcbergeben.</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Diese Abh\u00e4ngigkeit stellt einen <code>str</code> bereit, der dem Parameter <code>token</code> der Pfadoperation-Funktion zugewiesen wird.</p> <p>ReadyAPI wei\u00df, dass es diese Abh\u00e4ngigkeit verwenden kann, um ein \u201eSicherheitsschema\u201c im OpenAPI-Schema (und der automatischen API-Dokumentation) zu definieren.</p> <p>Technische Details</p> <p>ReadyAPI wei\u00df, dass es die Klasse <code>OAuth2PasswordBearer</code> (deklariert in einer Abh\u00e4ngigkeit) verwenden kann, um das Sicherheitsschema in OpenAPI zu definieren, da es von <code>readyapi.security.oauth2.OAuth2</code> erbt, das wiederum von <code>readyapi.security.base.SecurityBase</code> erbt.</p> <p>Alle Sicherheits-Werkzeuge, die in OpenAPI integriert sind (und die automatische API-Dokumentation), erben von <code>SecurityBase</code>, so wei\u00df ReadyAPI, wie es sie in OpenAPI integrieren muss.</p>"},{"location":"tutorial/security/first-steps/#was-es-macht","title":"Was es macht","text":"<p>ReadyAPI wird im Request nach diesem <code>Authorization</code>-Header suchen, pr\u00fcfen, ob der Wert <code>Bearer</code> plus ein Token ist, und den Token als <code>str</code> zur\u00fcckgeben.</p> <p>Wenn es keinen <code>Authorization</code>-Header sieht, oder der Wert keinen <code>Bearer</code>-Token hat, antwortet es direkt mit einem 401-Statuscode-Error (<code>UNAUTHORIZED</code>).</p> <p>Sie m\u00fcssen nicht einmal pr\u00fcfen, ob der Token existiert, um einen Fehler zur\u00fcckzugeben. Seien Sie sicher, dass Ihre Funktion, wenn sie ausgef\u00fchrt wird, ein <code>str</code> in diesem Token enth\u00e4lt.</p> <p>Sie k\u00f6nnen das bereits in der interaktiven Dokumentation ausprobieren:</p> <p></p> <p>Wir \u00fcberpr\u00fcfen im Moment noch nicht die G\u00fcltigkeit des Tokens, aber das ist bereits ein Anfang.</p>"},{"location":"tutorial/security/first-steps/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mit nur drei oder vier zus\u00e4tzlichen Zeilen haben Sie also bereits eine primitive Form der Sicherheit.</p>"},{"location":"tutorial/security/get-current-user/","title":"Aktuellen Benutzer abrufen","text":"<p>Im vorherigen Kapitel hat das Sicherheitssystem (das auf dem Dependency Injection System basiert) der Pfadoperation-Funktion einen <code>token</code> vom Typ <code>str</code> \u00fcberreicht:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Aber das ist immer noch nicht so n\u00fctzlich.</p> <p>Lassen wir es uns den aktuellen Benutzer \u00fcberreichen.</p>"},{"location":"tutorial/security/get-current-user/#ein-benutzermodell-erstellen","title":"Ein Benutzermodell erstellen","text":"<p>Erstellen wir zun\u00e4chst ein Pydantic-Benutzermodell.</p> <p>So wie wir Pydantic zum Deklarieren von Bodys verwenden, k\u00f6nnen wir es auch \u00fcberall sonst verwenden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#eine-get_current_user-abhangigkeit-erstellen","title":"Eine <code>get_current_user</code>-Abh\u00e4ngigkeit erstellen","text":"<p>Erstellen wir eine Abh\u00e4ngigkeit <code>get_current_user</code>.</p> <p>Erinnern Sie sich, dass Abh\u00e4ngigkeiten Unterabh\u00e4ngigkeiten haben k\u00f6nnen?</p> <p><code>get_current_user</code> wird seinerseits von <code>oauth2_scheme</code> abh\u00e4ngen, das wir zuvor erstellt haben.</p> <p>So wie wir es zuvor in der Pfadoperation direkt gemacht haben, erh\u00e4lt unsere neue Abh\u00e4ngigkeit <code>get_current_user</code> von der Unterabh\u00e4ngigkeit <code>oauth2_scheme</code> einen <code>token</code> vom Typ <code>str</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#den-benutzer-holen","title":"Den Benutzer holen","text":"<p><code>get_current_user</code> wird eine von uns erstellte (gefakte) Hilfsfunktion verwenden, welche einen Token vom Typ <code>str</code> entgegennimmt und unser Pydantic-<code>User</code>-Modell zur\u00fcckgibt:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#den-aktuellen-benutzer-einfugen","title":"Den aktuellen Benutzer einf\u00fcgen","text":"<p>Und jetzt k\u00f6nnen wir wiederum <code>Depends</code> mit unserem <code>get_current_user</code> in der Pfadoperation verwenden:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Beachten Sie, dass wir als Typ von <code>current_user</code> das Pydantic-Modell <code>User</code> deklarieren.</p> <p>Das wird uns innerhalb der Funktion bei Codevervollst\u00e4ndigung und Typpr\u00fcfungen helfen.</p> <p>Tipp</p> <p>Sie erinnern sich vielleicht, dass Requestbodys ebenfalls mit Pydantic-Modellen deklariert werden.</p> <p>Weil Sie <code>Depends</code> verwenden, wird ReadyAPI hier aber nicht verwirrt.</p> <p>Check</p> <p>Die Art und Weise, wie dieses System von Abh\u00e4ngigkeiten konzipiert ist, erm\u00f6glicht es uns, verschiedene Abh\u00e4ngigkeiten (verschiedene \u201eDependables\u201c) zu haben, die alle ein <code>User</code>-Modell zur\u00fcckgeben.</p> <p>Wir sind nicht darauf beschr\u00e4nkt, nur eine Abh\u00e4ngigkeit zu haben, die diesen Typ von Daten zur\u00fcckgeben kann.</p>"},{"location":"tutorial/security/get-current-user/#andere-modelle","title":"Andere Modelle","text":"<p>Sie k\u00f6nnen jetzt den aktuellen Benutzer direkt in den Pfadoperation-Funktionen abrufen und die Sicherheitsmechanismen auf Dependency Injection Ebene handhaben, mittels <code>Depends</code>.</p> <p>Und Sie k\u00f6nnen alle Modelle und Daten f\u00fcr die Sicherheitsanforderungen verwenden (in diesem Fall ein Pydantic-Modell <code>User</code>).</p> <p>Sie sind jedoch nicht auf die Verwendung von bestimmten Datenmodellen, Klassen, oder Typen beschr\u00e4nkt.</p> <p>M\u00f6chten Sie eine <code>id</code> und eine <code>email</code> und keinen <code>username</code> in Ihrem Modell haben? Kein Problem. Sie k\u00f6nnen dieselben Tools verwenden.</p> <p>M\u00f6chten Sie nur ein <code>str</code> haben? Oder nur ein <code>dict</code>? Oder direkt eine Instanz eines Modells einer Datenbank-Klasse? Es funktioniert alles auf die gleiche Weise.</p> <p>Sie haben eigentlich keine Benutzer, die sich bei Ihrer Anwendung anmelden, sondern Roboter, Bots oder andere Systeme, die nur \u00fcber einen Zugriffstoken verf\u00fcgen? Auch hier funktioniert alles gleich.</p> <p>Verwenden Sie einfach jede Art von Modell, jede Art von Klasse, jede Art von Datenbank, die Sie f\u00fcr Ihre Anwendung ben\u00f6tigen. ReadyAPI deckt das alles mit seinem Dependency Injection System ab.</p>"},{"location":"tutorial/security/get-current-user/#codegroe","title":"Codegr\u00f6\u00dfe","text":"<p>Dieses Beispiel mag ausf\u00fchrlich erscheinen. Bedenken Sie, dass wir Sicherheit, Datenmodelle, Hilfsfunktionen und Pfadoperationen in derselben Datei vermischen.</p> <p>Aber hier ist der entscheidende Punkt.</p> <p>Der Code f\u00fcr Sicherheit und Dependency Injection wird einmal geschrieben.</p> <p>Sie k\u00f6nnen es so komplex gestalten, wie Sie m\u00f6chten. Und dennoch haben Sie es nur einmal geschrieben, an einer einzigen Stelle. Mit all der Flexibilit\u00e4t.</p> <p>Aber Sie k\u00f6nnen Tausende von Endpunkten (Pfadoperationen) haben, die dasselbe Sicherheitssystem verwenden.</p> <p>Und alle (oder beliebige Teile davon) k\u00f6nnen Vorteil ziehen aus der Wiederverwendung dieser und anderer von Ihnen erstellter Abh\u00e4ngigkeiten.</p> <p>Und alle diese Tausenden von Pfadoperationen k\u00f6nnen nur drei Zeilen lang sein:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie k\u00f6nnen jetzt den aktuellen Benutzer direkt in Ihrer Pfadoperation-Funktion abrufen.</p> <p>Wir haben bereits die H\u00e4lfte geschafft.</p> <p>Wir m\u00fcssen jetzt nur noch eine Pfadoperation hinzuf\u00fcgen, mittels der der Benutzer/Client tats\u00e4chlich seinen <code>username</code> und <code>password</code> senden kann.</p> <p>Das kommt als n\u00e4chstes.</p>"},{"location":"tutorial/security/oauth2-jwt/","title":"OAuth2 mit Password (und Hashing), Bearer mit JWT-Tokens","text":"<p>Da wir nun \u00fcber den gesamten Sicherheitsablauf verf\u00fcgen, machen wir die Anwendung tats\u00e4chlich sicher, indem wir JWT-Tokens und sicheres Passwort-Hashing verwenden.</p> <p>Diesen Code k\u00f6nnen Sie tats\u00e4chlich in Ihrer Anwendung verwenden, die Passwort-Hashes in Ihrer Datenbank speichern, usw.</p> <p>Wir bauen auf dem vorherigen Kapitel auf.</p>"},{"location":"tutorial/security/oauth2-jwt/#uber-jwt","title":"\u00dcber JWT","text":"<p>JWT bedeutet \u201eJSON Web Tokens\u201c.</p> <p>Es ist ein Standard, um ein JSON-Objekt in einem langen, kompakten String ohne Leerzeichen zu kodieren. Das sieht so aus:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre> <p>Da er nicht verschl\u00fcsselt ist, kann jeder die Informationen aus dem Inhalt wiederherstellen.</p> <p>Aber er ist signiert. Wenn Sie also einen von Ihnen gesendeten Token zur\u00fcckerhalten, k\u00f6nnen Sie \u00fcberpr\u00fcfen, ob Sie ihn tats\u00e4chlich gesendet haben.</p> <p>Auf diese Weise k\u00f6nnen Sie einen Token mit einer G\u00fcltigkeitsdauer von beispielsweise einer Woche erstellen. Und wenn der Benutzer am n\u00e4chsten Tag mit dem Token zur\u00fcckkommt, wissen Sie, dass der Benutzer immer noch bei Ihrem System angemeldet ist.</p> <p>Nach einer Woche l\u00e4uft der Token ab und der Benutzer wird nicht autorisiert und muss sich erneut anmelden, um einen neuen Token zu erhalten. Und wenn der Benutzer (oder ein Dritter) versuchen w\u00fcrde, den Token zu \u00e4ndern, um das Ablaufdatum zu \u00e4ndern, w\u00fcrden Sie das entdecken, weil die Signaturen nicht \u00fcbereinstimmen w\u00fcrden.</p> <p>Wenn Sie mit JWT-Tokens spielen und sehen m\u00f6chten, wie sie funktionieren, schauen Sie sich https://jwt.io an.</p>"},{"location":"tutorial/security/oauth2-jwt/#python-jose-installieren","title":"<code>python-jose</code> installieren.","text":"<p>Wir m\u00fcssen <code>python-jose</code> installieren, um die JWT-Tokens in Python zu generieren und zu verifizieren:</p> <pre><code>$ pip install \"python-jose[cryptography]\"\n\n---&gt; 100%\n</code></pre> <p>python-jose erfordert zus\u00e4tzlich ein kryptografisches Backend.</p> <p>Hier verwenden wir das empfohlene: pyca/cryptography.</p> <p>Tipp</p> <p>Dieses Tutorial verwendete zuvor PyJWT.</p> <p>Es wurde jedoch aktualisiert, stattdessen python-jose zu verwenden, da dieses alle Funktionen von PyJWT sowie einige Extras bietet, die Sie sp\u00e4ter m\u00f6glicherweise ben\u00f6tigen, wenn Sie Integrationen mit anderen Tools erstellen.</p>"},{"location":"tutorial/security/oauth2-jwt/#passwort-hashing","title":"Passwort-Hashing","text":"<p>\u201eHashing\u201c bedeutet: Konvertieren eines Inhalts (in diesem Fall eines Passworts) in eine Folge von Bytes (ein schlichter String), die wie Kauderwelsch aussieht.</p> <p>Immer wenn Sie genau den gleichen Inhalt (genau das gleiche Passwort) \u00fcbergeben, erhalten Sie genau den gleichen Kauderwelsch.</p> <p>Sie k\u00f6nnen jedoch nicht vom Kauderwelsch zur\u00fcck zum Passwort konvertieren.</p>"},{"location":"tutorial/security/oauth2-jwt/#warum-passwort-hashing-verwenden","title":"Warum Passwort-Hashing verwenden?","text":"<p>Wenn Ihre Datenbank gestohlen wird, hat der Dieb nicht die Klartext-Passw\u00f6rter Ihrer Benutzer, sondern nur die Hashes.</p> <p>Der Dieb kann also nicht versuchen, die gleichen Passw\u00f6rter in einem anderen System zu verwenden (da viele Benutzer \u00fcberall das gleiche Passwort verwenden, w\u00e4re dies gef\u00e4hrlich).</p>"},{"location":"tutorial/security/oauth2-jwt/#passlib-installieren","title":"<code>passlib</code> installieren","text":"<p>PassLib ist ein gro\u00dfartiges Python-Package, um Passwort-Hashes zu handhaben.</p> <p>Es unterst\u00fctzt viele sichere Hashing-Algorithmen und Werkzeuge, um mit diesen zu arbeiten.</p> <p>Der empfohlene Algorithmus ist \u201eBcrypt\u201c.</p> <p>Installieren Sie also PassLib mit Bcrypt:</p> <pre><code>$ pip install \"passlib[bcrypt]\"\n\n---&gt; 100%\n</code></pre> <p>Tipp</p> <p>Mit <code>passlib</code> k\u00f6nnen Sie sogar konfigurieren, Passw\u00f6rter zu lesen, die von Django, einem Flask-Sicherheit-Plugin, oder vielen anderen erstellt wurden.</p> <p>So k\u00f6nnten Sie beispielsweise die gleichen Daten aus einer Django-Anwendung in einer Datenbank mit einer ReadyAPI-Anwendung teilen. Oder schrittweise eine Django-Anwendung migrieren, w\u00e4hrend Sie dieselbe Datenbank verwenden.</p> <p>Und Ihre Benutzer k\u00f6nnten sich gleichzeitig \u00fcber Ihre Django-Anwendung oder Ihre ReadyAPI-Anwendung anmelden.</p>"},{"location":"tutorial/security/oauth2-jwt/#die-passworter-hashen-und-uberprufen","title":"Die Passw\u00f6rter hashen und \u00fcberpr\u00fcfen","text":"<p>Importieren Sie die ben\u00f6tigten Tools aus <code>passlib</code>.</p> <p>Erstellen Sie einen PassLib-\u201eKontext\u201c. Der wird f\u00fcr das Hashen und Verifizieren von Passw\u00f6rtern verwendet.</p> <p>Tipp</p> <p>Der PassLib-Kontext kann auch andere Hashing-Algorithmen verwenden, einschlie\u00dflich deprecateter Alter, um etwa nur eine Verifizierung usw. zu erm\u00f6glichen.</p> <p>Sie k\u00f6nnten ihn beispielsweise verwenden, um von einem anderen System (wie Django) generierte Passw\u00f6rter zu lesen und zu verifizieren, aber alle neuen Passw\u00f6rter mit einem anderen Algorithmus wie Bcrypt zu hashen.</p> <p>Und mit allen gleichzeitig kompatibel sein.</p> <p>Erstellen Sie eine Hilfsfunktion, um ein vom Benutzer stammendes Passwort zu hashen.</p> <p>Und eine weitere, um zu \u00fcberpr\u00fcfen, ob ein empfangenes Passwort mit dem gespeicherten Hash \u00fcbereinstimmt.</p> <p>Und noch eine, um einen Benutzer zu authentifizieren und zur\u00fcckzugeben.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Hinweis</p> <p>Wenn Sie sich die neue (gefakte) Datenbank <code>fake_users_db</code> anschauen, sehen Sie, wie das gehashte Passwort jetzt aussieht: <code>\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#jwt-token-verarbeiten","title":"JWT-Token verarbeiten","text":"<p>Importieren Sie die installierten Module.</p> <p>Erstellen Sie einen zuf\u00e4lligen geheimen Schl\u00fcssel, der zum Signieren der JWT-Tokens verwendet wird.</p> <p>Um einen sicheren zuf\u00e4lligen geheimen Schl\u00fcssel zu generieren, verwenden Sie den folgenden Befehl:</p> <pre><code>$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n</code></pre> <p>Und kopieren Sie die Ausgabe in die Variable <code>SECRET_KEY</code> (verwenden Sie nicht die im Beispiel).</p> <p>Erstellen Sie eine Variable <code>ALGORITHM</code> f\u00fcr den Algorithmus, der zum Signieren des JWT-Tokens verwendet wird, und setzen Sie sie auf <code>\"HS256\"</code>.</p> <p>Erstellen Sie eine Variable f\u00fcr das Ablaufdatum des Tokens.</p> <p>Definieren Sie ein Pydantic-Modell, das im Token-Endpunkt f\u00fcr die Response verwendet wird.</p> <p>Erstellen Sie eine Hilfsfunktion, um einen neuen Zugriffstoken zu generieren.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#die-abhangigkeiten-aktualisieren","title":"Die Abh\u00e4ngigkeiten aktualisieren","text":"<p>Aktualisieren Sie <code>get_current_user</code>, um den gleichen Token wie zuvor zu erhalten, dieses Mal jedoch unter Verwendung von JWT-Tokens.</p> <p>Dekodieren Sie den empfangenen Token, validieren Sie ihn und geben Sie den aktuellen Benutzer zur\u00fcck.</p> <p>Wenn der Token ung\u00fcltig ist, geben Sie sofort einen HTTP-Fehler zur\u00fcck.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#die-pfadoperation-token-aktualisieren","title":"Die Pfadoperation <code>/token</code> aktualisieren","text":"<p>Erstellen Sie ein <code>timedelta</code> mit der Ablaufzeit des Tokens.</p> <p>Erstellen Sie einen echten JWT-Zugriffstoken und geben Sie ihn zur\u00fcck.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#technische-details-zum-jwt-subjekt-sub","title":"Technische Details zum JWT-\u201eSubjekt\u201c <code>sub</code>","text":"<p>Die JWT-Spezifikation besagt, dass es einen Schl\u00fcssel <code>sub</code> mit dem Subjekt des Tokens gibt.</p> <p>Die Verwendung ist optional, aber dort w\u00fcrden Sie die Identifikation des Benutzers speichern, daher verwenden wir das hier.</p> <p>JWT kann auch f\u00fcr andere Dinge verwendet werden, abgesehen davon, einen Benutzer zu identifizieren und ihm zu erlauben, Operationen direkt auf Ihrer API auszuf\u00fchren.</p> <p>Sie k\u00f6nnten beispielsweise ein \u201eAuto\u201c oder einen \u201eBlog-Beitrag\u201c identifizieren.</p> <p>Anschlie\u00dfend k\u00f6nnten Sie Berechtigungen f\u00fcr diese Entit\u00e4t hinzuf\u00fcgen, etwa \u201eFahren\u201c (f\u00fcr das Auto) oder \u201eBearbeiten\u201c (f\u00fcr den Blog).</p> <p>Und dann k\u00f6nnten Sie diesen JWT-Token einem Benutzer (oder Bot) geben und dieser k\u00f6nnte ihn verwenden, um diese Aktionen auszuf\u00fchren (das Auto fahren oder den Blog-Beitrag bearbeiten), ohne dass er \u00fcberhaupt ein Konto haben m\u00fcsste, einfach mit dem JWT-Token, den Ihre API daf\u00fcr generiert hat.</p> <p>Mit diesen Ideen kann JWT f\u00fcr weitaus anspruchsvollere Szenarien verwendet werden.</p> <p>In diesen F\u00e4llen k\u00f6nnten mehrere dieser Entit\u00e4ten die gleiche ID haben, sagen wir <code>foo</code> (ein Benutzer <code>foo</code>, ein Auto <code>foo</code> und ein Blog-Beitrag <code>foo</code>).</p> <p>Deshalb, um ID-Kollisionen zu vermeiden, k\u00f6nnten Sie beim Erstellen des JWT-Tokens f\u00fcr den Benutzer, dem Wert des <code>sub</code>-Schl\u00fcssels ein Pr\u00e4fix, z. B. <code>username:</code> voranstellen. In diesem Beispiel h\u00e4tte der Wert von <code>sub</code> also auch <code>username:johndoe</code> sein k\u00f6nnen.</p> <p>Der wesentliche Punkt ist, dass der <code>sub</code>-Schl\u00fcssel in der gesamten Anwendung eine eindeutige Kennung haben sollte, und er sollte ein String sein.</p>"},{"location":"tutorial/security/oauth2-jwt/#es-testen","title":"Es testen","text":"<p>F\u00fchren Sie den Server aus und gehen Sie zur Dokumentation: http://127.0.0.1:8000/docs.</p> <p>Die Benutzeroberfl\u00e4che sieht wie folgt aus:</p> <p></p> <p>Melden Sie sich bei der Anwendung auf die gleiche Weise wie zuvor an.</p> <p>Verwenden Sie die Anmeldeinformationen:</p> <p>Benutzername: <code>johndoe</code> Passwort: <code>secret</code>.</p> <p>Check</p> <p>Beachten Sie, dass im Code nirgendwo das Klartext-Passwort \"<code>secret</code>\" steht, wir haben nur die gehashte Version.</p> <p></p> <p>Rufen Sie den Endpunkt <code>/users/me/</code> auf, Sie erhalten die Response:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false\n}\n</code></pre> <p></p> <p>Wenn Sie die Developer Tools \u00f6ffnen, k\u00f6nnen Sie sehen, dass die gesendeten Daten nur den Token enthalten. Das Passwort wird nur bei der ersten Anfrage gesendet, um den Benutzer zu authentisieren und diesen Zugriffstoken zu erhalten, aber nicht mehr danach:</p> <p></p> <p>Hinweis</p> <p>Beachten Sie den Header <code>Authorization</code> mit einem Wert, der mit <code>Bearer</code> beginnt.</p>"},{"location":"tutorial/security/oauth2-jwt/#fortgeschrittene-verwendung-mit-scopes","title":"Fortgeschrittene Verwendung mit <code>scopes</code>","text":"<p>OAuth2 hat ein Konzept von \u201eScopes\u201c.</p> <p>Sie k\u00f6nnen diese verwenden, um einem JWT-Token einen bestimmten Satz von Berechtigungen zu \u00fcbergeben.</p> <p>Anschlie\u00dfend k\u00f6nnen Sie diesen Token einem Benutzer direkt oder einem Dritten geben, damit diese mit einer Reihe von Einschr\u00e4nkungen mit Ihrer API interagieren k\u00f6nnen.</p> <p>Wie Sie sie verwenden und wie sie in ReadyAPI integriert sind, erfahren Sie sp\u00e4ter im Handbuch f\u00fcr fortgeschrittene Benutzer.</p>"},{"location":"tutorial/security/oauth2-jwt/#zusammenfassung","title":"Zusammenfassung","text":"<p>Mit dem, was Sie bis hier gesehen haben, k\u00f6nnen Sie eine sichere ReadyAPI-Anwendung mithilfe von Standards wie OAuth2 und JWT einrichten.</p> <p>In fast jedem Framework wird die Handhabung der Sicherheit recht schnell zu einem ziemlich komplexen Thema.</p> <p>Viele Packages, die es stark vereinfachen, m\u00fcssen viele Kompromisse beim Datenmodell, der Datenbank und den verf\u00fcgbaren Funktionen eingehen. Und einige dieser Pakete, die die Dinge zu sehr vereinfachen, weisen tats\u00e4chlich Sicherheitsl\u00fccken auf.</p> <p>ReadyAPI geht bei keiner Datenbank, keinem Datenmodell oder Tool Kompromisse ein.</p> <p>Es gibt Ihnen die volle Flexibilit\u00e4t, diejenigen auszuw\u00e4hlen, die am besten zu Ihrem Projekt passen.</p> <p>Und Sie k\u00f6nnen viele gut gepflegte und weit verbreitete Packages wie <code>passlib</code> und <code>python-jose</code> direkt verwenden, da ReadyAPI keine komplexen Mechanismen zur Integration externer Pakete erfordert.</p> <p>Aber es bietet Ihnen die Werkzeuge, um den Prozess so weit wie m\u00f6glich zu vereinfachen, ohne Kompromisse bei Flexibilit\u00e4t, Robustheit oder Sicherheit einzugehen.</p> <p>Und Sie k\u00f6nnen sichere Standardprotokolle wie OAuth2 auf relativ einfache Weise verwenden und implementieren.</p> <p>Im Handbuch f\u00fcr fortgeschrittene Benutzer erfahren Sie mehr dar\u00fcber, wie Sie OAuth2-\u201eScopes\u201c f\u00fcr ein feingranuliertes Berechtigungssystem verwenden, das denselben Standards folgt. OAuth2 mit Scopes ist der Mechanismus, der von vielen gro\u00dfen Authentifizierungsanbietern wie Facebook, Google, GitHub, Microsoft, Twitter, usw. verwendet wird, um Drittanbieteranwendungen zu autorisieren, im Namen ihrer Benutzer mit ihren APIs zu interagieren.</p>"},{"location":"tutorial/security/simple-oauth2/","title":"Einfaches OAuth2 mit Password und Bearer","text":"<p>Lassen Sie uns nun auf dem vorherigen Kapitel aufbauen und die fehlenden Teile hinzuf\u00fcgen, um einen vollst\u00e4ndigen Sicherheits-Flow zu erhalten.</p>"},{"location":"tutorial/security/simple-oauth2/#username-und-password-entgegennehmen","title":"<code>username</code> und <code>password</code> entgegennehmen","text":"<p>Wir werden ReadyAPIs Sicherheits-Werkzeuge verwenden, um den <code>username</code> und das <code>password</code> entgegenzunehmen.</p> <p>OAuth2 spezifiziert, dass der Client/Benutzer bei Verwendung des \u201ePassword Flow\u201c (den wir verwenden) die Felder <code>username</code> und <code>password</code> als Formulardaten senden muss.</p> <p>Und die Spezifikation sagt, dass die Felder so benannt werden m\u00fcssen. <code>user-name</code> oder <code>email</code> w\u00fcrde also nicht funktionieren.</p> <p>Aber keine Sorge, Sie k\u00f6nnen sie Ihren Endbenutzern im Frontend so anzeigen, wie Sie m\u00f6chten.</p> <p>Und Ihre Datenbankmodelle k\u00f6nnen beliebige andere Namen verwenden.</p> <p>Aber f\u00fcr die Login-Pfadoperation m\u00fcssen wir diese Namen verwenden, um mit der Spezifikation kompatibel zu sein (und beispielsweise das integrierte API-Dokumentationssystem verwenden zu k\u00f6nnen).</p> <p>Die Spezifikation besagt auch, dass <code>username</code> und <code>password</code> als Formulardaten gesendet werden m\u00fcssen (hier also kein JSON).</p>"},{"location":"tutorial/security/simple-oauth2/#scope","title":"<code>scope</code>","text":"<p>Ferner sagt die Spezifikation, dass der Client ein weiteres Formularfeld \"<code>scope</code>\" (\u201eGeltungsbereich\u201c) senden kann.</p> <p>Der Name des Formularfelds lautet <code>scope</code> (im Singular), tats\u00e4chlich handelt es sich jedoch um einen langen String mit durch Leerzeichen getrennten \u201eScopes\u201c.</p> <p>Jeder \u201eScope\u201c ist nur ein String (ohne Leerzeichen).</p> <p>Diese werden normalerweise verwendet, um bestimmte Sicherheitsberechtigungen zu deklarieren, zum Beispiel:</p> <ul> <li><code>users:read</code> oder <code>users:write</code> sind g\u00e4ngige Beispiele.</li> <li><code>instagram_basic</code> wird von Facebook / Instagram verwendet.</li> <li><code>https://www.googleapis.com/auth/drive</code> wird von Google verwendet.</li> </ul> <p>Info</p> <p>In OAuth2 ist ein \u201eScope\u201c nur ein String, der eine bestimmte erforderliche Berechtigung deklariert.</p> <p>Es spielt keine Rolle, ob er andere Zeichen wie <code>:</code> enth\u00e4lt oder ob es eine URL ist.</p> <p>Diese Details sind implementierungsspezifisch.</p> <p>F\u00fcr OAuth2 sind es einfach nur Strings.</p>"},{"location":"tutorial/security/simple-oauth2/#code-um-username-und-password-entgegenzunehmen","title":"Code, um <code>username</code> und <code>password</code> entgegenzunehmen.","text":"<p>Lassen Sie uns nun die von ReadyAPI bereitgestellten Werkzeuge verwenden, um das zu erledigen.</p>"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","title":"<code>OAuth2PasswordRequestForm</code>","text":"<p>Importieren Sie zun\u00e4chst <code>OAuth2PasswordRequestForm</code> und verwenden Sie es als Abh\u00e4ngigkeit mit <code>Depends</code> in der Pfadoperation f\u00fcr <code>/token</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p><code>OAuth2PasswordRequestForm</code> ist eine Klassenabh\u00e4ngigkeit, die einen Formularbody deklariert mit:</p> <ul> <li>Dem <code>username</code>.</li> <li>Dem <code>password</code>.</li> <li>Einem optionalen <code>scope</code>-Feld als langem String, bestehend aus durch Leerzeichen getrennten Strings.</li> <li>Einem optionalen <code>grant_type</code> (\u201eArt der Anmeldung\u201c).</li> </ul> <p>Tipp</p> <p>Die OAuth2-Spezifikation erfordert tats\u00e4chlich ein Feld <code>grant_type</code> mit dem festen Wert <code>password</code>, aber <code>OAuth2PasswordRequestForm</code> erzwingt dies nicht.</p> <p>Wenn Sie es erzwingen m\u00fcssen, verwenden Sie <code>OAuth2PasswordRequestFormStrict</code> anstelle von <code>OAuth2PasswordRequestForm</code>.</p> <ul> <li>Eine optionale <code>client_id</code> (ben\u00f6tigen wir f\u00fcr unser Beispiel nicht).</li> <li>Ein optionales <code>client_secret</code> (ben\u00f6tigen wir f\u00fcr unser Beispiel nicht).</li> </ul> <p>Info</p> <p><code>OAuth2PasswordRequestForm</code> ist keine spezielle Klasse f\u00fcr ReadyAPI, so wie <code>OAuth2PasswordBearer</code>.</p> <p><code>OAuth2PasswordBearer</code> l\u00e4sst ReadyAPI wissen, dass es sich um ein Sicherheitsschema handelt. Daher wird es auf diese Weise zu OpenAPI hinzugef\u00fcgt.</p> <p>Aber <code>OAuth2PasswordRequestForm</code> ist nur eine Klassenabh\u00e4ngigkeit, die Sie selbst h\u00e4tten schreiben k\u00f6nnen, oder Sie h\u00e4tten <code>Form</code>ular-Parameter direkt deklarieren k\u00f6nnen.</p> <p>Da es sich jedoch um einen h\u00e4ufigen Anwendungsfall handelt, wird er zur Vereinfachung direkt von ReadyAPI bereitgestellt.</p>"},{"location":"tutorial/security/simple-oauth2/#die-formulardaten-verwenden","title":"Die Formulardaten verwenden","text":"<p>Tipp</p> <p>Die Instanz der Klassenabh\u00e4ngigkeit <code>OAuth2PasswordRequestForm</code> verf\u00fcgt, statt eines Attributs <code>scope</code> mit dem durch Leerzeichen getrennten langen String, \u00fcber das Attribut <code>scopes</code> mit einer tats\u00e4chlichen Liste von Strings, einem f\u00fcr jeden gesendeten Scope.</p> <p>In diesem Beispiel verwenden wir keine <code>scopes</code>, aber die Funktionalit\u00e4t ist vorhanden, wenn Sie sie ben\u00f6tigen.</p> <p>Rufen Sie nun die Benutzerdaten aus der (gefakten) Datenbank ab, f\u00fcr diesen <code>username</code> aus dem Formularfeld.</p> <p>Wenn es keinen solchen Benutzer gibt, geben wir die Fehlermeldung \u201eIncorrect username or password\u201c zur\u00fcck.</p> <p>F\u00fcr den Fehler verwenden wir die Exception <code>HTTPException</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#das-passwort-uberprufen","title":"Das Passwort \u00fcberpr\u00fcfen","text":"<p>Zu diesem Zeitpunkt liegen uns die Benutzerdaten aus unserer Datenbank vor, das Passwort haben wir jedoch noch nicht \u00fcberpr\u00fcft.</p> <p>Lassen Sie uns diese Daten zun\u00e4chst in das Pydantic-Modell <code>UserInDB</code> einf\u00fcgen.</p> <p>Sie sollten niemals Klartext-Passw\u00f6rter speichern, daher verwenden wir ein (gefaktes) Passwort-Hashing-System.</p> <p>Wenn die Passw\u00f6rter nicht \u00fcbereinstimmen, geben wir denselben Fehler zur\u00fcck.</p>"},{"location":"tutorial/security/simple-oauth2/#passwort-hashing","title":"Passwort-Hashing","text":"<p>\u201eHashing\u201c bedeutet: Konvertieren eines Inhalts (in diesem Fall eines Passworts) in eine Folge von Bytes (ein schlichter String), die wie Kauderwelsch aussieht.</p> <p>Immer wenn Sie genau den gleichen Inhalt (genau das gleiche Passwort) \u00fcbergeben, erhalten Sie genau den gleichen Kauderwelsch.</p> <p>Sie k\u00f6nnen jedoch nicht vom Kauderwelsch zur\u00fcck zum Passwort konvertieren.</p>"},{"location":"tutorial/security/simple-oauth2/#warum-passwort-hashing-verwenden","title":"Warum Passwort-Hashing verwenden?","text":"<p>Wenn Ihre Datenbank gestohlen wird, hat der Dieb nicht die Klartext-Passw\u00f6rter Ihrer Benutzer, sondern nur die Hashes.</p> <p>Der Dieb kann also nicht versuchen, die gleichen Passw\u00f6rter in einem anderen System zu verwenden (da viele Benutzer \u00fcberall das gleiche Passwort verwenden, w\u00e4re dies gef\u00e4hrlich).</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#uber-user_dict","title":"\u00dcber <code>**user_dict</code>","text":"<p><code>UserInDB(**user_dict)</code> bedeutet:</p> <p>\u00dcbergib die Schl\u00fcssel und Werte des <code>user_dict</code> direkt als Schl\u00fcssel-Wert-Argumente, \u00e4quivalent zu:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    disabled = user_dict[\"disabled\"],\n    hashed_password = user_dict[\"hashed_password\"],\n)\n</code></pre> <p>Info</p> <p>Eine ausf\u00fchrlichere Erkl\u00e4rung von <code>**user_dict</code> finden Sie in der Dokumentation f\u00fcr Extra Modelle.</p>"},{"location":"tutorial/security/simple-oauth2/#den-token-zuruckgeben","title":"Den Token zur\u00fcckgeben","text":"<p>Die Response des <code>token</code>-Endpunkts muss ein JSON-Objekt sein.</p> <p>Es sollte einen <code>token_type</code> haben. Da wir in unserem Fall \u201eBearer\u201c-Token verwenden, sollte der Token-Typ \"<code>bearer</code>\" sein.</p> <p>Und es sollte einen <code>access_token</code> haben, mit einem String, der unseren Zugriffstoken enth\u00e4lt.</p> <p>In diesem einfachen Beispiel gehen wir einfach v\u00f6llig unsicher vor und geben denselben <code>username</code> wie der Token zur\u00fcck.</p> <p>Tipp</p> <p>Im n\u00e4chsten Kapitel sehen Sie eine wirklich sichere Implementierung mit Passwort-Hashing und JWT-Tokens.</p> <p>Aber konzentrieren wir uns zun\u00e4chst auf die spezifischen Details, die wir ben\u00f6tigen.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tipp</p> <p>Gem\u00e4\u00df der Spezifikation sollten Sie ein JSON mit einem <code>access_token</code> und einem <code>token_type</code> zur\u00fcckgeben, genau wie in diesem Beispiel.</p> <p>Das m\u00fcssen Sie selbst in Ihrem Code tun und sicherstellen, dass Sie diese JSON-Schl\u00fcssel verwenden.</p> <p>Es ist fast das Einzige, woran Sie denken m\u00fcssen, es selbst richtigzumachen und die Spezifikationen einzuhalten.</p> <p>Den Rest erledigt ReadyAPI f\u00fcr Sie.</p>"},{"location":"tutorial/security/simple-oauth2/#die-abhangigkeiten-aktualisieren","title":"Die Abh\u00e4ngigkeiten aktualisieren","text":"<p>Jetzt werden wir unsere Abh\u00e4ngigkeiten aktualisieren.</p> <p>Wir m\u00f6chten den <code>current_user</code> nur erhalten, wenn dieser Benutzer aktiv ist.</p> <p>Daher erstellen wir eine zus\u00e4tzliche Abh\u00e4ngigkeit <code>get_current_active_user</code>, die wiederum <code>get_current_user</code> als Abh\u00e4ngigkeit verwendet.</p> <p>Beide Abh\u00e4ngigkeiten geben nur dann einen HTTP-Error zur\u00fcck, wenn der Benutzer nicht existiert oder inaktiv ist.</p> <p>In unserem Endpunkt erhalten wir also nur dann einen Benutzer, wenn der Benutzer existiert, korrekt authentifiziert wurde und aktiv ist:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Info</p> <p>Der zus\u00e4tzliche Header <code>WWW-Authenticate</code> mit dem Wert <code>Bearer</code>, den wir hier zur\u00fcckgeben, ist ebenfalls Teil der Spezifikation.</p> <p>Jeder HTTP-(Fehler-)Statuscode 401 \u201eUNAUTHORIZED\u201c soll auch einen <code>WWW-Authenticate</code>-Header zur\u00fcckgeben.</p> <p>Im Fall von Bearer-Tokens (in unserem Fall) sollte der Wert dieses Headers <code>Bearer</code> lauten.</p> <p>Sie k\u00f6nnen diesen zus\u00e4tzlichen Header tats\u00e4chlich weglassen und es w\u00fcrde trotzdem funktionieren.</p> <p>Aber er wird hier bereitgestellt, um den Spezifikationen zu entsprechen.</p> <p>Au\u00dferdem gibt es m\u00f6glicherweise Tools, die ihn erwarten und verwenden (jetzt oder in der Zukunft) und das k\u00f6nnte f\u00fcr Sie oder Ihre Benutzer jetzt oder in der Zukunft n\u00fctzlich sein.</p> <p>Das ist der Vorteil von Standards ...</p>"},{"location":"tutorial/security/simple-oauth2/#es-in-aktion-sehen","title":"Es in Aktion sehen","text":"<p>\u00d6ffnen Sie die interaktive Dokumentation: http://127.0.0.1:8000/docs.</p>"},{"location":"tutorial/security/simple-oauth2/#authentifizieren","title":"Authentifizieren","text":"<p>Klicken Sie auf den Button \u201eAuthorize\u201c.</p> <p>Verwenden Sie die Anmeldedaten:</p> <p>Benutzer: <code>johndoe</code></p> <p>Passwort: <code>secret</code>.</p> <p></p> <p>Nach der Authentifizierung im System sehen Sie Folgendes:</p> <p></p>"},{"location":"tutorial/security/simple-oauth2/#die-eigenen-benutzerdaten-ansehen","title":"Die eigenen Benutzerdaten ansehen","text":"<p>Verwenden Sie nun die Operation <code>GET</code> mit dem Pfad <code>/users/me</code>.</p> <p>Sie erhalten Ihre Benutzerdaten:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false,\n  \"hashed_password\": \"fakehashedsecret\"\n}\n</code></pre> <p></p> <p>Wenn Sie auf das Schlosssymbol klicken und sich abmelden und dann den gleichen Vorgang nochmal versuchen, erhalten Sie einen HTTP 401 Error:</p> <pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#inaktiver-benutzer","title":"Inaktiver Benutzer","text":"<p>Versuchen Sie es nun mit einem inaktiven Benutzer und authentisieren Sie sich mit:</p> <p>Benutzer: <code>alice</code>.</p> <p>Passwort: <code>secret2</code>.</p> <p>Und versuchen Sie, die Operation <code>GET</code> mit dem Pfad <code>/users/me</code> zu verwenden.</p> <p>Sie erhalten die Fehlermeldung \u201eInactive user\u201c:</p> <pre><code>{\n  \"detail\": \"Inactive user\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#zusammenfassung","title":"Zusammenfassung","text":"<p>Sie verf\u00fcgen jetzt \u00fcber die Tools, um ein vollst\u00e4ndiges Sicherheitssystem basierend auf <code>username</code> und <code>password</code> f\u00fcr Ihre API zu implementieren.</p> <p>Mit diesen Tools k\u00f6nnen Sie das Sicherheitssystem mit jeder Datenbank und jedem Benutzer oder Datenmodell kompatibel machen.</p> <p>Das einzige fehlende Detail ist, dass es noch nicht wirklich \u201esicher\u201c ist.</p> <p>Im n\u00e4chsten Kapitel erfahren Sie, wie Sie eine sichere Passwort-Hashing-Bibliothek und JWT-Token verwenden.</p>"},{"location":"environment-variables/","title":"Environment Variables","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Tip</p> <p>If you already know what \"environment variables\" are and how to use them, feel free to skip this.</p> <p>An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well).</p> <p>Environment variables could be useful for handling application settings, as part of the installation of Python, etc.</p>"},{"location":"environment-variables/#create-and-use-env-vars","title":"Create and Use Env Vars","text":"<p>You can create and use environment variables in the shell (terminal), without needing Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#read-env-vars-in-python","title":"Read env vars in Python","text":"<p>You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python.</p> <p>For example you could have a file <code>main.py</code> with:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p>The second argument to <code>os.getenv()</code> is the default value to return.</p> <p>If not provided, it's <code>None</code> by default, here we provide <code>\"World\"</code> as the default value to use.</p> <p>Then you could call that Python program:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <p>As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to <code>git</code>) with the rest of the files, it's common to use them for configurations or settings.</p> <p>You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration.</p> <p>To do that, create it right before the program itself, on the same line:</p> <pre><code>// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>You can read more about it at The Twelve-Factor App: Config.</p>"},{"location":"environment-variables/#types-and-validation","title":"Types and Validation","text":"<p>These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).</p> <p>That means that any value read in Python from an environment variable will be a <code>str</code>, and any conversion to a different type or any validation has to be done in code.</p> <p>You will learn more about using environment variables for handling application settings in the Advanced User Guide - Settings and Environment Variables.</p>"},{"location":"environment-variables/#path-environment-variable","title":"<code>PATH</code> Environment Variable","text":"<p>There is a special environment variable called <code>PATH</code> that is used by the operating systems (Linux, macOS, Windows) to find programs to run.</p> <p>The value of the variable <code>PATH</code> is a long string that is made of directories separated by a colon <code>:</code> on Linux and macOS, and by a semicolon <code>;</code> on Windows.</p> <p>For example, the <code>PATH</code> environment variable could look like this:</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>This means that the system should look for programs in the directories:</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>This means that the system should look for programs in the directories:</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>When you type a command in the terminal, the operating system looks for the program in each of those directories listed in the <code>PATH</code> environment variable.</p> <p>For example, when you type <code>python</code> in the terminal, the operating system looks for a program called <code>python</code> in the first directory in that list.</p> <p>If it finds it, then it will use it. Otherwise it keeps looking in the other directories.</p>"},{"location":"environment-variables/#installing-python-and-updating-the-path","title":"Installing Python and Updating the <code>PATH</code>","text":"<p>When you install Python, you might be asked if you want to update the <code>PATH</code> environment variable.</p> Linux, macOSWindows <p>Let's say you install Python and it ends up in a directory <code>/opt/custompython/bin</code>.</p> <p>If you say yes to update the <code>PATH</code> environment variable, then the installer will add <code>/opt/custompython/bin</code> to the <code>PATH</code> environment variable.</p> <p>It could look like this:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>This way, when you type <code>python</code> in the terminal, the system will find the Python program in <code>/opt/custompython/bin</code> (the last directory) and use that one.</p> <p>Let's say you install Python and it ends up in a directory <code>C:\\opt\\custompython\\bin</code>.</p> <p>If you say yes to update the <code>PATH</code> environment variable, then the installer will add <code>C:\\opt\\custompython\\bin</code> to the <code>PATH</code> environment variable.</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>This way, when you type <code>python</code> in the terminal, the system will find the Python program in <code>C:\\opt\\custompython\\bin</code> (the last directory) and use that one.</p> <p>So, if you type:</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>The system will find the <code>python</code> program in <code>/opt/custompython/bin</code> and run it.</p> <p>It would be roughly equivalent to typing:</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>The system will find the <code>python</code> program in <code>C:\\opt\\custompython\\bin\\python</code> and run it.</p> <p>It would be roughly equivalent to typing:</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>This information will be useful when learning about Virtual Environments.</p>"},{"location":"environment-variables/#conclusion","title":"Conclusion","text":"<p>With this you should have a basic understanding of what environment variables are and how to use them in Python.</p> <p>You can also read more about them in the Wikipedia for Environment Variable.</p> <p>In many cases it's not very obvious how environment variables would be useful and applicable right away. But they keep showing up in many different scenarios when you are developing, so it's good to know about them.</p> <p>For example, you will need this information in the next section, about Virtual Environments.</p>"},{"location":"virtual-environments/","title":"Virtual Environments","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When you work in Python projects you probably should use a virtual environment (or a similar mechanism) to isolate the packages you install for each project.</p> <p>Info</p> <p>If you already know about virtual environments, how to create them and use them, you might want to skip this section. \ud83e\udd13</p> <p>Tip</p> <p>A virtual environment is different than an environment variable.</p> <p>An environment variable is a variable in the system that can be used by programs.</p> <p>A virtual environment is a directory with some files in it.</p> <p>Info</p> <p>This page will teach you how to use virtual environments and how they work.</p> <p>If you are ready to adopt a tool that manages everything for you (including installing Python), try uv.</p>"},{"location":"virtual-environments/#create-a-project","title":"Create a Project","text":"<p>First, create a directory for your project.</p> <p>What I normally do is that I create a directory named <code>code</code> inside my home/user directory.</p> <p>And inside of that I create one directory per project.</p> <pre><code>// Go to the home directory\n$ cd\n// Create a directory for all your code projects\n$ mkdir code\n// Enter into that code directory\n$ cd code\n// Create a directory for this project\n$ mkdir awesome-project\n// Enter into that project directory\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>When you start working on a Python project for the first time, create a virtual environment inside your project.</p> <p>Tip</p> <p>You only need to do this once per project, not every time you work.</p> <code>venv</code><code>uv</code> <p>To create a virtual environment, you can use the <code>venv</code> module that comes with Python.</p> <pre><code>$ python -m venv .venv\n</code></pre> What that command means <ul> <li><code>python</code>: use the program called <code>python</code></li> <li><code>-m</code>: call a module as a script, we'll tell it which module next</li> <li><code>venv</code>: use the module called <code>venv</code> that normally comes installed with Python</li> <li><code>.venv</code>: create the virtual environment in the new directory <code>.venv</code></li> </ul> <p>If you have <code>uv</code> installed, you can use it to create a virtual environment.</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>By default, <code>uv</code> will create a virtual environment in a directory called <code>.venv</code>.</p> <p>But you could customize it passing an additional argument with the directory name.</p> <p>That command creates a new virtual environment in a directory called <code>.venv</code>.</p> <code>.venv</code> or other name <p>You could create the virtual environment in a different directory, but there's a convention of calling it <code>.venv</code>.</p>"},{"location":"virtual-environments/#activate-the-virtual-environment","title":"Activate the Virtual Environment","text":"<p>Activate the new virtual environment so that any Python command you run or package you install uses it.</p> <p>Tip</p> <p>Do this every time you start a new terminal session to work on the project.</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Or if you use Bash for Windows (e.g. Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Tip</p> <p>Every time you install a new package in that environment, activate the environment again.</p> <p>This makes sure that if you use a terminal (CLI) program installed by that package, you use the one from your virtual environment and not any other that could be installed globally, probably with a different version than what you need.</p>"},{"location":"virtual-environments/#check-the-virtual-environment-is-active","title":"Check the Virtual Environment is Active","text":"<p>Check that the virtual environment is active (the previous command worked).</p> <p>Tip</p> <p>This is optional, but it's a good way to check that everything is working as expected and you are using the virtual environment you intended.</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>If it shows the <code>python</code> binary at <code>.venv/bin/python</code>, inside of your project (in this case <code>awesome-project</code>), then it worked. \ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>If it shows the <code>python</code> binary at <code>.venv\\Scripts\\python</code>, inside of your project (in this case <code>awesome-project</code>), then it worked. \ud83c\udf89</p>"},{"location":"virtual-environments/#upgrade-pip","title":"Upgrade <code>pip</code>","text":"<p>Tip</p> <p>If you use <code>uv</code> you would use it to install things instead of <code>pip</code>, so you don't need to upgrade <code>pip</code>. \ud83d\ude0e</p> <p>If you are using <code>pip</code> to install packages (it comes by default with Python), you should upgrade it to the latest version.</p> <p>Many exotic errors while installing a package are solved by just upgrading <code>pip</code> first.</p> <p>Tip</p> <p>You would normally do this once, right after you create the virtual environment.</p> <p>Make sure the virtual environment is active (with the command above) and then run:</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#add-gitignore","title":"Add <code>.gitignore</code>","text":"<p>If you are using Git (you should), add a <code>.gitignore</code> file to exclude everything in your <code>.venv</code> from Git.</p> <p>Tip</p> <p>If you used <code>uv</code> to create the virtual environment, it already did this for you, you can skip this step. \ud83d\ude0e</p> <p>Tip</p> <p>Do this once, right after you create the virtual environment.</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> What that command means <ul> <li><code>echo \"*\"</code>: will \"print\" the text <code>*</code> in the terminal (the next part changes that a bit)</li> <li><code>&gt;</code>: anything printed to the terminal by the command to the left of <code>&gt;</code> should not be printed but instead written to the file that goes to the right of <code>&gt;</code></li> <li><code>.gitignore</code>: the name of the file where the text should be written</li> </ul> <p>And <code>*</code> for Git means \"everything\". So, it will ignore everything in the <code>.venv</code> directory.</p> <p>That command will create a file <code>.gitignore</code> with the content:</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#install-packages","title":"Install Packages","text":"<p>After activating the environment, you can install packages in it.</p> <p>Tip</p> <p>Do this once when installing or upgrading the packages your project needs.</p> <p>If you need to upgrade a version or add a new package you would do this again.</p>"},{"location":"virtual-environments/#install-packages-directly","title":"Install Packages Directly","text":"<p>If you're in a hurry and don't want to use a file to declare your project's package requirements, you can install them directly.</p> <p>Tip</p> <p>It's a (very) good idea to put the packages and versions your program needs in a file (for example <code>requirements.txt</code> or <code>pyproject.toml</code>).</p> <code>pip</code><code>uv</code> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>If you have <code>uv</code>:</p> <pre><code>$ uv pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#install-from-requirementstxt","title":"Install from <code>requirements.txt</code>","text":"<p>If you have a <code>requirements.txt</code>, you can now use it to install its packages.</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>If you have <code>uv</code>:</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>A <code>requirements.txt</code> with some packages could look like:</p> <pre><code>readyapi[standard]==0.113.0\npydantic==2.8.0\n</code></pre>"},{"location":"virtual-environments/#run-your-program","title":"Run Your Program","text":"<p>After you activated the virtual environment, you can run your program, and it will use the Python inside of your virtual environment with the packages you installed there.</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#configure-your-editor","title":"Configure Your Editor","text":"<p>You would probably use an editor, make sure you configure it to use the same virtual environment you created (it will probably autodetect it) so that you can get autocompletion and inline errors.</p> <p>For example:</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Tip</p> <p>You normally have to do this only once, when you create the virtual environment.</p>"},{"location":"virtual-environments/#deactivate-the-virtual-environment","title":"Deactivate the Virtual Environment","text":"<p>Once you are done working on your project you can deactivate the virtual environment.</p> <pre><code>$ deactivate\n</code></pre> <p>This way, when you run <code>python</code> it won't try to run it from that virtual environment with the packages installed there.</p>"},{"location":"virtual-environments/#ready-to-work","title":"Ready to Work","text":"<p>Now you're ready to start working on your project.</p> <p>Tip</p> <p>Do you want to understand what's all that above?</p> <p>Continue reading. \ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#why-virtual-environments","title":"Why Virtual Environments","text":"<p>To work with ReadyAPI you need to install Python.</p> <p>After that, you would need to install ReadyAPI and any other packages you want to use.</p> <p>To install packages you would normally use the <code>pip</code> command that comes with Python (or similar alternatives).</p> <p>Nevertheless, if you just use <code>pip</code> directly, the packages would be installed in your global Python environment (the global installation of Python).</p>"},{"location":"virtual-environments/#the-problem","title":"The Problem","text":"<p>So, what's the problem with installing packages in the global Python environment?</p> <p>At some point, you will probably end up writing many different programs that depend on different packages. And some of these projects you work on will depend on different versions of the same package. \ud83d\ude31</p> <p>For example, you could create a project called <code>philosophers-stone</code>, this program depends on another package called <code>harry</code>, using the version <code>1</code>. So, you need to install <code>harry</code>.</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>Then, at some point later, you create another project called <code>prisoner-of-azkaban</code>, and this project also depends on <code>harry</code>, but this project needs <code>harry</code> version <code>3</code>.</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>But now the problem is, if you install the packages globally (in the global environment) instead of in a local virtual environment, you will have to choose which version of <code>harry</code> to install.</p> <p>If you want to run <code>philosophers-stone</code> you will need to first install <code>harry</code> version <code>1</code>, for example with:</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>And then you would end up with <code>harry</code> version <code>1</code> installed in your global Python environment.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>But then if you want to run <code>prisoner-of-azkaban</code>, you will need to uninstall <code>harry</code> version <code>1</code> and install <code>harry</code> version <code>3</code> (or just installing version <code>3</code> would automatically uninstall version <code>1</code>).</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>And then you would end up with <code>harry</code> version <code>3</code> installed in your global Python environment.</p> <p>And if you try to run <code>philosophers-stone</code> again, there's a chance it would not work because it needs <code>harry</code> version <code>1</code>.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Tip</p> <p>It's very common in Python packages to try the best to avoid breaking changes in new versions, but it's better to be safe, and install newer versions intentionally and when you can run the tests to check everything is working correctly.</p> <p>Now, imagine that with many other packages that all your projects depend on. That's very difficult to manage. And you would probably end up running some projects with some incompatible versions of the packages, and not knowing why something isn't working.</p> <p>Also, depending on your operating system (e.g. Linux, Windows, macOS), it could have come with Python already installed. And in that case it probably had some packages pre-installed with some specific versions needed by your system. If you install packages in the global Python environment, you could end up breaking some of the programs that came with your operating system.</p>"},{"location":"virtual-environments/#where-are-packages-installed","title":"Where are Packages Installed","text":"<p>When you install Python, it creates some directories with some files in your computer.</p> <p>Some of these directories are the ones in charge of having all the packages you install.</p> <p>When you run:</p> <pre><code>// Don't run this now, it's just an example \ud83e\udd13\n$ pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre> <p>That will download a compressed file with the ReadyAPI code, normally from PyPI.</p> <p>It will also download files for other packages that ReadyAPI depends on.</p> <p>Then it will extract all those files and put them in a directory in your computer.</p> <p>By default, it will put those files downloaded and extracted in the directory that comes with your Python installation, that's the global environment.</p>"},{"location":"virtual-environments/#what-are-virtual-environments","title":"What are Virtual Environments","text":"<p>The solution to the problems of having all the packages in the global environment is to use a virtual environment for each project you work on.</p> <p>A virtual environment is a directory, very similar to the global one, where you can install the packages for a project.</p> <p>This way, each project will have its own virtual environment (<code>.venv</code> directory) with its own packages.</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#what-does-activating-a-virtual-environment-mean","title":"What Does Activating a Virtual Environment Mean","text":"<p>When you activate a virtual environment, for example with:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Or if you use Bash for Windows (e.g. Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>That command will create or modify some environment variables that will be available for the next commands.</p> <p>One of those variables is the <code>PATH</code> variable.</p> <p>Tip</p> <p>You can learn more about the <code>PATH</code> environment variable in the Environment Variables section.</p> <p>Activating a virtual environment adds its path <code>.venv/bin</code> (on Linux and macOS) or <code>.venv\\Scripts</code> (on Windows) to the <code>PATH</code> environment variable.</p> <p>Let's say that before activating the environment, the <code>PATH</code> variable looked like this:</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>That means that the system would look for programs in:</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>That means that the system would look for programs in:</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>After activating the virtual environment, the <code>PATH</code> variable would look something like this:</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>That means that the system will now start looking first for programs in:</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>before looking in the other directories.</p> <p>So, when you type <code>python</code> in the terminal, the system will find the Python program in</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>and use that one.</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>That means that the system will now start looking first for programs in:</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>before looking in the other directories.</p> <p>So, when you type <code>python</code> in the terminal, the system will find the Python program in</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>and use that one.</p> <p>An important detail is that it will put the virtual environment path at the beginning of the <code>PATH</code> variable. The system will find it before finding any other Python available. This way, when you run <code>python</code>, it will use the Python from the virtual environment instead of any other <code>python</code> (for example, a <code>python</code> from a global environment).</p> <p>Activating a virtual environment also changes a couple of other things, but this is one of the most important things it does.</p>"},{"location":"virtual-environments/#checking-a-virtual-environment","title":"Checking a Virtual Environment","text":"<p>When you check if a virtual environment is active, for example with:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>That means that the <code>python</code> program that will be used is the one in the virtual environment.</p> <p>You use <code>which</code> in Linux and macOS and <code>Get-Command</code> in Windows PowerShell.</p> <p>The way that command works is that it will go and check in the <code>PATH</code> environment variable, going through each path in order, looking for the program called <code>python</code>. Once it finds it, it will show you the path to that program.</p> <p>The most important part is that when you call <code>python</code>, that is the exact \"<code>python</code>\" that will be executed.</p> <p>So, you can confirm if you are in the correct virtual environment.</p> <p>Tip</p> <p>It's easy to activate one virtual environment, get one Python, and then go to another project.</p> <p>And the second project wouldn't work because you are using the incorrect Python, from a virtual environment for another project.</p> <p>It's useful being able to check what <code>python</code> is being used. \ud83e\udd13</p>"},{"location":"virtual-environments/#why-deactivate-a-virtual-environment","title":"Why Deactivate a Virtual Environment","text":"<p>For example, you could be working on a project <code>philosophers-stone</code>, activate that virtual environment, install packages and work with that environment.</p> <p>And then you want to work on another project <code>prisoner-of-azkaban</code>.</p> <p>You go to that project:</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>If you don't deactivate the virtual environment for <code>philosophers-stone</code>, when you run <code>python</code> in the terminal, it will try to use the Python from <code>philosophers-stone</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>But if you deactivate the virtual environment and activate the new one for <code>prisoner-of-askaban</code> then when you run <code>python</code> it will use the Python from the virtual environment in <code>prisoner-of-azkaban</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project \ud83d\ude0e\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv \ud83d\ude80\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#alternatives","title":"Alternatives","text":"<p>This is a simple guide to get you started and teach you how everything works underneath.</p> <p>There are many alternatives to managing virtual environments, package dependencies (requirements), projects.</p> <p>Once you are ready and want to use a tool to manage the entire project, packages dependencies, virtual environments, etc. I would suggest you try uv.</p> <p><code>uv</code> can do a lot of things, it can:</p> <ul> <li>Install Python for you, including different versions</li> <li>Manage the virtual environment for your projects</li> <li>Install packages</li> <li>Manage package dependencies and versions for your project</li> <li>Make sure you have an exact set of packages and versions to install, including their dependencies, so that you can be sure that you can run your project in production exactly the same as in your computer while developing, this is called locking</li> <li>And many other things</li> </ul>"},{"location":"virtual-environments/#conclusion","title":"Conclusion","text":"<p>If you read and understood all this, now you know much more about virtual environments than many developers out there. \ud83e\udd13</p> <p>Knowing these details will most probably be useful in a future time when you are debugging something that seems complex, but you will know how it all works underneath. \ud83d\ude0e</p>"},{"location":"tutorial/query-param-models/","title":"Query Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of query parameters that are related, you can create a Pydantic model to declare them.</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/query-param-models/#query-parameters-with-a-pydantic-model","title":"Query Parameters with a Pydantic Model","text":"<p>Declare the query parameters that you need in a Pydantic model, and then declare the parameter as <code>Query</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>ReadyAPI will extract the data for each field from the query parameters in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/query-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the query parameters in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/query-param-models/#forbid-extra-query-parameters","title":"Forbid Extra Query Parameters","text":"<p>In some special use cases (probably not very common), you might want to restrict the query parameters that you want to receive.</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>If a client tries to send some extra data in the query parameters, they will receive an error response.</p> <p>For example, if the client tries to send a <code>tool</code> query parameter with a value of <code>plumbus</code>, like:</p> <pre><code>https://example.com/items/?limit=10&amp;tool=plumbus\n</code></pre> <p>They will receive an error response telling them that the query parameter <code>tool</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"query\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/query-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare query parameters in ReadyAPI. \ud83d\ude0e</p> <p>Tip</p> <p>Spoiler alert: you can also use Pydantic models to declare cookies and headers, but you will read about that later in the tutorial. \ud83e\udd2b</p>"},{"location":"tutorial/cookie-param-models/","title":"Cookie Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of cookies that are related, you can create a Pydantic model to declare them. \ud83c\udf6a</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p> <p>Tip</p> <p>This same technique applies to <code>Query</code>, <code>Cookie</code>, and <code>Header</code>. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-param-models/#cookies-with-a-pydantic-model","title":"Cookies with a Pydantic Model","text":"<p>Declare the cookie parameters that you need in a Pydantic model, and then declare the parameter as <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>ReadyAPI will extract the data for each field from the cookies received in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/cookie-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the defined cookies in the docs UI at <code>/docs</code>:</p> <p>Info</p> <p>Have in mind that, as browsers handle cookies in special ways and behind the scenes, they don't easily allow JavaScript to touch them.</p> <p>If you go to the API docs UI at <code>/docs</code> you will be able to see the documentation for cookies for your path operations.</p> <p>But even if you fill the data and click \"Execute\", because the docs UI works with JavaScript, the cookies won't be sent, and you will see an error message as if you didn't write any values.</p>"},{"location":"tutorial/cookie-param-models/#forbid-extra-cookies","title":"Forbid Extra Cookies","text":"<p>In some special use cases (probably not very common), you might want to restrict the cookies that you want to receive.</p> <p>Your API now has the power to control its own cookie consent. \ud83e\udd2a\ud83c\udf6a</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.9+ <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>If a client tries to send some extra cookies, they will receive an error response.</p> <p>Poor cookie banners with all their effort to get your consent for the API to reject it. \ud83c\udf6a</p> <p>For example, if the client tries to send a <code>santa_tracker</code> cookie with a value of <code>good-list-please</code>, the client will receive an error response telling them that the <code>santa_tracker</code> cookie is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"cookie\", \"santa_tracker\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"good-list-please\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/cookie-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare cookies in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/header-param-models/","title":"Header Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of related header parameters, you can create a Pydantic model to declare them.</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/header-param-models/#header-parameters-with-a-pydantic-model","title":"Header Parameters with a Pydantic Model","text":"<p>Declare the header parameters that you need in a Pydantic model, and then declare the parameter as <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>ReadyAPI will extract the data for each field from the headers in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/header-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the required headers in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/header-param-models/#forbid-extra-headers","title":"Forbid Extra Headers","text":"<p>In some special use cases (probably not very common), you might want to restrict the headers that you want to receive.</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>If a client tries to send some extra headers, they will receive an error response.</p> <p>For example, if the client tries to send a <code>tool</code> header with a value of <code>plumbus</code>, they will receive an error response telling them that the header parameter <code>tool</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"header\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-param-models/#disable-convert-underscores","title":"Disable Convert Underscores","text":"<p>The same way as with regular header parameters, when you have underscore characters in the parameter names, they are automatically converted to hyphens.</p> <p>For example, if you have a header parameter <code>save_data</code> in the code, the expected HTTP header will be <code>save-data</code>, and it will show up like that in the docs.</p> <p>If for some reason you need to disable this automatic conversion, you can do it as well for Pydantic models for header parameters.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Warning</p> <p>Before setting <code>convert_underscores</code> to <code>False</code>, bear in mind that some HTTP proxies and servers disallow the usage of headers with underscores.</p>"},{"location":"tutorial/header-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare headers in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/request-form-models/","title":"Form Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use Pydantic models to declare form fields in ReadyAPI.</p> <p>Info</p> <p>To use forms, first install <code>python-multipart</code>.</p> <p>Make sure you create a virtual environment, activate it, and then install it, for example:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.113.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/request-form-models/#pydantic-models-for-forms","title":"Pydantic Models for Forms","text":"<p>You just need to declare a Pydantic model with the fields you want to receive as form fields, and then declare the parameter as <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>ReadyAPI will extract the data for each field from the form data in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/request-form-models/#check-the-docs","title":"Check the Docs","text":"<p>You can verify it in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/request-form-models/#forbid-extra-form-fields","title":"Forbid Extra Form Fields","text":"<p>In some special use cases (probably not very common), you might want to restrict the form fields to only those declared in the Pydantic model. And forbid any extra fields.</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.114.0</code>. \ud83e\udd13</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>If a client tries to send some extra data, they will receive an error response.</p> <p>For example, if the client tries to send the form fields:</p> <ul> <li><code>username</code>: <code>Rick</code></li> <li><code>password</code>: <code>Portal Gun</code></li> <li><code>extra</code>: <code>Mr. Poopybutthole</code></li> </ul> <p>They will receive an error response telling them that the field <code>extra</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/request-form-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare form fields in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/cors/","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>CORS or \"Cross-Origin Resource Sharing\" refers to the situations when a frontend running in a browser has JavaScript code that communicates with a backend, and the backend is in a different \"origin\" than the frontend.</p>"},{"location":"tutorial/cors/#origin","title":"Origin","text":"<p>An origin is the combination of protocol (<code>http</code>, <code>https</code>), domain (<code>myapp.com</code>, <code>localhost</code>, <code>localhost.khulnasoft.com</code>), and port (<code>80</code>, <code>443</code>, <code>8080</code>).</p> <p>So, all these are different origins:</p> <ul> <li><code>http://localhost</code></li> <li><code>https://localhost</code></li> <li><code>http://localhost:8080</code></li> </ul> <p>Even if they are all in <code>localhost</code>, they use different protocols or ports, so, they are different \"origins\".</p>"},{"location":"tutorial/cors/#steps","title":"Steps","text":"<p>So, let's say you have a frontend running in your browser at <code>http://localhost:8080</code>, and its JavaScript is trying to communicate with a backend running at <code>http://localhost</code> (because we don't specify a port, the browser will assume the default port <code>80</code>).</p> <p>Then, the browser will send an HTTP <code>OPTIONS</code> request to the <code>:80</code>-backend, and if the backend sends the appropriate headers authorizing the communication from this different origin (<code>http://localhost:8080</code>) then the <code>:8080</code>-browser will let the JavaScript in the frontend send its request to the <code>:80</code>-backend.</p> <p>To achieve this, the <code>:80</code>-backend must have a list of \"allowed origins\".</p> <p>In this case, the list would have to include <code>http://localhost:8080</code> for the <code>:8080</code>-frontend to work correctly.</p>"},{"location":"tutorial/cors/#wildcards","title":"Wildcards","text":"<p>It's also possible to declare the list as <code>\"*\"</code> (a \"wildcard\") to say that all are allowed.</p> <p>But that will only allow certain types of communication, excluding everything that involves credentials: Cookies, Authorization headers like those used with Bearer Tokens, etc.</p> <p>So, for everything to work correctly, it's better to specify explicitly the allowed origins.</p>"},{"location":"tutorial/cors/#use-corsmiddleware","title":"Use <code>CORSMiddleware</code>","text":"<p>You can configure it in your ReadyAPI application using the <code>CORSMiddleware</code>.</p> <ul> <li>Import <code>CORSMiddleware</code>.</li> <li>Create a list of allowed origins (as strings).</li> <li>Add it as a \"middleware\" to your ReadyAPI application.</li> </ul> <p>You can also specify whether your backend allows:</p> <ul> <li>Credentials (Authorization headers, Cookies, etc).</li> <li>Specific HTTP methods (<code>POST</code>, <code>PUT</code>) or all of them with the wildcard <code>\"*\"</code>.</li> <li>Specific HTTP headers or all of them with the wildcard <code>\"*\"</code>.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.cors import CORSMiddleware\n\napp = ReadyAPI()\n\norigins = [\n    \"http://localhost.khulnasoft.com\",\n    \"https://localhost.khulnasoft.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>The default parameters used by the <code>CORSMiddleware</code> implementation are restrictive by default, so you'll need to explicitly enable particular origins, methods, or headers, in order for browsers to be permitted to use them in a Cross-Domain context.</p> <p>The following arguments are supported:</p> <ul> <li><code>allow_origins</code> - A list of origins that should be permitted to make cross-origin requests. E.g. <code>['https://example.org', 'https://www.example.org']</code>. You can use <code>['*']</code> to allow any origin.</li> <li><code>allow_origin_regex</code> - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. <code>'https://.*\\.example\\.org'</code>.</li> <li><code>allow_methods</code> - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to <code>['GET']</code>. You can use <code>['*']</code> to allow all standard methods.</li> <li><code>allow_headers</code> - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to <code>[]</code>. You can use <code>['*']</code> to allow all headers. The <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code> and <code>Content-Type</code> headers are always allowed for simple CORS requests.</li> <li><code>allow_credentials</code> - Indicate that cookies should be supported for cross-origin requests. Defaults to <code>False</code>. Also, <code>allow_origins</code> cannot be set to <code>['*']</code> for credentials to be allowed, origins must be specified.</li> <li><code>expose_headers</code> - Indicate any response headers that should be made accessible to the browser. Defaults to <code>[]</code>.</li> <li><code>max_age</code> - Sets a maximum time in seconds for browsers to cache CORS responses. Defaults to <code>600</code>.</li> </ul> <p>The middleware responds to two particular types of HTTP request...</p>"},{"location":"tutorial/cors/#cors-preflight-requests","title":"CORS preflight requests","text":"<p>These are any <code>OPTIONS</code> request with <code>Origin</code> and <code>Access-Control-Request-Method</code> headers.</p> <p>In this case the middleware will intercept the incoming request and respond with appropriate CORS headers, and either a <code>200</code> or <code>400</code> response for informational purposes.</p>"},{"location":"tutorial/cors/#simple-requests","title":"Simple requests","text":"<p>Any request with an <code>Origin</code> header. In this case the middleware will pass the request through as normal, but will include appropriate CORS headers on the response.</p>"},{"location":"tutorial/cors/#more-info","title":"More info","text":"<p>For more info about CORS, check the Mozilla CORS documentation.</p> <p>Technical Details</p> <p>You could also use <code>from starlette.middleware.cors import CORSMiddleware</code>.</p> <p>ReadyAPI provides several middlewares in <code>readyapi.middleware</code> just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.</p>"},{"location":"tutorial/sql-databases/","title":"SQL (Relational) Databases","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI doesn't require you to use a SQL (relational) database. But you can use any database that you want.</p> <p>Here we'll see an example using SQLDev.</p> <p>SQLDev is built on top of SQLAlchemy and Pydantic. It was made by the same author of ReadyAPI to be the perfect match for ReadyAPI applications that need to use SQL databases.</p> <p>Tip</p> <p>You could use any other SQL or NoSQL database library you want (in some cases called \"ORMs\"), ReadyAPI doesn't force you to use anything. \ud83d\ude0e</p> <p>As SQLDev is based on SQLAlchemy, you can easily use any database supported by SQLAlchemy (which makes them also supported by SQLDev), like:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>Microsoft SQL Server, etc.</li> </ul> <p>In this example, we'll use SQLite, because it uses a single file and Python has integrated support. So, you can copy this example and run it as is.</p> <p>Later, for your production application, you might want to use a database server like PostgreSQL.</p> <p>Tip</p> <p>There is an official project generator with ReadyAPI and PostgreSQL including a frontend and more tools: https://github.com/readyapi/full-stack-readyapi-template</p> <p>This is a very simple and short tutorial, if you want to learn about databases in general, about SQL, or more advanced features, go to the SQLDev docs.</p>"},{"location":"tutorial/sql-databases/#install-sqldev","title":"Install <code>SQLDev</code>","text":"<p>First, make sure you create your virtual environment, activate it, and then install <code>sqldev</code>:</p> <pre><code>$ pip install sqldev\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/sql-databases/#create-the-app-with-a-single-model","title":"Create the App with a Single Model","text":"<p>We'll create the simplest first version of the app with a single SQLDev model first.</p> <p>Later we'll improve it increasing security and versatility with multiple models below. \ud83e\udd13</p>"},{"location":"tutorial/sql-databases/#create-models","title":"Create Models","text":"<p>Import <code>SQLDev</code> and create a database model:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>The <code>Hero</code> class is very similar to a Pydantic model (in fact, underneath, it actually is a Pydantic model).</p> <p>There are a few differences:</p> <ul> <li> <p><code>table=True</code> tells SQLDev that this is a table model, it should represent a table in the SQL database, it's not just a data model (as would be any other regular Pydantic class).</p> </li> <li> <p><code>Field(primary_key=True)</code> tells SQLDev that the <code>id</code> is the primary key in the SQL database (you can learn more about SQL primary keys in the SQLDev docs).</p> <p>By having the type as <code>int | None</code>, SQLDev will know that this column should be an <code>INTEGER</code> in the SQL database and that it should be <code>NULLABLE</code>.</p> </li> <li> <p><code>Field(index=True)</code> tells SQLDev that it should create a SQL index for this column, that would allow faster lookups in the database when reading data filtered by this column.</p> <p>SQLDev will know that something declared as <code>str</code> will be a SQL column of type <code>TEXT</code> (or <code>VARCHAR</code>, depending on the database).</p> </li> </ul>"},{"location":"tutorial/sql-databases/#create-an-engine","title":"Create an Engine","text":"<p>A SQLDev <code>engine</code> (underneath it's actually a SQLAlchemy <code>engine</code>) is what holds the connections to the database.</p> <p>You would have one single <code>engine</code> object for all your code to connect to the same database.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Using <code>check_same_thread=False</code> allows ReadyAPI to use the same SQLite database in different threads. This is necessary as one single request could use more than one thread (for example in dependencies).</p> <p>Don't worry, with the way the code is structured, we'll make sure we use a single SQLDev session per request later, this is actually what the <code>check_same_thread</code> is trying to achieve.</p>"},{"location":"tutorial/sql-databases/#create-the-tables","title":"Create the Tables","text":"<p>We then add a function that uses <code>SQLDev.metadata.create_all(engine)</code> to create the tables for all the table models.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-a-session-dependency","title":"Create a Session Dependency","text":"<p>A <code>Session</code> is what stores the objects in memory and keeps track of any changes needed in the data, then it uses the <code>engine</code> to communicate with the database.</p> <p>We will create a ReadyAPI dependency with <code>yield</code> that will provide a new <code>Session</code> for each request. This is what ensures that we use a single session per request. \ud83e\udd13</p> <p>Then we create an <code>Annotated</code> dependency <code>SessionDep</code> to simplify the rest of the code that will use this dependency.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-database-tables-on-startup","title":"Create Database Tables on Startup","text":"<p>We will create the database tables when the application starts.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Here we create the tables on an application startup event.</p> <p>For production you would probably use a migration script that runs before you start your app. \ud83e\udd13</p> <p>Tip</p> <p>SQLDev will have migration utilities wrapping Alembic, but for now, you can use Alembic directly.</p>"},{"location":"tutorial/sql-databases/#create-a-hero","title":"Create a Hero","text":"<p>Because each SQLDev model is also a Pydantic model, you can use it in the same type annotations that you could use Pydantic models.</p> <p>For example, if you declare a parameter of type <code>Hero</code>, it will be read from the JSON body.</p> <p>The same way, you can declare it as the function's return type, and then the shape of the data will show up in the automatic API docs UI.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Here we use the <code>SessionDep</code> dependency (a <code>Session</code>) to add the new <code>Hero</code> to the <code>Session</code> instance, commit the changes to the database, refresh the data in the <code>hero</code>, and then return it.</p>"},{"location":"tutorial/sql-databases/#read-heroes","title":"Read Heroes","text":"<p>We can read <code>Hero</code>s from the database using a <code>select()</code>. We can include a <code>limit</code> and <code>offset</code> to paginate the results.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#read-one-hero","title":"Read One Hero","text":"<p>We can read a single <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#delete-a-hero","title":"Delete a Hero","text":"<p>We can also delete a <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#run-the-app","title":"Run the App","text":"<p>You can run the app:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Then go to the <code>/docs</code> UI, you will see that ReadyAPI is using these models to document the API, and it will use them to serialize and validate the data too.</p>"},{"location":"tutorial/sql-databases/#update-the-app-with-multiple-models","title":"Update the App with Multiple Models","text":"<p>Now let's refactor this app a bit to increase security and versatility.</p> <p>If you check the previous app, in the UI you can see that, up to now, it lets the client decide the <code>id</code> of the <code>Hero</code> to create. \ud83d\ude31</p> <p>We shouldn't let that happen, they could overwrite an <code>id</code> we already have assigned in the DB. Deciding the <code>id</code> should be done by the backend or the database, not by the client.</p> <p>Additionally, we create a <code>secret_name</code> for the hero, but so far, we are returning it everywhere, that's not very secret... \ud83d\ude05</p> <p>We'll fix these things by adding a few extra models. Here's where SQLDev will shine. \u2728</p>"},{"location":"tutorial/sql-databases/#create-multiple-models","title":"Create Multiple Models","text":"<p>In SQLDev, any model class that has <code>table=True</code> is a table model.</p> <p>And any model class that doesn't have <code>table=True</code> is a data model, these ones are actually just Pydantic models (with a couple of small extra features). \ud83e\udd13</p> <p>With SQLDev, we can use inheritance to avoid duplicating all the fields in all the cases.</p>"},{"location":"tutorial/sql-databases/#herobase-the-base-class","title":"<code>HeroBase</code> - the base class","text":"<p>Let's start with a <code>HeroBase</code> model that has all the fields that are shared by all the models:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#hero-the-table-model","title":"<code>Hero</code> - the table model","text":"<p>Then let's create <code>Hero</code>, the actual table model, with the extra fields that are not always in the other models:</p> <ul> <li><code>id</code></li> <li><code>secret_name</code></li> </ul> <p>Because <code>Hero</code> inherits form <code>HeroBase</code>, it also has the fields declared in <code>HeroBase</code>, so all the fields for <code>Hero</code> are:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heropublic-the-public-data-model","title":"<code>HeroPublic</code> - the public data model","text":"<p>Next, we create a <code>HeroPublic</code> model, this is the one that will be returned to the clients of the API.</p> <p>It has the same fields as <code>HeroBase</code>, so it won't include <code>secret_name</code>.</p> <p>Finally, the identity of our heroes is protected! \ud83e\udd77</p> <p>It also re-declares <code>id: int</code>. By doing this, we are making a contract with the API clients, so that they can always expect the <code>id</code> to be there and to be an <code>int</code> (it will never be <code>None</code>).</p> <p>Tip</p> <p>Having the return model ensure that a value is always available and always <code>int</code> (not <code>None</code>) is very useful for the API clients, they can write much simpler code having this certainty.</p> <p>Also, automatically generated clients will have simpler interfaces, so that the developers communicating with your API can have a much better time working with your API. \ud83d\ude0e</p> <p>All the fields in <code>HeroPublic</code> are the same as in <code>HeroBase</code>, with <code>id</code> declared as <code>int</code> (not <code>None</code>):</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#herocreate-the-data-model-to-create-a-hero","title":"<code>HeroCreate</code> - the data model to create a hero","text":"<p>Now we create a <code>HeroCreate</code> model, this is the one that will validate the data from the clients.</p> <p>It has the same fields as <code>HeroBase</code>, and it also has <code>secret_name</code>.</p> <p>Now, when the clients create a new hero, they will send the <code>secret_name</code>, it will be stored in the database, but those secret names won't be returned in the API to the clients.</p> <p>Tip</p> <p>This is how you would handle passwords. Receive them, but don't return them in the API.</p> <p>You would also hash the values of the passwords before storing them, never store them in plain text.</p> <p>The fields of <code>HeroCreate</code> are:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heroupdate-the-data-model-to-update-a-hero","title":"<code>HeroUpdate</code> - the data model to update a hero","text":"<p>We didn't have a way to update a hero in the previous version of the app, but now with multiple models, we can do it. \ud83c\udf89</p> <p>The <code>HeroUpdate</code> data model is somewhat special, it has all the same fields that would be needed to create a new hero, but all the fields are optional (they all have a default value). This way, when you update a hero, you can send just the fields that you want to update.</p> <p>Because all the fields actually change (the type now includes <code>None</code> and they now have a default value of <code>None</code>), we need to re-declare them.</p> <p>We don't really need to inherit from <code>HeroBase</code> because we are re-declaring all the fields. I'll leave it inheriting just for consistency, but this is not necessary. It's more a matter of personal taste. \ud83e\udd37</p> <p>The fields of <code>HeroUpdate</code> are:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-with-herocreate-and-return-a-heropublic","title":"Create with <code>HeroCreate</code> and return a <code>HeroPublic</code>","text":"<p>Now that we have multiple models, we can update the parts of the app that use them.</p> <p>We receive in the request a <code>HeroCreate</code> data model, and from it, we create a <code>Hero</code> table model.</p> <p>This new table model <code>Hero</code> will have the fields sent by the client, and will also have an <code>id</code> generated by the database.</p> <p>Then we return the same table model <code>Hero</code> as is from the function. But as we declare the <code>response_model</code> with the <code>HeroPublic</code> data model, ReadyAPI will use <code>HeroPublic</code> to validate and serialize the data.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Now we use <code>response_model=HeroPublic</code> instead of the return type annotation <code>-&gt; HeroPublic</code> because the value that we are returning is actually not a <code>HeroPublic</code>.</p> <p>If we had declared <code>-&gt; HeroPublic</code>, your editor and linter would complain (rightfully so) that you are returning a <code>Hero</code> instead of a <code>HeroPublic</code>.</p> <p>By declaring it in <code>response_model</code> we are telling ReadyAPI to do its thing, without interfering with the type annotations and the help from your editor and other tools.</p>"},{"location":"tutorial/sql-databases/#read-heroes-with-heropublic","title":"Read Heroes with <code>HeroPublic</code>","text":"<p>We can do the same as before to read <code>Hero</code>s, again, we use <code>response_model=list[HeroPublic]</code> to ensure that the data is validated and serialized correctly.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#read-one-hero-with-heropublic","title":"Read One Hero with <code>HeroPublic</code>","text":"<p>We can read a single hero:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#update-a-hero-with-heroupdate","title":"Update a Hero with <code>HeroUpdate</code>","text":"<p>We can update a hero. For this we use an HTTP <code>PATCH</code> operation.</p> <p>And in the code, we get a <code>dict</code> with all the data sent by the client, only the data sent by the client, excluding any values that would be there just for being the default values. To do it we use <code>exclude_unset=True</code>. This is the main trick. \ud83e\ude84</p> <p>Then we use <code>hero_db.sqldev_update(hero_data)</code> to update the <code>hero_db</code> with the data from <code>hero_data</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#delete-a-hero-again","title":"Delete a Hero Again","text":"<p>Deleting a hero stays pretty much the same.</p> <p>We won't satisfy the desire to refactor everything in this one. \ud83d\ude05</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#run-the-app-again","title":"Run the App Again","text":"<p>You can run the app again:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>If you go to the <code>/docs</code> API UI, you will see that it is now updated, and it won't expect to receive the <code>id</code> from the client when creating a hero, etc.</p>"},{"location":"tutorial/sql-databases/#recap","title":"Recap","text":"<p>You can use SQLDev to interact with a SQL database and simplify the code with data models  and table models.</p> <p>You can learn a lot more at the SQLDev docs, there's a longer mini tutorial on using SQLDev with ReadyAPI. \ud83d\ude80</p>"},{"location":"tutorial/debugging/","title":"Debugging","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can connect the debugger in your editor, for example with Visual Studio Code or PyCharm.</p>"},{"location":"tutorial/debugging/#call-uvicorn","title":"Call <code>uvicorn</code>","text":"<p>In your ReadyAPI application, import and run <code>uvicorn</code> directly:</p> Python 3.8+ <pre><code>import uvicorn\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"tutorial/debugging/#about-__name__-__main__","title":"About <code>__name__ == \"__main__\"</code>","text":"<p>The main purpose of the <code>__name__ == \"__main__\"</code> is to have some code that is executed when your file is called with:</p> <pre><code>$ python myapp.py\n</code></pre> <p>but is not called when another file imports it, like in:</p> <pre><code>from myapp import app\n</code></pre>"},{"location":"tutorial/debugging/#more-details","title":"More details","text":"<p>Let's say your file is named <code>myapp.py</code>.</p> <p>If you run it with:</p> <pre><code>$ python myapp.py\n</code></pre> <p>then the internal variable <code>__name__</code> in your file, created automatically by Python, will have as value the string <code>\"__main__\"</code>.</p> <p>So, the section:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>will run.</p> <p>This won't happen if you import that module (file).</p> <p>So, if you have another file <code>importer.py</code> with:</p> <pre><code>from myapp import app\n\n# Some more code\n</code></pre> <p>in that case, the automatically created variable inside of <code>myapp.py</code> will not have the variable <code>__name__</code> with a value of <code>\"__main__\"</code>.</p> <p>So, the line:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>will not be executed.</p> <p>Info</p> <p>For more information, check the official Python docs.</p>"},{"location":"tutorial/debugging/#run-your-code-with-your-debugger","title":"Run your code with your debugger","text":"<p>Because you are running the Uvicorn server directly from your code, you can call your Python program (your ReadyAPI application) directly from the debugger.</p> <p>For example, in Visual Studio Code, you can:</p> <ul> <li>Go to the \"Debug\" panel.</li> <li>\"Add configuration...\".</li> <li>Select \"Python\"</li> <li>Run the debugger with the option \"<code>Python: Current File (Integrated Terminal)</code>\".</li> </ul> <p>It will then start the server with your ReadyAPI code, stop at your breakpoints, etc.</p> <p>Here's how it might look:</p> <p></p> <p>If you use Pycharm, you can:</p> <ul> <li>Open the \"Run\" menu.</li> <li>Select the option \"Debug...\".</li> <li>Then a context menu shows up.</li> <li>Select the file to debug (in this case, <code>main.py</code>).</li> </ul> <p>It will then start the server with your ReadyAPI code, stop at your breakpoints, etc.</p> <p>Here's how it might look:</p> <p></p>"},{"location":"readyapi-cli/","title":"ReadyAPI CLI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI CLI is a command line program that you can use to serve your ReadyAPI app, manage your ReadyAPI project, and more.</p> <p>When you install ReadyAPI (e.g. with <code>pip install \"readyapi[standard]\"</code>), it includes a package called <code>readyapi-cli</code>, this package provides the <code>readyapi</code> command in the terminal.</p> <p>To run your ReadyAPI app for development, you can use the <code>readyapi dev</code> command:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting development server \ud83d\ude80\n\n             Searching for package file structure from directories with\n             &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with the\n             following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; tip &lt;/font&gt;&lt;/span&gt;  Running in development mode, for production use:\n             &lt;b&gt;readyapi run&lt;/b&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Will watch for changes in these directories:\n             &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#4E9A06\"&gt;&amp;apos;/home/user/code/awesomeapp&amp;apos;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C to\n             quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started reloader process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383138&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt; using WatchFiles\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383153&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>The command line program called <code>readyapi</code> is ReadyAPI CLI.</p> <p>ReadyAPI CLI takes the path to your Python program (e.g. <code>main.py</code>) and automatically detects the <code>ReadyAPI</code> instance (commonly named <code>app</code>), determines the correct import process, and then serves it.</p> <p>For production you would use <code>readyapi run</code> instead. \ud83d\ude80</p> <p>Internally, ReadyAPI CLI uses Uvicorn, a high-performance, production-ready, ASGI server. \ud83d\ude0e</p>"},{"location":"readyapi-cli/#readyapi-dev","title":"<code>readyapi dev</code>","text":"<p>Running <code>readyapi dev</code> initiates development mode.</p> <p>By default, auto-reload is enabled, automatically reloading the server when you make changes to your code. This is resource-intensive and could be less stable than when it's disabled. You should only use it for development. It also listens on the IP address <code>127.0.0.1</code>, which is the IP for your machine to communicate with itself alone (<code>localhost</code>).</p>"},{"location":"readyapi-cli/#readyapi-run","title":"<code>readyapi run</code>","text":"<p>Executing <code>readyapi run</code> starts ReadyAPI in production mode by default.</p> <p>By default, auto-reload is disabled. It also listens on the IP address <code>0.0.0.0</code>, which means all the available IP addresses, this way it will be publicly accessible to anyone that can communicate with the machine. This is how you would normally run it in production, for example, in a container.</p> <p>In most cases you would (and should) have a \"termination proxy\" handling HTTPS for you on top, this will depend on how you deploy your application, your provider might do this for you, or you might need to set it up yourself.</p> <p>Tip</p> <p>You can learn more about it in the deployment documentation.</p>"},{"location":"how-to/testing-database/","title":"Testing a Database","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can study about databases, SQL, and SQLDev in the SQLDev docs. \ud83e\udd13</p> <p>There's a mini tutorial on using SQLDev with ReadyAPI. \u2728</p> <p>That tutorial includes a section about testing SQL databases. \ud83d\ude0e</p>"},{"location":"reference/","title":"Reference","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the ReadyAPI parts you can use in your applications.</p> <p>If you want to learn ReadyAPI you are much better off reading the ReadyAPI Tutorial.</p>"},{"location":"reference/readyapi/","title":"<code>ReadyAPI</code> class","text":"<p>Here's the reference information for the <code>ReadyAPI</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>ReadyAPI</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI","title":"readyapi.ReadyAPI","text":"<pre><code>ReadyAPI(\n    *,\n    debug=False,\n    routes=None,\n    title=\"ReadyAPI\",\n    summary=None,\n    description=\"\",\n    version=\"0.1.0\",\n    openapi_url=\"/openapi.json\",\n    openapi_tags=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    redirect_slashes=True,\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    swagger_ui_oauth2_redirect_url=\"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth=None,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    terms_of_service=None,\n    contact=None,\n    license_info=None,\n    openapi_prefix=\"\",\n    root_path=\"\",\n    root_path_in_servers=True,\n    responses=None,\n    callbacks=None,\n    webhooks=None,\n    deprecated=None,\n    include_in_schema=True,\n    swagger_ui_parameters=None,\n    generate_unique_id_function=Default(generate_unique_id),\n    separate_input_output_schemas=True,\n    **extra\n)\n</code></pre> <p>               Bases: <code>Starlette</code></p> <p><code>ReadyAPI</code> app class, the main entrypoint to use ReadyAPI.</p> <p>Read more in the ReadyAPI docs for First Steps.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n</code></pre> PARAMETER DESCRIPTION <code>debug</code> <p>Boolean indicating if debug tracebacks should be returned on server errors.</p> <p>Read more in the Starlette docs for Applications.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>The title of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(title=\"ChimichangApp\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'ReadyAPI'</code> </p> <code>summary</code> <p>A short summary of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the API. Supports Markdown (using CommonMark syntax).</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    description=\"\"\"\n                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                ## Items\n\n                You can **read items**.\n\n                ## Users\n\n                You will be able to:\n\n                * **Create users** (_not implemented_).\n                * **Read users** (_not implemented_).\n\n                \"\"\"\n)\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>The version of the API.</p> <p>Note This is the version of your application, not the version of the OpenAPI specification nor the version of ReadyAPI being used.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(version=\"0.0.1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'0.1.0'</code> </p> <code>openapi_url</code> <p>The URL where the OpenAPI schema will be served from.</p> <p>If you set it to <code>None</code>, no OpenAPI schema will be served publicly, and the default automatic endpoints <code>/docs</code> and <code>/redoc</code> will also be disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/openapi.json'</code> </p> <code>openapi_tags</code> <p>A list of tags used by OpenAPI, these are the same <code>tags</code> you can set in the path operations, like:</p> <ul> <li><code>@app.get(\"/users/\", tags=[\"users\"])</code></li> <li><code>@app.get(\"/items/\", tags=[\"items\"])</code></li> </ul> <p>The order of the tags can be used to specify the order shown in tools like Swagger UI, used in the automatic path <code>/docs</code>.</p> <p>It's not required to specify all the tags used.</p> <p>The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</p> <p>The value of each item is a <code>dict</code> containing:</p> <ul> <li><code>name</code>: The name of the tag.</li> <li><code>description</code>: A short description of the tag.     CommonMark syntax MAY be used for rich     text representation.</li> <li><code>externalDocs</code>: Additional external documentation for this tag. If     provided, it would contain a <code>dict</code> with:<ul> <li><code>description</code>: A short description of the target documentation.     CommonMark syntax MAY be used for     rich text representation.</li> <li><code>url</code>: The URL for the target documentation. Value MUST be in     the form of a URL.</li> </ul> </li> </ul> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>servers</code> <p>A <code>list</code> of <code>dict</code>s with connectivity information to a target server.</p> <p>You would use it, for example, if your application is served from different domains and you want to use the same Swagger UI in the browser to interact with each of them (instead of having multiple browser tabs open). Or if you want to leave fixed the possible URLs.</p> <p>If the servers <code>list</code> is not provided, or is an empty <code>list</code>, the default value would be a <code>dict</code> with a <code>url</code> value of <code>/</code>.</p> <p>Each item in the <code>list</code> is a <code>dict</code> containing:</p> <ul> <li><code>url</code>: A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</li> <li><code>description</code>: An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.</li> <li><code>variables</code>: A <code>dict</code> between a variable name and its value. The value     is used for substitution in the server's URL template.</li> </ul> <p>Read more in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Union[str, Any]]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of global dependencies, they will be applied to each path operation, including in sub-routers.</p> <p>Read more about it in the ReadyAPI docs for Global Dependencies.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import func_dep_1, func_dep_2\n\napp = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(redirect_slashes=True)  # the default\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>With this app, if a client goes to <code>/items</code> (without a trailing slash), they will be automatically redirected with an HTTP status code of 307 to <code>/items/</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>docs_url</code> <p>The path to the automatic interactive API documentation. It is handled in the browser by Swagger UI.</p> <p>The default URL is <code>/docs</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs'</code> </p> <code>redoc_url</code> <p>The path to the alternative automatic interactive API documentation provided by ReDoc.</p> <p>The default URL is <code>/redoc</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/redoc'</code> </p> <code>swagger_ui_oauth2_redirect_url</code> <p>The OAuth2 redirect endpoint for the Swagger UI.</p> <p>By default it is <code>/docs/oauth2-redirect</code>.</p> <p>This is only used if you use OAuth2 (with the \"Authorize\" button) with Swagger UI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs/oauth2-redirect'</code> </p> <code>swagger_ui_init_oauth</code> <p>OAuth2 configuration for the Swagger UI, by default shown at <code>/docs</code>.</p> <p>Read more about the available configuration options in the Swagger UI docs.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>middleware</code> <p>List of middleware to be added when creating the application.</p> <p>In ReadyAPI you would normally do this with <code>app.add_middleware()</code> instead.</p> <p>Read more in the ReadyAPI docs for Middleware.</p> <p> TYPE: <code>Optional[Sequence[Middleware]]</code> DEFAULT: <code>None</code> </p> <code>exception_handlers</code> <p>A dictionary with handlers for exceptions.</p> <p>In ReadyAPI, you would normally use the decorator <code>@app.exception_handler()</code>.</p> <p>Read more in the ReadyAPI docs for Handling Errors.</p> <p> TYPE: <code>Optional[Dict[Union[int, Type[Exception]], Callable[[Request, Any], Coroutine[Any, Any, Response]]]]</code> DEFAULT: <code>None</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[AppType]]</code> DEFAULT: <code>None</code> </p> <code>terms_of_service</code> <p>A URL to the Terms of Service for your API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact</code> <p>A dictionary with the contact information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) The name of the contact person/organization.</li> <li><code>url</code>: (<code>str</code>) A URL pointing to the contact information. MUST be in     the format of a URL.</li> <li><code>email</code>: (<code>str</code>) The email address of the contact person/organization.     MUST be in the format of an email address.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>license_info</code> <p>A dictionary with the license information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) REQUIRED (if a <code>license_info</code> is set). The     license name used for the API.</li> <li><code>identifier</code>: (<code>str</code>) An SPDX license expression     for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code>     field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</li> <li><code>url</code>: (<code>str</code>) A URL to the license used for the API. This MUST be     the format of a URL.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>openapi_prefix</code> <p>A URL prefix for the OpenAPI URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path</code> <p>A path prefix handled by a proxy that is not seen by the application but is seen by external clients, which affects things like Swagger UI.</p> <p>Read more about it at the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path=\"/api/v1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path_in_servers</code> <p>To disable automatically generating the URLs in the <code>servers</code> field in the autogenerated OpenAPI using the <code>root_path</code>.</p> <p>Read more about it in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path_in_servers=False)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>webhooks</code> <p>Add OpenAPI webhooks. This is similar to <code>callbacks</code> but it doesn't depend on specific path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Note: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p> <p> TYPE: <code>Optional[APIRouter]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations as deprecated. You probably don't need it, but it's available.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>swagger_ui_parameters</code> <p>Parameters to configure Swagger UI, the autogenerated interactive API documentation (by default at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs about how to Configure Swagger UI.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> <code>separate_input_output_schemas</code> <p>Whether to generate separate OpenAPI schemas for request body and response body when the results would be more precise.</p> <p>This is particularly useful when automatically generating clients.</p> <p>For example, if you have a model like:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str] = []\n</code></pre> <p>When <code>Item</code> is used for input, a request body, <code>tags</code> is not required, the client doesn't have to provide it.</p> <p>But when using <code>Item</code> for output, for a response body, <code>tags</code> is always available because it has a default value, even if it's just an empty list. So, the client should be able to always expect it.</p> <p>In this case, there would be two different schemas, one for input and another one for output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**extra</code> <p>Extra keyword arguments to be stored in the app, not used by ReadyAPI anywhere.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The title of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(title=\"ChimichangApp\")\n            ```\n            \"\"\"\n        ),\n    ] = \"ReadyAPI\",\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A short summary of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            '''\n            A description of the API. Supports Markdown (using\n            [CommonMark syntax](https://commonmark.org/)).\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                description=\"\"\"\n                            ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                            ## Items\n\n                            You can **read items**.\n\n                            ## Users\n\n                            You will be able to:\n\n                            * **Create users** (_not implemented_).\n                            * **Read users** (_not implemented_).\n\n                            \"\"\"\n            )\n            ```\n            '''\n        ),\n    ] = \"\",\n    version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version of the API.\n\n            **Note** This is the version of your application, not the version of\n            the OpenAPI specification nor the version of ReadyAPI being used.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(version=\"0.0.1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"0.1.0\",\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            If you set it to `None`, no OpenAPI schema will be served publicly, and\n            the default automatic endpoints `/docs` and `/redoc` will also be\n            disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#openapi-url).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/openapi.json\",\n    openapi_tags: Annotated[\n        Optional[List[Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            A list of tags used by OpenAPI, these are the same `tags` you can set\n            in the *path operations*, like:\n\n            * `@app.get(\"/users/\", tags=[\"users\"])`\n            * `@app.get(\"/items/\", tags=[\"items\"])`\n\n            The order of the tags can be used to specify the order shown in\n            tools like Swagger UI, used in the automatic path `/docs`.\n\n            It's not required to specify all the tags used.\n\n            The tags that are not declared MAY be organized randomly or based\n            on the tools' logic. Each tag name in the list MUST be unique.\n\n            The value of each item is a `dict` containing:\n\n            * `name`: The name of the tag.\n            * `description`: A short description of the tag.\n                [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                text representation.\n            * `externalDocs`: Additional external documentation for this tag. If\n                provided, it would contain a `dict` with:\n                * `description`: A short description of the target documentation.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for\n                    rich text representation.\n                * `url`: The URL for the target documentation. Value MUST be in\n                    the form of a URL.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-tags).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            tags_metadata = [\n                {\n                    \"name\": \"users\",\n                    \"description\": \"Operations with users. The **login** logic is also here.\",\n                },\n                {\n                    \"name\": \"items\",\n                    \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                    \"externalDocs\": {\n                        \"description\": \"Items external docs\",\n                        \"url\": \"https://readyapi.github.io/\",\n                    },\n                },\n            ]\n\n            app = ReadyAPI(openapi_tags=tags_metadata)\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [ReadyAPI docs for Global Dependencies](https://readyapi.github.io/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            app = ReadyAPI(default_response_class=ORJSONResponse)\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the automatic interactive API documentation.\n            It is handled in the browser by Swagger UI.\n\n            The default URL is `/docs`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n            ```\n            \"\"\"\n        ),\n    ] = \"/docs\",\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the alternative automatic interactive API documentation\n            provided by ReDoc.\n\n            The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect endpoint for the Swagger UI.\n\n            By default it is `/docs/oauth2-redirect`.\n\n            This is only used if you use OAuth2 (with the \"Authorize\" button)\n            with Swagger UI.\n            \"\"\"\n        ),\n    ] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n            Read more about the available configuration options in the\n            [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n            \"\"\"\n        ),\n    ] = None,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In ReadyAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In ReadyAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    terms_of_service: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A URL to the Terms of Service for your API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    contact: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the contact information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) The name of the contact person/organization.\n            * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                the format of a URL.\n            * `email`: (`str`) The email address of the contact person/organization.\n                MUST be in the format of an email address.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                contact={\n                    \"name\": \"Deadpoolio the Amazing\",\n                    \"url\": \"http://x-force.example.com/contact/\",\n                    \"email\": \"dp@x-force.example.com\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    license_info: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the license information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                license name used for the API.\n            * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                for the API. The `identifier` field is mutually exclusive of the `url`\n                field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n            * `url`: (`str`) A URL to the license used for the API. This MUST be\n                the format of a URL.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                license_info={\n                    \"name\": \"Apache 2.0\",\n                    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    openapi_prefix: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A URL prefix for the OpenAPI URL.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n            follows more closely the ASGI standard, is simpler, and more\n            automatic.\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A path prefix handled by a proxy that is not seen by the application\n            but is seen by external clients, which affects things like Swagger UI.\n\n            Read more about it at the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path=\"/api/v1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path_in_servers: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To disable automatically generating the URLs in the `servers` field\n            in the autogenerated OpenAPI using the `root_path`.\n\n            Read more about it in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path_in_servers=False)\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Parameters to configure Swagger UI, the autogenerated interactive API\n            documentation (by default at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs about how to Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    separate_input_output_schemas: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to generate separate OpenAPI schemas for request body and\n            response body when the results would be more precise.\n\n            This is particularly useful when automatically generating clients.\n\n            For example, if you have a model like:\n\n            ```python\n            from pydantic import BaseModel\n\n            class Item(BaseModel):\n                name: str\n                tags: list[str] = []\n            ```\n\n            When `Item` is used for input, a request body, `tags` is not required,\n            the client doesn't have to provide it.\n\n            But when using `Item` for output, for a response body, `tags` is always\n            available because it has a default value, even if it's just an empty\n            list. So, the client should be able to always expect it.\n\n            In this case, there would be two different schemas, one for input and\n            another one for output.\n            \"\"\"\n        ),\n    ] = True,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by ReadyAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    self.debug = debug\n    self.title = title\n    self.summary = summary\n    self.description = description\n    self.version = version\n    self.terms_of_service = terms_of_service\n    self.contact = contact\n    self.license_info = license_info\n    self.openapi_url = openapi_url\n    self.openapi_tags = openapi_tags\n    self.root_path_in_servers = root_path_in_servers\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.swagger_ui_parameters = swagger_ui_parameters\n    self.servers = servers or []\n    self.separate_input_output_schemas = separate_input_output_schemas\n    self.extra = extra\n    self.openapi_version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version string of OpenAPI.\n\n            ReadyAPI will generate OpenAPI version 3.1.0, and will output that as\n            the OpenAPI version. But some tools, even though they might be\n            compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n            So you could override this value to trick those tools into using\n            the generated OpenAPI. Have in mind that this is a hack. But if you\n            avoid using features added in OpenAPI 3.1.0, it might work for your\n            use case.\n\n            This is not passed as a parameter to the `ReadyAPI` class to avoid\n            giving the false idea that ReadyAPI would generate a different OpenAPI\n            schema. It is only available as an attribute.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI()\n\n            app.openapi_version = \"3.0.2\"\n            ```\n            \"\"\"\n        ),\n    ] = \"3.1.0\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    # TODO: remove when discarding the openapi_prefix parameter\n    if openapi_prefix:\n        logger.warning(\n            '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n            \"follows more closely the ASGI standard, is simpler, and more \"\n            \"automatic. Check the docs at \"\n            \"https://readyapi.github.io/advanced/sub-applications/\"\n        )\n    self.webhooks: Annotated[\n        routing.APIRouter,\n        Doc(\n            \"\"\"\n            The `app.webhooks` attribute is an `APIRouter` with the *path\n            operations* that will be used just for documentation of webhooks.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = webhooks or routing.APIRouter()\n    self.root_path = root_path or openapi_prefix\n    self.state: Annotated[\n        State,\n        Doc(\n            \"\"\"\n            A state object for the application. This is the same object for the\n            entire application, it doesn't change from request to request.\n\n            You normally wouldn't use this in ReadyAPI, for most of the cases you\n            would instead use ReadyAPI dependencies.\n\n            This is simply inherited from Starlette.\n\n            Read more about it in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n            \"\"\"\n        ),\n    ] = State()\n    self.dependency_overrides: Annotated[\n        Dict[Callable[..., Any], Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A dictionary with overrides for the dependencies.\n\n            Each key is the original dependency callable, and the value is the\n            actual dependency that should be called.\n\n            This is for testing, to replace expensive dependencies with testing\n            versions.\n\n            Read more about it in the\n            [ReadyAPI docs for Testing Dependencies with Overrides](https://readyapi.github.io/advanced/testing-dependencies/).\n            \"\"\"\n        ),\n    ] = {}\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        default_response_class=default_response_class,\n        dependencies=dependencies,\n        callbacks=callbacks,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        responses=responses,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    self.exception_handlers: Dict[\n        Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n    ] = {} if exception_handlers is None else dict(exception_handlers)\n    self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n    self.exception_handlers.setdefault(\n        RequestValidationError, request_validation_exception_handler\n    )\n    self.exception_handlers.setdefault(\n        WebSocketRequestValidationError,\n        # Starlette still has incorrect type specification for the handlers\n        websocket_request_validation_exception_handler,  # type: ignore\n    )\n\n    self.user_middleware: List[Middleware] = (\n        [] if middleware is None else list(middleware)\n    )\n    self.middleware_stack: Union[ASGIApp, None] = None\n    self.setup()\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi_version","title":"openapi_version  <code>instance-attribute</code>","text":"<pre><code>openapi_version = '3.1.0'\n</code></pre> <p>The version string of OpenAPI.</p> <p>ReadyAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.</p> <p>So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.</p> <p>This is not passed as a parameter to the <code>ReadyAPI</code> class to avoid giving the false idea that ReadyAPI would generate a different OpenAPI schema. It is only available as an attribute.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\napp.openapi_version = \"3.0.2\"\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.webhooks","title":"webhooks  <code>instance-attribute</code>","text":"<pre><code>webhooks = webhooks or APIRouter()\n</code></pre> <p>The <code>app.webhooks</code> attribute is an <code>APIRouter</code> with the path operations that will be used just for documentation of webhooks.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state = State()\n</code></pre> <p>A state object for the application. This is the same object for the entire application, it doesn't change from request to request.</p> <p>You normally wouldn't use this in ReadyAPI, for most of the cases you would instead use ReadyAPI dependencies.</p> <p>This is simply inherited from Starlette.</p> <p>Read more about it in the Starlette docs for Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.dependency_overrides","title":"dependency_overrides  <code>instance-attribute</code>","text":"<pre><code>dependency_overrides = {}\n</code></pre> <p>A dictionary with overrides for the dependencies.</p> <p>Each key is the original dependency callable, and the value is the actual dependency that should be called.</p> <p>This is for testing, to replace expensive dependencies with testing versions.</p> <p>Read more about it in the ReadyAPI docs for Testing Dependencies with Overrides.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi","title":"openapi","text":"<pre><code>openapi()\n</code></pre> <p>Generate the OpenAPI schema of the application. This is called by ReadyAPI internally.</p> <p>The first time it is called it stores the result in the attribute <code>app.openapi_schema</code>, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.</p> <p>If you need to modify the generated OpenAPI schema, you could modify it.</p> <p>Read more in the ReadyAPI docs for OpenAPI.</p> Source code in <code>readyapi/applications.py</code> <pre><code>def openapi(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Generate the OpenAPI schema of the application. This is called by ReadyAPI\n    internally.\n\n    The first time it is called it stores the result in the attribute\n    `app.openapi_schema`, and next times it is called, it just returns that same\n    result. To avoid the cost of generating the schema every time.\n\n    If you need to modify the generated OpenAPI schema, you could modify it.\n\n    Read more in the\n    [ReadyAPI docs for OpenAPI](https://readyapi.github.io/how-to/extending-openapi/).\n    \"\"\"\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            summary=self.summary,\n            description=self.description,\n            terms_of_service=self.terms_of_service,\n            contact=self.contact,\n            license_info=self.license_info,\n            routes=self.routes,\n            webhooks=self.webhooks.routes,\n            tags=self.openapi_tags,\n            servers=self.servers,\n            separate_input_output_schemas=self.separate_input_output_schemas,\n        )\n    return self.openapi_schema\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI, WebSocket\n\napp = ReadyAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ```python\n    from readyapi import ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n\n    @app.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path,\n            func,\n            name=name,\n            dependencies=dependencies,\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    responses=None,\n    deprecated=None,\n    include_in_schema=True,\n    default_response_class=Default(JSONResponse),\n    callbacks=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include an <code>APIRouter</code> in the same app.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\nfrom .users import users_router\n\napp = ReadyAPI()\n\napp.include_router(users_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_token_header\nfrom .internal import admin\n\napp = ReadyAPI()\n\napp.include_router(\n    admin.router,\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all the path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    deprecated=True,\n)\n</code></pre> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    include_in_schema=False,\n)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default_response_class</code> <p>Default response class to be used for the path operations in this router.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    default_response_class=ORJSONResponse,\n)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import get_token_header\n            from .internal import admin\n\n            app = ReadyAPI()\n\n            app.include_router(\n                admin.router,\n                dependencies=[Depends(get_token_header)],\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all the *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                deprecated=True,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                include_in_schema=False,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Default response class to be used for the *path operations* in this\n            router.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                default_response_class=ORJSONResponse,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include an `APIRouter` in the same app.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    from .users import users_router\n\n    app = ReadyAPI()\n\n    app.include_router(users_router)\n    ```\n    \"\"\"\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        default_response_class=default_response_class,\n        callbacks=callbacks,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n    ```\n    \"\"\"\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n    ```\n    \"\"\"\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n    ```\n    \"\"\"\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n    ```\n    \"\"\"\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n    ```\n    \"\"\"\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n@app.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Response\n\n    app = ReadyAPI()\n\n    @app.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n    ```\n    \"\"\"\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n    ```\n    \"\"\"\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n    ```\n    \"\"\"\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the application.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the application.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n    return self.router.on_event(event_type)\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware","title":"middleware","text":"<pre><code>middleware(middleware_type)\n</code></pre> <p>Add a middleware to the application.</p> <p>Read more about it in the ReadyAPI docs for Middleware.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware--example","title":"Example","text":"<pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> PARAMETER DESCRIPTION <code>middleware_type</code> <p>The type of middleware. Currently only supports <code>http</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def middleware(\n    self,\n    middleware_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of middleware. Currently only supports `http`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a middleware to the application.\n\n    Read more about it in the\n    [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n\n    ## Example\n\n    ```python\n    import time\n\n    from readyapi import ReadyAPI, Request\n\n    app = ReadyAPI()\n\n\n    @app.middleware(\"http\")\n    async def add_process_time_header(request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc_class_or_status_code)\n</code></pre> <p>Add an exception handler to the app.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n</code></pre> PARAMETER DESCRIPTION <code>exc_class_or_status_code</code> <p>The Exception class this would handle, or a status code.</p> <p> TYPE: <code>Union[int, Type[Exception]]</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def exception_handler(\n    self,\n    exc_class_or_status_code: Annotated[\n        Union[int, Type[Exception]],\n        Doc(\n            \"\"\"\n            The Exception class this would handle, or a status code.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an exception handler to the app.\n\n    Read more about it in the\n    [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Request\n    from readyapi.responses import JSONResponse\n\n\n    class UnicornException(Exception):\n        def __init__(self, name: str):\n            self.name = name\n\n\n    app = ReadyAPI()\n\n\n    @app.exception_handler(UnicornException)\n    async def unicorn_exception_handler(request: Request, exc: UnicornException):\n        return JSONResponse(\n            status_code=418,\n            content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n        )\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_exception_handler(exc_class_or_status_code, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/parameters/","title":"Request Parameters","text":"<p>Here's the reference information for the request parameters.</p> <p>These are the special functions that you can put in path operation function parameters or dependency functions with <code>Annotated</code> to get data from the request.</p> <p>It includes:</p> <ul> <li><code>Query()</code></li> <li><code>Path()</code></li> <li><code>Body()</code></li> <li><code>Cookie()</code></li> <li><code>Header()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>You can import them all directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Body, Cookie, File, Form, Header, Path, Query\n</code></pre>"},{"location":"reference/parameters/#readyapi.Query","title":"readyapi.Query","text":"<pre><code>Query(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Path","title":"readyapi.Path","text":"<pre><code>Path(\n    default=...,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> <p>Declare a path parameter for a path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Parameters and Numeric Validations.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Path\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n):\n    return {\"item_id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>...</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [ReadyAPI docs for Path Parameters and Numeric Validations](https://readyapi.github.io/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import ReadyAPI, Path\n\n    app = ReadyAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Body","title":"readyapi.Body","text":"<pre><code>Body(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    embed=None,\n    media_type=\"application/json\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>embed</code> <p>When <code>embed</code> is <code>True</code>, the parameter will be expected in a JSON body as a key instead of being the JSON body itself.</p> <p>This happens automatically when more than one <code>Body</code> parameter is declared.</p> <p>Read more about it in the ReadyAPI docs for Body - Multiple Parameters.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/json'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [ReadyAPI docs for Body - Multiple Parameters](https://readyapi.github.io/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Cookie","title":"readyapi.Cookie","text":"<pre><code>Cookie(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Header","title":"readyapi.Header","text":"<pre><code>Header(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    convert_underscores=True,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>convert_underscores</code> <p>Automatically convert underscores to hyphens in the parameter field name.</p> <p>Read more about it in the ReadyAPI docs for Header Parameters</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [ReadyAPI docs for Header Parameters](https://readyapi.github.io/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Form","title":"readyapi.Form","text":"<pre><code>Form(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"application/x-www-form-urlencoded\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/x-www-form-urlencoded'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.File","title":"readyapi.File","text":"<pre><code>File(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"multipart/form-data\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'multipart/form-data'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/status/","title":"Status Codes","text":"<p>You can import the <code>status</code> module from <code>readyapi</code>:</p> <pre><code>from readyapi import status\n</code></pre> <p><code>status</code> is provided directly by Starlette.</p> <p>It contains a group of named constants (variables) with integer status codes.</p> <p>For example:</p> <ul> <li>200: <code>status.HTTP_200_OK</code></li> <li>403: <code>status.HTTP_403_FORBIDDEN</code></li> <li>etc.</li> </ul> <p>It can be convenient to quickly access HTTP (and WebSocket) status codes in your app, using autocompletion for the name without having to remember the integer status codes by memory.</p> <p>Read more about it in the ReadyAPI docs about Response Status Code.</p>"},{"location":"reference/status/#example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n</code></pre>"},{"location":"reference/status/#readyapi.status","title":"readyapi.status","text":"<p>HTTP codes See HTTP Status Code Registry: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p>And RFC 2324 - https://tools.ietf.org/html/rfc2324</p>"},{"location":"reference/status/#readyapi.status.HTTP_100_CONTINUE","title":"HTTP_100_CONTINUE  <code>module-attribute</code>","text":"<pre><code>HTTP_100_CONTINUE = 100\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_101_SWITCHING_PROTOCOLS","title":"HTTP_101_SWITCHING_PROTOCOLS  <code>module-attribute</code>","text":"<pre><code>HTTP_101_SWITCHING_PROTOCOLS = 101\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_102_PROCESSING","title":"HTTP_102_PROCESSING  <code>module-attribute</code>","text":"<pre><code>HTTP_102_PROCESSING = 102\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_103_EARLY_HINTS","title":"HTTP_103_EARLY_HINTS  <code>module-attribute</code>","text":"<pre><code>HTTP_103_EARLY_HINTS = 103\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_200_OK","title":"HTTP_200_OK  <code>module-attribute</code>","text":"<pre><code>HTTP_200_OK = 200\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_201_CREATED","title":"HTTP_201_CREATED  <code>module-attribute</code>","text":"<pre><code>HTTP_201_CREATED = 201\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_202_ACCEPTED","title":"HTTP_202_ACCEPTED  <code>module-attribute</code>","text":"<pre><code>HTTP_202_ACCEPTED = 202\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_203_NON_AUTHORITATIVE_INFORMATION","title":"HTTP_203_NON_AUTHORITATIVE_INFORMATION  <code>module-attribute</code>","text":"<pre><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_204_NO_CONTENT","title":"HTTP_204_NO_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_204_NO_CONTENT = 204\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_205_RESET_CONTENT","title":"HTTP_205_RESET_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_205_RESET_CONTENT = 205\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_206_PARTIAL_CONTENT","title":"HTTP_206_PARTIAL_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_206_PARTIAL_CONTENT = 206\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_207_MULTI_STATUS","title":"HTTP_207_MULTI_STATUS  <code>module-attribute</code>","text":"<pre><code>HTTP_207_MULTI_STATUS = 207\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_208_ALREADY_REPORTED","title":"HTTP_208_ALREADY_REPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_208_ALREADY_REPORTED = 208\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_226_IM_USED","title":"HTTP_226_IM_USED  <code>module-attribute</code>","text":"<pre><code>HTTP_226_IM_USED = 226\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_300_MULTIPLE_CHOICES","title":"HTTP_300_MULTIPLE_CHOICES  <code>module-attribute</code>","text":"<pre><code>HTTP_300_MULTIPLE_CHOICES = 300\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_301_MOVED_PERMANENTLY","title":"HTTP_301_MOVED_PERMANENTLY  <code>module-attribute</code>","text":"<pre><code>HTTP_301_MOVED_PERMANENTLY = 301\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_302_FOUND","title":"HTTP_302_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_302_FOUND = 302\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_303_SEE_OTHER","title":"HTTP_303_SEE_OTHER  <code>module-attribute</code>","text":"<pre><code>HTTP_303_SEE_OTHER = 303\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_304_NOT_MODIFIED","title":"HTTP_304_NOT_MODIFIED  <code>module-attribute</code>","text":"<pre><code>HTTP_304_NOT_MODIFIED = 304\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_305_USE_PROXY","title":"HTTP_305_USE_PROXY  <code>module-attribute</code>","text":"<pre><code>HTTP_305_USE_PROXY = 305\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_306_RESERVED","title":"HTTP_306_RESERVED  <code>module-attribute</code>","text":"<pre><code>HTTP_306_RESERVED = 306\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_307_TEMPORARY_REDIRECT","title":"HTTP_307_TEMPORARY_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_307_TEMPORARY_REDIRECT = 307\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_308_PERMANENT_REDIRECT","title":"HTTP_308_PERMANENT_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_308_PERMANENT_REDIRECT = 308\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_400_BAD_REQUEST","title":"HTTP_400_BAD_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_400_BAD_REQUEST = 400\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_401_UNAUTHORIZED","title":"HTTP_401_UNAUTHORIZED  <code>module-attribute</code>","text":"<pre><code>HTTP_401_UNAUTHORIZED = 401\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_402_PAYMENT_REQUIRED","title":"HTTP_402_PAYMENT_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_402_PAYMENT_REQUIRED = 402\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_403_FORBIDDEN","title":"HTTP_403_FORBIDDEN  <code>module-attribute</code>","text":"<pre><code>HTTP_403_FORBIDDEN = 403\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_404_NOT_FOUND","title":"HTTP_404_NOT_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_404_NOT_FOUND = 404\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_405_METHOD_NOT_ALLOWED","title":"HTTP_405_METHOD_NOT_ALLOWED  <code>module-attribute</code>","text":"<pre><code>HTTP_405_METHOD_NOT_ALLOWED = 405\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_406_NOT_ACCEPTABLE","title":"HTTP_406_NOT_ACCEPTABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_406_NOT_ACCEPTABLE = 406\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_407_PROXY_AUTHENTICATION_REQUIRED","title":"HTTP_407_PROXY_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_408_REQUEST_TIMEOUT","title":"HTTP_408_REQUEST_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_408_REQUEST_TIMEOUT = 408\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_409_CONFLICT","title":"HTTP_409_CONFLICT  <code>module-attribute</code>","text":"<pre><code>HTTP_409_CONFLICT = 409\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_410_GONE","title":"HTTP_410_GONE  <code>module-attribute</code>","text":"<pre><code>HTTP_410_GONE = 410\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_411_LENGTH_REQUIRED","title":"HTTP_411_LENGTH_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_411_LENGTH_REQUIRED = 411\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_412_PRECONDITION_FAILED","title":"HTTP_412_PRECONDITION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_412_PRECONDITION_FAILED = 412\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_413_REQUEST_ENTITY_TOO_LARGE","title":"HTTP_413_REQUEST_ENTITY_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_414_REQUEST_URI_TOO_LONG","title":"HTTP_414_REQUEST_URI_TOO_LONG  <code>module-attribute</code>","text":"<pre><code>HTTP_414_REQUEST_URI_TOO_LONG = 414\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_415_UNSUPPORTED_MEDIA_TYPE","title":"HTTP_415_UNSUPPORTED_MEDIA_TYPE  <code>module-attribute</code>","text":"<pre><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE","title":"HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_417_EXPECTATION_FAILED","title":"HTTP_417_EXPECTATION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_417_EXPECTATION_FAILED = 417\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_418_IM_A_TEAPOT","title":"HTTP_418_IM_A_TEAPOT  <code>module-attribute</code>","text":"<pre><code>HTTP_418_IM_A_TEAPOT = 418\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_421_MISDIRECTED_REQUEST","title":"HTTP_421_MISDIRECTED_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_421_MISDIRECTED_REQUEST = 421\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_422_UNPROCESSABLE_ENTITY","title":"HTTP_422_UNPROCESSABLE_ENTITY  <code>module-attribute</code>","text":"<pre><code>HTTP_422_UNPROCESSABLE_ENTITY = 422\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_423_LOCKED","title":"HTTP_423_LOCKED  <code>module-attribute</code>","text":"<pre><code>HTTP_423_LOCKED = 423\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_424_FAILED_DEPENDENCY","title":"HTTP_424_FAILED_DEPENDENCY  <code>module-attribute</code>","text":"<pre><code>HTTP_424_FAILED_DEPENDENCY = 424\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_425_TOO_EARLY","title":"HTTP_425_TOO_EARLY  <code>module-attribute</code>","text":"<pre><code>HTTP_425_TOO_EARLY = 425\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_426_UPGRADE_REQUIRED","title":"HTTP_426_UPGRADE_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_426_UPGRADE_REQUIRED = 426\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_428_PRECONDITION_REQUIRED","title":"HTTP_428_PRECONDITION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_428_PRECONDITION_REQUIRED = 428\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_429_TOO_MANY_REQUESTS","title":"HTTP_429_TOO_MANY_REQUESTS  <code>module-attribute</code>","text":"<pre><code>HTTP_429_TOO_MANY_REQUESTS = 429\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE","title":"HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS  <code>module-attribute</code>","text":"<pre><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_500_INTERNAL_SERVER_ERROR","title":"HTTP_500_INTERNAL_SERVER_ERROR  <code>module-attribute</code>","text":"<pre><code>HTTP_500_INTERNAL_SERVER_ERROR = 500\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_501_NOT_IMPLEMENTED","title":"HTTP_501_NOT_IMPLEMENTED  <code>module-attribute</code>","text":"<pre><code>HTTP_501_NOT_IMPLEMENTED = 501\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_502_BAD_GATEWAY","title":"HTTP_502_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>HTTP_502_BAD_GATEWAY = 502\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_503_SERVICE_UNAVAILABLE","title":"HTTP_503_SERVICE_UNAVAILABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_503_SERVICE_UNAVAILABLE = 503\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_504_GATEWAY_TIMEOUT","title":"HTTP_504_GATEWAY_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_504_GATEWAY_TIMEOUT = 504\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_505_HTTP_VERSION_NOT_SUPPORTED","title":"HTTP_505_HTTP_VERSION_NOT_SUPPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_506_VARIANT_ALSO_NEGOTIATES","title":"HTTP_506_VARIANT_ALSO_NEGOTIATES  <code>module-attribute</code>","text":"<pre><code>HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_507_INSUFFICIENT_STORAGE","title":"HTTP_507_INSUFFICIENT_STORAGE  <code>module-attribute</code>","text":"<pre><code>HTTP_507_INSUFFICIENT_STORAGE = 507\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_508_LOOP_DETECTED","title":"HTTP_508_LOOP_DETECTED  <code>module-attribute</code>","text":"<pre><code>HTTP_508_LOOP_DETECTED = 508\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_510_NOT_EXTENDED","title":"HTTP_510_NOT_EXTENDED  <code>module-attribute</code>","text":"<pre><code>HTTP_510_NOT_EXTENDED = 510\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"HTTP_511_NETWORK_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n</code></pre> <p>WebSocket codes https://www.iana.org/assignments/websocket/websocket.xml#close-code-number https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent</p>"},{"location":"reference/status/#readyapi.status.WS_1000_NORMAL_CLOSURE","title":"WS_1000_NORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1000_NORMAL_CLOSURE = 1000\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1001_GOING_AWAY","title":"WS_1001_GOING_AWAY  <code>module-attribute</code>","text":"<pre><code>WS_1001_GOING_AWAY = 1001\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1002_PROTOCOL_ERROR","title":"WS_1002_PROTOCOL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1002_PROTOCOL_ERROR = 1002\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1003_UNSUPPORTED_DATA","title":"WS_1003_UNSUPPORTED_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1003_UNSUPPORTED_DATA = 1003\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1005_NO_STATUS_RCVD","title":"WS_1005_NO_STATUS_RCVD  <code>module-attribute</code>","text":"<pre><code>WS_1005_NO_STATUS_RCVD = 1005\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1006_ABNORMAL_CLOSURE","title":"WS_1006_ABNORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1006_ABNORMAL_CLOSURE = 1006\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1007_INVALID_FRAME_PAYLOAD_DATA","title":"WS_1007_INVALID_FRAME_PAYLOAD_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1007_INVALID_FRAME_PAYLOAD_DATA = 1007\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1008_POLICY_VIOLATION","title":"WS_1008_POLICY_VIOLATION  <code>module-attribute</code>","text":"<pre><code>WS_1008_POLICY_VIOLATION = 1008\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1009_MESSAGE_TOO_BIG","title":"WS_1009_MESSAGE_TOO_BIG  <code>module-attribute</code>","text":"<pre><code>WS_1009_MESSAGE_TOO_BIG = 1009\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1010_MANDATORY_EXT","title":"WS_1010_MANDATORY_EXT  <code>module-attribute</code>","text":"<pre><code>WS_1010_MANDATORY_EXT = 1010\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1011_INTERNAL_ERROR","title":"WS_1011_INTERNAL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1011_INTERNAL_ERROR = 1011\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1012_SERVICE_RESTART","title":"WS_1012_SERVICE_RESTART  <code>module-attribute</code>","text":"<pre><code>WS_1012_SERVICE_RESTART = 1012\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1013_TRY_AGAIN_LATER","title":"WS_1013_TRY_AGAIN_LATER  <code>module-attribute</code>","text":"<pre><code>WS_1013_TRY_AGAIN_LATER = 1013\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1014_BAD_GATEWAY","title":"WS_1014_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>WS_1014_BAD_GATEWAY = 1014\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1015_TLS_HANDSHAKE","title":"WS_1015_TLS_HANDSHAKE  <code>module-attribute</code>","text":"<pre><code>WS_1015_TLS_HANDSHAKE = 1015\n</code></pre>"},{"location":"reference/uploadfile/","title":"<code>UploadFile</code> class","text":"<p>You can define path operation function parameters to be of the type <code>UploadFile</code> to receive files from the request.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import UploadFile\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile","title":"readyapi.UploadFile","text":"<pre><code>UploadFile(file, *, size=None, filename=None, headers=None)\n</code></pre> <p>               Bases: <code>UploadFile</code></p> <p>A file uploaded in a request.</p> <p>Define it as a path operation function (or dependency) parameter.</p> <p>If you are using a regular <code>def</code> function, you can use the <code>upload_file.file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</p> <p>Read more about it in the ReadyAPI docs for Request Files.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, File, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> PARAMETER DESCRIPTION <code>file</code> <p> TYPE: <code>BinaryIO</code> </p> <code>size</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Headers | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/datastructures.py</code> <pre><code>def __init__(\n    self,\n    file: typing.BinaryIO,\n    *,\n    size: int | None = None,\n    filename: str | None = None,\n    headers: Headers | None = None,\n) -&gt; None:\n    self.filename = filename\n    self.file = file\n    self.size = size\n    self.headers = headers or Headers()\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file\n</code></pre> <p>The standard Python file object (non-async).</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename\n</code></pre> <p>The original file name.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size\n</code></pre> <p>The size of the file in bytes.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers\n</code></pre> <p>The headers of the request.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.content_type","title":"content_type  <code>instance-attribute</code>","text":"<pre><code>content_type\n</code></pre> <p>The content type of the request, from the headers.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.read","title":"read  <code>async</code>","text":"<pre><code>read(size=-1)\n</code></pre> <p>Read some bytes from the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>size</code> <p>The number of bytes to read from the file.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def read(\n    self,\n    size: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The number of bytes to read from the file.\n            \"\"\"\n        ),\n    ] = -1,\n) -&gt; bytes:\n    \"\"\"\n    Read some bytes from the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().read(size)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.write","title":"write  <code>async</code>","text":"<pre><code>write(data)\n</code></pre> <p>Write some bytes to the file.</p> <p>You normally wouldn't use this from a file you read in a request.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>data</code> <p>The bytes to write to the file.</p> <p> TYPE: <code>bytes</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def write(\n    self,\n    data: Annotated[\n        bytes,\n        Doc(\n            \"\"\"\n            The bytes to write to the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Write some bytes to the file.\n\n    You normally wouldn't use this from a file you read in a request.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().write(data)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.seek","title":"seek  <code>async</code>","text":"<pre><code>seek(offset)\n</code></pre> <p>Move to a position in the file.</p> <p>Any next read or write will be done from that position.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>offset</code> <p>The position in bytes to seek to in the file.</p> <p> TYPE: <code>int</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def seek(\n    self,\n    offset: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The position in bytes to seek to in the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Move to a position in the file.\n\n    Any next read or write will be done from that position.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().seek(offset)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().close()\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions - <code>HTTPException</code> and <code>WebSocketException</code>","text":"<p>These are the exceptions that you can raise to show errors to the client.</p> <p>When you raise an exception, as would happen with normal Python, the rest of the execution is aborted. This way you can raise these exceptions from anywhere in the code to abort a request and show the error to the client.</p> <p>You can use:</p> <ul> <li><code>HTTPException</code></li> <li><code>WebSocketException</code></li> </ul> <p>These exceptions can be imported directly from <code>readyapi</code>:</p> <pre><code>from readyapi import HTTPException, WebSocketException\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException","title":"readyapi.HTTPException","text":"<pre><code>HTTPException(status_code, detail=None, headers=None)\n</code></pre> <p>               Bases: <code>HTTPException</code></p> <p>An HTTP exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/exceptions/#readyapi.HTTPException--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, HTTPException\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre> PARAMETER DESCRIPTION <code>status_code</code> <p>HTTP status code to send to the client.</p> <p> TYPE: <code>int</code> </p> <code>detail</code> <p>Any data to be sent to the client in the <code>detail</code> key of the JSON response.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>Any headers to send to the client in the response.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    status_code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            HTTP status code to send to the client.\n            \"\"\"\n        ),\n    ],\n    detail: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Any data to be sent to the client in the `detail` key of the JSON\n            response.\n            \"\"\"\n        ),\n    ] = None,\n    headers: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            Any headers to send to the client in the response.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(status_code=status_code, detail=detail, headers=headers)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail = detail\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException","title":"readyapi.WebSocketException","text":"<pre><code>WebSocketException(code, reason=None)\n</code></pre> <p>               Bases: <code>WebSocketException</code></p> <p>A WebSocket exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p>"},{"location":"reference/exceptions/#readyapi.WebSocketException--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\n\napp = ReadyAPI()\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    item_id: str,\n):\n    if session is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Session cookie is: {session}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p>A closing code from the valid codes defined in the specification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason to close the WebSocket connection.</p> <p>It is UTF-8-encoded data. The interpretation of the reason is up to the application, it is not specified by the WebSocket specification.</p> <p>It could contain text that could be human-readable or interpretable by the client code, etc.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            A closing code from the\n            [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n            \"\"\"\n        ),\n    ],\n    reason: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            The reason to close the WebSocket connection.\n\n            It is UTF-8-encoded data. The interpretation of the reason is up to the\n            application, it is not specified by the WebSocket specification.\n\n            It could contain text that could be human-readable or interpretable\n            by the client code, etc.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(code=code, reason=reason)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/dependencies/","title":"Dependencies - <code>Depends()</code> and <code>Security()</code>","text":""},{"location":"reference/dependencies/#depends","title":"<code>Depends()</code>","text":"<p>Dependencies are handled mainly with the special function <code>Depends()</code> that takes a callable.</p> <p>Here is the reference for it and its parameters.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Depends\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Depends","title":"readyapi.Depends","text":"<pre><code>Depends(dependency=None, *, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI dependency.</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Dependencies.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Dependencies](https://readyapi.github.io/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    app = ReadyAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n</code></pre>"},{"location":"reference/dependencies/#security","title":"<code>Security()</code>","text":"<p>For many scenarios, you can handle security (authorization, authentication, etc.) with dependencies, using <code>Depends()</code>.</p> <p>But when you want to also declare OAuth2 scopes, you can use <code>Security()</code> instead of <code>Depends()</code>.</p> <p>You can import <code>Security()</code> directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Security\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Security","title":"readyapi.Security","text":"<pre><code>Security(dependency=None, *, scopes=None, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI Security dependency.</p> <p>The only difference with a regular dependency is that it can declare OAuth2 scopes that will be integrated with OpenAPI and the automatic UI docs (by default at <code>/docs</code>).</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Security and in the ReadyAPI docs for OAuth2 scopes.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Security, ReadyAPI\n\nfrom .db import User\nfrom .security import get_current_active_user\n\napp = ReadyAPI()\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>OAuth2 scopes required for the path operation that uses this Security dependency.</p> <p>The term \"scope\" comes from the OAuth2 specification, it seems to be intentionally vague and interpretable. It normally refers to permissions, in cases to roles.</p> <p>These scopes are integrated with OpenAPI (and the API docs at <code>/docs</code>). So they are visible in the OpenAPI specification. )</p> <p> TYPE: <code>Optional[Sequence[str]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Security](https://readyapi.github.io/tutorial/security/) and\n    in the\n    [ReadyAPI docs for OAuth2 scopes](https://readyapi.github.io/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Security, ReadyAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = ReadyAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n</code></pre>"},{"location":"reference/apirouter/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import APIRouter\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter","title":"readyapi.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>               Bases: <code>Router</code></p> <p><code>APIRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>ReadyAPI</code> app, or in another <code>APIRouter</code> (ultimately included in the app).</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default</code> <p>Default function handler for this router. Used to handle 404 Not Found errors.</p> <p> TYPE: <code>Optional[ASGIApp]</code> DEFAULT: <code>None</code> </p> <code>dependency_overrides_provider</code> <p>Only used internally by ReadyAPI to handle dependency overrides.</p> <p>You shouldn't need to use it. It normally points to the <code>ReadyAPI</code> app object.</p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>route_class</code> <p>Custom route (path operation) class to be used by this router.</p> <p>Read more about it in the ReadyAPI docs for Custom Request and APIRoute class.</p> <p> TYPE: <code>Type[APIRoute]</code> DEFAULT: <code>APIRoute</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[Any]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in this router in the generated OpenAPI.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        Optional[ASGIApp],\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Optional[Any],\n        Doc(\n            \"\"\"\n            Only used internally by ReadyAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `ReadyAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        Type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Request and APIRoute class](https://readyapi.github.io/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Optional[Lifespan[Any]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    self.prefix = prefix\n    self.tags: List[Union[str, Enum]] = tags or []\n    self.dependencies = list(dependencies or [])\n    self.deprecated = deprecated\n    self.include_in_schema = include_in_schema\n    self.responses = responses or {}\n    self.callbacks = callbacks or []\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class\n    self.generate_unique_id_function = generate_unique_id_function\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI, WebSocket\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path, func, name=name, dependencies=dependencies\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include another <code>APIRouter</code> in the same current <code>APIRouter</code>.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\ninternal_router = APIRouter()\nusers_router = APIRouter()\n\n@users_router.get(\"/users/\")\ndef read_users():\n    return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\ninternal_router.include_router(users_router)\napp.include_router(internal_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include another `APIRouter` in the same current `APIRouter`.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    internal_router = APIRouter()\n    users_router = APIRouter()\n\n    @users_router.get(\"/users/\")\n    def read_users():\n        return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n    internal_router.include_router(users_router)\n    app.include_router(internal_router)\n    ```\n    \"\"\"\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")  # noqa: B009\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise ReadyAPIError(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            use_response_class = get_value_or_default(\n                route.response_class,\n                router.default_response_class,\n                default_response_class,\n                self.default_response_class,\n            )\n            current_tags = []\n            if tags:\n                current_tags.extend(tags)\n            if route.tags:\n                current_tags.extend(route.tags)\n            current_dependencies: List[params.Depends] = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            current_callbacks = []\n            if callbacks:\n                current_callbacks.extend(callbacks)\n            if route.callbacks:\n                current_callbacks.extend(route.callbacks)\n            current_generate_unique_id = get_value_or_default(\n                route.generate_unique_id_function,\n                router.generate_unique_id_function,\n                generate_unique_id_function,\n                self.generate_unique_id_function,\n            )\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=current_tags,\n                dependencies=current_dependencies,\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated or deprecated or self.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                response_model_exclude_defaults=route.response_model_exclude_defaults,\n                response_model_exclude_none=route.response_model_exclude_none,\n                include_in_schema=route.include_in_schema\n                and self.include_in_schema\n                and include_in_schema,\n                response_class=use_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=current_callbacks,\n                openapi_extra=route.openapi_extra,\n                generate_unique_id_function=current_generate_unique_id,\n            )\n        elif isinstance(route, routing.Route):\n            methods = list(route.methods or [])\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            current_dependencies = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            self.add_api_websocket_route(\n                prefix + route.path,\n                route.endpoint,\n                dependencies=current_dependencies,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n    self.lifespan_context = _merge_lifespan_context(\n        self.lifespan_context,\n        router.lifespan_context,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.get--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.put--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.post--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.options--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.head--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.trace(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the router.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the router.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_event_handler(event_type, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/background/","title":"Background Tasks - <code>BackgroundTasks</code>","text":"<p>You can declare a parameter in a path operation function or dependency function with the type <code>BackgroundTasks</code>, and then you can use it to schedule the execution of background tasks after the response is sent.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import BackgroundTasks\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks","title":"readyapi.BackgroundTasks","text":"<pre><code>BackgroundTasks(tasks=None)\n</code></pre> <p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p>"},{"location":"reference/background/#readyapi.BackgroundTasks--example","title":"Example","text":"<pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> PARAMETER DESCRIPTION <code>tasks</code> <p> TYPE: <code>Sequence[BackgroundTask] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/background.py</code> <pre><code>def __init__(self, tasks: typing.Sequence[BackgroundTask] | None = None):\n    self.tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func = func\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.is_async","title":"is_async  <code>instance-attribute</code>","text":"<pre><code>is_async = is_async_callable(func)\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p> PARAMETER DESCRIPTION <code>func</code> <p>The function to call after the response is sent.</p> <p>It can be a regular <code>def</code> function or an <code>async def</code> function.</p> <p> TYPE: <code>Callable[P, Any]</code> </p> <code>*args</code> <p> TYPE: <code>args</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>kwargs</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n\n    Read more about it in the\n    [ReadyAPI docs for Background Tasks](https://readyapi.github.io/tutorial/background-tasks/).\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/request/","title":"<code>Request</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Request</code> and then you can access the raw request object directly, without any validation, etc.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Request\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p>"},{"location":"reference/request/#readyapi.Request","title":"readyapi.Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> DEFAULT: <code>empty_receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> DEFAULT: <code>empty_send</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"reference/request/#readyapi.Request.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/request/#readyapi.Request.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/request/#readyapi.Request.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/request/#readyapi.Request.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/request/#readyapi.Request.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/request/#readyapi.Request.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/request/#readyapi.Request.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/request/#readyapi.Request.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/request/#readyapi.Request.method","title":"method  <code>property</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/request/#readyapi.Request.receive","title":"receive  <code>property</code>","text":"<pre><code>receive\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/request/#readyapi.Request.stream","title":"stream  <code>async</code>","text":"<pre><code>stream()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def stream(self) -&gt; typing.AsyncGenerator[bytes, None]:\n    if hasattr(self, \"_body\"):\n        yield self._body\n        yield b\"\"\n        return\n    if self._stream_consumed:\n        raise RuntimeError(\"Stream consumed\")\n    while not self._stream_consumed:\n        message = await self._receive()\n        if message[\"type\"] == \"http.request\":\n            body = message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                self._stream_consumed = True\n            if body:\n                yield body\n        elif message[\"type\"] == \"http.disconnect\":  # pragma: no branch\n            self._is_disconnected = True\n            raise ClientDisconnect()\n    yield b\"\"\n</code></pre>"},{"location":"reference/request/#readyapi.Request.body","title":"body  <code>async</code>","text":"<pre><code>body()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def body(self) -&gt; bytes:\n    if not hasattr(self, \"_body\"):\n        chunks: list[bytes] = []\n        async for chunk in self.stream():\n            chunks.append(chunk)\n        self._body = b\"\".join(chunks)\n    return self._body\n</code></pre>"},{"location":"reference/request/#readyapi.Request.json","title":"json  <code>async</code>","text":"<pre><code>json()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def json(self) -&gt; typing.Any:\n    if not hasattr(self, \"_json\"):  # pragma: no branch\n        body = await self.body()\n        self._json = json.loads(body)\n    return self._json\n</code></pre>"},{"location":"reference/request/#readyapi.Request.form","title":"form","text":"<pre><code>form(\n    *,\n    max_files=1000,\n    max_fields=1000,\n    max_part_size=1024 * 1024\n)\n</code></pre> PARAMETER DESCRIPTION <code>max_files</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_fields</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_part_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>1024 * 1024</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def form(\n    self,\n    *,\n    max_files: int | float = 1000,\n    max_fields: int | float = 1000,\n    max_part_size: int = 1024 * 1024,\n) -&gt; AwaitableOrContextManager[FormData]:\n    return AwaitableOrContextManagerWrapper(\n        self._get_form(max_files=max_files, max_fields=max_fields, max_part_size=max_part_size)\n    )\n</code></pre>"},{"location":"reference/request/#readyapi.Request.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def close(self) -&gt; None:\n    if self._form is not None:  # pragma: no branch\n        await self._form.close()\n</code></pre>"},{"location":"reference/request/#readyapi.Request.is_disconnected","title":"is_disconnected  <code>async</code>","text":"<pre><code>is_disconnected()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def is_disconnected(self) -&gt; bool:\n    if not self._is_disconnected:\n        message: Message = {}\n\n        # If message isn't immediately available, move on\n        with anyio.CancelScope() as cs:\n            cs.cancel()\n            message = await self._receive()\n\n        if message.get(\"type\") == \"http.disconnect\":\n            self._is_disconnected = True\n\n    return self._is_disconnected\n</code></pre>"},{"location":"reference/request/#readyapi.Request.send_push_promise","title":"send_push_promise  <code>async</code>","text":"<pre><code>send_push_promise(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>async def send_push_promise(self, path: str) -&gt; None:\n    if \"http.response.push\" in self.scope.get(\"extensions\", {}):\n        raw_headers: list[tuple[bytes, bytes]] = []\n        for name in SERVER_PUSH_HEADERS_TO_COPY:\n            for value in self.headers.getlist(name):\n                raw_headers.append((name.encode(\"latin-1\"), value.encode(\"latin-1\")))\n        await self._send({\"type\": \"http.response.push\", \"path\": path, \"headers\": raw_headers})\n</code></pre>"},{"location":"reference/websockets/","title":"WebSockets","text":"<p>When defining WebSockets, you normally declare a parameter of type <code>WebSocket</code> and with it you can read data from the client and send data to it.</p> <p>It is provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocket\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>When a client disconnects, a <code>WebSocketDisconnect</code> exception is raised, you can catch it.</p> <p>You can import it directly form <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocketDisconnect\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket","title":"readyapi.WebSocket","text":"<pre><code>WebSocket(scope, receive, send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n    super().__init__(scope)\n    assert scope[\"type\"] == \"websocket\"\n    self._receive = receive\n    self._send = send\n    self.client_state = WebSocketState.CONNECTING\n    self.application_state = WebSocketState.CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client_state","title":"client_state  <code>instance-attribute</code>","text":"<pre><code>client_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.application_state","title":"application_state  <code>instance-attribute</code>","text":"<pre><code>application_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive","title":"receive  <code>async</code>","text":"<pre><code>receive()\n</code></pre> <p>Receive ASGI websocket messages, ensuring valid state transitions.</p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive(self) -&gt; Message:\n    \"\"\"\n    Receive ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.client_state == WebSocketState.CONNECTING:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type != \"websocket.connect\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.connect\", but got {message_type!r}')\n        self.client_state = WebSocketState.CONNECTED\n        return message\n    elif self.client_state == WebSocketState.CONNECTED:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.receive\", \"websocket.disconnect\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.receive\" or \"websocket.disconnect\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.disconnect\":\n            self.client_state = WebSocketState.DISCONNECTED\n        return message\n    else:\n        raise RuntimeError('Cannot call \"receive\" once a disconnect message has been received.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send","title":"send  <code>async</code>","text":"<pre><code>send(message)\n</code></pre> <p>Send ASGI websocket messages, ensuring valid state transitions.</p> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send(self, message: Message) -&gt; None:\n    \"\"\"\n    Send ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.application_state == WebSocketState.CONNECTING:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.accept\", \"websocket.close\", \"websocket.http.response.start\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.accept\", \"websocket.close\" or \"websocket.http.response.start\", '\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        elif message_type == \"websocket.http.response.start\":\n            self.application_state = WebSocketState.RESPONSE\n        else:\n            self.application_state = WebSocketState.CONNECTED\n        await self._send(message)\n    elif self.application_state == WebSocketState.CONNECTED:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.send\", \"websocket.close\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.send\" or \"websocket.close\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        try:\n            await self._send(message)\n        except OSError:\n            self.application_state = WebSocketState.DISCONNECTED\n            raise WebSocketDisconnect(code=1006)\n    elif self.application_state == WebSocketState.RESPONSE:\n        message_type = message[\"type\"]\n        if message_type != \"websocket.http.response.body\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.http.response.body\", but got {message_type!r}')\n        if not message.get(\"more_body\", False):\n            self.application_state = WebSocketState.DISCONNECTED\n        await self._send(message)\n    else:\n        raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.accept","title":"accept  <code>async</code>","text":"<pre><code>accept(subprotocol=None, headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>subprotocol</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Iterable[tuple[bytes, bytes]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def accept(\n    self,\n    subprotocol: str | None = None,\n    headers: typing.Iterable[tuple[bytes, bytes]] | None = None,\n) -&gt; None:\n    headers = headers or []\n\n    if self.client_state == WebSocketState.CONNECTING:  # pragma: no branch\n        # If we haven't yet seen the 'connect' message, then wait for it first.\n        await self.receive()\n    await self.send({\"type\": \"websocket.accept\", \"subprotocol\": subprotocol, \"headers\": headers})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_text","title":"receive_text  <code>async</code>","text":"<pre><code>receive_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_text(self) -&gt; str:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(str, message[\"text\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_bytes","title":"receive_bytes  <code>async</code>","text":"<pre><code>receive_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_bytes(self) -&gt; bytes:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(bytes, message[\"bytes\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_json","title":"receive_json  <code>async</code>","text":"<pre><code>receive_json(mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_json(self, mode: str = \"text\") -&gt; typing.Any:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n\n    if mode == \"text\":\n        text = message[\"text\"]\n    else:\n        text = message[\"bytes\"].decode(\"utf-8\")\n    return json.loads(text)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_text","title":"iter_text  <code>async</code>","text":"<pre><code>iter_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_text(self) -&gt; typing.AsyncIterator[str]:\n    try:\n        while True:\n            yield await self.receive_text()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_bytes","title":"iter_bytes  <code>async</code>","text":"<pre><code>iter_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_bytes(self) -&gt; typing.AsyncIterator[bytes]:\n    try:\n        while True:\n            yield await self.receive_bytes()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_json","title":"iter_json  <code>async</code>","text":"<pre><code>iter_json()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_json(self) -&gt; typing.AsyncIterator[typing.Any]:\n    try:\n        while True:\n            yield await self.receive_json()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_text(self, data: str) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"text\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_bytes","title":"send_bytes  <code>async</code>","text":"<pre><code>send_bytes(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>bytes</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_bytes(self, data: bytes) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"bytes\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_json","title":"send_json  <code>async</code>","text":"<pre><code>send_json(data, mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>Any</code> </p> <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_json(self, data: typing.Any, mode: str = \"text\") -&gt; None:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n    if mode == \"text\":\n        await self.send({\"type\": \"websocket.send\", \"text\": text})\n    else:\n        await self.send({\"type\": \"websocket.send\", \"bytes\": text.encode(\"utf-8\")})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.close","title":"close  <code>async</code>","text":"<pre><code>close(code=1000, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def close(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    await self.send({\"type\": \"websocket.close\", \"code\": code, \"reason\": reason or \"\"})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect","title":"readyapi.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#websockets-additional-classes","title":"WebSockets - additional classes","text":"<p>Additional classes for handling WebSockets.</p> <p>Provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi.websockets import WebSocketDisconnect, WebSocketState\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect","title":"readyapi.websockets.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState","title":"readyapi.websockets.WebSocketState","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 0\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 3\n</code></pre>"},{"location":"reference/httpconnection/","title":"<code>HTTPConnection</code> class","text":"<p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>You can import it from <code>readyapi.requests</code>:</p> <pre><code>from readyapi.requests import HTTPConnection\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection","title":"readyapi.requests.HTTPConnection","text":"<pre><code>HTTPConnection(scope, receive=None)\n</code></pre> <p>               Bases: <code>Mapping[str, Any]</code></p> <p>A base class for incoming HTTP connections, that is used to provide any functionality that is common to both <code>Request</code> and <code>WebSocket</code>.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive | None = None) -&gt; None:\n    assert scope[\"type\"] in (\"http\", \"websocket\")\n    self.scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/response/","title":"<code>Response</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Response</code> and then you can set data for the response like headers or cookies.</p> <p>You can also use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Response\n</code></pre>"},{"location":"reference/response/#readyapi.Response","title":"readyapi.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/response/#readyapi.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/response/#readyapi.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/response/#readyapi.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/response/#readyapi.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/response/#readyapi.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/response/#readyapi.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/","title":"Custom Response Classes - File, HTML, Redirect, Streaming, etc.","text":"<p>There are several custom response classes you can use to create an instance and return them directly from your path operations.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>You can import them directly from <code>readyapi.responses</code>:</p> <pre><code>from readyapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n</code></pre>"},{"location":"reference/responses/#readyapi-responses","title":"ReadyAPI Responses","text":"<p>There are a couple of custom ReadyAPI response classes, you can use them to optimize JSON performance.</p>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse","title":"readyapi.responses.UJSONResponse","text":"<pre><code>UJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance ujson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n    return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse","title":"readyapi.responses.ORJSONResponse","text":"<pre><code>ORJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance orjson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n    return orjson.dumps(\n        content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#starlette-responses","title":"Starlette Responses","text":""},{"location":"reference/responses/#readyapi.responses.FileResponse","title":"readyapi.responses.FileResponse","text":"<pre><code>FileResponse(\n    path,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n    filename=None,\n    stat_result=None,\n    method=None,\n    content_disposition_type=\"attachment\",\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str | PathLike[str]</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result | None</code> DEFAULT: <code>None</code> </p> <code>method</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>content_disposition_type</code> <p> TYPE: <code>str</code> DEFAULT: <code>'attachment'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    path: str | os.PathLike[str],\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n    filename: str | None = None,\n    stat_result: os.stat_result | None = None,\n    method: str | None = None,\n    content_disposition_type: str = \"attachment\",\n) -&gt; None:\n    self.path = path\n    self.status_code = status_code\n    self.filename = filename\n    if method is not None:\n        warnings.warn(\n            \"The 'method' parameter is not used, and it will be removed.\",\n            DeprecationWarning,\n        )\n    if media_type is None:\n        media_type = guess_type(filename or path)[0] or \"text/plain\"\n    self.media_type = media_type\n    self.background = background\n    self.init_headers(headers)\n    self.headers.setdefault(\"accept-ranges\", \"bytes\")\n    if self.filename is not None:\n        content_disposition_filename = quote(self.filename)\n        if content_disposition_filename != self.filename:\n            content_disposition = f\"{content_disposition_type}; filename*=utf-8''{content_disposition_filename}\"\n        else:\n            content_disposition = f'{content_disposition_type}; filename=\"{self.filename}\"'\n        self.headers.setdefault(\"content-disposition\", content_disposition)\n    self.stat_result = stat_result\n    if stat_result is not None:\n        self.set_stat_headers(stat_result)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.chunk_size","title":"chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_size = 64 * 1024\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = media_type\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse","title":"readyapi.responses.HTMLResponse","text":"<pre><code>HTMLResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/html'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse","title":"readyapi.responses.JSONResponse","text":"<pre><code>JSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    return json.dumps(\n        content,\n        ensure_ascii=False,\n        allow_nan=False,\n        indent=None,\n        separators=(\",\", \":\"),\n    ).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse","title":"readyapi.responses.PlainTextResponse","text":"<pre><code>PlainTextResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/plain'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse","title":"readyapi.responses.RedirectResponse","text":"<pre><code>RedirectResponse(\n    url, status_code=307, headers=None, background=None\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str | URL</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>307</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    url: str | URL,\n    status_code: int = 307,\n    headers: typing.Mapping[str, str] | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content=b\"\", status_code=status_code, headers=headers, background=background)\n    self.headers[\"location\"] = quote(str(url), safe=\":/%#?=@[]!$&amp;'()*+,;\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response","title":"readyapi.responses.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse","title":"readyapi.responses.StreamingResponse","text":"<pre><code>StreamingResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>ContentStream</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, typing.AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body_iterator","title":"body_iterator  <code>instance-attribute</code>","text":"<pre><code>body_iterator\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = (\n    media_type if media_type is None else media_type\n)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/middleware/","title":"Middleware","text":"<p>There are several middlewares available provided by Starlette directly.</p> <p>Read more about them in the ReadyAPI docs for Middleware.</p> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.cors import CORSMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.gzip import GZipMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.trustedhost import TrustedHostMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.wsgi import WSGIMiddleware\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware","title":"readyapi.middleware.cors.CORSMiddleware","text":"<pre><code>CORSMiddleware(\n    app,\n    allow_origins=(),\n    allow_methods=(\"GET\",),\n    allow_headers=(),\n    allow_credentials=False,\n    allow_origin_regex=None,\n    expose_headers=(),\n    max_age=600,\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allow_origins</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_methods</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>('GET',)</code> </p> <code>allow_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_credentials</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_origin_regex</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>expose_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>max_age</code> <p> TYPE: <code>int</code> DEFAULT: <code>600</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allow_origins: typing.Sequence[str] = (),\n    allow_methods: typing.Sequence[str] = (\"GET\",),\n    allow_headers: typing.Sequence[str] = (),\n    allow_credentials: bool = False,\n    allow_origin_regex: str | None = None,\n    expose_headers: typing.Sequence[str] = (),\n    max_age: int = 600,\n) -&gt; None:\n    if \"*\" in allow_methods:\n        allow_methods = ALL_METHODS\n\n    compiled_allow_origin_regex = None\n    if allow_origin_regex is not None:\n        compiled_allow_origin_regex = re.compile(allow_origin_regex)\n\n    allow_all_origins = \"*\" in allow_origins\n    allow_all_headers = \"*\" in allow_headers\n    preflight_explicit_allow_origin = not allow_all_origins or allow_credentials\n\n    simple_headers = {}\n    if allow_all_origins:\n        simple_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    if allow_credentials:\n        simple_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    if expose_headers:\n        simple_headers[\"Access-Control-Expose-Headers\"] = \", \".join(expose_headers)\n\n    preflight_headers = {}\n    if preflight_explicit_allow_origin:\n        # The origin value will be set in preflight_response() if it is allowed.\n        preflight_headers[\"Vary\"] = \"Origin\"\n    else:\n        preflight_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    preflight_headers.update(\n        {\n            \"Access-Control-Allow-Methods\": \", \".join(allow_methods),\n            \"Access-Control-Max-Age\": str(max_age),\n        }\n    )\n    allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))\n    if allow_headers and not allow_all_headers:\n        preflight_headers[\"Access-Control-Allow-Headers\"] = \", \".join(allow_headers)\n    if allow_credentials:\n        preflight_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n    self.app = app\n    self.allow_origins = allow_origins\n    self.allow_methods = allow_methods\n    self.allow_headers = [h.lower() for h in allow_headers]\n    self.allow_all_origins = allow_all_origins\n    self.allow_all_headers = allow_all_headers\n    self.preflight_explicit_allow_origin = preflight_explicit_allow_origin\n    self.allow_origin_regex = compiled_allow_origin_regex\n    self.simple_headers = simple_headers\n    self.preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origins","title":"allow_origins  <code>instance-attribute</code>","text":"<pre><code>allow_origins = allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_methods","title":"allow_methods  <code>instance-attribute</code>","text":"<pre><code>allow_methods = allow_methods\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_headers","title":"allow_headers  <code>instance-attribute</code>","text":"<pre><code>allow_headers = [(lower()) for h in allow_headers]\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_origins","title":"allow_all_origins  <code>instance-attribute</code>","text":"<pre><code>allow_all_origins = allow_all_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_headers","title":"allow_all_headers  <code>instance-attribute</code>","text":"<pre><code>allow_all_headers = allow_all_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_explicit_allow_origin","title":"preflight_explicit_allow_origin  <code>instance-attribute</code>","text":"<pre><code>preflight_explicit_allow_origin = (\n    preflight_explicit_allow_origin\n)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origin_regex","title":"allow_origin_regex  <code>instance-attribute</code>","text":"<pre><code>allow_origin_regex = compiled_allow_origin_regex\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_headers","title":"simple_headers  <code>instance-attribute</code>","text":"<pre><code>simple_headers = simple_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_headers","title":"preflight_headers  <code>instance-attribute</code>","text":"<pre><code>preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.is_allowed_origin","title":"is_allowed_origin","text":"<pre><code>is_allowed_origin(origin)\n</code></pre> PARAMETER DESCRIPTION <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def is_allowed_origin(self, origin: str) -&gt; bool:\n    if self.allow_all_origins:\n        return True\n\n    if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):\n        return True\n\n    return origin in self.allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_response","title":"preflight_response","text":"<pre><code>preflight_response(request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def preflight_response(self, request_headers: Headers) -&gt; Response:\n    requested_origin = request_headers[\"origin\"]\n    requested_method = request_headers[\"access-control-request-method\"]\n    requested_headers = request_headers.get(\"access-control-request-headers\")\n\n    headers = dict(self.preflight_headers)\n    failures = []\n\n    if self.is_allowed_origin(origin=requested_origin):\n        if self.preflight_explicit_allow_origin:\n            # The \"else\" case is already accounted for in self.preflight_headers\n            # and the value would be \"*\".\n            headers[\"Access-Control-Allow-Origin\"] = requested_origin\n    else:\n        failures.append(\"origin\")\n\n    if requested_method not in self.allow_methods:\n        failures.append(\"method\")\n\n    # If we allow all headers, then we have to mirror back any requested\n    # headers in the response.\n    if self.allow_all_headers and requested_headers is not None:\n        headers[\"Access-Control-Allow-Headers\"] = requested_headers\n    elif requested_headers is not None:\n        for header in [h.lower() for h in requested_headers.split(\",\")]:\n            if header.strip() not in self.allow_headers:\n                failures.append(\"headers\")\n                break\n\n    # We don't strictly need to use 400 responses here, since its up to\n    # the browser to enforce the CORS policy, but its more informative\n    # if we do.\n    if failures:\n        failure_text = \"Disallowed CORS \" + \", \".join(failures)\n        return PlainTextResponse(failure_text, status_code=400, headers=headers)\n\n    return PlainTextResponse(\"OK\", status_code=200, headers=headers)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_response","title":"simple_response  <code>async</code>","text":"<pre><code>simple_response(scope, receive, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def simple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -&gt; None:\n    send = functools.partial(self.send, send=send, request_headers=request_headers)\n    await self.app(scope, receive, send)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.send","title":"send  <code>async</code>","text":"<pre><code>send(message, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def send(self, message: Message, send: Send, request_headers: Headers) -&gt; None:\n    if message[\"type\"] != \"http.response.start\":\n        await send(message)\n        return\n\n    message.setdefault(\"headers\", [])\n    headers = MutableHeaders(scope=message)\n    headers.update(self.simple_headers)\n    origin = request_headers[\"Origin\"]\n    has_cookie = \"cookie\" in request_headers\n\n    # If request includes any cookie headers, then we must respond\n    # with the specific origin instead of '*'.\n    if self.allow_all_origins and has_cookie:\n        self.allow_explicit_origin(headers, origin)\n\n    # If we only allow specific origins, then we have to mirror back\n    # the Origin header in the response.\n    elif not self.allow_all_origins and self.is_allowed_origin(origin=origin):\n        self.allow_explicit_origin(headers, origin)\n\n    await send(message)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_explicit_origin","title":"allow_explicit_origin  <code>staticmethod</code>","text":"<pre><code>allow_explicit_origin(headers, origin)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>MutableHeaders</code> </p> <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>@staticmethod\ndef allow_explicit_origin(headers: MutableHeaders, origin: str) -&gt; None:\n    headers[\"Access-Control-Allow-Origin\"] = origin\n    headers.add_vary_header(\"Origin\")\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware","title":"readyapi.middleware.gzip.GZipMiddleware","text":"<pre><code>GZipMiddleware(app, minimum_size=500, compresslevel=9)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>minimum_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> <code>compresslevel</code> <p> TYPE: <code>int</code> DEFAULT: <code>9</code> </p> Source code in <code>starlette/middleware/gzip.py</code> <pre><code>def __init__(self, app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9) -&gt; None:\n    self.app = app\n    self.minimum_size = minimum_size\n    self.compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.minimum_size","title":"minimum_size  <code>instance-attribute</code>","text":"<pre><code>minimum_size = minimum_size\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.compresslevel","title":"compresslevel  <code>instance-attribute</code>","text":"<pre><code>compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","title":"readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","text":"<pre><code>HTTPSRedirectMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> Source code in <code>starlette/middleware/httpsredirect.py</code> <pre><code>def __init__(self, app: ASGIApp) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware","title":"readyapi.middleware.trustedhost.TrustedHostMiddleware","text":"<pre><code>TrustedHostMiddleware(\n    app, allowed_hosts=None, www_redirect=True\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allowed_hosts</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>www_redirect</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/middleware/trustedhost.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allowed_hosts: typing.Sequence[str] | None = None,\n    www_redirect: bool = True,\n) -&gt; None:\n    if allowed_hosts is None:\n        allowed_hosts = [\"*\"]\n\n    for pattern in allowed_hosts:\n        assert \"*\" not in pattern[1:], ENFORCE_DOMAIN_WILDCARD\n        if pattern.startswith(\"*\") and pattern != \"*\":\n            assert pattern.startswith(\"*.\"), ENFORCE_DOMAIN_WILDCARD\n    self.app = app\n    self.allowed_hosts = list(allowed_hosts)\n    self.allow_any = \"*\" in allowed_hosts\n    self.www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allowed_hosts","title":"allowed_hosts  <code>instance-attribute</code>","text":"<pre><code>allowed_hosts = list(allowed_hosts)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allow_any","title":"allow_any  <code>instance-attribute</code>","text":"<pre><code>allow_any = '*' in allowed_hosts\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.www_redirect","title":"www_redirect  <code>instance-attribute</code>","text":"<pre><code>www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware","title":"readyapi.middleware.wsgi.WSGIMiddleware","text":"<pre><code>WSGIMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>Callable[..., Any]</code> </p> Source code in <code>starlette/middleware/wsgi.py</code> <pre><code>def __init__(self, app: typing.Callable[..., typing.Any]) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/openapi/","title":"OpenAPI","text":"<p>There are several utilities to handle OpenAPI.</p> <p>You normally don't need to use them unless you have a specific advanced use case that requires it.</p>"},{"location":"reference/openapi/docs/","title":"OpenAPI <code>docs</code>","text":"<p>Utilities to handle OpenAPI automatic UI documentation, including Swagger UI (by default at <code>/docs</code>) and ReDoc (by default at <code>/redoc</code>).</p>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_html","title":"readyapi.openapi.docs.get_swagger_ui_html","text":"<pre><code>get_swagger_ui_html(\n    *,\n    openapi_url,\n    title,\n    swagger_js_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url=None,\n    init_oauth=None,\n    swagger_ui_parameters=None\n)\n</code></pre> <p>Generate and return the HTML  that loads Swagger UI for the interactive API docs (normally served at <code>/docs</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load Swagger UI's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Configure Swagger UI and the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that Swagger UI should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>swagger_js_url</code> <p>The URL to use to load the Swagger UI JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js'</code> </p> <code>swagger_css_url</code> <p>The URL to use to load the Swagger UI CSS.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css'</code> </p> <code>swagger_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>oauth2_redirect_url</code> <p>The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>init_oauth</code> <p>A dictionary with Swagger UI OAuth2 initialization configurations.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>swagger_ui_parameters</code> <p>Configuration parameters for Swagger UI.</p> <p>It defaults to swagger_ui_default_parameters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_redoc_html","title":"readyapi.openapi.docs.get_redoc_html","text":"<pre><code>get_redoc_html(\n    *,\n    openapi_url,\n    title,\n    redoc_js_url=\"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts=True\n)\n</code></pre> <p>Generate and return the HTML response that loads ReDoc for the alternative API docs (normally served at <code>/redoc</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load ReDoc's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that ReDoc should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>redoc_js_url</code> <p>The URL to use to load the ReDoc JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js'</code> </p> <code>redoc_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>with_google_fonts</code> <p>Load and use Google Fonts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","title":"readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","text":"<pre><code>get_swagger_ui_oauth2_redirect_html()\n</code></pre> <p>Generate the HTML response with the OAuth2 redirection for Swagger UI.</p> <p>You normally don't need to use or change this.</p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.swagger_ui_default_parameters","title":"readyapi.openapi.docs.swagger_ui_default_parameters  <code>module-attribute</code>","text":"<pre><code>swagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>Default configurations for Swagger UI.</p> <p>You can use it as a template to add any other configurations needed.</p>"},{"location":"reference/openapi/models/","title":"OpenAPI <code>models</code>","text":"<p>OpenAPI Pydantic models used to generate and validate the generated OpenAPI.</p>"},{"location":"reference/openapi/models/#readyapi.openapi.models","title":"readyapi.openapi.models","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SchemaOrBool","title":"SchemaOrBool  <code>module-attribute</code>","text":"<pre><code>SchemaOrBool = Union[Schema, bool]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityScheme","title":"SecurityScheme  <code>module-attribute</code>","text":"<pre><code>SecurityScheme = Union[\n    APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer\n]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig","title":"BaseModelWithConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact","title":"Contact","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License","title":"License","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info","title":"Info","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.termsOfService","title":"termsOfService  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>termsOfService = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.contact","title":"contact  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable","title":"ServerVariable","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server","title":"Server","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference","title":"Reference","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator","title":"Discriminator","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.propertyName","title":"propertyName  <code>instance-attribute</code>","text":"<pre><code>propertyName\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.mapping","title":"mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mapping = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML","title":"XML","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.namespace","title":"namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>namespace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.attribute","title":"attribute  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribute = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.wrapped","title":"wrapped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrapped = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation","title":"ExternalDocumentation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema","title":"Schema","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='$schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.vocabulary","title":"vocabulary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>vocabulary = Field(default=None, alias='$vocabulary')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default=None, alias='$id')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anchor","title":"anchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anchor = Field(default=None, alias='$anchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicAnchor","title":"dynamicAnchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicAnchor = Field(default=None, alias='$dynamicAnchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicRef","title":"dynamicRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicRef = Field(default=None, alias='$dynamicRef')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.defs","title":"defs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defs = Field(default=None, alias='$defs')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment = Field(default=None, alias='$comment')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.allOf","title":"allOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anyOf","title":"anyOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anyOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.oneOf","title":"oneOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oneOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.not_","title":"not_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_ = Field(default=None, alias='not')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.if_","title":"if_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_ = Field(default=None, alias='if')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.then","title":"then  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>then = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.else_","title":"else_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>else_ = Field(default=None, alias='else')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentSchemas","title":"dependentSchemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentSchemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.prefixItems","title":"prefixItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefixItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.items","title":"items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>items = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contains","title":"contains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contains = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.patternProperties","title":"patternProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patternProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.additionalProperties","title":"additionalProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additionalProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.propertyNames","title":"propertyNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>propertyNames = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedItems","title":"unevaluatedItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedProperties","title":"unevaluatedProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.const","title":"const  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>const = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.multipleOf","title":"multipleOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multipleOf = Field(default=None, gt=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maximum","title":"maximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMaximum","title":"exclusiveMaximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMaximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minimum","title":"minimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMinimum","title":"exclusiveMinimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMinimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxLength","title":"maxLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minLength","title":"minLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxItems","title":"maxItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minItems","title":"minItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.uniqueItems","title":"uniqueItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniqueItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxContains","title":"maxContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minContains","title":"minContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxProperties","title":"maxProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minProperties","title":"minProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentRequired","title":"dependentRequired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentRequired = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentEncoding","title":"contentEncoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentEncoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentMediaType","title":"contentMediaType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentMediaType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentSchema","title":"contentSchema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentSchema = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.readOnly","title":"readOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>readOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.writeOnly","title":"writeOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>writeOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.discriminator","title":"discriminator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>discriminator = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.xml","title":"xml  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xml = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre> Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead."},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example","title":"Example","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.externalValue","title":"externalValue  <code>instance-attribute</code>","text":"<pre><code>externalValue\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType","title":"ParameterInType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = 'path'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding","title":"Encoding","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.contentType","title":"contentType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType","title":"MediaType","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.encoding","title":"encoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>encoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase","title":"ParameterBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter","title":"Parameter","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header","title":"Header","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody","title":"RequestBody","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link","title":"Link","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationRef","title":"operationRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationRef = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.server","title":"server  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response","title":"Response","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation","title":"Operation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem","title":"PathItem","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.head","title":"head  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>head = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType","title":"SecuritySchemeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.apiKey","title":"apiKey  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apiKey = 'apiKey'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'http'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.oauth2","title":"oauth2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oauth2 = 'oauth2'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.openIdConnect","title":"openIdConnect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openIdConnect = 'openIdConnect'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase","title":"SecurityBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn","title":"APIKeyIn","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey","title":"APIKey","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=apiKey, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase","title":"HTTPBase","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer","title":"HTTPBearer","text":"<p>               Bases: <code>HTTPBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'bearer'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.bearerFormat","title":"bearerFormat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bearerFormat = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow","title":"OAuthFlow","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit","title":"OAuthFlowImplicit","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword","title":"OAuthFlowPassword","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials","title":"OAuthFlowClientCredentials","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode","title":"OAuthFlowAuthorizationCode","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows","title":"OAuthFlows","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.clientCredentials","title":"clientCredentials  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clientCredentials = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.authorizationCode","title":"authorizationCode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authorizationCode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2","title":"OAuth2","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=oauth2, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect","title":"OpenIdConnect","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=openIdConnect, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.openIdConnectUrl","title":"openIdConnectUrl  <code>instance-attribute</code>","text":"<pre><code>openIdConnectUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components","title":"Components","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.schemas","title":"schemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.requestBodies","title":"requestBodies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBodies = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.securitySchemes","title":"securitySchemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>securitySchemes = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.pathItems","title":"pathItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pathItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag","title":"Tag","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI","title":"OpenAPI","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.openapi","title":"openapi  <code>instance-attribute</code>","text":"<pre><code>openapi\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.jsonSchemaDialect","title":"jsonSchemaDialect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jsonSchemaDialect = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.webhooks","title":"webhooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>webhooks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/security/","title":"Security Tools","text":"<p>When you need to declare dependencies with OAuth2 scopes you use <code>Security()</code>.</p> <p>But you still need to define what is the dependable, the callable that you pass as a parameter to <code>Depends()</code> or <code>Security()</code>.</p> <p>There are multiple tools that you can use to create those dependables, and they get integrated into OpenAPI so they are shown in the automatic docs UI, they can be used by automatically generated clients and SDKs, etc.</p> <p>You can import them from <code>readyapi.security</code>:</p> <pre><code>from readyapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n</code></pre>"},{"location":"reference/security/#api-key-security-schemes","title":"API Key Security Schemes","text":""},{"location":"reference/security/#readyapi.security.APIKeyCookie","title":"readyapi.security.APIKeyCookie","text":"<pre><code>APIKeyCookie(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a cookie.</p> <p>This defines the name of the cookie that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the cookie automatically and provides it as the dependency result. But it doesn't define how to set that cookie.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyCookie\n\napp = ReadyAPI()\n\ncookie_scheme = APIKeyCookie(name=\"session\")\n\n\n@app.get(\"/items/\")\nasync def read_items(session: str = Depends(cookie_scheme)):\n    return {\"session\": session}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Cookie name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the cookie is not provided, <code>APIKeyCookie</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the cookie is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a cookie or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Cookie name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the cookie is not provided, `APIKeyCookie` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the cookie is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a cookie or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": cookie}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader","title":"readyapi.security.APIKeyHeader","text":"<pre><code>APIKeyHeader(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a header.</p> <p>This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyHeader\n\napp = ReadyAPI()\n\nheader_scheme = APIKeyHeader(name=\"x-key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(key: str = Depends(header_scheme)):\n    return {\"key\": key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Header name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the header is not provided, <code>APIKeyHeader</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Header name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the header is not provided, `APIKeyHeader` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the header is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a header or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": header}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery","title":"readyapi.security.APIKeyQuery","text":"<pre><code>APIKeyQuery(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a query parameter.</p> <p>This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyQuery\n\napp = ReadyAPI()\n\nquery_scheme = APIKeyQuery(name=\"api_key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(query_scheme)):\n    return {\"api_key\": api_key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Query parameter name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the query parameter is not provided, <code>APIKeyQuery</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the query parameter is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a query parameter or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[\n        str,\n        Doc(\"Query parameter name.\"),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the query parameter is not provided, `APIKeyQuery` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the query parameter is not\n            available, instead of erroring out, the dependency result will be\n            `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a query\n            parameter or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": query}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#http-authentication-schemes","title":"HTTP Authentication Schemes","text":""},{"location":"reference/security/#readyapi.security.HTTPBasic","title":"readyapi.security.HTTPBasic","text":"<pre><code>HTTPBasic(\n    *,\n    scheme_name=None,\n    realm=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Basic authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPBasicCredentials</code> object containing the <code>username</code> and the <code>password</code>.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>realm</code> <p>HTTP Basic authentication realm.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Basic authentication is not provided (a header), <code>HTTPBasic</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    realm: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            HTTP Basic authentication realm.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Basic authentication is not provided (a\n            header), `HTTPBasic` will automatically cancel the request and send the\n            client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Basic authentication\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP Basic\n            authentication or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='basic', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.realm","title":"realm  <code>instance-attribute</code>","text":"<pre><code>realm = realm\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer","title":"readyapi.security.HTTPBearer","text":"<pre><code>HTTPBearer(\n    *,\n    bearerFormat=None,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Bearer token authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\napp = ReadyAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>bearerFormat</code> <p>Bearer token format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Bearer token is not provided (in an <code>Authorization</code> header), <code>HTTPBearer</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Bearer token is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in an HTTP Bearer token or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Bearer token is not provided (in an\n            `Authorization` header), `HTTPBearer` will automatically cancel the\n            request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Bearer token\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in an HTTP\n            Bearer token or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBearer(\n    bearerFormat=bearerFormat, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest","title":"readyapi.security.HTTPDigest","text":"<pre><code>HTTPDigest(\n    *, scheme_name=None, description=None, auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Digest authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\napp = ReadyAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Digest is not provided, <code>HTTPDigest</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Digest is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Digest is not provided, `HTTPDigest` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Digest is not\n            available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP\n            Digest or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='digest', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-credentials","title":"HTTP Credentials","text":""},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials","title":"readyapi.security.HTTPAuthorizationCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP authorization credentials in the result of using <code>HTTPBearer</code> or <code>HTTPDigest</code> in a dependency.</p> <p>The HTTP authorization header value is split by the first space.</p> <p>The first part is the <code>scheme</code>, the second part is the <code>credentials</code>.</p> <p>For example, in an HTTP Bearer token scheme, the client will send a header like:</p> <pre><code>Authorization: Bearer deadbeef12346\n</code></pre> <p>In this case:</p> <ul> <li><code>scheme</code> will have the value <code>\"Bearer\"</code></li> <li><code>credentials</code> will have the value <code>\"deadbeef12346\"</code></li> </ul>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre> <p>The HTTP authorization scheme extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.credentials","title":"credentials  <code>instance-attribute</code>","text":"<pre><code>credentials\n</code></pre> <p>The HTTP authorization credentials extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials","title":"readyapi.security.HTTPBasicCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP Basic credentials given as the result of using <code>HTTPBasic</code> in a dependency.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username\n</code></pre> <p>The HTTP Basic username.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password\n</code></pre> <p>The HTTP Basic password.</p>"},{"location":"reference/security/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"reference/security/#readyapi.security.OAuth2","title":"readyapi.security.OAuth2","text":"<pre><code>OAuth2(\n    *,\n    flows=OAuthFlows(),\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.</p> <p>You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.</p> <p>Read more about it in the ReadyAPI docs for Security.</p> PARAMETER DESCRIPTION <code>flows</code> <p>The dictionary of OAuth2 flows.</p> <p> TYPE: <code>Union[OAuthFlows, Dict[str, Dict[str, Any]]]</code> DEFAULT: <code>OAuthFlows()</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    flows: Annotated[\n        Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            The dictionary of OAuth2 flows.\n            \"\"\"\n        ),\n    ] = OAuthFlowsModel(),\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OAuth2Model(\n        flows=cast(OAuthFlowsModel, flows), description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer","title":"readyapi.security.OAuth2AuthorizationCodeBearer","text":"<pre><code>OAuth2AuthorizationCodeBearer(\n    authorizationUrl,\n    tokenUrl,\n    refreshUrl=None,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code flow. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>authorizationUrl</code> <p> TYPE: <code>str</code> </p> <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token.</p> <p> TYPE: <code>str</code> </p> <code>refreshUrl</code> <p>The URL to refresh the token and obtain a new one.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    authorizationUrl: str,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token.\n            \"\"\"\n        ),\n    ],\n    refreshUrl: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL to refresh the token and obtain a new one.\n            \"\"\"\n        ),\n    ] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        authorizationCode=cast(\n            Any,\n            {\n                \"authorizationUrl\": authorizationUrl,\n                \"tokenUrl\": tokenUrl,\n                \"refreshUrl\": refreshUrl,\n                \"scopes\": scopes,\n            },\n        )\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer","title":"readyapi.security.OAuth2PasswordBearer","text":"<pre><code>OAuth2PasswordBearer(\n    tokenUrl,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p> PARAMETER DESCRIPTION <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token. This would be the path operation that has <code>OAuth2PasswordRequestForm</code> as a dependency.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token. This would be the *path operation*\n            that has `OAuth2PasswordRequestForm` as a dependency.\n            \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#oauth2-password-form","title":"OAuth2 Password Form","text":""},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm","title":"readyapi.security.OAuth2PasswordRequestForm","text":"<pre><code>OAuth2PasswordRequestForm(\n    *,\n    grant_type=None,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None\n)\n</code></pre> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the <code>OAuth2PasswordRequestFormStrict</code> dependency.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    grant_type: Annotated[\n        Union[str, None],\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". Nevertheless, this dependency class is permissive and\n            allows not passing it. If you want to enforce it, use instead the\n            `OAuth2PasswordRequestFormStrict` dependency.\n            \"\"\"\n        ),\n    ] = None,\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.grant_type = grant_type\n    self.username = username\n    self.password = password\n    self.scopes = scope.split()\n    self.client_id = client_id\n    self.client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict","title":"readyapi.security.OAuth2PasswordRequestFormStrict","text":"<pre><code>OAuth2PasswordRequestFormStrict(\n    grant_type,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None,\n)\n</code></pre> <p>               Bases: <code>OAuth2PasswordRequestForm</code></p> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>The only difference between <code>OAuth2PasswordRequestFormStrict</code> and <code>OAuth2PasswordRequestForm</code> is that <code>OAuth2PasswordRequestFormStrict</code> requires the client to send the form field <code>grant_type</code> with the value <code>\"password\"</code>, which is required in the OAuth2 specification (it seems that for no particular reason), while for <code>OAuth2PasswordRequestForm</code> <code>grant_type</code> is optional.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> the OAuth2 spec says it is required and MUST be the fixed string \"password\". <p>This dependency is strict about it. If you want to be permissive, use instead the OAuth2PasswordRequestForm dependency class.</p> <p>username: username string. The OAuth2 spec requires the exact field name \"username\". password: password string. The OAuth2 spec requires the exact field name \"password\". scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.     \"items:read items:write users:read profile openid\" client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". This dependency is strict about it. If you want to be permissive, use instead the <code>OAuth2PasswordRequestForm</code> dependency class.</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    grant_type: Annotated[\n        str,\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". This dependency is strict about it. If you want to be\n            permissive, use instead the `OAuth2PasswordRequestForm` dependency\n            class.\n            \"\"\"\n        ),\n    ],\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    super().__init__(\n        grant_type=grant_type,\n        username=username,\n        password=password,\n        scope=scope,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#oauth2-security-scopes-in-dependencies","title":"OAuth2 Security Scopes in Dependencies","text":""},{"location":"reference/security/#readyapi.security.SecurityScopes","title":"readyapi.security.SecurityScopes","text":"<pre><code>SecurityScopes(scopes=None)\n</code></pre> <p>This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.</p> <p>This way, multiple dependencies can have different scopes, even when used in the same path operation. And with this, you can access all the scopes required in all those dependencies in a single place.</p> <p>Read more about it in the ReadyAPI docs for OAuth2 scopes.</p> PARAMETER DESCRIPTION <code>scopes</code> <p>This will be filled by ReadyAPI.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    scopes: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n            This will be filled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.scopes: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n            The list of all the scopes required by dependencies.\n            \"\"\"\n        ),\n    ] = scopes or []\n    self.scope_str: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            All the scopes required by all the dependencies in a single string\n            separated by spaces, as defined in the OAuth2 specification.\n            \"\"\"\n        ),\n    ] = \" \".join(self.scopes)\n</code></pre>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = scopes or []\n</code></pre> <p>The list of all the scopes required by dependencies.</p>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scope_str","title":"scope_str  <code>instance-attribute</code>","text":"<pre><code>scope_str = join(scopes)\n</code></pre> <p>All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.</p>"},{"location":"reference/security/#openid-connect","title":"OpenID Connect","text":""},{"location":"reference/security/#readyapi.security.OpenIdConnect","title":"readyapi.security.OpenIdConnect","text":"<pre><code>OpenIdConnect(\n    *,\n    openIdConnectUrl,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>OpenID Connect authentication class. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>openIdConnectUrl</code> <p>The OpenID Connect URL.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/open_id_connect_url.py</code> <pre><code>def __init__(\n    self,\n    *,\n    openIdConnectUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n        The OpenID Connect URL.\n        \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OpenID Connect authentication, it will automatically cancel the request\n            and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OpenID\n            Connect or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OpenIdConnectModel(\n        openIdConnectUrl=openIdConnectUrl, description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OpenIdConnect(\n    openIdConnectUrl=openIdConnectUrl,\n    description=description,\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/encoders/","title":"Encoders - <code>jsonable_encoder</code>","text":""},{"location":"reference/encoders/#readyapi.encoders.jsonable_encoder","title":"readyapi.encoders.jsonable_encoder","text":"<pre><code>jsonable_encoder(\n    obj,\n    include=None,\n    exclude=None,\n    by_alias=True,\n    exclude_unset=False,\n    exclude_defaults=False,\n    exclude_none=False,\n    custom_encoder=None,\n    sqlalchemy_safe=True,\n)\n</code></pre> <p>Convert any object to something that can be encoded in JSON.</p> <p>This is used internally by ReadyAPI to make sure anything you return can be encoded as JSON before it is sent to the client.</p> <p>You can also use it yourself, for example to convert objects before saving them in a database that supports only JSON.</p> <p>Read more about it in the ReadyAPI docs for JSON Compatible Encoder.</p> PARAMETER DESCRIPTION <code>obj</code> <p>The input object to convert to JSON.</p> <p> TYPE: <code>Any</code> </p> <code>include</code> <p>Pydantic's <code>include</code> parameter, passed to Pydantic models to set the fields to include.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Pydantic's <code>exclude</code> parameter, passed to Pydantic models to set the fields to exclude.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>by_alias</code> <p>Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to define if the output should use the alias names (when provided) or the Python attribute names. In an API, if you set an alias, it's probably because you want to use it in the result, so you probably want to leave this set to <code>True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>exclude_unset</code> <p>Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that were not explicitly set (and that only had their default values).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_defaults</code> <p>Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that had the same default value, even when they were explicitly set.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_none</code> <p>Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to define if it should exclude from the output any fields that have a <code>None</code> value.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>custom_encoder</code> <p>Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p> <p> TYPE: <code>Optional[Dict[Any, Callable[[Any], Any]]]</code> DEFAULT: <code>None</code> </p> <code>sqlalchemy_safe</code> <p>Exclude from the output any fields that start with the name <code>_sa</code>.</p> <p>This is mainly a hack for compatibility with SQLAlchemy objects, they store internal SQLAlchemy-specific state in attributes named with <code>_sa</code>, and those objects can't (and shouldn't be) serialized to JSON.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/encoders.py</code> <pre><code>def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by ReadyAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [ReadyAPI docs for JSON Compatible Encoder](https://readyapi.github.io/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &amp;= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n</code></pre>"},{"location":"reference/staticfiles/","title":"Static Files - <code>StaticFiles</code>","text":"<p>You can use the <code>StaticFiles</code> class to serve static files, like JavaScript, CSS, images, etc.</p> <p>Read more about it in the ReadyAPI docs for Static Files.</p> <p>You can import it directly from <code>readyapi.staticfiles</code>:</p> <pre><code>from readyapi.staticfiles import StaticFiles\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles","title":"readyapi.staticfiles.StaticFiles","text":"<pre><code>StaticFiles(\n    *,\n    directory=None,\n    packages=None,\n    html=False,\n    check_dir=True,\n    follow_symlink=False\n)\n</code></pre> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>html</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>check_dir</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>follow_symlink</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def __init__(\n    self,\n    *,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n    html: bool = False,\n    check_dir: bool = True,\n    follow_symlink: bool = False,\n) -&gt; None:\n    self.directory = directory\n    self.packages = packages\n    self.all_directories = self.get_directories(directory, packages)\n    self.html = html\n    self.config_checked = False\n    self.follow_symlink = follow_symlink\n    if check_dir and directory is not None and not os.path.isdir(directory):\n        raise RuntimeError(f\"Directory '{directory}' does not exist\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = packages\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.all_directories","title":"all_directories  <code>instance-attribute</code>","text":"<pre><code>all_directories = get_directories(directory, packages)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.html","title":"html  <code>instance-attribute</code>","text":"<pre><code>html = html\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.config_checked","title":"config_checked  <code>instance-attribute</code>","text":"<pre><code>config_checked = False\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.follow_symlink","title":"follow_symlink  <code>instance-attribute</code>","text":"<pre><code>follow_symlink = follow_symlink\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_directories","title":"get_directories","text":"<pre><code>get_directories(directory=None, packages=None)\n</code></pre> <p>Given <code>directory</code> and <code>packages</code> arguments, return a list of all the directories that should be used for serving static files from.</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_directories(\n    self,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n) -&gt; list[PathLike]:\n    \"\"\"\n    Given `directory` and `packages` arguments, return a list of all the\n    directories that should be used for serving static files from.\n    \"\"\"\n    directories = []\n    if directory is not None:\n        directories.append(directory)\n\n    for package in packages or []:\n        if isinstance(package, tuple):\n            package, statics_dir = package\n        else:\n            statics_dir = \"statics\"\n        spec = importlib.util.find_spec(package)\n        assert spec is not None, f\"Package {package!r} could not be found.\"\n        assert spec.origin is not None, f\"Package {package!r} could not be found.\"\n        package_directory = os.path.normpath(os.path.join(spec.origin, \"..\", statics_dir))\n        assert os.path.isdir(package_directory), (\n            f\"Directory '{statics_dir!r}' in package {package!r} could not be found.\"\n        )\n        directories.append(package_directory)\n\n    return directories\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_path","title":"get_path","text":"<pre><code>get_path(scope)\n</code></pre> <p>Given the ASGI scope, return the <code>path</code> string to serve up, with OS specific path separators, and any '..', '.' components removed.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_path(self, scope: Scope) -&gt; str:\n    \"\"\"\n    Given the ASGI scope, return the `path` string to serve up,\n    with OS specific path separators, and any '..', '.' components removed.\n    \"\"\"\n    route_path = get_route_path(scope)\n    return os.path.normpath(os.path.join(*route_path.split(\"/\")))\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_response","title":"get_response  <code>async</code>","text":"<pre><code>get_response(path, scope)\n</code></pre> <p>Returns an HTTP response, given the incoming path, method and request headers.</p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def get_response(self, path: str, scope: Scope) -&gt; Response:\n    \"\"\"\n    Returns an HTTP response, given the incoming path, method and request headers.\n    \"\"\"\n    if scope[\"method\"] not in (\"GET\", \"HEAD\"):\n        raise HTTPException(status_code=405)\n\n    try:\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, path)\n    except PermissionError:\n        raise HTTPException(status_code=401)\n    except OSError as exc:\n        # Filename is too long, so it can't be a valid static file.\n        if exc.errno == errno.ENAMETOOLONG:\n            raise HTTPException(status_code=404)\n\n        raise exc\n\n    if stat_result and stat.S_ISREG(stat_result.st_mode):\n        # We have a static file to serve.\n        return self.file_response(full_path, stat_result, scope)\n\n    elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:\n        # We're in HTML mode, and have got a directory URL.\n        # Check if we have 'index.html' file to serve.\n        index_path = os.path.join(path, \"index.html\")\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, index_path)\n        if stat_result is not None and stat.S_ISREG(stat_result.st_mode):\n            if not scope[\"path\"].endswith(\"/\"):\n                # Directory URLs should redirect to always end in \"/\".\n                url = URL(scope=scope)\n                url = url.replace(path=url.path + \"/\")\n                return RedirectResponse(url=url)\n            return self.file_response(full_path, stat_result, scope)\n\n    if self.html:\n        # Check for '404.html' if we're in HTML mode.\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, \"404.html\")\n        if stat_result and stat.S_ISREG(stat_result.st_mode):\n            return FileResponse(full_path, stat_result=stat_result, status_code=404)\n    raise HTTPException(status_code=404)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.lookup_path","title":"lookup_path","text":"<pre><code>lookup_path(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def lookup_path(self, path: str) -&gt; tuple[str, os.stat_result | None]:\n    for directory in self.all_directories:\n        joined_path = os.path.join(directory, path)\n        if self.follow_symlink:\n            full_path = os.path.abspath(joined_path)\n            directory = os.path.abspath(directory)\n        else:\n            full_path = os.path.realpath(joined_path)\n            directory = os.path.realpath(directory)\n        if os.path.commonpath([full_path, directory]) != str(directory):\n            # Don't allow misbehaving clients to break out of the static files directory.\n            continue\n        try:\n            return full_path, os.stat(full_path)\n        except (FileNotFoundError, NotADirectoryError):\n            continue\n    return \"\", None\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.file_response","title":"file_response","text":"<pre><code>file_response(\n    full_path, stat_result, scope, status_code=200\n)\n</code></pre> PARAMETER DESCRIPTION <code>full_path</code> <p> TYPE: <code>PathLike</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def file_response(\n    self,\n    full_path: PathLike,\n    stat_result: os.stat_result,\n    scope: Scope,\n    status_code: int = 200,\n) -&gt; Response:\n    request_headers = Headers(scope=scope)\n\n    response = FileResponse(full_path, status_code=status_code, stat_result=stat_result)\n    if self.is_not_modified(response.headers, request_headers):\n        return NotModifiedResponse(response.headers)\n    return response\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.check_config","title":"check_config  <code>async</code>","text":"<pre><code>check_config()\n</code></pre> <p>Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.</p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def check_config(self) -&gt; None:\n    \"\"\"\n    Perform a one-off configuration check that StaticFiles is actually\n    pointed at a directory, so that we can raise loud errors rather than\n    just returning 404 responses.\n    \"\"\"\n    if self.directory is None:\n        return\n\n    try:\n        stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)\n    except FileNotFoundError:\n        raise RuntimeError(f\"StaticFiles directory '{self.directory}' does not exist.\")\n    if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):\n        raise RuntimeError(f\"StaticFiles path '{self.directory}' is not a directory.\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.is_not_modified","title":"is_not_modified","text":"<pre><code>is_not_modified(response_headers, request_headers)\n</code></pre> <p>Given the request and response headers, return <code>True</code> if an HTTP \"Not Modified\" response could be returned instead.</p> PARAMETER DESCRIPTION <code>response_headers</code> <p> TYPE: <code>Headers</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def is_not_modified(self, response_headers: Headers, request_headers: Headers) -&gt; bool:\n    \"\"\"\n    Given the request and response headers, return `True` if an HTTP\n    \"Not Modified\" response could be returned instead.\n    \"\"\"\n    try:\n        if_none_match = request_headers[\"if-none-match\"]\n        etag = response_headers[\"etag\"]\n        if etag in [tag.strip(\" W/\") for tag in if_none_match.split(\",\")]:\n            return True\n    except KeyError:\n        pass\n\n    try:\n        if_modified_since = parsedate(request_headers[\"if-modified-since\"])\n        last_modified = parsedate(response_headers[\"last-modified\"])\n        if if_modified_since is not None and last_modified is not None and if_modified_since &gt;= last_modified:\n            return True\n    except KeyError:\n        pass\n\n    return False\n</code></pre>"},{"location":"reference/templating/","title":"Templating - <code>Jinja2Templates</code>","text":"<p>You can use the <code>Jinja2Templates</code> class to render Jinja templates.</p> <p>Read more about it in the ReadyAPI docs for Templates.</p> <p>You can import it directly from <code>readyapi.templating</code>:</p> <pre><code>from readyapi.templating import Jinja2Templates\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates","title":"readyapi.templating.Jinja2Templates","text":"<pre><code>Jinja2Templates(\n    directory: (\n        str | PathLike[str] | Sequence[str | PathLike[str]]\n    ),\n    *,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None,\n    **env_options: Any\n)\n</code></pre><pre><code>Jinja2Templates(\n    *,\n    env: Environment,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None\n)\n</code></pre> <pre><code>Jinja2Templates(\n    directory=None,\n    *,\n    context_processors=None,\n    env=None,\n    **env_options\n)\n</code></pre> <p>templates = Jinja2Templates(\"templates\")</p> <p>return templates.TemplateResponse(\"index.html\", {\"request\": request})</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>str | PathLike[str] | Sequence[str | PathLike[str]] | None</code> DEFAULT: <code>None</code> </p> <code>context_processors</code> <p> TYPE: <code>list[Callable[[Request], dict[str, Any]]] | None</code> DEFAULT: <code>None</code> </p> <code>env</code> <p> TYPE: <code>Environment | None</code> DEFAULT: <code>None</code> </p> <code>**env_options</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None,\n    *,\n    context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n    **env_options: typing.Any,\n) -&gt; None:\n    if env_options:\n        warnings.warn(\n            \"Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.\",\n            DeprecationWarning,\n        )\n    assert jinja2 is not None, \"jinja2 must be installed to use Jinja2Templates\"\n    assert bool(directory) ^ bool(env), \"either 'directory' or 'env' arguments must be passed\"\n    self.context_processors = context_processors or []\n    if directory is not None:\n        self.env = self._create_env(directory, **env_options)\n    elif env is not None:  # pragma: no branch\n        self.env = env\n\n    self._setup_env_defaults(self.env)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.context_processors","title":"context_processors  <code>instance-attribute</code>","text":"<pre><code>context_processors = context_processors or []\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = _create_env(directory, **env_options)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.get_template","title":"get_template","text":"<pre><code>get_template(name)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def get_template(self, name: str) -&gt; jinja2.Template:\n    return self.env.get_template(name)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.TemplateResponse","title":"TemplateResponse","text":"<pre><code>TemplateResponse(\n    request: Request,\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre><pre><code>TemplateResponse(\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre> <pre><code>TemplateResponse(*args, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>*args</code> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def TemplateResponse(self, *args: typing.Any, **kwargs: typing.Any) -&gt; _TemplateResponse:\n    if args:\n        if isinstance(args[0], str):  # the first argument is template name (old style)\n            warnings.warn(\n                \"The `name` is not the first parameter anymore. \"\n                \"The first parameter should be the `Request` instance.\\n\"\n                'Replace `TemplateResponse(name, {\"request\": request})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n\n            name = args[0]\n            context = args[1] if len(args) &gt; 1 else kwargs.get(\"context\", {})\n            status_code = args[2] if len(args) &gt; 2 else kwargs.get(\"status_code\", 200)\n            headers = args[3] if len(args) &gt; 3 else kwargs.get(\"headers\")\n            media_type = args[4] if len(args) &gt; 4 else kwargs.get(\"media_type\")\n            background = args[5] if len(args) &gt; 5 else kwargs.get(\"background\")\n\n            if \"request\" not in context:\n                raise ValueError('context must include a \"request\" key')\n            request = context[\"request\"]\n        else:  # the first argument is a request instance (new style)\n            request = args[0]\n            name = args[1] if len(args) &gt; 1 else kwargs[\"name\"]\n            context = args[2] if len(args) &gt; 2 else kwargs.get(\"context\", {})\n            status_code = args[3] if len(args) &gt; 3 else kwargs.get(\"status_code\", 200)\n            headers = args[4] if len(args) &gt; 4 else kwargs.get(\"headers\")\n            media_type = args[5] if len(args) &gt; 5 else kwargs.get(\"media_type\")\n            background = args[6] if len(args) &gt; 6 else kwargs.get(\"background\")\n    else:  # all arguments are kwargs\n        if \"request\" not in kwargs:\n            warnings.warn(\n                \"The `TemplateResponse` now requires the `request` argument.\\n\"\n                'Replace `TemplateResponse(name, {\"context\": context})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n            if \"request\" not in kwargs.get(\"context\", {}):\n                raise ValueError('context must include a \"request\" key')\n\n        context = kwargs.get(\"context\", {})\n        request = kwargs.get(\"request\", context.get(\"request\"))\n        name = typing.cast(str, kwargs[\"name\"])\n        status_code = kwargs.get(\"status_code\", 200)\n        headers = kwargs.get(\"headers\")\n        media_type = kwargs.get(\"media_type\")\n        background = kwargs.get(\"background\")\n\n    context.setdefault(\"request\", request)\n    for context_processor in self.context_processors:\n        context.update(context_processor(request))\n\n    template = self.get_template(name)\n    return _TemplateResponse(\n        template,\n        context,\n        status_code=status_code,\n        headers=headers,\n        media_type=media_type,\n        background=background,\n    )\n</code></pre>"},{"location":"reference/testclient/","title":"Test Client - <code>TestClient</code>","text":"<p>You can use the <code>TestClient</code> class to test ReadyAPI applications without creating an actual HTTP and socket connection, just communicating directly with the ReadyAPI code.</p> <p>Read more about it in the ReadyAPI docs for Testing.</p> <p>You can import it directly from <code>readyapi.testclient</code>:</p> <pre><code>from readyapi.testclient import TestClient\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient","title":"readyapi.testclient.TestClient","text":"<pre><code>TestClient(\n    app,\n    base_url=\"http://testserver\",\n    raise_server_exceptions=True,\n    root_path=\"\",\n    backend=\"asyncio\",\n    backend_options=None,\n    cookies=None,\n    headers=None,\n    follow_redirects=True,\n    client=(\"testclient\", 50000),\n)\n</code></pre> <p>               Bases: <code>Client</code></p> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>base_url</code> <p> TYPE: <code>str</code> DEFAULT: <code>'http://testserver'</code> </p> <code>raise_server_exceptions</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>root_path</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>backend</code> <p> TYPE: <code>Literal['asyncio', 'trio']</code> DEFAULT: <code>'asyncio'</code> </p> <code>backend_options</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>client</code> <p> TYPE: <code>tuple[str, int]</code> DEFAULT: <code>('testclient', 50000)</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    base_url: str = \"http://testserver\",\n    raise_server_exceptions: bool = True,\n    root_path: str = \"\",\n    backend: typing.Literal[\"asyncio\", \"trio\"] = \"asyncio\",\n    backend_options: dict[str, typing.Any] | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = True,\n    client: tuple[str, int] = (\"testclient\", 50000),\n) -&gt; None:\n    self.async_backend = _AsyncBackend(backend=backend, backend_options=backend_options or {})\n    if _is_asgi3(app):\n        asgi_app = app\n    else:\n        app = typing.cast(ASGI2App, app)  # type: ignore[assignment]\n        asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]\n    self.app = asgi_app\n    self.app_state: dict[str, typing.Any] = {}\n    transport = _TestClientTransport(\n        self.app,\n        portal_factory=self._portal_factory,\n        raise_server_exceptions=raise_server_exceptions,\n        root_path=root_path,\n        app_state=self.app_state,\n        client=client,\n    )\n    if headers is None:\n        headers = {}\n    headers.setdefault(\"user-agent\", \"testclient\")\n    super().__init__(\n        base_url=base_url,\n        headers=headers,\n        transport=transport,\n        follow_redirects=follow_redirects,\n        cookies=cookies,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.headers","title":"headers  <code>property</code> <code>writable</code>","text":"<pre><code>headers\n</code></pre> <p>HTTP headers to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.follow_redirects","title":"follow_redirects  <code>instance-attribute</code>","text":"<pre><code>follow_redirects = follow_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.max_redirects","title":"max_redirects  <code>instance-attribute</code>","text":"<pre><code>max_redirects = max_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed\n</code></pre> <p>Check if the client being closed</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.trust_env","title":"trust_env  <code>property</code>","text":"<pre><code>trust_env\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.event_hooks","title":"event_hooks  <code>property</code> <code>writable</code>","text":"<pre><code>event_hooks\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.auth","title":"auth  <code>property</code> <code>writable</code>","text":"<pre><code>auth\n</code></pre> <p>Authentication class used when none is passed at the request-level.</p> <p>See also Authentication.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.base_url","title":"base_url  <code>property</code> <code>writable</code>","text":"<pre><code>base_url\n</code></pre> <p>Base URL to use when sending requests with relative URLs.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.cookies","title":"cookies  <code>property</code> <code>writable</code>","text":"<pre><code>cookies\n</code></pre> <p>Cookie values to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.params","title":"params  <code>property</code> <code>writable</code>","text":"<pre><code>params\n</code></pre> <p>Query parameters to include in the URL when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.portal","title":"portal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>portal = None\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.async_backend","title":"async_backend  <code>instance-attribute</code>","text":"<pre><code>async_backend = _AsyncBackend(\n    backend=backend, backend_options=backend_options or {}\n)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = asgi_app\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app_state","title":"app_state  <code>instance-attribute</code>","text":"<pre><code>app_state = {}\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.build_request","title":"build_request","text":"<pre><code>build_request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Build and return a request instance.</p> <ul> <li>The <code>params</code>, <code>headers</code> and <code>cookies</code> arguments are merged with any values set on the client.</li> <li>The <code>url</code> argument is merged with any <code>base_url</code> set on the client.</li> </ul> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def build_request(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; Request:\n    \"\"\"\n    Build and return a request instance.\n\n    * The `params`, `headers` and `cookies` arguments\n    are merged with any values set on the client.\n    * The `url` argument is merged with any `base_url` set on the client.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    url = self._merge_url(url)\n    headers = self._merge_headers(headers)\n    cookies = self._merge_cookies(cookies)\n    params = self._merge_queryparams(params)\n    extensions = {} if extensions is None else extensions\n    if \"timeout\" not in extensions:\n        timeout = (\n            self.timeout\n            if isinstance(timeout, UseClientDefault)\n            else Timeout(timeout)\n        )\n        extensions = dict(**extensions, timeout=timeout.as_dict())\n    return Request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.stream","title":"stream","text":"<pre><code>stream(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Alternative to <code>httpx.request()</code> that streams the response body instead of loading it into memory at once.</p> <p>Parameters: See <code>httpx.request</code>.</p> <p>See also: Streaming Responses</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Response</code> Source code in <code>httpx/_client.py</code> <pre><code>@contextmanager\ndef stream(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; typing.Iterator[Response]:\n    \"\"\"\n    Alternative to `httpx.request()` that streams the response body\n    instead of loading it into memory at once.\n\n    **Parameters**: See `httpx.request`.\n\n    See also: [Streaming Responses][0]\n\n    [0]: /quickstart#streaming-responses\n    \"\"\"\n    request = self.build_request(\n        method=method,\n        url=url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        timeout=timeout,\n        extensions=extensions,\n    )\n    response = self.send(\n        request=request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        stream=True,\n    )\n    try:\n        yield response\n    finally:\n        response.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.send","title":"send","text":"<pre><code>send(\n    request,\n    *,\n    stream=False,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT\n)\n</code></pre> <p>Send a request.</p> <p>The request is sent as-is, unmodified.</p> <p>Typically you'll want to build one with <code>Client.build_request()</code> so that any client-level configuration is merged into the request, but passing an explicit <code>httpx.Request()</code> is supported as well.</p> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>request</code> <p> TYPE: <code>Request</code> </p> <code>stream</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def send(\n    self,\n    request: Request,\n    *,\n    stream: bool = False,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n) -&gt; Response:\n    \"\"\"\n    Send a request.\n\n    The request is sent as-is, unmodified.\n\n    Typically you'll want to build one with `Client.build_request()`\n    so that any client-level configuration is merged into the request,\n    but passing an explicit `httpx.Request()` is supported as well.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    if self._state == ClientState.CLOSED:\n        raise RuntimeError(\"Cannot send a request, as the client has been closed.\")\n\n    self._state = ClientState.OPENED\n    follow_redirects = (\n        self.follow_redirects\n        if isinstance(follow_redirects, UseClientDefault)\n        else follow_redirects\n    )\n\n    self._set_timeout(request)\n\n    auth = self._build_request_auth(request, auth)\n\n    response = self._send_handling_auth(\n        request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        history=[],\n    )\n    try:\n        if not stream:\n            response.read()\n\n        return response\n\n    except BaseException as exc:\n        response.close()\n        raise exc\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close transport and proxies.</p> Source code in <code>httpx/_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close transport and proxies.\n    \"\"\"\n    if self._state != ClientState.CLOSED:\n        self._state = ClientState.CLOSED\n\n        self._transport.close()\n        for transport in self._mounts.values():\n            if transport is not None:\n                transport.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.request","title":"request","text":"<pre><code>request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def request(  # type: ignore[override]\n    self,\n    method: str,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    if timeout is not httpx.USE_CLIENT_DEFAULT:\n        warnings.warn(\n            \"You should not use the 'timeout' argument with the TestClient. \"\n            \"See https://github.com/encode/starlette/issues/1108 for more information.\",\n            DeprecationWarning,\n        )\n    url = self._merge_url(url)\n    return super().request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.get","title":"get","text":"<pre><code>get(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def get(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().get(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.options","title":"options","text":"<pre><code>options(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def options(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().options(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.head","title":"head","text":"<pre><code>head(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def head(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().head(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.post","title":"post","text":"<pre><code>post(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def post(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().post(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.put","title":"put","text":"<pre><code>put(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def put(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().put(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.patch","title":"patch","text":"<pre><code>patch(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def patch(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().patch(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.delete","title":"delete","text":"<pre><code>delete(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def delete(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().delete(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.websocket_connect","title":"websocket_connect","text":"<pre><code>websocket_connect(url, subprotocols=None, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str</code> </p> <code>subprotocols</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def websocket_connect(\n    self,\n    url: str,\n    subprotocols: typing.Sequence[str] | None = None,\n    **kwargs: typing.Any,\n) -&gt; WebSocketTestSession:\n    url = urljoin(\"ws://testserver\", url)\n    headers = kwargs.get(\"headers\", {})\n    headers.setdefault(\"connection\", \"upgrade\")\n    headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n    headers.setdefault(\"sec-websocket-version\", \"13\")\n    if subprotocols is not None:\n        headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n    kwargs[\"headers\"] = headers\n    try:\n        super().request(\"GET\", url, **kwargs)\n    except _Upgrade as exc:\n        session = exc.session\n    else:\n        raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover\n\n    return session\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def lifespan(self) -&gt; None:\n    scope = {\"type\": \"lifespan\", \"state\": self.app_state}\n    try:\n        await self.app(scope, self.stream_receive.receive, self.stream_send.send)\n    finally:\n        await self.stream_send.send(None)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_startup","title":"wait_startup  <code>async</code>","text":"<pre><code>wait_startup()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_startup(self) -&gt; None:\n    await self.stream_receive.send({\"type\": \"lifespan.startup\"})\n\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.startup.complete\",\n        \"lifespan.startup.failed\",\n    )\n    if message[\"type\"] == \"lifespan.startup.failed\":\n        await receive()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_shutdown","title":"wait_shutdown  <code>async</code>","text":"<pre><code>wait_shutdown()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_shutdown(self) -&gt; None:\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    await self.stream_receive.send({\"type\": \"lifespan.shutdown\"})\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.shutdown.complete\",\n        \"lifespan.shutdown.failed\",\n    )\n    if message[\"type\"] == \"lifespan.shutdown.failed\":\n        await receive()\n</code></pre>"},{"location":"readyapi-people/","title":"ReadyAPI People","text":"<p>ReadyAPI has an amazing community that welcomes people from all backgrounds.</p>"},{"location":"readyapi-people/#creator","title":"Creator","text":"<p>Hey! \ud83d\udc4b</p> <p>This is me:</p> @khulnasoft Answers: 1898Pull Requests: 734 <p>I'm the creator of ReadyAPI. You can read more about that in Help ReadyAPI - Get Help - Connect with the author.</p> <p>...But here I want to show you the community.</p> <p>ReadyAPI receives a lot of support from the community. And I want to highlight their contributions.</p> <p>These are the people that:</p> <ul> <li>Help others with questions in GitHub.</li> <li>Create Pull Requests.</li> <li>Review Pull Requests, especially important for translations.</li> <li>Help manage the repository (team members).</li> </ul> <p>All these tasks help maintain the repository.</p> <p>A round of applause to them. \ud83d\udc4f \ud83d\ude47</p>"},{"location":"readyapi-people/#team","title":"Team","text":"<p>This is the current list of team members. \ud83d\ude0e</p> <p>They have different levels of involvement and permissions, they can perform repository management tasks and together we  manage the ReadyAPI repository.</p> @khulnasoft @Kludex @alejsdev @svlandeg @YuriiMotov @patrick91 @luzzodev <p>Although the team members have the permissions to perform privileged tasks, all the help from others maintaining ReadyAPI is very much appreciated! \ud83d\ude47\u200d\u2642\ufe0f</p>"},{"location":"readyapi-people/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>These are the users that have been helping others the most with questions in GitHub. \ud83d\ude47</p> <p>They have proven to be ReadyAPI Experts by helping many others. \u2728</p> <p>Tip</p> <p>You could become an official ReadyAPI Expert too!</p> <p>Just help others with questions in GitHub. \ud83e\udd13</p> <p>You can see the ReadyAPI Experts for:</p> <ul> <li>Last Month \ud83e\udd13</li> <li>3 Months \ud83d\ude0e</li> <li>6 Months \ud83e\uddd0</li> <li>1 Year \ud83e\uddd1\u200d\ud83d\udd2c</li> <li>All Time \ud83e\uddd9</li> </ul>"},{"location":"readyapi-people/#readyapi-experts-last-month","title":"ReadyAPI Experts - Last Month","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last month. \ud83e\udd13</p> @YuriiMotov Questions replied: 9 @luzzodev Questions replied: 8 @alv2017 Questions replied: 3 @sachinh35 Questions replied: 2 @KianAnbarestani Questions replied: 2"},{"location":"readyapi-people/#readyapi-experts-3-months","title":"ReadyAPI Experts - 3 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 3 months. \ud83d\ude0e</p> @luzzodev Questions replied: 25 @YuriiMotov Questions replied: 24 @alv2017 Questions replied: 22 @jgould22 Questions replied: 13 @Kludex Questions replied: 10 @yauhen-sobaleu Questions replied: 9 @JavierSanchezCastro Questions replied: 7 @sachinh35 Questions replied: 3 @SobikXexe Questions replied: 3"},{"location":"readyapi-people/#readyapi-experts-6-months","title":"ReadyAPI Experts - 6 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 6 months. \ud83e\uddd0</p> @luzzodev Questions replied: 57 @YuriiMotov Questions replied: 56 @Kludex Questions replied: 34 @alv2017 Questions replied: 25 @jgould22 Questions replied: 17 @sehraramiz Questions replied: 11 @JavierSanchezCastro Questions replied: 9 @yauhen-sobaleu Questions replied: 9 @estebanx64 Questions replied: 7 @yvallois Questions replied: 7"},{"location":"readyapi-people/#readyapi-experts-1-year","title":"ReadyAPI Experts - 1 Year","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last year. \ud83e\uddd1\u200d\ud83d\udd2c</p> @YuriiMotov Questions replied: 172 @Kludex Questions replied: 63 @luzzodev Questions replied: 61 @sinisaos Questions replied: 41 @JavierSanchezCastro Questions replied: 33 @jgould22 Questions replied: 27 @alv2017 Questions replied: 25 @ceb10n Questions replied: 15 @estebanx64 Questions replied: 13 @n8sty Questions replied: 13 @Kfir-G Questions replied: 13 @sehraramiz Questions replied: 11 @PhysicallyActive Questions replied: 11 @mattmess1221 Questions replied: 11 @yauhen-sobaleu Questions replied: 9 @AIdjis Questions replied: 8 @yvallois Questions replied: 7 @hasansezertasan Questions replied: 5 @gustavosett Questions replied: 5"},{"location":"readyapi-people/#readyapi-experts-all-time","title":"ReadyAPI Experts - All Time","text":"<p>Here are the all time ReadyAPI Experts. \ud83e\udd13\ud83e\udd2f</p> <p>These are the users that have helped others the most with questions in GitHub through all time. \ud83e\uddd9</p> @Kludex Questions replied: 655 @jgould22 Questions replied: 263 @YuriiMotov Questions replied: 247 @dmontagu Questions replied: 240 @Mause Questions replied: 219 @ycd Questions replied: 217 @JarroVGIT Questions replied: 192 @euri10 Questions replied: 153 @iudeen Questions replied: 128 @phy25 Questions replied: 126 @JavierSanchezCastro Questions replied: 91 @raphaelauv Questions replied: 83 @ghandic Questions replied: 71 @ArcLightSlavik Questions replied: 71 @n8sty Questions replied: 67 @luzzodev Questions replied: 61 @falkben Questions replied: 59 @acidjunk Questions replied: 50 @yinziyan1206 Questions replied: 49 @sm-Fifteen Questions replied: 49 @adriangb Questions replied: 46 @insomnes Questions replied: 45 @Dustyposa Questions replied: 45 @odiseo0 Questions replied: 43 @frankie567 Questions replied: 43 @sinisaos Questions replied: 41 @includeamin Questions replied: 40 @chbndrhnns Questions replied: 37 @STeveShary Questions replied: 37 @krishnardt Questions replied: 35 @panla Questions replied: 32 @prostomarkeloff Questions replied: 28 @hasansezertasan Questions replied: 27 @dbanty Questions replied: 26 @alv2017 Questions replied: 25 @wshayes Questions replied: 25 @SirTelemak Questions replied: 23 @connebs Questions replied: 22 @nymous Questions replied: 22 @chrisK824 Questions replied: 22 @rafsaf Questions replied: 21 @ebottos94 Questions replied: 20 @nsidnev Questions replied: 20 @chris-allnutt Questions replied: 20 @estebanx64 Questions replied: 19 @zoliknemet Questions replied: 18 @sehraramiz Questions replied: 18 @retnikt Questions replied: 18"},{"location":"readyapi-people/#top-contributors","title":"Top Contributors","text":"<p>Here are the Top Contributors. \ud83d\udc77</p> <p>These users have created the most Pull Requests that have been merged.</p> <p>They have contributed source code, documentation, etc. \ud83d\udce6</p> @alejsdev Pull Requests: 47 @Kludex Pull Requests: 23 @dmontagu Pull Requests: 17 @euri10 Pull Requests: 13 @kantandane Pull Requests: 13 @nilslindemann Pull Requests: 11 @zhaohan-dong Pull Requests: 11 @mariacamilagl Pull Requests: 9 @handabaldeep Pull Requests: 9 @vishnuvskvkl Pull Requests: 8 @svlandeg Pull Requests: 7 @alissadb Pull Requests: 6 @wshayes Pull Requests: 5 @samuelcolvin Pull Requests: 5 @waynerv Pull Requests: 5 @krishnamadhavan Pull Requests: 5 @alv2017 Pull Requests: 5 @jekirl Pull Requests: 4 @hitrust Pull Requests: 4 @ShahriyarR Pull Requests: 4 @adriangb Pull Requests: 4 @iudeen Pull Requests: 4 @philipokiokio Pull Requests: 4 @AlexWendland Pull Requests: 4 @divums Pull Requests: 3 @prostomarkeloff Pull Requests: 3 @nsidnev Pull Requests: 3 @pawamoy Pull Requests: 3 @patrickmckenna Pull Requests: 3 @hukkin Pull Requests: 3 @marcosmmb Pull Requests: 3 @Serrones Pull Requests: 3 @uriyyo Pull Requests: 3 @andrew222651 Pull Requests: 3 @rkbeatss Pull Requests: 3 @asheux Pull Requests: 3 @n25a Pull Requests: 3 @ghandic Pull Requests: 3 @TeoZosa Pull Requests: 3 @graingert Pull Requests: 3 @jaystone776 Pull Requests: 3 @zanieb Pull Requests: 3 @MicaelJarniac Pull Requests: 3 @papb Pull Requests: 3 @musicinmybrain Pull Requests: 3 @gitworkflows Pull Requests: 3 <p>There are hundreds of other contributors, you can see them all in the ReadyAPI GitHub Contributors page. \ud83d\udc77</p>"},{"location":"readyapi-people/#top-translators","title":"Top Translators","text":"<p>These are the Top Translators. \ud83c\udf10</p> <p>These users have created the most Pull Requests with translations to other languages that have been merged.</p> @nilslindemann Translations: 120 @jaystone776 Translations: 46 @ceb10n Translations: 27 @tokusumi Translations: 23 @SwftAlpc Translations: 23 @hasansezertasan Translations: 22 @waynerv Translations: 20 @valentinDruzhinin Translations: 18 @AlertRED Translations: 16 @hard-coders Translations: 15 @Joao-Pedro-P-Holanda Translations: 14 @codingjenny Translations: 14 @Xewus Translations: 13 @Zhongheng-Cheng Translations: 13 @Smlep Translations: 11 @marcelomarkus Translations: 11 @KaniKim Translations: 10 @Vincy1230 Translations: 9 @rjNemo Translations: 8 @xzmeng Translations: 8 @pablocm83 Translations: 8 @ptt3199 Translations: 7 @batlopes Translations: 6 @lucasbalieiro Translations: 6 @Alexandrhub Translations: 6 @Serrones Translations: 5 @RunningIkkyu Translations: 5 @Attsun1031 Translations: 5 @NinaHwang Translations: 5 @rostik1410 Translations: 5 @alv2017 Translations: 5 @komtaki Translations: 4 @JulianMaurin Translations: 4 @stlucasgarcia Translations: 4 @ComicShrimp Translations: 4 @BilalAlpaslan Translations: 4 @axel584 Translations: 4 @tamtam-fitness Translations: 4 @Limsunoh Translations: 4 @kwang1215 Translations: 4 @k94-ishi Translations: 4 @jfunez Translations: 3 @ycd Translations: 3 @mariacamilagl Translations: 3 @maoyibo Translations: 3 @blt232018 Translations: 3 @magiskboy Translations: 3 @luccasmmg Translations: 3 @lbmendes Translations: 3"},{"location":"readyapi-people/#top-translation-reviewers","title":"Top Translation Reviewers","text":"<p>These users are the Top Translation Reviewers. \ud83d\udd75\ufe0f</p> <p>I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages.</p> @s111d Reviews: 147 @Xewus Reviews: 140 @sodaMelon Reviews: 124 @ceb10n Reviews: 112 @tokusumi Reviews: 104 @hasansezertasan Reviews: 95 @hard-coders Reviews: 92 @alv2017 Reviews: 88 @nazarepiedady Reviews: 83 @AlertRED Reviews: 81 @Alexandrhub Reviews: 68 @waynerv Reviews: 63 @cassiobotaro Reviews: 62 @mattwang44 Reviews: 59 @Laineyzhang55 Reviews: 48 @Kludex Reviews: 47 @komtaki Reviews: 45 @rostik1410 Reviews: 42 @svlandeg Reviews: 42 @alperiox Reviews: 42 @Rishat-F Reviews: 42 @Winand Reviews: 40 @solomein-sv Reviews: 38 @JavierSanchezCastro Reviews: 38 @stlucasgarcia Reviews: 36 @SwftAlpc Reviews: 36 @alejsdev Reviews: 36 @timothy-jeong Reviews: 36 @nilslindemann Reviews: 35 @rjNemo Reviews: 34 @codingjenny Reviews: 34 @mezgoodle Reviews: 33 @akarev0 Reviews: 33 @romashevchenko Reviews: 32 @LorhanSohaky Reviews: 30 @Vincy1230 Reviews: 30 @black-redoc Reviews: 29 @pedabraham Reviews: 28 @Smlep Reviews: 28 @dedkot01 Reviews: 28 @hsuanchi Reviews: 28 @dpinezich Reviews: 28 @maoyibo Reviews: 27 @0417taehyun Reviews: 27 @BilalAlpaslan Reviews: 26 @junah201 Reviews: 26 @zy7y Reviews: 25 @mycaule Reviews: 25 @Aruelius Reviews: 24"},{"location":"readyapi-people/#sponsors","title":"Sponsors","text":"<p>These are the Sponsors. \ud83d\ude0e</p> <p>They are supporting my work with ReadyAPI (and others), mainly through GitHub Sponsors.</p>"},{"location":"readyapi-people/#gold-sponsors","title":"Gold Sponsors","text":""},{"location":"readyapi-people/#silver-sponsors","title":"Silver Sponsors","text":""},{"location":"readyapi-people/#bronze-sponsors","title":"Bronze Sponsors","text":""},{"location":"readyapi-people/#individual-sponsors","title":"Individual Sponsors","text":"@coderabbitai @Nixtla @permitio @mercedes-benz @marvin-robot @Ponte-Energy-Partners @LambdaTest-Inc @BoostryJP @acsone @Trivie @takashi-yoneya @mainframeindustries @yasyf @alixlahuec @primer-io @upciti @f4rk4sh @freddiev4 @samuelcolvin @vincentkoc @otosky @ramonalmeidam @ashi-agrawal @sepsi77 @RaamEEIL @ehaca @raphaellaude @timlrx @Leay15 @ProteinQure @roboflow @kaoru0310 @DelfinaCare @Karine-Bauch @eruditis @jugeeem @logic-automation @dudikbender @patsatsia @anthonycepeda @patricioperezv @chickenandstats @dodo5522 @knallgelb @dblackrun @zsinx6 @kennywakeland @aacayaco @anomaly @gorhack @Ryandaydev @jaredtrog @jstanden @paulcwatts @andreaso @robintw @pamelafox @ericof @wshayes @gaetanBloch @koxudaxi @falkben @mintuhouse @oliverxchen @TrevorBenson @wdwinslow @catherinenelson1 @jsoques @joeds13 @dannywade @khadrawy @mjohnsey @ternaus @eseglem @FernandoCelmer @simw @Rehket @hiancdtrsnm @jpizquierdo @pawamoy @bnkc @petercool @siavashyj @mobyw @ArtyomVancyan @caviri @hgalytoby @joshuatz @SebTota @nisutec @hoenie-ams @joerambo @rlnchow @dvlpjrs @engineerjoe440 @conservative-dude @CR1337 @PunRabbit @PelicanQ @tochikuji @browniebroke @miguelgr @WillHogan @my3 @leobiscassi @Alisa-lisa @ddanier @bryanculbertson @slafs @ceb10n @moonape1226 @msehnout @xncbf @DMantis @hard-coders @supdann @mntolia @pheanex @Zuzah @artempronevskiy @TheR1D @danielunderwood @rangulvers @sdevkota @brizzbuzz @Baghdady92 @KentShikama @katnoria @harsh183 @hcristea @larsyngvelundin @andrecorumba @rwxd @morzan1001 @sadikkuzu @Olegt0rr @Miles-Arts @sandeepsalwan1 @fabioantonioastore @zhandos256 @one-st-one @Toothwitch @ssbarnea @andreagrandi"},{"location":"readyapi-people/#about-the-data-technical-details","title":"About the data - technical details","text":"<p>The main intention of this page is to highlight the effort of the community to help others.</p> <p>Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.</p> <p>The data is calculated each month, you can read the source code here.</p> <p>Here I'm also highlighting contributions from sponsors.</p> <p>I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>First, you might want to see the basic ways to help ReadyAPI and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the readyapi repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual environment","text":"<p>Follow the instructions to create and activate a virtual environment for the internal code of <code>readyapi</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install requirements using pip","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local ReadyAPI in your local environment.</p>"},{"location":"contributing/#using-your-local-readyapi","title":"Using your local ReadyAPI","text":"<p>If you create a Python file that imports and uses ReadyAPI, and run it with the Python from your local environment, it will use your cloned local ReadyAPI source code.</p> <p>And if you update that local ReadyAPI source code when you run that Python file again, it will use the fresh version of ReadyAPI you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>Technical Details</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install readyapi</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of ReadyAPI is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format-the-code","title":"Format the code","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the main docs in English it's at <code>docs/en/</code>:</p> <pre><code>$ cd docs/en/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#cligenius-cli-optional","title":"Cligenius CLI (optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Cligenius CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Cligenius CLI, you can install completion with:</p> <pre><code>$ cligenius --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place to handle translations in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs/en/</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./examples/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"contributing/#apps-and-docs-at-the-same-time","title":"Apps and docs at the same time","text":"<p>If you run the examples with, e.g.:</p> <pre><code>$ readyapi dev tutorial001.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>as Uvicorn by default will use the port <code>8000</code>, the documentation on port <code>8008</code> won't clash.</p>"},{"location":"contributing/#translations","title":"Translations","text":"<p>Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80</p> <p>Here are the steps to help with translations.</p>"},{"location":"contributing/#tips-and-guidelines","title":"Tips and guidelines","text":"<ul> <li> <p>Check the currently existing pull requests for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is <code>lang-es</code>.</p> </li> <li> <p>Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.</p> </li> </ul> <p>Tip</p> <p>You can add comments with change suggestions to existing pull requests.</p> <p>Check the docs about adding a pull request review to approve it or request changes.</p> <ul> <li> <p>Check if there's a GitHub Discussion to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.</p> </li> <li> <p>If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.</p> </li> <li> <p>To check the 2-letter code for the language you want to translate, you can use the table List of ISO 639-1 codes.</p> </li> </ul>"},{"location":"contributing/#existing-language","title":"Existing language","text":"<p>Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.</p> <p>In the case of Spanish, the 2-letter code is <code>es</code>. So, the directory for Spanish translations is located at <code>docs/es/</code>.</p> <p>Tip</p> <p>The main (\"official\") language is English, located at <code>docs/en/</code>.</p> <p>Now run the live server for the docs in Spanish:</p> <pre><code>// Use the command \"live\" and pass the language code as a CLI argument\n$ python ./scripts/docs.py live es\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the Spanish translations it's at <code>docs/es/</code>:</p> <pre><code>$ cd docs/es/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre> <p>Now you can go to http://127.0.0.1:8008 and see your changes live.</p> <p>You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.</p> <p>Now let's say that you want to add a translation for the section Features.</p> <ul> <li>Copy the file at:</li> </ul> <pre><code>docs/en/docs/features.md\n</code></pre> <ul> <li>Paste it in exactly the same location but for the language you want to translate, e.g.:</li> </ul> <pre><code>docs/es/docs/features.md\n</code></pre> <p>Tip</p> <p>Notice that the only change in the path and file name is the language code, from <code>en</code> to <code>es</code>.</p> <p>If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). \ud83c\udf89</p> <p>Now you can translate it all and see how it looks as you save the file.</p>"},{"location":"contributing/#dont-translate-these-pages","title":"Don't Translate these Pages","text":"<p>\ud83d\udea8 Don't translate:</p> <ul> <li>Files under <code>reference/</code></li> <li><code>release-notes.md</code></li> <li><code>readyapi-people.md</code></li> <li><code>external-links.md</code></li> <li><code>newsletter.md</code></li> <li><code>management-tasks.md</code></li> <li><code>management.md</code></li> <li><code>contributing.md</code></li> </ul> <p>Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.</p>"},{"location":"contributing/#new-language","title":"New Language","text":"<p>Let's say that you want to add translations for a language that is not yet translated, not even some pages.</p> <p>Let's say you want to add translations for Creole, and it's not yet there in the docs.</p> <p>Checking the link from above, the code for \"Creole\" is <code>ht</code>.</p> <p>The next step is to run the script to generate a new translation directory:</p> <pre><code>// Use the command new-lang, pass the language code as a CLI argument\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\n</code></pre> <p>Now you can check in your code editor the newly created directory <code>docs/ht/</code>.</p> <p>That command created a file <code>docs/ht/mkdocs.yml</code> with a simple config that inherits everything from the <code>en</code> version:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>Tip</p> <p>You could also simply create that file with those contents manually.</p> <p>That command also created a dummy file <code>docs/ht/index.md</code> for the main page, you can start by translating that one.</p> <p>You can continue with the previous instructions for an \"Existing Language\" for that process.</p> <p>You can make the first pull request with those two files, <code>docs/ht/mkdocs.yml</code> and <code>docs/ht/index.md</code>. \ud83c\udf89</p>"},{"location":"contributing/#preview-the-result","title":"Preview the result","text":"<p>As already mentioned above, you can use the <code>./scripts/docs.py</code> with the <code>live</code> command to preview the results (or <code>mkdocs serve</code>).</p> <p>Once you are done, you can also test it all as it would look online, including all the other languages.</p> <p>To do that, first build all the docs:</p> <pre><code>// Use the command \"build-all\", this will take a bit\n$ python ./scripts/docs.py build-all\n\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\n</code></pre> <p>This builds all those independent MkDocs sites for each language, combines them, and generates the final output at <code>./site/</code>.</p> <p>Then you can serve that with the command <code>serve</code>:</p> <pre><code>// Use the command \"serve\" after running \"build-all\"\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#translation-specific-tips-and-guidelines","title":"Translation specific tips and guidelines","text":"<ul> <li> <p>Translate only the Markdown documents (<code>.md</code>). Do not translate the code examples at <code>./examples</code>.</p> </li> <li> <p>In code blocks within the Markdown document, translate comments (<code># a comment</code>), but leave the rest unchanged.</p> </li> <li> <p>Do not change anything enclosed in \"``\" (inline code).</p> </li> <li> <p>In lines starting with <code>///</code> translate only the text part after <code>|</code>. Leave the rest unchanged.</p> </li> <li> <p>You can translate info boxes like <code>/// warning</code> with for example <code>/// warning | Achtung</code>. But do not change the word immediately after the <code>///</code>, it determines the color of the info box.</p> </li> <li> <p>Do not change the paths in links to images, code files, Markdown documents.</p> </li> <li> <p>However, when a Markdown document is translated, the <code>#hash-parts</code> in links to its headings may change. Update these links if possible.</p> <ul> <li>Search for such links in the translated document using the regex <code>#[^# ]</code>.</li> <li>Search in all documents already translated into your language for <code>your-translated-document.md</code>. For example VS Code has an option \"Edit\" -&gt; \"Find in Files\".</li> <li>When translating a document, do not \"pre-translate\" <code>#hash-parts</code> that link to headings in untranslated documents.</li> </ul> </li> </ul>"},{"location":"external-links/","title":"External Links and Articles","text":"<p>ReadyAPI has a great community constantly growing.</p> <p>There are many posts, articles, tools, and projects, related to ReadyAPI.</p> <p>Here's an incomplete list of some of them.</p> <p>Tip</p> <p>If you have an article, project, tool, or anything related to ReadyAPI that is not yet listed here, create a Pull Request adding it.</p>"},{"location":"external-links/#articles","title":"Articles","text":""},{"location":"external-links/#english","title":"English","text":"<ul> <li> <p>How to profile a ReadyAPI asynchronous request by Balthazar Rouberol.</p> </li> <li> <p>Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale by Stephen Siegert - Neon.</p> </li> <li> <p>Building a Machine Learning Microservice with ReadyAPI by Kurtis Pykes - NVIDIA.</p> </li> <li> <p>Booking Appointments with Twilio, Notion, and ReadyAPI by Ravgeet Dhillon - Twilio.</p> </li> <li> <p>Write a Python data layer with Azure Cosmos DB and ReadyAPI by Abhinav Tripathi - Microsoft Blogs.</p> </li> <li> <p>10 Tips for adding SQLAlchemy to ReadyAPI by Donny Peeters.</p> </li> <li> <p>Tips on migrating from Flask to ReadyAPI and vice-versa by Jessica Temporal.</p> </li> <li> <p>Explore How to Effectively Use JWT With ReadyAPI by Ankit Anchlia.</p> </li> <li> <p>Instrument ReadyAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo. by Nicol\u00f3 Lino.</p> </li> <li> <p>ML serving and monitoring with ReadyAPI and Evidently by Mikhail Rozhkov, Elena Samuylova.</p> </li> <li> <p>ReadyAPI Tutorial in Visual Studio Code by Visual Studio Code Team.</p> </li> <li> <p>ReadyAPI application monitoring made easy by Apitally.</p> </li> <li> <p>Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included by John Philip.</p> </li> <li> <p>Building a CRUD API with ReadyAPI and Supabase by Keshav Malik.</p> </li> <li> <p>Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI by Adejumo Ridwan Suleiman.</p> </li> <li> <p>ReadyAPI lambda container: serverless simplified by Raf Rasenberg.</p> </li> <li> <p>Authorization on ReadyAPI with Casbin by Teresa N. Fontanella De Santis.</p> </li> <li> <p>How to monitor ReadyAPI application performance using Python agent by New Relic.</p> </li> <li> <p>Building the Poll App From Django Tutorial With ReadyAPI And React by Jean-Baptiste Rocher.</p> </li> <li> <p>Seamless ReadyAPI Configuration with ConfZ by Silvan Melchior.</p> </li> <li> <p>5 Advanced Features of ReadyAPI You Should Try by Kaustubh Gupta.</p> </li> <li> <p>Deploying ML Models as API Using ReadyAPI and Heroku by Kaustubh Gupta.</p> </li> <li> <p>Using GitHub Actions to Deploy a ReadyAPI Project to Heroku by Somraj Saha.</p> </li> <li> <p>How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI by @pystar.</p> </li> <li> <p>Building a realtime ticket booking solution with Kafka, ReadyAPI, and Ably by Ben Gamble.</p> </li> <li> <p>Building simple E-Commerce with NuxtJS and ReadyAPI by Shahriyar(Shako) Rzayev.</p> </li> <li> <p>Serve a machine learning model using Sklearn, ReadyAPI and Docker by Rodrigo Arenas.</p> </li> <li> <p>Building an API with ReadyAPI and Supabase and Deploying on Deta by Yashasvi Singh.</p> </li> <li> <p>Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao.</p> </li> <li> <p>Python Facebook messenger webhook with ReadyAPI on Glitch by Patrick Ladon.</p> </li> <li> <p>Deploy a dockerized ReadyAPI application to AWS by Valon Januzaj.</p> </li> <li> <p>ReadyAPI for Flask Users by Amit Chaudhary.</p> </li> <li> <p>How to monitor your ReadyAPI service by Louis Guitton.</p> </li> <li> <p>Creating a CRUD App with ReadyAPI (Part one) by Precious Ndubueze.</p> </li> <li> <p>Build And Host Fast Data Science Applications Using ReadyAPI by Farhad Malik.</p> </li> <li> <p>Deploy ReadyAPI on Azure App Service by Navule Pavan Kumar Rao.</p> </li> <li> <p>Machine learning model serving in Python using ReadyAPI and streamlit by Davide Fiocco.</p> </li> <li> <p>Introducing Dispatch by Netflix.</p> </li> <li> <p>Using ReadyAPI with Django by Stavros Korokithakis.</p> </li> <li> <p>Build a Secure Twilio Webhook with Python and ReadyAPI by Twilio.</p> </li> <li> <p>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</p> </li> <li> <p>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</p> </li> <li> <p>Microservice in Python using ReadyAPI by Paurakh Sharma Humagain.</p> </li> <li> <p>Real-time Notifications with Python and Postgres by Guillermo Cruz.</p> </li> <li> <p>Create and Deploy ReadyAPI app to Heroku without using Docker by Navule Pavan Kumar Rao.</p> </li> <li> <p>Another Boilerplate to ReadyAPI: Azure Pipeline CI + Pytest by Arthur Henrique.</p> </li> <li> <p>Deploy Machine Learning Models with Keras, ReadyAPI, Redis and Docker by Shane Soh.</p> </li> <li> <p>Towards Data Science: Deploying Iris Classifications with ReadyAPI and Docker by Mandy Gu.</p> </li> <li> <p>TestDriven.io: Developing and Testing an Asynchronous API with ReadyAPI and Pytest by Michael Herman.</p> </li> <li> <p>How To Deploy Tensorflow 2.0 Models As An API Service With ReadyAPI &amp; Docker by Bernard Brenyah.</p> </li> <li> <p>Why I'm Leaving Flask by Dylan Anthony.</p> </li> <li> <p>Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz.</p> </li> <li> <p>A ReadyAPI and Swagger UI visual cheatsheet by @euri10.</p> </li> <li> <p>Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a ReadyAPI server] by Uber Engineering.</p> </li> <li> <p>How to Deploy a Machine Learning Model by Maarten Grootendorst.</p> </li> <li> <p>JWT Authentication with ReadyAPI and AWS Cognito by Johannes Gontrum.</p> </li> <li> <p>Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur.</p> </li> <li> <p>Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann.</p> </li> <li> <p>ReadyAPI authentication revisited: Enabling API key authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale.</p> </li> <li> <p>Introduction to the readyapi python framework by Errieta Kostala.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin.</p> </li> <li> <p>ReadyAPI/Starlette debug vs prod by William Hayes.</p> </li> <li> <p>Developing ReadyAPI Application using K8s &amp; AWS by Mukul Mantosh.</p> </li> <li> <p>Readyapi, Docker(Docker compose) and Postgres by KrishNa.</p> </li> <li> <p>Deployment using Docker, Lambda, Aurora, CDK &amp; GH Actions by Devon Ray.</p> </li> <li> <p>Mastering Soft Delete: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> <li> <p>Role based row filtering: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> </ul>"},{"location":"external-links/#german","title":"German","text":"<ul> <li> <p>Domain-driven Design mit Python und ReadyAPI by Marcel Sander (actidoo).</p> </li> <li> <p>Inbetriebnahme eines scikit-learn-Modells mit ONNX und ReadyAPI by Nico Axtmann.</p> </li> <li> <p>REST-API Programmieren mittels Python und dem ReadyAPI Modul by Felix Sch\u00fcrmeyer.</p> </li> </ul>"},{"location":"external-links/#japanese","title":"Japanese","text":"<ul> <li> <p>[ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b by @bee2.</p> </li> <li> <p>Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) by @bee2.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b4\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u7ba1\u7406\u8005\u200b\u30da\u30fc\u30b8\u200b\u6539\u826f\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b3\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u8a8d\u200b\u8a3c\u200b\u30fb\u30e6\u30fc\u30b6\u200b\u767b\u200b\u9332\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b2\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b1\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u74b0\u5883\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u200b\u958b\u200b\u767a\u200b\u8005\u200b\u5411\u200b\u3051\u306eDocker\u306b\u3088\u308bPython\u200b\u958b\u200b\u767a\u200b\u74b0\u200b\u5883\u200b\u69cb\u200b\u7bc9\u200b by Hikaru Takahashi.</p> </li> <li> <p>ReadyAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u200b\u53d7\u200b\u3051\u200b\u53d6\u200b\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3092MySQL\u3068\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066Docker\u3067\u200b\u7ba1\u7406\u200b\u3057\u3066\u307f\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3067CORS\u3092\u200b\u56de\u907f\u200b by @angel_katayoku.</p> </li> <li> <p>python\u200b\u88fd\u200b\u306e\u200b\u6700\u65b0\u200bAPI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI \u3092\u200b\u89e6\u200b\u3063\u3066\u307f\u305f by @ryoryomaru.</p> </li> <li> <p>ReadyAPI\uff5cDB\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066CRUD\u3059\u308bPython\u200b\u88fd\u200bAPI\u30b5\u30fc\u30d0\u30fc\u3092\u200b\u69cb\u7bc9\u200b by @mtitg.</p> </li> </ul>"},{"location":"external-links/#portuguese","title":"Portuguese","text":"<ul> <li> <p>ReadyAPI do ZERO by Eduardo Mendes.</p> </li> <li> <p>Dicas para migrar uma aplica\u00e7\u00e3o de Flask para ReadyAPI e vice-versa by Jessica Temporal.</p> </li> </ul>"},{"location":"external-links/#russian","title":"Russian","text":"<ul> <li> <p>ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler.</p> </li> <li> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI? by prostomarkeloff.</p> </li> <li> <p>\u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 ReadyAPI by Andrey Korchak.</p> </li> </ul>"},{"location":"external-links/#vietnamese","title":"Vietnamese","text":"<ul> <li>READYAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n.</li> </ul>"},{"location":"external-links/#taiwanese","title":"Taiwanese","text":"<ul> <li>Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b by Leon.</li> </ul>"},{"location":"external-links/#spanish","title":"Spanish","text":"<ul> <li>Tutorial de ReadyAPI, \u00bfel mejor framework de Python? by Eduardo Zepeda.</li> </ul>"},{"location":"external-links/#podcasts","title":"Podcasts","text":""},{"location":"external-links/#english_1","title":"English","text":"<ul> <li> <p>Starting With ReadyAPI and Examining Python's Import System - Episode 72 by Real Python.</p> </li> <li> <p>Do you dare to press \".\"? - Episode 247 - Dan #6: SQLDev - use the same models for SQL and ReadyAPI by Python Bytes FM.</p> </li> <li> <p>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</p> </li> <li> <p>ReadyAPI on PythonBytes by Python Bytes FM.</p> </li> </ul>"},{"location":"external-links/#talks","title":"Talks","text":""},{"location":"external-links/#english_2","title":"English","text":"<ul> <li> <p>PyCon AU 2023: Testing asynchronous applications with ReadyAPI and pytest by Jeny Sadadia.</p> </li> <li> <p>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyCon UK 2019: ReadyAPI from the ground up by Chris Withers.</p> </li> </ul>"},{"location":"external-links/#taiwanese_1","title":"Taiwanese","text":"<ul> <li>PyCon TW 2024: \u200b\u5168\u65b9\u4f4d\u200b\u5f37\u5316\u200b Python \u200b\u670d\u52d9\u200b\u53ef\u89c0\u200b\u6e2c\u6027\u200b\uff1a\u200b\u4ee5\u200b ReadyAPI \u200b\u548c\u200b Grafana Stack \u200b\u70ba\u4f8b\u200b by Blueswen.</li> </ul>"},{"location":"external-links/#github-repositories","title":"GitHub Repositories","text":"<p>Most starred GitHub repositories with the topic <code>readyapi</code>:</p> <p>\u2605 32337 - full-stack-readyapi-template by @readyapi.</p> <p>\u2605 29833 - Hello-Python by @mouredev.</p> <p>\u2605 21544 - serve by @jina-ai.</p> <p>\u2605 15799 - sqldev by @readyapi.</p> <p>\u2605 15676 - HivisionIDPhotos by @Zeyi-Lin.</p> <p>\u2605 12183 - Douyin_TikTok_Download_API by @Evil0ctal.</p> <p>\u2605 11594 - readyapi-best-practices by @zhanymkanov.</p> <p>\u2605 9586 - awesome-readyapi by @mjhea0.</p> <p>\u2605 8804 - FastUI by @pydantic.</p> <p>\u2605 6688 - nonebot2 by @nonebot.</p> <p>\u2605 6502 - FileCodeBox by @vastsa.</p> <p>\u2605 5720 - serge by @serge-chat.</p> <p>\u2605 5515 - hatchet by @hatchet-dev.</p> <p>\u2605 5162 - readyapi-users by @readyapi-users.</p> <p>\u2605 5119 - polar by @polarsource.</p> <p>\u2605 4302 - chatgpt-web-share by @chatpire.</p> <p>\u2605 4244 - strawberry by @strawberry-graphql.</p> <p>\u2605 4178 - readyapi_mcp by @tadata-org.</p> <p>\u2605 4112 - atrilabs-engine by @Atri-Labs.</p> <p>\u2605 3985 - dynaconf by @dynaconf.</p> <p>\u2605 3918 - poem by @poem-web.</p> <p>\u2605 3287 - farfalle by @rashadphz.</p> <p>\u2605 3192 - readyapi-admin by @readyapi-admin.</p> <p>\u2605 3141 - datamodel-code-generator by @koxudaxi.</p> <p>\u2605 3116 - opyrator by @ml-tooling.</p> <p>\u2605 3088 - LitServe by @Lightning-AI.</p> <p>\u2605 3059 - logfire by @pydantic.</p> <p>\u2605 3052 - docarray by @docarray.</p> <p>\u2605 3025 - huma by @danielgtaylor.</p> <p>\u2605 2883 - readyapi-realworld-example-app by @nsidnev.</p> <p>\u2605 2756 - uvicorn-gunicorn-readyapi-docker by @khulnasoft.</p> <p>\u2605 2587 - tracecat by @TracecatHQ.</p> <p>\u2605 2502 - best-of-web-python by @ml-tooling.</p> <p>\u2605 2500 - Kokoro-ReadyAPI by @remsky.</p> <p>\u2605 2419 - RasaGPT by @paulpierre.</p> <p>\u2605 2350 - readyapi-react by @Buuntu.</p> <p>\u2605 2277 - nextpy by @dot-agent.</p> <p>\u2605 2273 - ReadyAPI-template by @s3rius.</p> <p>\u2605 2183 - 30-Days-of-Python by @codingforentrepreneurs.</p> <p>\u2605 2141 - sqladmin by @aminalaee.</p> <p>\u2605 2070 - langserve by @langchain-ai.</p> <p>\u2605 2063 - readyapi-utils by @readyapiutils.</p> <p>\u2605 2028 - solara by @widgetti.</p> <p>\u2605 1996 - supabase-py by @supabase.</p> <p>\u2605 1870 - mangum by @Kludex.</p> <p>\u2605 1827 - python-week-2022 by @rochacbruno.</p> <p>\u2605 1763 - SurfSense by @MODSetter.</p> <p>\u2605 1743 - manage-readyapi by @ycd.</p> <p>\u2605 1741 - agentkit by @BCG-X-Official.</p> <p>\u2605 1730 - ormar by @collerek.</p> <p>\u2605 1631 - langchain-serve by @jina-ai.</p> <p>\u2605 1610 - termpair by @cs01.</p> <p>\u2605 1588 - piccolo by @piccolo-orm.</p> <p>\u2605 1587 - coronavirus-tracker-api by @ExpDev07.</p> <p>\u2605 1552 - readyapi-cache by @long2ice.</p> <p>\u2605 1536 - openapi-python-client by @openapi-generators.</p> <p>\u2605 1491 - readyapi-crudrouter by @awtkns.</p> <p>\u2605 1450 - slowapi by @laurentS.</p> <p>\u2605 1443 - awesome-readyapi-projects by @Kludex.</p> <p>\u2605 1387 - awesome-python-resources by @DjangoEx.</p> <p>\u2605 1341 - budgetml by @ebhy.</p> <p>\u2605 1331 - readyapi-pagination by @uriyyo.</p> <p>\u2605 1299 - readyapi-boilerplate by @teamhide.</p> <p>\u2605 1235 - readyapi-amis-admin by @amisadmin.</p> <p>\u2605 1222 - readyapi-tutorial by @liaogx.</p> <p>\u2605 1190 - vue-readyapi-admin by @mizhexiaoxiao.</p> <p>\u2605 1180 - readyapi-code-generator by @koxudaxi.</p> <p>\u2605 1166 - bolt-python by @slackapi.</p> <p>\u2605 1134 - readyapi_production_template by @zhanymkanov.</p> <p>\u2605 1127 - langchain-extract by @langchain-ai.</p> <p>\u2605 1115 - odmantic by @art049.</p> <p>\u2605 1112 - prometheus-readyapi-instrumentator by @trallnag.</p> <p>\u2605 1107 - bedrock-chat by @aws-samples.</p> <p>\u2605 1094 - readyapi-alembic-sqldev-async by @jonra1993.</p> <p>\u2605 1041 - restish by @rest-sh.</p> <p>\u2605 1036 - fastcrud by @igorbenav.</p> <p>\u2605 1022 - runhouse by @run-house.</p> <p>\u2605 997 - readyapi_best_architecture by @readyapi-practices.</p> <p>\u2605 990 - lanarky by @ajndkr.</p> <p>\u2605 990 - autollm by @viddexa.</p> <p>\u2605 932 - secure by @TypeError.</p> <p>\u2605 925 - langcorn by @msoedov.</p> <p>\u2605 925 - ReadyAPI-boilerplate by @igorbenav.</p> <p>\u2605 913 - authx by @yezz123.</p> <p>\u2605 907 - energy-forecasting by @iusztinpaul.</p> <p>\u2605 873 - titiler by @developmentseed.</p> <p>\u2605 850 - httpdbg by @cle-b.</p> <p>\u2605 844 - marker-api by @adithya-s-k.</p> <p>\u2605 842 - ludic by @getludic.</p> <p>\u2605 805 - flock by @Onelevenvy.</p> <p>\u2605 797 - readyapi-observability by @blueswen.</p> <p>\u2605 786 - readyapi-do-zero by @dunossauro.</p> <p>\u2605 781 - readyapi-mail by @sabuhish.</p> <p>\u2605 764 - starlette-admin by @jowilf.</p> <p>\u2605 759 - lccn_predictor by @baoliay2008.</p> <p>\u2605 741 - KonomiTV by @tsukumijima.</p> <p>\u2605 734 - ReadyAPI-Backend-Template by @Aeternalis-Ingenium.</p> <p>\u2605 731 - learn-generative-ai by @panaverse.</p> <p>\u2605 730 - annotated-py-projects by @hhstore.</p>"},{"location":"newsletter/","title":"ReadyAPI and friends newsletter","text":""},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the ReadyAPI repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of ReadyAPI? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help ReadyAPI - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@khulnasoft) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> <li>For translations use the <code>\ud83c\udf10</code> emoji (\"globe with meridians\").</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> <li>When the PR is for a translation, start with the <code>\ud83c\udf10</code> and then <code>Add {language} translation for</code> and then the translated file path. For example:</li> </ul> <pre><code>\ud83c\udf10 Add Spanish translation for `docs/es/docs/teleporting.md`\n</code></pre> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>lang-all</code>: Translations<ul> <li>Use this for translations. You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/{some lang}/docs</code> but not <code>docs/en/docs</code>. For example, <code>docs/es/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#add-labels-to-translation-prs","title":"Add Labels to Translation PRs","text":"<p>When there's a PR for a translation, apart from adding the <code>lang-all</code> label, also add a label for the language.</p> <p>There will be a label for each language using the language code, like <code>lang-{lang code}</code>, for example, <code>lang-es</code> for Spanish, <code>lang-fr</code> for French, etc.</p> <ul> <li>Add the specific language label.</li> <li>Add the label <code>awaiting-review</code>.</li> </ul> <p>The label <code>awaiting-review</code> is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.</p> <p>Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the <code>awaiting-review</code> label, and add the <code>approved-1</code> label.</p> <p>This way, we can notice when there are new translations ready, because they have the <code>approved-1</code> label.</p>"},{"location":"management-tasks/#merge-translation-prs","title":"Merge Translation PRs","text":"<p>For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.</p> <p>For the other languages, confirm that:</p> <ul> <li>The title is correct following the instructions above.</li> <li>It has the labels <code>lang-all</code> and <code>lang-{lang code}</code>.</li> <li>The PR changes only one Markdown file adding a translation.<ul> <li>Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.</li> <li>If it's the first translation for that language, it will have additional <code>mkdocs.yml</code> files, for those cases follow the instructions below.</li> </ul> </li> <li>The PR doesn't add any additional or extraneous files.</li> <li>The translation seems to have a similar structure as the original English file.</li> <li>The translation doesn't seem to change the original content, for example with obvious additional documentation sections.</li> <li>The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.</li> <li>The \"admonition\" sections, like <code>tip</code>, <code>info</code>, etc. are not changed or translated. For example:</li> </ul> <pre><code>/// tip\n\nThis is a tip.\n\n///\n</code></pre> <p>looks like this:</p> <p>Tip</p> <p>This is a tip.</p> <p>...it could be translated as:</p> <pre><code>/// tip\n\nEsto es un consejo.\n\n///\n</code></pre> <p>...but needs to keep the exact <code>tip</code> keyword. If it was translated to <code>consejo</code>, like:</p> <pre><code>/// consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>it would change the style to the default one, it would look like:</p> <p>/// consejo</p> <p>Esto es un consejo.</p> <p>///</p> <p>Those don't have to be translated, but if they are, they need to be written as:</p> <pre><code>/// tip | consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>Which looks like:</p> <p>consejo</p> <p>Esto es un consejo.</p>"},{"location":"management-tasks/#first-translation-pr","title":"First Translation PR","text":"<p>When there's a first translation for a language, it will have a <code>docs/{lang code}/docs/index.md</code> translated file and a <code>docs/{lang code}/mkdocs.yml</code>.</p> <p>For example, for Bosnian, it would be:</p> <ul> <li><code>docs/bs/docs/index.md</code></li> <li><code>docs/bs/mkdocs.yml</code></li> </ul> <p>The <code>mkdocs.yml</code> file will have only the following content:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>The language code would normally be in the ISO 639-1 list of language codes.</p> <p>In any case, the language code should be in the file docs/language_names.yml.</p> <p>There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a <code>lang-bs</code>. Before creating the label and adding it to the PR, create the GitHub Discussion:</p> <ul> <li>Go to the Translations GitHub Discussions</li> <li>Create a new discussion with the title <code>Bosnian Translations</code> (or the language name in English)</li> <li>A description of:</li> </ul> <pre><code>## Bosnian translations\n\nThis is the issue to track translations of the docs to Bosnian. \ud83d\ude80\n\nHere are the [PRs to review with the label `lang-bs`](https://github.com/readyapi/readyapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). \ud83e\udd13\n</code></pre> <p>Update \"Bosnian\" with the new language.</p> <p>And update the search link to point to the new language label that will be created, like <code>lang-bs</code>.</p> <p>Create and add the label to that new Discussion just created, like <code>lang-bs</code>.</p> <p>Then go back to the PR, and add the label, like <code>lang-bs</code>, and <code>lang-all</code> and <code>awaiting-review</code>.</p> <p>Now the GitHub action will automatically detect the label <code>lang-bs</code> and will post in that Discussion that this PR is waiting to be reviewed.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#readyapi-people-prs","title":"ReadyAPI People PRs","text":"<p>Every month, a GitHub Action updates the ReadyAPI People data. Those PRs look like this one: \ud83d\udc65 Update ReadyAPI People.</p> <p>If the tests are passing, you can merge it right away.</p>"},{"location":"management-tasks/#external-links-prs","title":"External Links PRs","text":"<p>When people add external links they edit this file external_links.yml.</p> <ul> <li>Make sure the new link is in the correct category (e.g. \"Podcasts\") and language (e.g. \"Japanese\").</li> <li>A new link should be at the top of its list.</li> <li>The link URL should work (it should not return a 404).</li> <li>The content of the link should be about ReadyAPI.</li> <li>The new addition should have these fields:<ul> <li><code>author</code>: The name of the author.</li> <li><code>link</code>: The URL with the content.</li> <li><code>title</code>: The title of the link (the title of the article, podcast, etc).</li> </ul> </li> </ul> <p>After checking all these things and ensuring the PR has the right labels, you can merge it.</p>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the ReadyAPI repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @khulnasoft, am the creator and owner of the ReadyAPI repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>You can see the current team members in ReadyAPI People - Team.</p> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p>"},{"location":"management/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>The people that help others the most in GitHub Discussions can become ReadyAPI Experts.</p> <p>This is normally the best way to contribute to the project.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain ReadyAPI.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ReDoc to version 2.x. PR #9700 by @joakimnordling.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>Create init.py. PR #236 by @gitworkflows.</li> <li>\ud83c\udf71 Update Drawio diagrams SVGs, single file per diagram, sans-serif font. PR #13706 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for \"Help ReadyAPI\", simplify and reduce \"sponsor\" section. PR #13670 by @khulnasoft.</li> <li>\ud83d\udcdd Remove unnecessary bullet from docs. PR #13641 by @Adamowoc.</li> <li>\u270f\ufe0f Fix syntax error in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #13623 by @gsheni.</li> <li>\ud83d\udcdd Fix typo in documentation. PR #13599 by @Taoup.</li> <li>\ud83d\udcdd Fix liblab client generation doc link. PR #13571 by @EFord36.</li> <li>\u270f\ufe0f Fix talk information typo. PR #13544 by @blueswen.</li> <li>\ud83d\udcdd Add External Link: Taiwanese talk on ReadyAPI with observability . PR #13527 by @blueswen.</li> </ul>"},{"location":"release-notes/#translations","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-param-models.md</code>. PR #13526 by @minaton-ru.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/index.md</code>. PR #13374 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #13324 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #13292 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #13348 by @Zhongheng-Cheng.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06 Bump tj-actions/changed-files from 46 to 47. PR #245 by @dependabot[bot].</li> <li>\u2b06 Bump actions/labeler from 5 to 6. PR #242 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 5 to 6. PR #239 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #237 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump actions/checkout from 4 to 5. PR #234 by @dependabot[bot].</li> <li>\u2b06 Bump ruff from 0.11.2 to 0.12.7. PR #229 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #228 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump actions/download-artifact from 4 to 5. PR #230 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 4 to 5. PR #231 by @dependabot[bot].</li> <li>\ud83d\udc77 Add CI to translate with LLMs. PR #233 by @khulnasoft-bot.</li> <li>\u2692\ufe0f Update translate script, update prompt to minimize generated diff. PR #232 by @khulnasoft-bot.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #221 by @pre-commit-ci[bot].</li> <li>Bump tj-actions/changed-files from 44 to 46 in /.github/workflows in the github_actions group across 1 directory. PR #227 by @dependabot[bot].</li> <li>Pre commit. PR #220 by @gitworkflows.</li> <li>\ud83d\udc77 Add custom pre-commit. PR #219 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Subtotal. PR #13701 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove deepset / Haystack. PR #13700 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13688 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13671 by @khulnasoft.</li> <li>\u2b06 Bump cligenius from 0.12.5 to 0.15.3. PR #13666 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.23 to 0.0.24. PR #13665 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Sponsors: Zuplo logo and alt text. PR #13645 by @martyndavies.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13667 by @khulnasoft.</li> <li>\ud83d\udd27 Update links for LinkedIn and bottom. PR #13669 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove Bump.sh and Coherence. PR #13668 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13664 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13662 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13656 by @pre-commit-ci[bot].</li> <li>\u2705 Use <code>inline-snapshot</code> to support different Pydantic versions in the test suite. PR #12534 by @15r10nk.</li> <li>\u2b06 Bump astral-sh/setup-uv from 5 to 6. PR #13648 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13634 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13619 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13594 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13568 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13565 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13559 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13558 by @khulnasoft.</li> <li>\u2b06 Bump dirty-equals from 0.8.0 to 0.9.0. PR #13561 by @dependabot[bot].</li> <li>\ud83d\udd27 Clean up <code>docs/en/mkdocs.yml</code> configuration file. PR #13542 by @svlandeg.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12986 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#011512","title":"0.115.12","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>convert_underscores=False</code> for header Pydantic models. PR #13515 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/middleware.md</code>. PR #13444 by @Rishat-F.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13493 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_1","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/metadata.md</code> page. PR #13459 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/response-status-code.md</code> page. PR #13462 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-param-models.md</code> page. PR #13460 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-param-models.md</code> page. PR #13461 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/virtual-environments.md</code>. PR #13304 by @k94-ishi.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/oauth2-jwt.md</code>. PR #13333 by @yes0ng.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/cloud.md</code>. PR #13407 by @ptt3199.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2b06 Bump pydantic-ai from 0.0.15 to 0.0.30. PR #13438 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.22 to 0.0.23. PR #13437 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.10.0 to 25.1.0. PR #13436 by @dependabot[bot].</li> <li>\u2b06 Bump ruff to 0.9.4. PR #13299 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: pause TestDriven. PR #13446 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011511","title":"0.115.11","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add docs examples and tests (support) for <code>Annotated</code> custom validations, like <code>AfterValidator</code>, revert #13440. PR #13442 by @khulnasoft.<ul> <li>New docs: Query Parameters and String Validations - Custom Validation.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_2","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for  <code>docs/ru/docs/tutorial/middleware.md</code>. PR #13412 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13439 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13432 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13433 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011510","title":"0.115.10","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Update internal annotation usage for compatibility with Pydantic 2.11. PR #13314 by @Viicos.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.46.0: <code>&gt;=0.40.0,&lt;0.47.0</code>. PR #13426 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#translations_3","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/debugging.md</code>. PR #13370 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/query-params.md</code>. PR #13362 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/path-params.md</code>. PR #13354 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/cookie-param-models.md</code>. PR #13330 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-multiple-params.md</code>. PR #13408 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/query-param-models.md</code>. PR #13323 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-nested-models.md</code>. PR #13409 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/versions.md</code>. PR #13406 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/index.md</code>. PR #13405 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms.md</code>. PR #13383 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/testing.md</code>. PR #13371 by @valentinDruzhinin.</li> </ul>"},{"location":"release-notes/#01159","title":"0.115.9","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ensure that <code>HTTPDigest</code> only raises an exception when <code>auto_error is True</code>. PR #2939 by @arthurio.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for <code>query_params_str_validations</code>. PR #13218 by @alv2017.</li> <li>\u2705 Simplify tests for <code>app_testing</code>. PR #13220 by @alv2017.</li> <li>\u2705 Simplify tests for <code>dependency_testing</code>. PR #13223 by @alv2017.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update sponsors: CodeRabbit logo. PR #13424 by @khulnasoft.</li> <li>\ud83e\ude7a Unify the badges across all tutorial translations. PR #13329 by @svlandeg.</li> <li>\ud83d\udcdd Fix typos in virtual environments documentation. PR #13396 by @bullet-ant.</li> <li>\ud83d\udc1b Fix issue with Swagger theme change example in the official tutorial. PR #13289 by @Zerohertz.</li> <li>\ud83d\udcdd Add more precise description of HTTP status code range in docs. PR #13347 by @DanielYang59.</li> <li>\ud83d\udd25 Remove manual type annotations in JWT tutorial to avoid typing expectations (JWT doesn't provide more types). PR #13378 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for Query Params and String Validations, remove obsolete Ellipsis docs (<code>...</code>). PR #13377 by @khulnasoft.</li> <li>\u270f\ufe0f Remove duplicate title in docs <code>body-multiple-params</code>. PR #13345 by @DanielYang59.</li> <li>\ud83d\udcdd Fix test badge. PR #13313 by @esadek.</li> </ul>"},{"location":"release-notes/#translations_4","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-params.md</code>. PR #13381 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-files.md</code>. PR #13395 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-form-models.md</code>. PR #13384 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms-and-files.md</code>. PR #13386 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #13262 by @Zerohertz.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/custom-response.md</code>. PR #13265 by @11kkw.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #13335 by @yes0ng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/response-cookies.md</code>. PR #13327 by @Stepakinoyan.</li> <li>\ud83c\udf10  Add Vietnamese translation for <code>docs/vi/docs/tutorial/static-files.md</code>. PR #11291 by @ptt3199.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #13257 by @11kkw.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/virtual-environments.md</code>. PR #13282 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/static-files.md</code>. PR #13285 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/environment-variables.md</code>. PR #13287 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/readyapi-cli.md</code>. PR #13294 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/features.md</code>. PR #13308 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/learn/index.md</code>. PR #13306 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/deployment/https.md</code>. PR #13317 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/index.md</code>. PR #13328 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/websockets.md</code>. PR #13279 by @Rishat-F.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2705 Fix a minor bug in the test <code>tests/test_modules_same_name_body/test_main.py</code>. PR #13411 by @alv2017.</li> <li>\ud83d\udc77 Use <code>wrangler-action</code> v3. PR #13415 by @joakimnordling.</li> <li>\ud83d\udd27 Update sponsors: add CodeRabbit. PR #13402 by @khulnasoft.</li> <li>\ud83d\udd27 Update team: Add Ludovico. PR #13390 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: Add LambdaTest. PR #13389 by @khulnasoft.</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.13 to 3.14. PR #13350 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.18 to 9.6.1. PR #13301 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 11.0.0 to 11.1.0. PR #13300 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13295 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13302 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13293 by @khulnasoft.</li> <li>\u2b06 Bump inline-snapshot from 0.18.1 to 0.19.3. PR #13298 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, add Permit. PR #13288 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01158","title":"0.115.8","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>OAuth2PasswordRequestForm</code> and <code>OAuth2PasswordRequestFormStrict</code> fixed <code>grant_type</code> \"password\" RegEx. PR #9783 by @skarfie123.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for body_multiple_params . PR #13237 by @alejsdev.</li> <li>\u267b\ufe0f Move duplicated code portion to a static method in the <code>APIKeyBase</code> super class. PR #3142 by @ShahriyarR.</li> <li>\u2705 Simplify tests for request_files. PR #13182 by @alejsdev.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Change the word \"unwrap\" to \"unpack\" in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #13061 by @timothy-jeong.</li> <li>\ud83d\udcdd Update Request Body's <code>tutorial002</code> to deal with <code>tax=0</code> case. PR #13230 by @togogh.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13269 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_5","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/environment-variables.md</code>. PR #13226 by @k94-ishi.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/async-tests.md</code>. PR #13227 by @Rishat-F.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #13252 by @Rishat-F.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/bigger-applications.md</code>. PR #13154 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.13. PR #13274 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade AnyIO max version for tests, new range: <code>&gt;=3.2.1,&lt;5.0.0</code>. PR #13273 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsors badges. PR #13271 by @khulnasoft.</li> <li>\u267b\ufe0f Fix <code>notify_translations.py</code> empty env var handling for PR label events vs workflow_dispatch. PR #13272 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and move <code>scripts/notify_translations.py</code>, no need for a custom GitHub Action. PR #13270 by @khulnasoft.</li> <li>\ud83d\udd28 Update ReadyAPI People Experts script, refactor and optimize data fetching to handle rate limits. PR #13267 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4. PR #13251 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01157","title":"0.115.7","text":""},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade <code>python-multipart</code> to &gt;=0.0.18. PR #13219 by @DanielKusyDev.</li> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.45.0: <code>&gt;=0.40.0,&lt;0.46.0</code>. PR #13117 by @Kludex.</li> <li>\u2b06\ufe0f Upgrade <code>jinja2</code> to &gt;=3.1.5. PR #13194 by @DanielKusyDev.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for websockets. PR #13202 by @alejsdev.</li> <li>\u2705 Simplify tests for request_form_models . PR #13183 by @alejsdev.</li> <li>\u2705 Simplify tests for separate_openapi_schemas. PR #13201 by @alejsdev.</li> <li>\u2705 Simplify tests for security. PR #13200 by @alejsdev.</li> <li>\u2705 Simplify tests for schema_extra_example. PR #13197 by @alejsdev.</li> <li>\u2705 Simplify tests for request_model. PR #13195 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms_and_files. PR #13185 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms. PR #13184 by @alejsdev.</li> <li>\u2705 Simplify tests for path_query_params. PR #13181 by @alejsdev.</li> <li>\u2705 Simplify tests for path_operation_configurations. PR #13180 by @alejsdev.</li> <li>\u2705 Simplify tests for header_params. PR #13179 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_models. PR #13178 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_data_types. PR #13177 by @alejsdev.</li> <li>\u2705 Simplify tests for cookie_params. PR #13176 by @alejsdev.</li> <li>\u2705 Simplify tests for dependencies. PR #13174 by @alejsdev.</li> <li>\u2705 Simplify tests for body_updates. PR #13172 by @alejsdev.</li> <li>\u2705 Simplify tests for body_nested_models. PR #13171 by @alejsdev.</li> <li>\u2705 Simplify tests for body_multiple_params. PR #13170 by @alejsdev.</li> <li>\u2705 Simplify tests for body_fields. PR #13169 by @alejsdev.</li> <li>\u2705 Simplify tests for body. PR #13168 by @alejsdev.</li> <li>\u2705 Simplify tests for bigger_applications. PR #13167 by @alejsdev.</li> <li>\u2705 Simplify tests for background_tasks. PR #13166 by @alejsdev.</li> <li>\u2705 Simplify tests for additional_status_codes. PR #13149 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Update Strawberry integration docs. PR #13155 by @kinuax.</li> <li>\ud83d\udd25 Remove unused Peewee tutorial files. PR #13158 by @alejsdev.</li> <li>\ud83d\udcdd Update image in body-nested-model docs. PR #11063 by @untilhamza.</li> <li>\ud83d\udcdd Update <code>readyapi-cli</code> UI examples in docs. PR #13107 by @Zhongheng-Cheng.</li> <li>\ud83d\udc77 Add new GitHub Action to update contributors, translators, and translation reviewers. PR #13136 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/virtual-environments.md</code>. PR #13124 by @khulnasoft.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/contributing.md</code>. PR #12899 by @kingsubin.</li> <li>\ud83d\udcdd Minor corrections in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #13081 by @alv2017.</li> <li>\ud83d\udcdd Update includes in <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12994 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in README installation instructions. PR #13011 by @dave-hay.</li> <li>\ud83d\udcdd Update docs for <code>readyapi-cli</code>. PR #13031 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_6","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #13216 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #13209 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/oauth2-jwt.md</code>. PR #13205 by @ceb10n.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/index.md</code>. PR #13191 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/static-files.md</code>. PR #13092 by @guspan-tanadi.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/get-current-user.md</code>. PR #13188 by @ceb10n.</li> <li>\ud83c\udf10 Remove Wrong Portuguese translations location for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #13187 by @ceb10n.</li> <li>\ud83c\udf10 Update Portuguese translations. PR #13156 by @nillvitor.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #13159 by @Yarous.</li> <li>\u270f\ufe0f Delete unnecessary backspace in <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #12238 by @FakeDocument.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #13102 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add new Spanish translations for all docs with new LLM-assisted system using PydanticAI. PR #13122 by @khulnasoft.</li> <li>\ud83c\udf10 Update existing Spanish translations using the new LLM-assisted system using PydanticAI. PR #13118 by @khulnasoft.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #13110 by @ChenPu2002.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/path-params.md</code>. PR #13086 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/sql-databases.md</code>. PR #13093 by @GeumBinLee.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/async.md</code>. PR #13095 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-webhooks.md</code>. PR #13091 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-tests.md</code>. PR #13074 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-cli.md</code>. PR #13020 by @ykertytsky.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #12512 by @ZhibangYue.</li> <li>\ud83c\udf10 Add Russian translation for <code>/docs/ru/docs/tutorial/sql-databases.md</code>. PR #13079 by @alv2017.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #13066 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #13075 by @codingjenny.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #13051 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #12928 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/header-param-models.md</code>. PR #13040 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #12926 by @Vincy1230.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #12923 by @Vincy1230.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #13048 by @anklav24.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/generate-clients.md</code>. PR #13030 by @vitumenezes.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/first-steps.md</code>. PR #13042 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/cookie-param-models.md</code>. PR #13038 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/request-form-models.md</code>. PR #13045 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/virtual-environments.md</code>. PR #13026 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/testing.md</code>. PR #12968 by @jts8257.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/async-test.md</code>. PR #12918 by @icehongssii.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/oauth2-jwt.md</code>. PR #10601 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/simple-oauth2.md</code>. PR #10599 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/get-current-user.md</code>. PR #10594 by @AlertRED.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/features.md</code>. PR #12441 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/virtual-environments.md</code>. PR #12791 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/templates.md</code>. PR #12726 by @Heumhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-cli.md</code>. PR #13041 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/cookie-param-models.md</code>. PR #13000 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/header-param-models.md</code>. PR #13001 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-form-models.md</code>. PR #13002 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-forms.md</code>. PR #13003 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/resources/index.md</code>. PR #13004 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/configure-swagger-ui.md</code>. PR #12898 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation to <code>docs/ko/docs/advanced/additional-status-codes.md</code>. PR #12715 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/first-steps.md</code>. PR #12467 by @codingjenny.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Pydantic 2 trove classifier. PR #13199 by @johnthagen.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13231 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor ReadyAPI People Sponsors to use 2 tokens. PR #13228 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for ReadyAPI People - Sponsors. PR #13225 by @khulnasoft.</li> <li>\ud83d\udc77 Add independent CI automation for ReadyAPI People - Sponsors. PR #13221 by @khulnasoft.</li> <li>\ud83d\udc77 Add retries to Smokeshow. PR #13151 by @khulnasoft.</li> <li>\ud83d\udd27 Update Speakeasy sponsor graphic. PR #13147 by @chailandau.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13146 by @khulnasoft.</li> <li>\ud83d\udc77\u200d\u2640\ufe0f Add script for GitHub Topic Repositories and update External Links. PR #13135 by @alejsdev.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13145 by @khulnasoft.</li> <li>\u2b06 Bump markdown-include-variants from 0.0.3 to 0.0.4. PR #13129 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.14.0 to 0.18.1. PR #13132 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-macros-plugin from 1.0.5 to 1.3.7. PR #13133 by @dependabot[bot].</li> <li>\ud83d\udd28 Add internal scripts to generate language translations with PydanticAI, include Spanish prompt. PR #13123 by @khulnasoft.</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #13096 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: rename CryptAPI to BlockBee. PR #13078 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR #13055 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.7.0.1 to 5.10.0.20240515. PR #13018 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.3.0 to 24.10.0. PR #13014 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.13.0 to 0.14.0. PR #13017 by @dependabot[bot].</li> <li>\u2b06 Bump dirty-equals from 0.6.0 to 0.8.0. PR #13015 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.12 to 3.13. PR #12996 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #12982 by @dependabot[bot].</li> <li>\ud83d\udd27 Remove duplicate actions/checkout in <code>notify-translations.yml</code>. PR #12915 by @tinyboxvk.</li> <li>\ud83d\udd27 Update team members. PR #13033 by @khulnasoft.</li> <li>\ud83d\udcdd Update sponsors: remove Codacy. PR #13032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01156","title":"0.115.6","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Preserve traceback when an exception is raised in sync dependency with <code>yield</code>. PR #5823 by @sombek.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update tests and internals for compatibility with Pydantic &gt;=2.10. PR #12971 by @tamird.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes format in docs with an automated script. PR #12950 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #12685 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #12689 by @alissadb.</li> </ul>"},{"location":"release-notes/#translations_7","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/async.md</code>. PR #12990 by @ILoveSorasakiHina.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/query-param-models.md</code>. PR #12932 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-dependencies.md</code>. PR #12992 by @Limsunoh.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/websockets.md</code>. PR #12991 by @kwang1215.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-model.md</code>. PR #12933 by @AndreBBM.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/middlewares.md</code>. PR #12753 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/openapi-webhooks.md</code>. PR #12752 by @saeye.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/query-param-models.md</code>. PR #12931 by @Vincy1230.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12445 by @gitgernit.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-param-models.md</code>. PR #12940 by @jts8257.</li> <li>\ud83d\udd25 Remove obsolete tutorial translation to Chinese for <code>docs/zh/docs/tutorial/sql-databases.md</code>, it references files that are no longer on the repo. PR #12949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12954 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01155","title":"0.115.5","text":""},{"location":"release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update internal checks to support Pydantic 2.10. PR #12914 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body.md</code>. PR #12757 by @gsheni.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/testing-dependencies.md</code>. PR #12647 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/metadata.md</code>. PR #12773 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12045 by @xuvjso.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/global-dependencies.md</code>. PR #12653 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body-updates.md</code>. PR #12712 by @davioc.</li> <li>\ud83d\udcdd Remove mention of Celery in the project generators. PR #12742 by @david-caro.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/header-param-models.md</code>. PR #12814 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update <code>contributing.md</code> docs, include note to not translate this page. PR #12841 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-forms.md</code>. PR #12648 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-form-models.md</code>. PR #12649 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #12650 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/vi/docs/tutorial/first-steps.md</code>. PR #12754 by @MxPy.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/advanced/wsgi.md</code>. PR #12769 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #12815 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #12813 by @handabaldeep.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12819 by @alejsdev.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/get-current-user.md</code>. PR #12645 by @OCE1960.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #12643 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/additional-responses.md</code>. PR #12821 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/generate-clients.md</code>. PR #12642 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Fix admonition double quotes with new syntax. PR #12835 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #12828 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #12825 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/testing-websockets.md</code>. PR #12761 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/using-request-directly.md</code>. PR #12760 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/advanced/wsgi.md</code>. PR #12758 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/middleware.md</code>. PR #12729 by @paintdog.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #12822 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/additional-responses.md</code>. PR #12634 by @fegmorte.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12633 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/response-directly.md</code>. PR #12632 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/header-params.md</code>. PR #12640 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/cookie-param-models.md</code>. PR #12639 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/extra-models.md</code>. PR #12638 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/cors.md</code>. PR #12637 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #12810 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #12812 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-operation-configuration.md</code>. PR #12809 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-files.md</code>. PR #12818 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/query-param-models.md</code>. PR #12817 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params.md</code>. PR #12811 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-model.md</code>. PR #12621 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/websockets.md</code>. PR #12606 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Updates include for <code>docs/en/docs/tutorial/cookie-params.md</code>. PR #12808 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12807 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/sub-applications.md</code>. PR #12806 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-headers.md</code>. PR #12805 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/first-steps.md</code>. PR #12594 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-cookies.md</code>. PR #12804 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12802 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/response-directly.md</code>. PR #12803 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #12798 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #12699 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/em/docs/tutorial/body-updates.md</code>. PR #12799 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/response-change-status-code.md</code>. PR #12801 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/openapi-callbacks.md</code>. PR #12800 by @handabaldeep.</li> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #12598 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #12593 by @Tashanam-Shahbaz.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #12736 by @bhunao.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/custom-response.md</code>. PR #12797 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/python-types.md</code>. PR #12671 by @ceb10n.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/python-types.md</code>. PR #12660 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #12658 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params.md</code>. PR #12592 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #12690 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/security/oauth2-scopes.md</code>. PR #12572 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/conditional-openapi.md</code>. PR #12624 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #12615 by @bharara.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-status-code.md</code>. PR #12620 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12623 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/openapi-webhooks.md</code>. PR #12605 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/events.md</code>. PR #12604 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #12603 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #12602 by @antonyare93.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #12601 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/background-tasks.md</code>. PR #12600 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/encoder.md</code>. PR #12597 by @tonyjly.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12557 by @philipokiokio.</li> <li>\ud83c\udfa8 Adjust spacing. PR #12635 by @alejsdev.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-request-and-route.md</code>. PR #12560 by @philipokiokio.</li> </ul>"},{"location":"release-notes/#translations_8","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-websockets.md</code>. PR #12739 by @Limsunoh.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/environment-variables.md</code>. PR #12785 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/environment-variables.md</code>. PR #12784 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>ko/docs/advanced/response-headers.md</code>. PR #12740 by @kwang1215.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/virtual-environments.md</code>. PR #12790 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/environment-variables.md</code>. PR #12526 by @Tolerblanc.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/history-design-future.md</code>. PR #12646 by @saeye.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/advanced-dependencies.md</code>. PR #12675 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/conditional-openapi.md</code>. PR #12731 by @sptcnl.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/using_request_directly.md</code>. PR #12738 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-events.md</code>. PR #12741 by @9zimin9.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/security/index.md</code>. PR #12743 by @kim-sangah.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12762 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/wsgi.md</code>. PR #12659 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/websockets.md</code>. PR #12703 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/simple-oauth2.md</code>. PR #12520 by @LidiaDomingos.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/response-directly.md</code>. PR #12674 by @9zimin9.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/middleware.md</code>. PR #12704 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-callbacks.md</code>. PR #12705 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-files.md</code>. PR #12706 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese Translation for <code>docs/pt/docs/advanced/custom-response.md</code>. PR #12631 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/metadata.md</code>. PR #12538 by @LinkolnR.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/metadata.md</code>. PR #12541 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-cookies.md</code>. PR #12546 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/readyapi-cli.md</code>. PR #12515 by @dhdld.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-change-status-code.md</code>. PR #12547 by @9zimin9.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12907 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs preview script to show previous version and English version. PR #12856 by @khulnasoft.</li> <li>\u2b06 Bump khulnasoft/latest-changes from 0.3.1 to 0.3.2. PR #12794 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.0 to 1.12.2. PR #12788 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.0. PR #12781 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.11 to 3.12. PR #12777 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12766 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.11.0. PR #12721 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;4.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;5.0.0. PR #12749 by @dependabot[bot].</li> <li>\u2b06 Bump cligenius from 0.12.3 to 0.12.5. PR #12748 by @dependabot[bot].</li> <li>\u2b06 Update flask requirement from &lt;3.0.0,&gt;=1.1.2 to &gt;=1.1.2,&lt;4.0.0. PR #12747 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.4.0 to 11.0.0. PR #12746 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from &lt;8.0.0,&gt;=7.1.3 to &gt;=7.1.3,&lt;9.0.0. PR #12745 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: add Render. PR #12733 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12707 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01154","title":"0.115.4","text":""},{"location":"release-notes/#refactors_5","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update logic to import and check <code>python-multipart</code> for compatibility with newer version. PR #12627 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body.md</code>. PR #12596 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/debugging.md</code>. PR #12595 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #12591 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params.md</code>. PR #12589 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/tutorial/body-fields.md</code>. PR #12588 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #12585 by @abejaranoh.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body.md</code>. PR #12586 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #12583 by @imjuanleonard.</li> <li>\ud83d\udcdd Update includes syntax for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #12584 by @sebkozlo.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/middleware.md</code>. PR #12582 by @montanarograziano.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-status-codes.md</code>. PR #12577 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/advanced-dependencies.md</code>. PR #12578 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-responses.md</code>. PR #12576 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/static-files.md</code>. PR #12575 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/async-tests.md</code>. PR #12568 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #12563 by @asmioglou.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #12561 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/background-tasks.md</code>. PR #12559 by @FarhanAliRaza.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/python-types.md</code>. PR #12558 by @Ismailtlem.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/graphql.md</code>. PR #12564 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/extending-openapi.md</code>. PR #12562 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/configure-swagger-ui.md</code>. PR #12556 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/separate-openapi-schemas.md</code>. PR #12555 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/security/http-basic-auth.md</code>. PR #12553 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/first-steps.md</code>. PR #12552 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/python-types.md</code>. PR #12551 by @khulnasoft.</li> <li>\ud83d\udcdd Fix link in OAuth2 docs. PR #12550 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI do Zero. PR #12533 by @rennerocha.</li> <li>\ud83d\udcdd Fix minor typos. PR #12516 by @kkirsche.</li> <li>\ud83c\udf10 Fix rendering issue in translations. PR #12509 by @alejsdev.</li> </ul>"},{"location":"release-notes/#translations_9","title":"Translations","text":"<ul> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/async-tests.md</code>. PR #12567 by @imjuanleonard.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/sql-databases.md</code>. PR #12530 by @ilacftemp.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/benchmarks.md</code>. PR #12540 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/separate-openapi-schemas.md</code>. PR #12518 by @ilacftemp.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12521 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12522 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12523 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12524 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12468 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12466 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-param-models.md</code>. PR #12437 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/extending-openapi.md</code>. PR #12470 by @ilacftemp.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/dataclasses.md</code>. PR #12475 by @leoscarlato.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-request-and-route.md</code>. PR #12483 by @devfernandoa.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Bump cloudflare/wrangler-action from 3.9 to 3.11. PR #12544 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action to deploy docs previews to handle missing deploy comments. PR #12527 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12505 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01153","title":"0.115.3","text":""},{"location":"release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.40.0,&lt;0.42.0</code>. PR #12469 by @defnull.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix broken link in docs. PR #12495 by @eltonjncorreia.</li> </ul>"},{"location":"release-notes/#translations_10","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-cli.md</code>. PR #12444 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12439 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/testing-database.md</code>. PR #12472 by @GuilhermeRameh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-docs-ui-assets.md</code>. PR #12473 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-headers.md</code>. PR #12458 by @leonardopaloschi.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12440 by @codingjenny.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/python-types.md</code>. PR #12428 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/environment-variables.md</code>. PR #12436 by @wisderfin.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/resources/index.md</code>. PR #12443 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/about/index.md</code>. PR #12438 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-param-models.md</code>. PR #12414 by @ceb10n.</li> <li>\ud83c\udf10 Remove Portuguese translation for <code>docs/pt/docs/deployment.md</code>. PR #12427 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-updates.md</code>. PR #12381 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-cookies.md</code>. PR #12417 by @Paulofalcao2002.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update issue manager workflow . PR #12457 by @alejsdev.</li> <li>\ud83d\udd27 Update team, include YuriiMotov \ud83d\ude80. PR #12453 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor label-approved, make it an internal script instead of an external GitHub Action. PR #12280 by @khulnasoft.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #12434 by @khulnasoft.</li> <li>\ud83d\udc77 Use uv in CI. PR #12281 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.25.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.28.0. PR #11509 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01152","title":"0.115.2","text":""},{"location":"release-notes/#upgrades_4","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.37.2,&lt;0.41.0</code>. PR #12431 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01151","title":"0.115.1","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix openapi generation with responses kwarg. PR #10895 by @flxdot.</li> <li>\ud83d\udc1b Remove <code>Required</code> shadowing from readyapi using Pydantic v2. PR #12197 by @pachewise.</li> </ul>"},{"location":"release-notes/#refactors_6","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update type annotations for improved <code>python-multipart</code>. PR #12407 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\u2728 Add new tutorial for SQL databases with SQLDev. PR #12285 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: How to profile a ReadyAPI asynchronous request. PR #12389 by @brouberol.</li> <li>\ud83d\udd27 Remove <code>base_path</code> for <code>mdx_include</code> Markdown extension in MkDocs. PR #12391 by @khulnasoft.</li> <li>\ud83d\udcdd Update link to Swagger UI configuration docs. PR #12264 by @makisukurisu.</li> <li>\ud83d\udcdd Adding links for Playwright and Vite in <code>docs/project-generation.md</code>. PR #12274 by @kayqueGovetri.</li> <li>\ud83d\udcdd Fix small typos in the documentation. PR #12213 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_11","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-param-models.md</code>. PR #12298 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/graphql.md</code>. PR #12215 by @AnandaCampelo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/oauth2-scopes.md</code>. PR #12263 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/concepts.md</code>. PR #12219 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/conditional-openapi.md</code>. PR #12221 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-directly.md</code>. PR #12266 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #12297 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #12278 by @kkotipy.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12275 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/cloud.md</code>. PR #12217 by @marcelomarkus.</li> <li>\u270f\ufe0f Fix typo in <code>docs/es/docs/python-types.md</code>. PR #12235 by @JavierSanchezCastro.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/environment-variables.md</code>. PR #12200 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/manually.md</code>. PR #12210 by @JoaoGustavoRogel.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/server-workers.md</code>. PR #12220 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/configure-swagger-ui.md</code>. PR #12222 by @marcelomarkus.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12396 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Add script to generate variants of files. PR #12405 by @khulnasoft.</li> <li>\ud83d\udd27 Add speakeasy-api to <code>sponsors_badge.yml</code>. PR #12404 by @khulnasoft.</li> <li>\u2795 Add docs dependency: markdown-include-variants. PR #12399 by @khulnasoft.</li> <li>\ud83d\udcdd Fix extra mdx-base-path paths. PR #12397 by @khulnasoft.</li> <li>\ud83d\udc77 Tweak labeler to not override custom labels. PR #12398 by @khulnasoft.</li> <li>\ud83d\udc77 Update worfkow deploy-docs-notify URL. PR #12392 by @khulnasoft.</li> <li>\ud83d\udc77 Update Cloudflare GitHub Action. PR #12387 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.3. PR #12386 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.25.1 to 0.26.1. PR #12371 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.6 to 0.2.7. PR #12370 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12331 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update sponsors, remove Fine.dev. PR #12271 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12253 by @pre-commit-ci[bot].</li> <li>\u270f\ufe0f Fix docstring typos in http security. PR #12223 by @albertvillanova.</li> </ul>"},{"location":"release-notes/#01150","title":"0.115.0","text":""},{"location":"release-notes/#highlights","title":"Highlights","text":"<p>Now you can declare <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters with Pydantic models. \ud83c\udf89</p>"},{"location":"release-notes/#query-parameter-models","title":"<code>Query</code> Parameter Models","text":"<p>Use Pydantic models for <code>Query</code> parameters:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Read the new docs: Query Parameter Models.</p>"},{"location":"release-notes/#header-parameter-models","title":"<code>Header</code> Parameter Models","text":"<p>Use Pydantic models for <code>Header</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Header\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Read the new docs: Header Parameter Models.</p>"},{"location":"release-notes/#cookie-parameter-models","title":"<code>Cookie</code> Parameter Models","text":"<p>Use Pydantic models for <code>Cookie</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Read the new docs: Cookie Parameter Models.</p>"},{"location":"release-notes/#forbid-extra-query-cookie-header-parameters","title":"Forbid Extra Query (Cookie, Header) Parameters","text":"<p>Use Pydantic models to restrict extra values for <code>Query</code> parameters (also applies to <code>Header</code> and <code>Cookie</code> parameters).</p> <p>To achieve it, use Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>This applies to <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters, read the new docs:</p> <ul> <li>Forbid Extra Query Parameters</li> <li>Forbid Extra Headers</li> <li>Forbid Extra Cookies</li> </ul>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models for parameters using <code>Query</code>, <code>Cookie</code>, <code>Header</code>. PR #12199 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_12","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12195 by @ceb10n.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12204 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01142","title":"0.114.2","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix form field regression with <code>alias</code>. PR #12194 by @Wurstnase.</li> </ul>"},{"location":"release-notes/#translations_13","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-form-models.md</code>. PR #12175 by @ceb10n.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #12170 by @waketzheng.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/python-types.md</code>. PR #12158 by @maxscheijen.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udca1 Add comments with instructions for Playwright screenshot scripts. PR #12193 by @khulnasoft.</li> <li>\u2795 Add inline-snapshot for tests. PR #12189 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01141","title":"0.114.1","text":""},{"location":"release-notes/#refactors_7","title":"Refactors","text":"<ul> <li>\u26a1\ufe0f Improve performance in request body parsing with a cache for internal model fields. PR #12184 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Remove duplicate line in docs for <code>docs/en/docs/environment-variables.md</code>. PR #12169 by @prometek.</li> </ul>"},{"location":"release-notes/#translations_14","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/virtual-environments.md</code>. PR #12163 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/environment-variables.md</code>. PR #12162 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/testing.md</code>. PR #12164 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/debugging.md</code>. PR #12165 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/project-generation.md</code>. PR #12157 by @BORA040126.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\u2b06 Bump khulnasoft/issue-manager from 0.5.0 to 0.5.1. PR #12173 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12176 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #12159 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/params.py</code>. PR #12143 by @surreal30.</li> </ul>"},{"location":"release-notes/#01140","title":"0.114.0","text":"<p>You can restrict form fields to only include those declared in a Pydantic model and forbid any extra field sent in the request using Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models - Forbid Extra Form Fields.</p>"},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add support for forbidding extra form fields with Pydantic models. PR #12134 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs, Form Models section title, to match config name. PR #12152 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\u2705 Update internal tests for latest Pydantic, including CI tweaks to install the latest Pydantic. PR #12147 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01130","title":"0.113.0","text":"<p>Now you can declare form fields with Pydantic models:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12129 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_15","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: Coherence link. PR #12130 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01124","title":"0.112.4","text":"<p>This release is mainly a big internal refactor to enable adding support for Pydantic models for <code>Form</code> fields, but that feature comes in the next release.</p> <p>This release shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. It's just a checkpoint. \ud83e\udd13</p>"},{"location":"release-notes/#refactors_8","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor deciding if <code>embed</code> body fields, do not overwrite fields, compute once per router, refactor internals in preparation for Pydantic models in <code>Form</code>, <code>Query</code> and others. PR #12117 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_16","title":"Internal","text":"<ul> <li>\u23ea\ufe0f Temporarily revert \"\u2728 Add support for Pydantic models in <code>Form</code> parameters\" to make a checkpoint release. PR #12128 by @khulnasoft. Restored by PR #12129.</li> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12127 by @khulnasoft. Reverted by PR #12128 to make a checkpoint release with only refactors. Restored by PR #12129.</li> </ul>"},{"location":"release-notes/#01123","title":"0.112.3","text":"<p>This release is mainly internal refactors, it shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. There are a few bigger releases coming right after. \ud83d\ude80</p>"},{"location":"release-notes/#refactors_9","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor internal <code>check_file_field()</code>, rename to <code>ensure_multipart_is_installed()</code> to clarify its purpose. PR #12106 by @khulnasoft.</li> <li>\u267b\ufe0f Rename internal <code>create_response_field()</code> to <code>create_model_field()</code> as it's used for more than response models. PR #12103 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal data from <code>solve_dependencies()</code> using dataclasses. PR #12100 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal <code>analyze_param()</code> to structure data with dataclasses instead of tuple. PR #12099 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify dependencies data structures with dataclasses. PR #12098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Techniques and applications of SQLAlchemy global filters in ReadyAPI. PR #12109 by @TheShubhendra.</li> <li>\ud83d\udcdd Add note about <code>time.perf_counter()</code> in middlewares. PR #12095 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak middleware code sample <code>time.time()</code> to <code>time.perf_counter()</code>. PR #11957 by @domdent.</li> <li>\ud83d\udd27 Update sponsors: Coherence. PR #12093 by @khulnasoft.</li> <li>\ud83d\udcdd Fix async test example not to trigger DeprecationWarning. PR #12084 by @marcinsulikowski.</li> <li>\ud83d\udcdd Update <code>examples/path_params_numeric_validations/tutorial006.py</code>. PR #11478 by @MuhammadAshiqAmeer.</li> <li>\ud83d\udcdd Update comma in <code>docs/en/docs/async.md</code>. PR #12062 by @Alec-Gillis.</li> <li>\ud83d\udcdd Update docs about serving ReadyAPI: ASGI servers, Docker containers, etc.. PR #12069 by @khulnasoft.</li> <li>\ud83d\udcdd Clarify <code>response_class</code> parameter, validations, and returning a response directly. PR #12067 by @khulnasoft.</li> <li>\ud83d\udcdd Fix minor typos and issues in the documentation. PR #12063 by @svlandeg.</li> <li>\ud83d\udcdd Add note in Docker docs about ensuring graceful shutdowns and lifespan events with <code>CMD</code> exec form. PR #11960 by @GPla.</li> </ul>"},{"location":"release-notes/#translations_15","title":"Translations","text":"<ul> <li>\ud83c\udf10  Add Dutch translation for <code>docs/nl/docs/features.md</code>. PR #12101 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-events.md</code>. PR #12108 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/index.md</code>. PR #12114 by @ceb10n.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/index.md</code>. PR #12042 by @svlandeg.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/how-to/index.md</code>. PR #12070 by @synthpop123.</li> </ul>"},{"location":"release-notes/#internal_17","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12115 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.0 to 1.10.1. PR #12120 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.3.0 to 10.4.0. PR #12105 by @dependabot[bot].</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #12118 by @svlandeg.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.0. PR #12112 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors link: Coherence. PR #12097 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler config to handle sponsorships data. PR #12096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Kong. PR #12085 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12076 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #12073 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01122","title":"0.112.2","text":""},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>allow_inf_nan</code> option for Param and Body classes. PR #11867 by @giunio-prc.</li> <li>\ud83d\udc1b Ensure that <code>app.include_router</code> merges nested lifespans. PR #9630 by @Lancetnik.</li> </ul>"},{"location":"release-notes/#refactors_10","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Fix typing annotation for semi-internal <code>ReadyAPI.add_api_route()</code>. PR #10240 by @ordinary-jamie.</li> <li>\u2b06\ufe0f Upgrade version of Ruff and reformat. PR #12032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_13","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix a typo in <code>docs/en/docs/virtual-environments.md</code>. PR #12064 by @aymenkrifa.</li> <li>\ud83d\udcdd Add docs about Environment Variables and Virtual Environments. PR #12054 by @khulnasoft.</li> <li>\ud83d\udcdd Add Asyncer mention in async docs. PR #12037 by @khulnasoft.</li> <li>\ud83d\udcdd Move the Features docs to the top level to improve the main page menu. PR #12036 by @khulnasoft.</li> <li>\u270f\ufe0f Fix import typo in reference example for <code>Security</code>. PR #11168 by @0shah0.</li> <li>\ud83d\udcdd Highlight correct line in tutorial <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11978 by @svlandeg.</li> <li>\ud83d\udd25 Remove Sentry link from Advanced Middleware docs. PR #12031 by @alejsdev.</li> <li>\ud83d\udcdd Clarify management tasks for translations, multiples files in one PR. PR #12030 by @khulnasoft.</li> <li>\ud83d\udcdd Edit the link to the OpenAPI \"Responses Object\" and \"Response Object\" sections in the \"Additional Responses in OpenAPI\" section. PR #11996 by @VaitoSoi.</li> <li>\ud83d\udd28 Specify <code>email-validator</code> dependency with dash. PR #11515 by @jirikuncar.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/project-generation.md</code>. PR #11947 by @alejsdev.</li> <li>\ud83d\udcdd Fix minor typo. PR #12026 by @MicaelJarniac.</li> <li>\ud83d\udcdd Several docs improvements, tweaks, and clarifications. PR #11390 by @nilslindemann.</li> <li>\ud83d\udcdd Add missing <code>compresslevel</code> parameter on docs for <code>GZipMiddleware</code>. PR #11350 by @junah201.</li> <li>\ud83d\udcdd Fix inconsistent response code when item already exists in docs for testing. PR #11818 by @lokomilo.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/body.md</code> with Python 3.10 union type example. PR #11415 by @rangzen.</li> </ul>"},{"location":"release-notes/#translations_16","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request_file.md</code>. PR #12018 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/learn/index.md</code>. PR #11592 by @ukwhatn.</li> <li>\ud83d\udcdd Update Spanish translation docs for consistency. PR #12044 by @alejsdev.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12028 by @xuvjso.</li> <li>\ud83d\udcdd Update ReadyAPI People, do not translate to have the most recent info. PR #12034 by @khulnasoft.</li> <li>\ud83c\udf10 Update Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #10046 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_18","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12046 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update coverage config files. PR #12035 by @khulnasoft.</li> <li>\ud83d\udd28 Standardize shebang across shell scripts. PR #11942 by @gitworkflows.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;1.4.43,&gt;=1.3.18 to &gt;=1.3.18,&lt;2.0.33. PR #11979 by @dependabot[bot].</li> <li>\ud83d\udd0a Remove old ignore warnings. PR #11950 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade griffe-typingdoc for the docs. PR #12029 by @khulnasoft.</li> <li>\ud83d\ude48 Add .coverage* to <code>.gitignore</code>. PR #11940 by @gitworkflows.</li> <li>\u2699\ufe0f Record and show test coverage contexts (what test covers which line). PR #11518 by @slafs.</li> </ul>"},{"location":"release-notes/#01121","title":"0.112.1","text":""},{"location":"release-notes/#upgrades_5","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Allow Starlette 0.38.x, update the pin to <code>&gt;=0.37.2,&lt;0.39.0</code>. PR #11876 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#docs_14","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs section about \"Don't Translate these Pages\". PR #12022 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for non-translated pages and scripts to verify them. PR #12020 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs about discussions questions. PR #11985 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_17","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/bigger-applications.md</code>. PR #11971 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-websockets.md</code>. PR #11994 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-dependencies.md</code>. PR #11995 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/using-request-directly.md</code>. PR #11956 by @ceb10n.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #11796 by @pe-brian.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11557 by @caomingpei.</li> <li>\ud83c\udf10 Update typo in Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #11944 by @bestony.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/sub-applications.md</code> and <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #11856 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cors.md</code> and <code>docs/pt/docs/tutorial/middleware.md</code>. PR #11916 by @wesinalves.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #11788 by @pe-brian.</li> </ul>"},{"location":"release-notes/#internal_19","title":"Internal","text":"<ul> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0. PR #11727 by @dependabot[bot].</li> <li>\ud83d\udd27 Add changelog URL to <code>pyproject.toml</code>, shows in PyPI. PR #11152 by @Pierre-VF.</li> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #12024 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Update Labeler GitHub Actions. PR #12019 by @khulnasoft.</li> <li>\ud83d\udd27 Update configs for MkDocs for languages and social cards. PR #12016 by @khulnasoft.</li> <li>\ud83d\udc77 Update permissions and config for labeler GitHub Action. PR #12008 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add GitHub Action label-checker. PR #12005 by @khulnasoft.</li> <li>\ud83d\udc77 Add label checker GitHub Action. PR #12004 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action add-to-project. PR #12002 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler GitHub Action. PR #12001 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #12000 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #11999 by @khulnasoft.</li> <li>\ud83d\udcdd Update admonitions in docs missing. PR #11998 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR #11986 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs instant previews. PR #11982 by @khulnasoft.</li> <li>\ud83d\udc1b Fix deploy docs previews script to handle mkdocs.yml files. PR #11984 by @khulnasoft.</li> <li>\ud83d\udca1 Add comment about custom Termynal line-height. PR #11976 by @khulnasoft.</li> <li>\ud83d\udc77 Add alls-green for test-redistribute. PR #11974 by @khulnasoft.</li> <li>\ud83d\udc77 Update docs-previews to handle no docs changes. PR #11975 by @khulnasoft.</li> <li>\ud83d\udd28 Refactor script <code>deploy_docs_status.py</code> to account for deploy URLs with or without trailing slash. PR #11965 by @khulnasoft.</li> <li>\ud83d\udd12\ufe0f Update permissions for deploy-docs action. PR #11964 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add deploy docs status and preview links to PRs. PR #11961 by @khulnasoft.</li> <li>\ud83d\udd27 Update docs setup with latest configs and plugins. PR #11953 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore warning from attrs in Trio. PR #11949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01120","title":"0.112.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\u267b\ufe0f Add support for <code>pip install \"readyapi[standard]\"</code> with standard dependencies and <code>python -m readyapi</code>. PR #11935 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#summary","title":"Summary","text":"<p>Install with:</p> <pre><code>pip install \"readyapi[standard]\"\n</code></pre>"},{"location":"release-notes/#other-changes","title":"Other Changes","text":"<ul> <li>This adds support for calling the CLI as:</li> </ul> <pre><code>python -m readyapi\n</code></pre> <ul> <li>And it upgrades <code>readyapi-cli[standard] &gt;=0.0.5</code>.</li> </ul>"},{"location":"release-notes/#technical-details","title":"Technical Details","text":"<p>Before this, <code>readyapi</code> would include the standard dependencies, with Uvicorn and the <code>readyapi-cli</code>, etc.</p> <p>And <code>readyapi-slim</code> would not include those standard dependencies.</p> <p>Now <code>readyapi</code> doesn't include those standard dependencies unless you install with <code>pip install \"readyapi[standard]\"</code>.</p> <p>Before, you would install <code>pip install readyapi</code>, now you should include the <code>standard</code> optional dependencies (unless you want to exclude one of those): <code>pip install \"readyapi[standard]\"</code>.</p> <p>This change is because having the standard optional dependencies installed by default was being inconvenient to several users, and having to install instead <code>readyapi-slim</code> was not being a feasible solution.</p> <p>Discussed here: #11522 and here: #11525</p>"},{"location":"release-notes/#docs_15","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typos in docs. PR #11926 by @jianghuyiyuan.</li> <li>\ud83d\udcdd Tweak management docs. PR #11918 by @khulnasoft.</li> <li>\ud83d\ude9a Rename GitHub links from khulnasoft/readyapi to readyapi/readyapi. PR #11913 by @khulnasoft.</li> <li>\ud83d\udcdd Add docs about ReadyAPI team and project management. PR #11908 by @khulnasoft.</li> <li>\ud83d\udcdd Re-structure docs main menu. PR #11904 by @khulnasoft.</li> <li>\ud83d\udcdd Update Speakeasy URL. PR #11871 by @ndimares.</li> </ul>"},{"location":"release-notes/#translations_18","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/alternatives.md</code>. PR #11931 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10515 by @AlertRED.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-change-status-code.md</code>. PR #11863 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/background.md</code>. PR #11849 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #11848 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/apirouter.md</code>. PR #11843 by @lucasbalieiro.</li> </ul>"},{"location":"release-notes/#internal_20","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: add liblab. PR #11934 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action label-approved permissions. PR #11933 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor GitHub Action to comment docs deployment URLs and update token. PR #11925 by @khulnasoft.</li> <li>\ud83d\udc77 Update tokens for GitHub Actions. PR #11924 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions to comment deployment URL in docs. PR #11917 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions for GitHub Actions. PR #11915 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Actions token usage. PR #11914 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action to notify translations with label <code>approved-1</code>. PR #11907 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Reflex. PR #11875 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove TalkPython. PR #11861 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #11854 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01111","title":"0.111.1","text":""},{"location":"release-notes/#upgrades_6","title":"Upgrades","text":"<ul> <li>\u2796 Remove <code>orjson</code> and <code>ujson</code> from default dependencies. PR #11842 by @khulnasoft.<ul> <li>These dependencies are still installed when you install with <code>pip install \"readyapi[all]\"</code>. But they are not included in <code>pip install readyapi</code>.</li> </ul> </li> <li>\ud83d\udcdd Restored Swagger-UI links to use the latest version possible. PR #11459 by @UltimateLobster.</li> </ul>"},{"location":"release-notes/#docs_16","title":"Docs","text":"<ul> <li>\u270f\ufe0f Rewording in <code>docs/en/docs/readyapi-cli.md</code>. PR #11716 by @alejsdev.</li> <li>\ud83d\udcdd Update Hypercorn links in all the docs. PR #11744 by @kittydoor.</li> <li>\ud83d\udcdd  Update docs with Ariadne reference from Starlette to ReadyAPI. PR #11797 by @DamianCzajkowski.</li> <li>\ud83d\udcdd Update readyapi instrumentation external link. PR #11317 by @softwarebloat.</li> <li>\u270f\ufe0f Fix links to alembic example repo in docs. PR #11628 by @augiwan.</li> <li>\u270f\ufe0f Update <code>docs/en/docs/readyapi-cli.md</code>. PR #11715 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links . PR #11500 by @devon2018.</li> <li>\ud83d\udcdd Add External Link: Tutorial de ReadyAPI, \u00bfel mejor framework de Python?. PR #11618 by @EduardoZepeda.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11698 by @mwb-u.</li> <li>\ud83d\udcdd Add External Link: Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale. PR #11633 by @ananis25.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11674 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11673 by @alejsdev.</li> <li>\ud83d\udcdd Update note in <code>path-params-numeric-validations.md</code>. PR #11672 by @alejsdev.</li> <li>\ud83d\udcdd Tweak intro docs about <code>Annotated</code> and <code>Query()</code> params. PR #11664 by @khulnasoft.</li> <li>\ud83d\udcdd Update JWT auth documentation to use PyJWT instead of pyhon-jose. PR #11589 by @estebanx64.</li> <li>\ud83d\udcdd Update docs. PR #11603 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo: convert every 're-use' to 'reuse'.. PR #11598 by @hasansezertasan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/applications.py</code>. PR #11593 by @petarmaric.</li> <li>\u270f\ufe0f Fix link in <code>readyapi-cli.md</code>. PR #11524 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_19","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/how-to/graphql.md</code>. PR #11697 by @camigomezdev.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/index.md</code>. PR #11840 by @lucasbalieiro.</li> <li>\ud83c\udf10 Fix link in German translation. PR #11836 by @anitahammer.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #11792 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/request-forms.md</code>. PR #11553 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/exceptions.md</code>. PR #11834 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11826 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/general.md</code>. PR #11825 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/async-tests.md</code>. PR #11808 by @ceb10n.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/first-steps.md</code>. PR #11809 by @vkhoroshchak.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-operators.md</code>. PR #11804 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #11786 by @logan2d5.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-webhooks.md</code>. PR #11791 by @ceb10n.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #11781 by @logan2d5.</li> <li>\ud83d\udcdd Fix image missing in French translation for <code>docs/fr/docs/async.md</code> . PR #11787 by @pe-brian.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/advanced-dependencies.md</code>. PR #11775 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #11768 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10  Add Portuguese translation for <code>docs/pt/docs/advanced/additional-status-codes.md</code>. PR #11753 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/index.md</code>. PR #11757 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #11739 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/learn/index.md</code>. PR #11712 by @benjaminvandammeholberton.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/index.md</code>. PR #11731 by @vhsenna.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/additional-responses.md</code>. PR #11736 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #11713 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/response-status-code.md</code>. PR #11718 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/extra-data-types.md</code>. PR #11711 by @nayeonkinn.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #11710 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/readyapi-cli.md</code>. PR #11641 by @ayr-ton.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-people.md</code>. PR #11639 by @hsuanchi.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/index.md</code>. PR #11606 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/cloud.md</code>. PR #11610 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/security/index.md</code>. PR #11609 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/testing-websockets.md</code>. PR #11608 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/general.md</code>. PR #11607 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #11620 by @chaoless.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/index.md</code>. PR #11605 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/static-files.md</code>. PR #11599 by @hasansezertasan.</li> <li>\ud83c\udf10 Polish translation for <code>docs/pl/docs/readyapi-people.md</code>. PR #10196 by @isulim.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/wsgi.md</code>. PR #11575 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/cookie-params.md</code>. PR #11561 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/about/index.md</code>. PR #10961 by @s111d.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #11539 by @chaoless.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/configure-swagger-ui.md</code>. PR #11501 by @Lucas-lyh.</li> <li>\ud83c\udf10 Update Chinese translation for <code>/docs/advanced/security/http-basic-auth.md</code>. PR #11512 by @nick-cjyx9.</li> </ul>"},{"location":"release-notes/#internal_21","title":"Internal","text":"<ul> <li>\u267b\ufe0f Simplify internal docs script. PR #11777 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Fine. PR #11784 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11765 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11764 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Stainless. PR #11763 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Zuplo. PR #11729 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor link: Coherence. PR #11730 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11669 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Kong. PR #11662 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow, fix sync download artifact and smokeshow configs. PR #11563 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #11562 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub actions to download and upload artifacts to v4, for docs and coverage. PR #11550 by @tamird.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #11549 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11511 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01110","title":"0.111.0","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add ReadyAPI CLI, the new <code>readyapi</code> command. PR #11522 by @khulnasoft.<ul> <li>New docs: ReadyAPI CLI.</li> </ul> </li> </ul> <p>Try it out with:</p> <pre><code>$ pip install --upgrade readyapi\n\n$ readyapi dev main.py\n\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"release-notes/#refactors_11","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add configs and setup for <code>readyapi-slim</code> including optional extras <code>readyapi-slim[standard]</code>, and <code>readyapi</code> including by default the same <code>standard</code> extras. PR #11503 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01103","title":"0.110.3","text":""},{"location":"release-notes/#docs_17","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update references to Python version, ReadyAPI supports all the current versions, no need to make the version explicit. PR #11496 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/api_key.py</code>. PR #11481 by @ch33zer.</li> <li>\u270f\ufe0f Fix typo in <code>security/http.py</code>. PR #11455 by @omarmoo5.</li> </ul>"},{"location":"release-notes/#translations_20","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/benchmarks.md</code>. PR #11484 by @KNChiu.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-people.md</code>. PR #11476 by @billzhong.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/index.md</code> and <code>docs/zh/docs/how-to/general.md</code>. PR #11443 by @billzhong.</li> <li>\ud83c\udf10 Add Spanish translation for cookie-params <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #11410 by @fabianfalon.</li> </ul>"},{"location":"release-notes/#internal_22","title":"Internal","text":"<ul> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.24.3. PR #11469 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #11499 by @khulnasoft.</li> <li>\ud83d\udd27 Migrate from Hatch to PDM for the internal build. PR #11498 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material and re-enable cards. PR #11466 by @khulnasoft.</li> <li>\u2b06 Bump pillow from 10.2.0 to 10.3.0. PR #11403 by @dependabot[bot].</li> <li>\ud83d\udd27 Ungroup dependabot updates. PR #11465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01102","title":"0.110.2","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for query parameters with list types, handle JSON encoding Pydantic <code>UndefinedType</code>. PR #9929 by @arjwilliams.</li> </ul>"},{"location":"release-notes/#refactors_12","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Simplify Pydantic configs in OpenAPI models in <code>readyapi/openapi/models.py</code>. PR #10886 by @JoeTanto2.</li> <li>\u2728 Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR #11461 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_18","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix types in examples under <code>examples/extra_data_types</code>. PR #10535 by @nilslindemann.</li> <li>\ud83d\udcdd Update references to UJSON. PR #11464 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs and translations links, typos, format. PR #11389 by @nilslindemann.</li> <li>\ud83d\udcdd Fix typo in <code>docs/es/docs/async.md</code>. PR #11400 by @fabianfalon.</li> <li>\ud83d\udcdd Update OpenAPI client generation docs to use <code>@hey-api/openapi-ts</code>. PR #11339 by @jordanshatford.</li> </ul>"},{"location":"release-notes/#translations_21","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/index.html</code>. PR #11430 by @waketzheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11411 by @anton2yakovlev.</li> <li>\ud83c\udf10 Add Portuguese translations for <code>learn/index.md</code> <code>resources/index.md</code> <code>help/index.md</code> <code>about/index.md</code>. PR #10807 by @nazarepiedady.</li> <li>\ud83c\udf10 Update Russian translations for deployments docs. PR #11271 by @Lufa1u.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/python-types.md</code>. PR #11376 by @imtiaz101325.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #5744 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #4139 by @kty4119.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/events.md</code>. PR #5087 by @pers0n4.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-operation-configuration.md</code>. PR #1954 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/request-forms-and-files.md</code>. PR #1946 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10532 by @AlertRED.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/debugging.md</code>. PR #5695 by @JungWooGeon.</li> </ul>"},{"location":"release-notes/#internal_23","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade version of cligenius for docs. PR #11393 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01101","title":"0.110.1","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix parameterless <code>Depends()</code> with generics. PR #9479 by @nzig.</li> </ul>"},{"location":"release-notes/#refactors_13","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update mypy. PR #11049 by @k0t3n.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/applications.py</code>. PR #11335 by @igeni.</li> </ul>"},{"location":"release-notes/#upgrades_7","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.37.2,&lt;0.38.0, remove Starlette filterwarning for internal tests. PR #11266 by @nothielf.</li> </ul>"},{"location":"release-notes/#docs_19","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links and remove old docs translations. PR #11381 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #11368 by @shandongbinzhou.</li> <li>\ud83d\udcdd Update links to Pydantic docs to point to new website. PR #11328 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #11329 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>project-generation.md</code>. PR #11326 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links. PR #11327 by @alejsdev.</li> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, on other i18n pages.. PR #11224 by @hirotoKirimaru.</li> <li>\u270f\ufe0f Fix typos in docstrings. PR #11295 by @davidhuser.</li> <li>\ud83d\udee0\ufe0f Improve Node.js script in docs to generate TypeScript clients. PR #11293 by @alejsdev.</li> <li>\ud83d\udcdd Update examples for tests to replace \"inexistent\" for \"nonexistent\". PR #11220 by @Homesteady.</li> <li>\ud83d\udcdd Update <code>python-multipart</code> GitHub link in all docs from <code>https://andrew-d.github.io/python-multipart/</code> to <code>https://github.com/Kludex/python-multipart</code>. PR #11239 by @joshjhans.</li> </ul>"},{"location":"release-notes/#translations_22","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #10357 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #3480 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/body.md</code>. PR #3481 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #3479 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/body-fields.md</code>. PR #3496 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/extra-models.md</code>. PR #3497 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/metadata.md</code>. PR #2667 by @tokusumi.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/contributing.md</code>. PR #10487 by @nilslindemann.</li> <li>\ud83c\udf10 Update Japanese translation of <code>docs/ja/docs/tutorial/query-params.md</code>. PR #10808 by @urushio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/security/get-current-user.md</code>. PR #3842 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-callbacks.md</code>. PR #3825 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/extending-openapi.md</code>. PR #3823 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #3819 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/custom-request-and-route.md</code>. PR #3816 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/external-links.md</code>. PR #3833 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #3812 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/sub-applications.md</code>. PR #3811 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-sql-databases.md</code>. PR #3805 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/middleware.md</code>. PR #3804 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/dataclasses.md</code>. PR #3803 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/using-request-directly.md</code>. PR #3802 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/http-basic-auth.md</code>. PR #3801 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #3800 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/cookie-params.md</code>. PR #3486 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/header-params.md</code>. PR #3487 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/response-status-code.md</code>. PR #3498 by @jaystone776.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/first-steps.md</code>. PR #10432 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/events.md</code>. PR #10693 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/cloud.md</code>. PR #10746 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/behind-a-proxy.md</code>. PR #10675 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/help-readyapi.md</code>. PR #10455 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/python-types.md</code>. PR #10287 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params.md</code>. PR #10290 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/handling-errors.md</code>. PR #10379 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/index.md</code>. PR #10283 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #10651 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/bigger-applications.md</code>. PR #10554 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10612 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/static-files.md</code>. PR #10584 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/oauth2-jwt.md</code>. PR #10522 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-model.md</code>. PR #10345 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-models.md</code>. PR #10351 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-updates.md</code>. PR #10396 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/alternatives.md</code>. PR #10855 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/templates.md</code>. PR #10678 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/oauth2-scopes.md</code>. PR #10643 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/async-tests.md</code>. PR #10708 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/metadata.md</code>. PR #10581 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/testing.md</code>. PR #10586 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/schema-extra-example.md</code>. PR #10597 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/index.md</code>. PR #10611 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-directly.md</code>. PR #10618 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-responses.md</code>. PR #10626 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-cookies.md</code>. PR #10627 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-headers.md</code>. PR #10628 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-change-status-code.md</code>. PR #10632 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/advanced-dependencies.md</code>. PR #10633 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/index.md</code>. PR #10635 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #10653 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #10667 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/middleware.md</code>. PR #10668 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/sub-applications.md</code>. PR #10671 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/websockets.md</code>. PR #10687 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-websockets.md</code>. PR #10703 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-events.md</code>. PR #10704 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-dependencies.md</code>. PR #10706 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-callbacks.md</code>. PR #10710 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/settings.md</code>. PR #10709 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/wsgi.md</code>. PR #10713 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/index.md</code>. PR #10733 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/https.md</code>. PR #10737 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/manually.md</code>. PR #10738 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/concepts.md</code>. PR #10744 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/features.md</code>. PR #10284 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/server-workers.md</code>. PR #10747 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/docker.md</code>. PR #10759 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/index.md</code>. PR #10769 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/general.md</code>. PR #10770 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/graphql.md</code>. PR #10788 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-request-and-route.md</code>. PR #10789 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #10790 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/separate-openapi-schemas.md</code>. PR #10796 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #10804 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-docs-ui-assets.md</code>. PR #10803 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/parameters.md</code>. PR #10814 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/status.md</code>. PR #10815 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/uploadfile.md</code>. PR #10816 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/exceptions.md</code>. PR #10817 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/dependencies.md</code>. PR #10818 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/apirouter.md</code>. PR #10819 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/websockets.md</code>. PR #10822 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/httpconnection.md</code>. PR #10823 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/response.md</code>. PR #10824 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/middleware.md</code>. PR #10837 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/openapi/*.md</code>. PR #10838 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/security/index.md</code>. PR #10839 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/staticfiles.md</code>. PR #10841 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/testclient.md</code>. PR #10843 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/project-generation.md</code>. PR #10851 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/history-design-future.md</code>. PR #10865 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10422 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/global-dependencies.md</code>. PR #10420 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/readyapi-people.md</code>. PR #10285 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10409 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/index.md</code>. PR #10429 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10411 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-data-types.md</code>. PR #10534 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/simple-oauth2.md</code>. PR #10504 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/get-current-user.md</code>. PR #10439 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms-and-files.md</code>. PR #10368 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/encoder.md</code>. PR #10385 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms.md</code>. PR #10361 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/versions.md</code>. PR #10491 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/async.md</code>. PR #10449 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/cookie-params.md</code>. PR #10323 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10407 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/index.md</code>. PR #10399 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/header-params.md</code>. PR #10326 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params-numeric-validations.md</code>. PR #10307 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params-str-validations.md</code>. PR #10304 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-files.md</code>. PR #10364 by @nilslindemann.</li> <li>:globe_with_meridians: Add Portuguese translation for <code>docs/pt/docs/advanced/templates.md</code>. PR #11338 by @SamuelBFavarin.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/learn/index.md</code>. PR #11337 by @imtiaz101325.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #11296 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/about/index.md</code>. PR #11299 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/index.md</code>. PR #9613 by @ElliottLarsen.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/extending-openapi.md</code>. PR #10794 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/metadata.md</code>. PR #11286 by @jackleeio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/contributing.md</code>. PR #10887 by @Aruelius.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/readyapi-people.md</code>. PR #11195 by @vusallyv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/index.md</code>. PR #11223 by @kohiry.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11242 by @jackleeio.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/learn/index.md</code>. PR #11192 by @vusallyv.</li> </ul>"},{"location":"release-notes/#internal_24","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11387 by @khulnasoft.</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #10988 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.14. PR #11318 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.2.0. PR #11011 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #11325 by @dependabot[bot].</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #11377 by @estebanx64.</li> <li>\u2795 Replace mkdocs-markdownextradata-plugin with mkdocs-macros-plugin. PR #11383 by @khulnasoft.</li> <li>\ud83d\udc77 Disable MkDocs insiders social plugin while an issue in MkDocs Material is handled. PR #11373 by @khulnasoft.</li> <li>\ud83d\udc77 Fix logic for when to install and use MkDocs Insiders. PR #11372 by @khulnasoft.</li> <li>\ud83d\udc77 Do not use Python packages cache for publish. PR #11366 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI to test sdists for redistribution (e.g. Linux distros). PR #11365 by @khulnasoft.</li> <li>\ud83d\udc77 Update build-docs GitHub Action path filter. PR #11354 by @khulnasoft.</li> <li>\ud83d\udd27 Update Ruff config, add extra ignore rule from SQLDev. PR #11353 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade configuration for Ruff v0.2.0. PR #11075 by @charliermarsh.</li> <li>\ud83d\udd27 Update sponsors, add MongoDB. PR #11346 by @khulnasoft.</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #11028 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.0.0 to 3.1.4. PR #11310 by @dependabot[bot].</li> <li>\u267b\ufe0f Refactor computing ReadyAPI People, include 3 months, 6 months, 1 year, based on comment date, not discussion date. PR #11304 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11228 by @khulnasoft.</li> <li>\ud83d\udd25 Remove Jina AI QA Bot from the docs. PR #11268 by @nan-wang.</li> <li>\ud83d\udd27 Update sponsors, remove Jina, remove Powens, move TestDriven.io. PR #11213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01100","title":"0.110.0","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix unhandled growing memory for internal server errors, refactor dependencies with <code>yield</code> and <code>except</code> to require raising again as in regular Python. PR #11191 by @khulnasoft.<ul> <li>This is a breaking change (and only slightly) if you used dependencies with <code>yield</code>, used <code>except</code> in those dependencies, and didn't raise again.</li> <li>This was reported internally by @rushilsrivastava as a memory leak when the server had unhandled exceptions that would produce internal server errors, the memory allocated before that point would not be released.</li> <li>Read the new docs: Dependencies with <code>yield</code> and <code>except</code>.</li> </ul> </li> </ul> <p>In short, if you had dependencies that looked like:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        pass\n</code></pre> <p>Now you need to make sure you raise again after <code>except</code>, just as you would in regular Python:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        raise\n</code></pre>"},{"location":"release-notes/#docs_20","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix minor typos in <code>docs/ko/docs/</code>. PR #11126 by @KaniKim.</li> <li>\u270f\ufe0f Fix minor typo in <code>readyapi/applications.py</code>. PR #11099 by @JacobHayes.</li> </ul>"},{"location":"release-notes/#translations_23","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/background.md</code>. PR #10820 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/templating.md</code>. PR #10842 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/external-links.md</code>. PR #10852 by @nilslindemann.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11162 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/encoders.md</code>. PR #10840 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/responses.md</code>. PR #10825 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/request.md</code>. PR #10821 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11078 by @emrhnsyts.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/readyapi.md</code>. PR #10813 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/newsletter.md</code>. PR #10853 by @nilslindemann.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/learn/index.md</code>. PR #11142 by @hsuanchi.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11123 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11124 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/schema-extra-example.md</code>. PR #11121 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body-fields.md</code>. PR #11112 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/cookie-params.md</code>. PR #11118 by @riroan.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/dependencies/index.md</code>. PR #11114 by @KaniKim.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/deployment/docker.md</code>. PR #11113 by @KaniKim.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/first-steps.md</code>. PR #11094 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/security/index.md</code>. PR #2278 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-headers.md</code>. PR #2276 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/deployment/index.md</code> and <code>~/deployment/versions.md</code>. PR #9669 by @pabloperezmoya.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/benchmarks.md</code>. PR #10928 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-change-status-code.md</code>. PR #11100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01092","title":"0.109.2","text":""},{"location":"release-notes/#upgrades_8","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade version of Starlette to <code>&gt;= 0.36.3</code>. PR #11086 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_24","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/readyapi-people.md</code>. PR #10547 by @alperiox.</li> </ul>"},{"location":"release-notes/#internal_25","title":"Internal","text":"<ul> <li>\ud83c\udf71 Add new ReadyAPI logo. PR #11090 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01091","title":"0.109.1","text":""},{"location":"release-notes/#security-fixes","title":"Security fixes","text":"<ul> <li>\u2b06\ufe0f Upgrade minimum version of <code>python-multipart</code> to <code>&gt;=0.0.7</code> to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade <code>python-multipart</code>.</li> </ul> <p>Read more in the advisory: Content-Type Header ReDoS.</p>"},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728  Include HTTP 205 in status codes with no body. PR #10969 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_14","title":"Refactors","text":"<ul> <li>\u2705 Refactor tests for duplicate operation ID generation for compatibility with other tools running the ReadyAPI test suite. PR #10876 by @emmettbutler.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/utils.py</code>. PR #10576 by @eukub.</li> <li>\ud83d\udd27 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR #10893 by @jiridanek.</li> <li>\u2705 Re-enable test in <code>tests/test_tutorial/test_header_params/test_tutorial003.py</code> after fix in Starlette. PR #10904 by @ooknimm.</li> </ul>"},{"location":"release-notes/#docs_21","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak wording in <code>help-readyapi.md</code>. PR #11040 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs for Behind a Proxy. PR #11038 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: 10 Tips for adding SQLAlchemy to ReadyAPI. PR #11036 by @Donnype.</li> <li>\ud83d\udcdd Add External Link: Tips on migrating from Flask to ReadyAPI and vice-versa. PR #11029 by @jtemporal.</li> <li>\ud83d\udcdd Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR #10979 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #10972 by @RafalSkolasinski.</li> <li>\ud83d\udcdd Update <code>HTTPException</code> details in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #5418 by @papb.</li> <li>\u270f\ufe0f A few tweaks in <code>docs/de/docs/tutorial/first-steps.md</code>. PR #10959 by @nilslindemann.</li> <li>\u270f\ufe0f Fix link in <code>docs/en/docs/advanced/async-tests.md</code>. PR #10960 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typos for Spanish documentation. PR #10957 by @jlopezlira.</li> <li>\ud83d\udcdd Add warning about lifespan functions and backwards compatibility with events. PR #10734 by @jacob-indigo.</li> <li>\u270f\ufe0f Fix broken link in <code>docs/tutorial/sql-databases.md</code> in several languages. PR #10716 by @theoohoho.</li> <li>\u270f\ufe0f Remove broken links from <code>external_links.yml</code>. PR #10943 by @Torabek.</li> <li>\ud83d\udcdd Update template docs with more info about <code>url_for</code>. PR #5937 by @EzzEddin.</li> <li>\ud83d\udcdd Update usage of Token model in security docs. PR #9313 by @piotrszacilowski.</li> <li>\u270f\ufe0f Update highlighted line in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #5490 by @papb.</li> <li>\ud83d\udcdd Add External Link: Explore How to Effectively Use JWT With ReadyAPI. PR #10212 by @aanchlia.</li> <li>\ud83d\udcdd Add hyperlink to <code>docs/en/docs/tutorial/static-files.md</code>. PR #10243 by @hungtsetse.</li> <li>\ud83d\udcdd Add External Link: Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR #9440 by @softwarebloat.</li> <li>\ud83d\udcdd Review and rewording of <code>en/docs/contributing.md</code>. PR #10480 by @nilslindemann.</li> <li>\ud83d\udcdd Add External Link: ML serving and monitoring with ReadyAPI and Evidently. PR #9701 by @mnrozhkov.</li> <li>\ud83d\udcdd Reword in docs, from \"have in mind\" to \"keep in mind\". PR #10376 by @malicious.</li> <li>\ud83d\udcdd Add External Link: Talk by Jeny Sadadia. PR #10265 by @JenySadadia.</li> <li>\ud83d\udcdd Add location info to <code>tutorial/bigger-applications.md</code>. PR #10552 by @nilslindemann.</li> <li>\u270f\ufe0f Fix Pydantic method name in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10826 by @ahmedabdou14.</li> </ul>"},{"location":"release-notes/#translations_25","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/external-links.md</code>. PR #10933 by @pablocm83.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/first-steps.md</code>, <code>docs/ko/docs/tutorial/index.md</code>, <code>docs/ko/docs/tutorial/path-params.md</code>, and <code>docs/ko/docs/tutorial/query-params.md</code>. PR #4218 by @SnowSuno.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10870 by @zhiquanchi.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/concepts.md</code>. PR #10282 by @xzmeng.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/index.md</code>. PR #11047 by @aykhans.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/middleware.md</code>. PR #2829 by @JeongHyeongKim.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-nested-models.md</code>. PR #10313 by @nilslindemann.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/middleware.md</code>. PR #9695 by @mojtabapaso.</li> <li>\ud83c\udf10 Update Farsi translation for <code>docs/fa/docs/index.md</code>. PR #10216 by @theonlykingpin.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-fields.md</code>. PR #10310 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body.md</code>. PR #10295 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #10308 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/get-current-user.md</code>. PR #2681 by @sh0nk.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/advanced-dependencies.md</code>. PR #3798 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #3815 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/behind-a-proxy.md</code>. PR #3820 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-events.md</code>. PR #3818 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-websockets.md</code>. PR #3817 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-database.md</code>. PR #3821 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/deta.md</code>. PR #3837 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/history-design-future.md</code>. PR #3832 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #3831 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/docker.md</code>. PR #10296 by @xzmeng.</li> <li>\ud83c\udf10 Update Spanish translation for <code>docs/es/docs/features.md</code>. PR #10884 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/newsletter.md</code>. PR #10922 by @pablocm83.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/background-tasks.md</code>. PR #5910 by @junah201.</li> <li>:globe_with_meridians: Add Turkish translation for <code>docs/tr/docs/alternatives.md</code>. PR #10502 by @alperiox.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/index.md</code>. PR #10989 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body.md</code>. PR #11000 by @KaniKim.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/schema-extra-example.md</code>. PR #4065 by @luccasmmg.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/history-design-future.md</code>. PR #11012 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/resources/index.md</code>. PR #11020 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/index.md</code>. PR #11021 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params.md</code>. PR #10293 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/benchmarks.md</code>. PR #10866 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/learn/index.md</code>. PR #11014 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/security/index.md</code>. PR #9945 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/help/index.md</code>. PR #11013 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/about/index.md</code>. PR #11006 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/benchmarks.md</code>. PR #11005 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Italian translation for <code>docs/it/docs/index.md</code>. PR #5233 by @matteospanio.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help/index.md</code>. PR #10983 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/features.md</code>. PR #10976 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/get-current-user.md</code>. PR #5737 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #10541 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/handling-errors.md</code>. PR #10375 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/encoder.md</code>. PR #10374 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-updates.md</code>. PR #10373 by @AlertRED.</li> <li>\ud83c\udf10 Russian translation: updated <code>readyapi-people.md</code>.. PR #10255 by @NiKuma0.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/index.md</code>. PR #5798 by @3w36zj6.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/generate-clients.md</code>. PR #10725 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-webhooks.md</code>. PR #10712 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/custom-response.md</code>. PR #10624 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-status-codes.md</code>. PR #10617 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/middleware.md</code>. PR #10391 by @JohannesJungbluth.</li> <li>\ud83c\udf10 Add German translation for introduction documents. PR #10497 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/encoder.md</code>. PR #1955 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-data-types.md</code>. PR #1932 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/async.md</code>. PR #5191 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/project-generation.md</code>. PR #5192 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/docker.md</code>. PR #5657 by @nearnear.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/server-workers.md</code>. PR #4935 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/index.md</code>. PR #4561 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/path-operation-configuration.md</code>. PR #3639 by @jungsu-kwon.</li> <li>\ud83c\udf10 Modify the description of <code>zh</code> - Traditional Chinese. PR #10889 by @cherinyy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/static-files.md</code>. PR #2957 by @jeesang7.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/response-model.md</code>. PR #2766 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-multiple-params.md</code>. PR #2461 by @PandaHun.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-params-str-validations.md</code>. PR #2415 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/python-types.md</code>. PR #2267 by @jrim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #2506 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/learn/index.md</code>. PR #10977 by @KaniKim.</li> <li>\ud83c\udf10 Initialize translations for Traditional Chinese. PR #10505 by @hsuanchi.</li> <li>\u270f\ufe0f Tweak the german translation of <code>docs/de/docs/tutorial/index.md</code>. PR #10962 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo error in <code>docs/ko/docs/tutorial/path-params.md</code>. PR #10758 by @2chanhaeng.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #1961 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #1960 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #1959 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/background-tasks.md</code>. PR #2668 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/index.md</code> and <code>docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #1958 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-model.md</code>. PR #1938 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-multiple-params.md</code>. PR #1903 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #1902 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/python-types.md</code>. PR #1899 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/handling-errors.md</code>. PR #1953 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-status-code.md</code>. PR #1942 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-models.md</code>. PR #1941 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese tranlsation for <code>docs/ja/docs/tutorial/schema-extra-example.md</code>. PR #1931 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-nested-models.md</code>. PR #1930 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-fields.md</code>. PR #1923 by @SwftAlpc.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/index.md</code>. PR #9502 by @fhabers21.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/background-tasks.md</code>. PR #10566 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo in <code>docs/ru/docs/index.md</code>. PR #10672 by @Delitel-WEB.</li> <li>\u270f\ufe0f Fix typos in <code>docs/zh/docs/tutorial/extra-data-types.md</code>. PR #10727 by @HiemalBeryl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10410 by @AlertRED.</li> </ul>"},{"location":"release-notes/#internal_26","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11074 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: add Coherence. PR #11066 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action issue-manager. PR #11056 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors: TalkPython badge. PR #11052 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: TalkPython badge image. PR #11048 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Deta. PR #11041 by @khulnasoft.</li> <li>\ud83d\udc84 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR #11039 by @khulnasoft.</li> <li>\ud83d\udd27 Add Italian to <code>mkdocs.yml</code>. PR #11016 by @alejsdev.</li> <li>\ud83d\udd28 Verify <code>mkdocs.yml</code> languages in CI, update <code>docs.py</code>. PR #11009 by @khulnasoft.</li> <li>\ud83d\udd27 Update config in <code>label-approved.yml</code> to accept translations with 1 reviewer. PR #11007 by @alejsdev.</li> <li>\ud83d\udc77 Add changes-requested handling in GitHub Action issue manager. PR #10971 by @khulnasoft.</li> <li>\ud83d\udd27  Group dependencies on dependabot updates. PR #10952 by @Kludex.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #10764 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR #10731 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR #10777 by @dependabot[bot].</li> <li>\ud83d\udd27  Add support for translations to languages with a longer code name, like <code>zh-hant</code>. PR #10950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01090","title":"0.109.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12. PR #10666 by @Jamim.</li> </ul>"},{"location":"release-notes/#upgrades_9","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.35.0,&lt;0.36.0. PR #10938 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_22","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/alternatives.md</code>. PR #10931 by @s111d.</li> <li>\ud83d\udcdd Replace <code>email</code> with <code>username</code> in <code>examples/security/tutorial007</code> code examples. PR #10649 by @nilslindemann.</li> <li>\ud83d\udcdd Add VS Code tutorial link. PR #10592 by @nilslindemann.</li> <li>\ud83d\udcdd Add notes about Pydantic v2's new <code>.model_dump()</code>. PR #10929 by @khulnasoft.</li> <li>\ud83d\udcdd Fix broken link in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #10765 by @HurSungYun.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI application monitoring made easy. PR #10917 by @khulnasoft.</li> <li>\u2728 Generate automatic language names for docs translations. PR #5354 by @jakul.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/alternatives.md</code> and <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #10906 by @s111d.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10834 by @Molkree.</li> <li>\ud83d\udcdd Add article: \"Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included\". PR #9733 by @dxphilo.</li> <li>\ud83d\udcdd Add warning about lifecycle events with <code>AsyncClient</code>. PR #4167 by @andrew-chang-dewitt.</li> <li>\u270f\ufe0f Fix typos in <code>/docs/reference/exceptions.md</code> and <code>/en/docs/reference/status.md</code>. PR #10809 by @clarencepenz.</li> <li>\u270f\ufe0f Fix typo in <code>openapi-callbacks.md</code>. PR #10673 by @kayjan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/routing.py</code> . PR #10520 by @sepsh.</li> <li>\ud83d\udcdd Replace HTTP code returned in case of existing user error in docs for testing. PR #4482 by @TristanMarion.</li> <li>\ud83d\udcdd Add blog for ReadyAPI &amp; Supabase. PR #6018 by @theinfosecguy.</li> <li>\ud83d\udcdd Update example source files for SQL databases with SQLAlchemy. PR #9508 by @s-mustafa.</li> <li>\ud83d\udcdd Update code examples in docs for body, replace name <code>create_item</code> with <code>update_item</code> when appropriate. PR #5913 by @OttoAndrey.</li> <li>\u270f\ufe0f Fix typo in dependencies with yield source examples. PR #10847 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_26","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Bengali translation for <code>docs/bn/docs/index.md</code>. PR #9177 by @Fahad-Md-Kamal.</li> <li>\u270f\ufe0f Update Python version in <code>index.md</code> in several languages. PR #10711 by @tamago3keran.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms-and-files.md</code>. PR #10347 by @AlertRED.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/index.md</code>. PR #10362 by @rostik1410.</li> <li>\u270f\ufe0f  Update Python version in <code>docs/ko/docs/index.md</code>. PR #10680 by @Eeap.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/features.md</code>. PR #5887 by @amirilf.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #10325 by @ShuibeiC.</li> <li>\ud83c\udf10 Fix typos in Russian translations for <code>docs/ru/docs/tutorial/background-tasks.md</code>, <code>docs/ru/docs/tutorial/body-nested-models.md</code>, <code>docs/ru/docs/tutorial/debugging.md</code>, <code>docs/ru/docs/tutorial/testing.md</code>. PR #10311 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-files.md</code>. PR #10332 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #10292 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/cloud.md</code>. PR #10291 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #10279 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/https.md</code>. PR #10277 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/index.md</code>. PR #10275 by @xzmeng.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/first-steps.md</code>. PR #9530 by @fhabers21.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/index.md</code>. PR #10444 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/learn/index.md</code>. PR #10479 by @KAZAMA-DREAM.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/learn/index.md</code>. PR #10539 by @AlertRED.</li> <li>\ud83c\udf10 Update SQLAlchemy instruction in Chinese translation <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #9712 by @Royc30ne.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/external-links.md</code>. PR #10549 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/learn/index.md</code>. PR #10885 by @pablocm83.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-fields.md</code>. PR #10670 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Add Hungarian translation for <code>/docs/hu/docs/index.md</code>. PR #10812 by @takacs.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/newsletter.md</code>. PR #10550 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/help/index.md</code>. PR #10907 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/about/index.md</code>. PR #10908 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/resources/index.md</code>. PR #10909 by @pablocm83.</li> </ul>"},{"location":"release-notes/#internal_27","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10871 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade custom GitHub Action comment-docs-preview-in-pr. PR #10916 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action latest-changes. PR #10915 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action label-approved. PR #10913 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action label-approved. PR #10905 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01080","title":"0.108.0","text":""},{"location":"release-notes/#upgrades_10","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.29.0,&lt;0.33.0</code>, update docs and usage of templates with new Starlette arguments. Remove pin of AnyIO <code>&gt;=3.7.1,&lt;4.0.0</code>, add support for AnyIO 4.x.x. PR #10846 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01070","title":"0.107.0","text":""},{"location":"release-notes/#upgrades_11","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.28.0. PR #9636 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_23","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs: Node.js script alternative to update OpenAPI for generated clients. PR #10845 by @alejsdev.</li> <li>\ud83d\udcdd Restructure Docs section in Contributing page. PR #10844 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01060","title":"0.106.0","text":""},{"location":"release-notes/#breaking-changes_2","title":"Breaking Changes","text":"<p>Using resources from dependencies with <code>yield</code> in background tasks is no longer supported.</p> <p>This change is what supports the new features, read below. \ud83e\udd13</p>"},{"location":"release-notes/#dependencies-with-yield-httpexception-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code> and Background Tasks","text":"<p>Dependencies with <code>yield</code> now can raise <code>HTTPException</code> and other exceptions after <code>yield</code>. \ud83c\udf89</p> <p>Read the new docs here: Dependencies with <code>yield</code> and <code>HTTPException</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p> <p>The sequence of execution before ReadyAPI 0.106.0 was like this diagram:</p> <p>Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>The new execution flow can be found in the docs: Execution of dependencies with <code>yield</code>.</p>"},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for raising exceptions (including <code>HTTPException</code>) in dependencies with <code>yield</code> in the exit code, do not support them in background tasks. PR #10831 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_28","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10567 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01050","title":"0.105.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Add support for multiple Annotated annotations, e.g. <code>Annotated[str, Field(), Query()]</code>. PR #10773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_15","title":"Refactors","text":"<ul> <li>\ud83d\udd25 Remove unused NoneType. PR #10774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_24","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak default suggested configs for generating clients. PR #10736 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_29","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Scalar. PR #10728 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add PropelAuth. PR #10760 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs, verify README on CI. PR #10750 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Fern. PR #10729 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Codacy. PR #10677 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Reflex. PR #10676 by @khulnasoft.</li> <li>\ud83d\udcdd Update release notes, move and check latest-changes. PR #10588 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #10587 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01041","title":"0.104.1","text":""},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR #10529 by @alejandraklachquin.<ul> <li>This is not really a bug in ReadyAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the Swagger UI side.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_25","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update data structure and render for external-links. PR #10495 by @khulnasoft.</li> <li>\u270f\ufe0f Fix link to SPDX license identifier in <code>docs/en/docs/tutorial/metadata.md</code>. PR #10433 by @worldworm.</li> <li>\ud83d\udcdd Update example validation error from Pydantic v1 to match Pydantic v2 in <code>docs/en/docs/tutorial/path-params.md</code>. PR #10043 by @giuliowaitforitdavide.</li> <li>\u270f\ufe0f Fix typos in emoji docs and in some source examples. PR #10438 by @afuetterer.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/dependencies.md</code>. PR #10465 by @suravshresth.</li> <li>\u270f\ufe0f Fix typos and rewordings in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #10468 by @yogabonito.</li> <li>\ud83d\udcdd Update docs, remove references to removed <code>pydantic.Required</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #10469 by @yogabonito.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/index.md</code>. PR #10467 by @tarsil.</li> <li>\ud83d\udd25 Remove unnecessary duplicated docstrings. PR #10484 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_30","title":"Internal","text":"<ul> <li>\u270f\ufe0f Update Pydantic links to dotenv support. PR #10511 by @White-Mask.</li> <li>\u270f\ufe0f Update links in <code>docs/en/docs/async.md</code> and <code>docs/zh/docs/async.md</code> to make them relative. PR #10498 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix links in <code>docs/em/docs/async.md</code>. PR #10507 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/em/docs/index.md</code>, Python 3.8. PR #10521 by @kerriop.</li> <li>\u2b06 Bump pillow from 9.5.0 to 10.1.0. PR #10446 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from &lt;9.0.0,&gt;=8.1.4 to &gt;=8.1.4,&lt;10.0.0. PR #5862 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.21 to 9.4.7. PR #10545 by @dependabot[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #10544 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges, Databento. PR #10519 by @khulnasoft.</li> <li>\ud83d\udc77 Adopt Ruff format. PR #10517 by @khulnasoft.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #10496 by @khulnasoft.</li> <li>\ud83d\udc1b Fix overriding MKDocs theme lang in hook. PR #10490 by @khulnasoft.</li> <li>\ud83d\udd25 Drop/close Gitter chat. Questions should go to GitHub Discussions, free conversations to Discord.. PR #10485 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01040","title":"0.104.0","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Add reference (code API) docs with PEP 727, add subclass with custom docstrings for <code>BackgroundTasks</code>, refactor docs structure. PR #10392 by @khulnasoft. New docs at ReadyAPI Reference - Code API.</li> </ul>"},{"location":"release-notes/#upgrades_12","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Drop support for Python 3.7, require Python 3.8 or above. PR #10442 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_31","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.27.0 to 2.28.0. PR #10268 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #10208 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.10. PR #10061 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, Bump.sh images. PR #10381 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #10363 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01032","title":"0.103.2","text":""},{"location":"release-notes/#refactors_16","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade compatibility with Pydantic v2.4, new renamed functions and JSON Schema input/output models with default values. PR #10344 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_27","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/extra-data-types.md</code>. PR #10132 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Fix typos in French translations for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>, <code>docs/fr/docs/alternatives.md</code>, <code>docs/fr/docs/async.md</code>, <code>docs/fr/docs/features.md</code>, <code>docs/fr/docs/help-readyapi.md</code>, <code>docs/fr/docs/index.md</code>, <code>docs/fr/docs/python-types.md</code>, <code>docs/fr/docs/tutorial/body.md</code>, <code>docs/fr/docs/tutorial/first-steps.md</code>, <code>docs/fr/docs/tutorial/query-params.md</code>. PR #10154 by @s-rigaud.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/async.md</code>. PR #5591 by @mkdir700.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/simple-oauth2.md</code>. PR #3844 by @jaystone776.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/cloud.md</code>. PR #10191 by @Sion99.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/https.md</code>. PR #10298 by @tamtam-fitness.</li> <li>\ud83c\udf10 Fix typo in Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #10224 by @AlertRED.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/help-readyapi.md</code>. PR #10121 by @romabozhanovgithub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-params.md</code>. PR #10226 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/versions.md</code>. PR #10276 by @xzmeng.</li> </ul>"},{"location":"release-notes/#internal_32","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, remove Flint. PR #10349 by @khulnasoft.</li> <li>\ud83d\udd27 Rename label \"awaiting review\" to \"awaiting-review\" to simplify search queries. PR #10343 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Svix (revert #10228). PR #10253 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Svix. PR #10228 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Bump.sh. PR #10227 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01031","title":"0.103.1","text":""},{"location":"release-notes/#fixes_12","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin AnyIO to &lt; 4.0.0 to handle an incompatibility while upgrading to Starlette 0.31.1. PR #10194 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_26","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix validation parameter name in docs, from <code>regex</code> to <code>pattern</code>. PR #10085 by @pablodorrio.</li> <li>\u270f\ufe0f Fix indent format in <code>docs/en/docs/deployment/server-workers.md</code>. PR #10066 by @tamtam-fitness.</li> <li>\u270f\ufe0f Fix Pydantic examples in tutorial for Python types. PR #9961 by @rahulsalgare.</li> <li>\u270f\ufe0f Fix link to Pydantic docs in <code>docs/en/docs/tutorial/extra-data-types.md</code>. PR #10155 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #10170 by @poupapaa.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10172 by @ragul-kachiappan.</li> </ul>"},{"location":"release-notes/#translations_28","title":"Translations","text":"<ul> <li>\ud83c\udf10 Remove duplicate line in translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #10126 by @LecoOliveira.</li> <li>\ud83c\udf10 Add Yoruba translation for <code>docs/yo/docs/index.md</code>. PR #10033 by @AfolabiOlaoluwa.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/python-types.md</code>. PR #10080 by @rostik1410.</li> <li>\ud83c\udf10 Add Vietnamese translations for <code>docs/vi/docs/tutorial/first-steps.md</code> and <code>docs/vi/docs/tutorial/index.md</code>. PR #10088 by @magiskboy.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/alternatives.md</code>. PR #10060 by @whysage.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/index.md</code>. PR #10079 by @rostik1410.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/how-to/separate-openapi-schemas.md</code> and <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #10189 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/generate-clients.md</code>. PR #9883 by @funny-cat-happy.</li> </ul>"},{"location":"release-notes/#refactors_17","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typos in comment in <code>readyapi/applications.py</code>. PR #10045 by @AhsanSheraz.</li> <li>\u2705 Add missing test for OpenAPI examples, it was missing in coverage. PR #10188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_33","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10186 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01030","title":"0.103.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for <code>openapi_examples</code> in all ReadyAPI parameters. PR #10152 by @khulnasoft.<ul> <li>New docs: OpenAPI-specific examples.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_27","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note to docs about Separate Input and Output Schemas with ReadyAPI version. PR #10150 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01020","title":"0.102.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for disabling the separation of input and output JSON Schemas in OpenAPI with Pydantic v2 with <code>separate_input_output_schemas=False</code>. PR #10145 by @khulnasoft.<ul> <li>New docs Separate OpenAPI Schemas for Input and Output or Not.</li> <li>This PR also includes a new setup (internal tools) for generating screenshots for the docs.</li> </ul> </li> </ul>"},{"location":"release-notes/#refactors_18","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor tests for new Pydantic 2.2.1. PR #10115 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_28","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add new docs section, How To - Recipes, move docs that don't have to be read by everyone to How To. PR #10114 by @khulnasoft.</li> <li>\ud83d\udcdd Update Advanced docs, add links to sponsor courses. PR #10113 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for generating clients. PR #10112 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak MkDocs and add redirects. PR #10111 by @khulnasoft.</li> <li>\ud83d\udcdd Restructure docs for cloud providers, include links to sponsors. PR #10110 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_34","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Speakeasy. PR #10098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01011","title":"0.101.1","text":""},{"location":"release-notes/#fixes_13","title":"Fixes","text":"<ul> <li>\u2728 Add <code>ResponseValidationError</code> printable details, to show up in server error logs. PR #10078 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_19","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typo in deprecation warnings in <code>readyapi/params.py</code>. PR #9854 by @russbiggs.</li> <li>\u270f\ufe0f Fix typos in comments on internal code in <code>readyapi/concurrency.py</code> and <code>readyapi/routing.py</code>. PR #9590 by @ElliottLarsen.</li> </ul>"},{"location":"release-notes/#docs_29","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in release notes. PR #9835 by @francisbergin.</li> <li>\ud83d\udcdd Add external article: Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI. PR #9847 by @adejumoridwan.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/contributing.md</code>. PR #9878 by @VicenteMerino.</li> <li>\ud83d\udcdd Fix code highlighting in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #9806 by @theonlykingpin.</li> </ul>"},{"location":"release-notes/#translations_29","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/concepts.md</code>. PR #10062 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/server-workers.md</code>. PR #10064 by @tamtam-fitness.</li> <li>\ud83c\udf10 Update Japanese translation for <code>docs/ja/docs/deployment/docker.md</code>. PR #10073 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-people.md</code>. PR #10059 by @rostik1410.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-params.md</code>. PR #10032 by @rostik1410.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #9971 by @Xewus.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/python-types.md</code>. PR #10047 by @magiskboy.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/global-dependencies.md</code>. PR #9970 by @dudyaosuplayer.</li> <li>\ud83c\udf10 Add Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #9974 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_35","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Porter. PR #10051 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Jina back as bronze sponsor. PR #10050 by @khulnasoft.</li> <li>\u2b06 Bump mypy from 1.4.0 to 1.4.1. PR #9756 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.17 to 9.1.21. PR #9960 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01010","title":"0.101.0","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>\u2728 Enable Pydantic's serialization mode for responses, add support for Pydantic's <code>computed_field</code>, better OpenAPI for response models, proper required attributes, better generated clients. PR #10011 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_20","title":"Refactors","text":"<ul> <li>\u2705 Fix tests for compatibility with pydantic 2.1.1. PR #9943 by @dmontagu.</li> <li>\u2705 Fix test error in Windows for <code>jsonable_encoder</code>. PR #9840 by @iudeen.</li> </ul>"},{"location":"release-notes/#upgrades_13","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Do not allow Pydantic 2.1.0 that breaks (require 2.1.1). PR #10012 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_30","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/index.md</code>. PR #9963 by @eVery1337.</li> <li>\ud83c\udf10 Remove Vietnamese note about missing translation. PR #9957 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_36","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Actions step dump context to debug external failures. PR #10008 by @khulnasoft.</li> <li>\ud83d\udd27 Restore MkDocs Material pin after the fix. PR #10001 by @khulnasoft.</li> <li>\ud83d\udd27 Update the Question template to ask for the Pydantic version. PR #10000 by @khulnasoft.</li> <li>\ud83d\udccd Update MkDocs Material dependencies. PR #9986 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9999 by @khulnasoft.</li> <li>\ud83d\udc33 Update Dockerfile with compatibility versions, to upgrade later. PR #9998 by @khulnasoft.</li> <li>\u2795 Add pydantic-settings to ReadyAPI People dependencies. PR #9988 by @khulnasoft.</li> <li>\u267b\ufe0f Update ReadyAPI People logic with new Pydantic. PR #9985 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors, Fern badge. PR #9982 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare Pages. PR #9978 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsor Fern. PR #9979 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #9977 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01001","title":"0.100.1","text":""},{"location":"release-notes/#fixes_14","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Replace <code>MultHostUrl</code> to <code>AnyUrl</code> for compatibility with older versions of Pydantic v1. PR #9852 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_30","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links for self-hosted Swagger UI, point to v5, for OpenAPI 31.0. PR #9834 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_31","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body.md</code>. PR #4574 by @ss-o-furda.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/features.md</code> and <code>docs/vi/docs/index.md</code>. PR #3006 by @magiskboy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/async.md</code>. PR #4179 by @NinaHwang.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #9812 by @wdh99.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #4075 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/index.md</code>. PR #2234 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/contributing.md</code>. PR #2132 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/benchmarks.md</code>. PR #2155 by @clemsau.</li> <li>\ud83c\udf10 Update Chinese translations with new source files. PR #9738 by @mahone3297.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms.md</code>. PR #9841 by @dedkot01.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/handling-errors.md</code>. PR #9485 by @Creat55.</li> </ul>"},{"location":"release-notes/#internal_37","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Fern. PR #9956 by @khulnasoft.</li> <li>\ud83d\udc77 Update ReadyAPI People token. PR #9844 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9775 by @khulnasoft.</li> <li>\ud83d\udc77 Update MkDocs Material token. PR #9843 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #9842 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01000","title":"0.100.0","text":"<p>\u2728 Support for Pydantic v2 \u2728</p> <p>Pydantic version 2 has the core re-written in Rust and includes a lot of improvements and features, for example:</p> <ul> <li>Improved correctness in corner cases.</li> <li>Safer types.</li> <li>Better performance and less energy consumption.</li> <li>Better extensibility.</li> <li>etc.</li> </ul> <p>...all this while keeping the same Python API. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. \ud83d\ude80</p> <p>In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more. \ud83e\udd2f</p> <p>When you use ReadyAPI, there's a lot more going on, processing the request and response, handling dependencies, executing your own code, and particularly, waiting for the network. But you will probably still get some nice performance improvements just from the upgrade.</p> <p>The focus of this release is compatibility with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then performance improvements. Some third-party early beta testers that ran benchmarks on the beta releases of ReadyAPI reported improvements of 2x - 3x. Which is not bad for just doing <code>pip install --upgrade readyapi pydantic</code>. This was not an official benchmark and I didn't check it myself, but it's a good sign.</p>"},{"location":"release-notes/#migration","title":"Migration","text":"<p>Check out the Pydantic migration guide.</p> <p>For the things that need changes in your Pydantic models, the Pydantic team built <code>bump-pydantic</code>.</p> <p>A command line tool that will process your code and update most of the things automatically for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.</p>"},{"location":"release-notes/#pydantic-v1","title":"Pydantic v1","text":"<p>This version of ReadyAPI still supports Pydantic v1. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.</p> <p>This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest ReadyAPI.</p> <p>There are tests for both Pydantic v1 and v2, and test coverage is kept at 100%.</p>"},{"location":"release-notes/#changes","title":"Changes","text":"<ul> <li> <p>There are new parameter fields supported by Pydantic <code>Field()</code> for:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> </li> <li> <p>The new parameter fields are:</p> <ul> <li><code>default_factory</code></li> <li><code>alias_priority</code></li> <li><code>validation_alias</code></li> <li><code>serialization_alias</code></li> <li><code>discriminator</code></li> <li><code>strict</code></li> <li><code>multiple_of</code></li> <li><code>allow_inf_nan</code></li> <li><code>max_digits</code></li> <li><code>decimal_places</code></li> <li><code>json_schema_extra</code></li> </ul> </li> </ul> <p>...you can read about them in the Pydantic docs.</p> <ul> <li>The parameter <code>regex</code> has been deprecated and replaced by <code>pattern</code>.<ul> <li>You can read more about it in the docs for Query Parameters and String Validations: Add regular expressions.</li> </ul> </li> <li>New Pydantic models use an improved and simplified attribute <code>model_config</code> that takes a simple dict instead of an internal class <code>Config</code> for their configuration.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>The attribute <code>schema_extra</code> for the internal class <code>Config</code> has been replaced by the key <code>json_schema_extra</code> in the new <code>model_config</code> dict.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>When you install <code>\"readyapi[all]\"</code> it now also includes:<ul> <li><code>pydantic-settings</code> - for settings management.</li> <li><code>pydantic-extra-types</code> - for extra types to be used with Pydantic.</li> </ul> </li> <li> <p>Now Pydantic Settings is an additional optional package (included in <code>\"readyapi[all]\"</code>). To use settings you should now import <code>from pydantic_settings import BaseSettings</code> instead of importing from <code>pydantic</code> directly.</p> <ul> <li>You can read more about it in the docs for Settings and Environment Variables.</li> </ul> </li> <li> <p>PR #9816 by @khulnasoft, included all the work done (in multiple PRs) on the beta branch (<code>main-pv2</code>).</p> </li> </ul>"},{"location":"release-notes/#0991","title":"0.99.1","text":""},{"location":"release-notes/#fixes_15","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema accepting bools as valid JSON Schemas, e.g. <code>additionalProperties: false</code>. PR #9781 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_31","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update source examples to use new JSON Schema examples field. PR #9776 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0990","title":"0.99.0","text":""},{"location":"release-notes/#features_12","title":"Features","text":"<ul> <li> <p>\u2728 Add support for OpenAPI 3.1.0. PR #9770 by @khulnasoft.</p> <ul> <li>New support for documenting webhooks, read the new docs here: Advanced User Guide: OpenAPI Webhooks.</li> <li>Upgrade OpenAPI 3.1.0, this uses JSON Schema 2020-12.</li> <li>Upgrade Swagger UI to version 5.x.x, that supports OpenAPI 3.1.0.</li> <li>Updated <code>examples</code> field in <code>Query()</code>, <code>Cookie()</code>, <code>Body()</code>, etc. based on the latest JSON Schema and OpenAPI. Now it takes a list of examples and they are included directly in the JSON Schema, not outside. Read more about it (including the historical technical details) in the updated docs: Tutorial: Declare Request Example Data.</li> </ul> </li> <li> <p>\u2728 Add support for <code>deque</code> objects and children in <code>jsonable_encoder</code>. PR #9433 by @cranium.</p> </li> </ul>"},{"location":"release-notes/#docs_32","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix form for the ReadyAPI and friends newsletter. PR #9749 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_32","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/advanced/sub-applications.md</code>. PR #9692 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-model.md</code>. PR #9675 by @glsglsgls.</li> </ul>"},{"location":"release-notes/#internal_38","title":"Internal","text":"<ul> <li>\ud83d\udd28 Enable linenums in MkDocs Material during local live development to simplify highlighting code. PR #9769 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.24.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.25.0. PR #9724 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.16 to 9.1.17. PR #9746 by @dependabot[bot].</li> <li>\ud83d\udd25 Remove missing translation dummy pages, no longer necessary. PR #9751 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #9259 by @pre-commit-ci[bot].</li> <li>\u2728 Add Material for MkDocs Insiders features and cards. PR #9748 by @khulnasoft.</li> <li>\ud83d\udd25 Remove languages without translations. PR #9743 by @khulnasoft.</li> <li>\u2728 Refactor docs for building scripts, use MkDocs hooks, simplify (remove) configs for languages. PR #9742 by @khulnasoft.</li> <li>\ud83d\udd28 Add MkDocs hook that renames sections based on the first index file. PR #9737 by @khulnasoft.</li> <li>\ud83d\udc77 Make cron jobs run only on main repo, not on forks, to avoid error notifications from missing tokens. PR #9735 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs for other languages. PR #9734 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor Docs CI, run in multiple workers with a dynamic matrix to optimize speed. PR #9732 by @khulnasoft.</li> <li>\ud83d\udd25 Remove old internal GitHub Action watch-previews that is no longer needed. PR #9730 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs and MkDocs Material. PR #9729 by @khulnasoft.</li> <li>\ud83d\udc77 Build and deploy docs only on docs changes. PR #9728 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0980","title":"0.98.0","text":""},{"location":"release-notes/#features_13","title":"Features","text":"<ul> <li>\u2728 Allow disabling <code>redirect_slashes</code> at the ReadyAPI app level. PR #3432 by @cyberlis.</li> </ul>"},{"location":"release-notes/#docs_33","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs on Pydantic using ujson internally. PR #5804 by @mvasilkov.</li> <li>\u270f Rewording in <code>docs/en/docs/tutorial/debugging.md</code>. PR #9581 by @ivan-abc.</li> <li>\ud83d\udcdd Add german blog post (Domain-driven Design mit Python und ReadyAPI). PR #9261 by @msander.</li> <li>\u270f\ufe0f Tweak wording in <code>docs/en/docs/tutorial/security/index.md</code>. PR #9561 by @jyothish-mohan.</li> <li>\ud83d\udcdd Update <code>Annotated</code> notes in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #9620 by @Alexandrhub.</li> <li>\u270f\ufe0f Fix typo <code>Annotation</code> -&gt; <code>Annotated</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9625 by @mccricardo.</li> <li>\ud83d\udcdd Use in memory database for testing SQL in docs. PR #1223 by @HarshaLaxman.</li> </ul>"},{"location":"release-notes/#translations_33","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/metadata.md</code>. PR #9681 by @TabarakoAkula.</li> <li>\ud83c\udf10 Fix typo in Spanish translation for <code>docs/es/docs/tutorial/first-steps.md</code>. PR #9571 by @lilidl-nft.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/path-operation-configuration.md</code>. PR #9696 by @TabarakoAkula.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/index.md</code>. PR #9666 by @lordqyxz.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/settings.md</code>. PR #9652 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/websockets.md</code>. PR #9651 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/testing.md</code>. PR #9641 by @wdh99.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/extra-models.md</code>. PR #9619 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/cors.md</code>. PR #9608 by @ivan-abc.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/features.md</code>. PR #5348 by @mbroton.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-nested-models.md</code>. PR #9605 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_39","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.0.272 to 0.0.275. PR #9721 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.21.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.23.0. PR #9463 by @dependabot[bot].</li> <li>\u2b06 Bump mypy from 1.3.0 to 1.4.0. PR #9719 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;3.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;4.0.0. PR #9251 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6. PR #9482 by @dependabot[bot].</li> <li>\u270f\ufe0f Fix tooltips for light/dark theme toggler in docs. PR #9588 by @pankaj1707k.</li> <li>\ud83d\udd27 Set minimal hatchling version needed to build the package. PR #9240 by @mgorny.</li> <li>\ud83d\udcdd Add repo link to PyPI. PR #9559 by @JacobCoffee.</li> <li>\u270f\ufe0f Fix typos in data for tests. PR #4958 by @ryanrussell.</li> <li>\ud83d\udd27 Update sponsors, add Flint. PR #9699 by @khulnasoft.</li> <li>\ud83d\udc77 Lint in CI only once, only with one version of Python, run tests with all of them. PR #9686 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0970","title":"0.97.0","text":""},{"location":"release-notes/#features_14","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dependencies</code> in WebSocket routes. PR #4534 by @paulo-raca.</li> <li>\u2728 Add exception handler for <code>WebSocketRequestValidationError</code> (which also allows to override it). PR #6030 by @kristjanvalur.</li> </ul>"},{"location":"release-notes/#refactors_21","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade and fully migrate to Ruff, remove isort, includes a couple of tweaks suggested by the new version of Ruff. PR #9660 by @khulnasoft.</li> <li>\u267b\ufe0f Update internal type annotations and upgrade mypy. PR #9658 by @khulnasoft.</li> <li>\u267b\ufe0f Simplify <code>AsyncExitStackMiddleware</code> as without Python 3.6 <code>AsyncExitStack</code> is always available. PR #9657 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_14","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Black. PR #9661 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_40","title":"Internal","text":"<ul> <li>\ud83d\udc9a Update CI cache to fix installs when dependencies change. PR #9659 by @khulnasoft.</li> <li>\u2b07\ufe0f Separate requirements for development into their own requirements.txt files, they shouldn't be extras. PR #9655 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0961","title":"0.96.1","text":""},{"location":"release-notes/#fixes_16","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>HTTPException</code> header type annotations. PR #9648 by @khulnasoft.</li> <li>\ud83d\udc1b Fix OpenAPI model fields int validations, <code>gte</code> to <code>ge</code>. PR #9635 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_15","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Update minimum version of Pydantic to &gt;=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR #9567 by @Kludex.</li> </ul>"},{"location":"release-notes/#refactors_22","title":"Refactors","text":"<ul> <li>\u267b Remove <code>media_type</code> from <code>ORJSONResponse</code> as it's inherited from the parent class. PR #5805 by @Kludex.</li> <li>\u267b Instantiate <code>HTTPException</code> only when needed, optimization refactor. PR #5356 by @pawamoy.</li> </ul>"},{"location":"release-notes/#docs_34","title":"Docs","text":"<ul> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, as it was removed there. PR #5811 by @Kludex.</li> </ul>"},{"location":"release-notes/#translations_34","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix spelling in Indonesian translation of <code>docs/id/docs/tutorial/index.md</code>. PR #5635 by @purwowd.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/index.md</code>. PR #5896 by @Wilidon.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/response-change-status-code.md</code> and <code>docs/zh/docs/advanced/response-headers.md</code>. PR #9544 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/schema-extra-example.md</code>. PR #9621 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_41","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Platform.sh. PR #9650 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR #9646 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom tokens for GitHub Actions to avoid rate limits. PR #9647 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0960","title":"0.96.0","text":""},{"location":"release-notes/#features_15","title":"Features","text":"<ul> <li>\u26a1 Update <code>create_cloned_field</code> to use a global cache and improve startup performance. PR #4645 by @madkinsz and previous original PR by @huonw.</li> </ul>"},{"location":"release-notes/#docs_35","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Deta deployment tutorial for compatibility with Deta Space. PR #6004 by @mikBighne98.</li> <li>\u270f\ufe0f Fix typo in Deta deployment tutorial. PR #9501 by @lemonyte.</li> </ul>"},{"location":"release-notes/#translations_35","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/body.md</code>. PR #3885 by @solomein-sv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/static-files.md</code>. PR #9580 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params.md</code>. PR #9584 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/first-steps.md</code>. PR #9471 by @AGolicyn.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/debugging.md</code>. PR #9579 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params.md</code>. PR #9519 by @AGolicyn.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/static-files.md</code>. PR #9436 by @wdh99.</li> <li>\ud83c\udf10 Update Spanish translation including new illustrations in <code>docs/es/docs/async.md</code>. PR #9483 by @andresbermeoq.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params-numeric-validations.md</code>. PR #9563 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/concepts.md</code>. PR #9577 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-multiple-params.md</code>. PR #9586 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_42","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #9602 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, remove InvestSuite. PR #9612 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0952","title":"0.95.2","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>&gt;=0.27.0</code> for a security release. PR #9541 by @khulnasoft. Details on Starlette's security advisory.</li> </ul>"},{"location":"release-notes/#translations_36","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/events.md</code>. PR #9326 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/manually.md</code>. PR #9417 by @Xewus.</li> <li>\ud83c\udf10 Add setup for translations to Lao. PR #9396 by @TheBrown.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/testing.md</code>. PR #9403 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/https.md</code>. PR #9428 by @Xewus.</li> <li>\u270f Fix command to install requirements in Windows. PR #9445 by @MariiaRomanuik.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/response-directly.md</code>. PR #9415 by @axel584.</li> <li>\ud83c\udf10 Initiate Czech translation setup. PR #9288 by @3p1463k.</li> <li>\u270f Fix typo in Portuguese docs for <code>docs/pt/docs/index.md</code>. PR #9337 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-status-code.md</code>. PR #9370 by @nadia3373.</li> </ul>"},{"location":"release-notes/#internal_43","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix <code>flask.escape</code> warning for internal tests. PR #9468 by @samuelcolvin.</li> <li>\u2705 Refactor 2 tests, for consistency and simplification. PR #9504 by @khulnasoft.</li> <li>\u2705 Refactor OpenAPI tests, prepare for Pydantic v2. PR #9503 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR #9394 by @dependabot[bot].</li> <li>\ud83d\udc9a Disable setup-python pip cache in CI. PR #9438 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR #9346 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0951","title":"0.95.1","text":""},{"location":"release-notes/#fixes_17","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix using <code>Annotated</code> in routers or path operations decorated multiple times. PR #9315 by @sharonyogev.</li> </ul>"},{"location":"release-notes/#docs_36","title":"Docs","text":"<ul> <li>\ud83c\udf10 \ud83d\udd20 \ud83d\udcc4 \ud83d\udc22 Translate docs to Emoji \ud83e\udd73 \ud83c\udf89 \ud83d\udca5 \ud83e\udd2f \ud83e\udd2f. PR #5385 by @LeeeeT.</li> <li>\ud83d\udcdd Add notification message warning about old versions of ReadyAPI not supporting <code>Annotated</code>. PR #9298 by @grdworkin.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #5681 by @Leommjr.</li> <li>\u270f Fix wrong import from typing module in Persian translations for <code>docs/fa/docs/index.md</code>. PR #6083 by @Kimiaattaei.</li> <li>\u270f\ufe0f Fix format, remove unnecessary asterisks in <code>docs/en/docs/help-readyapi.md</code>. PR #9249 by @armgabrielyan.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9272 by @nicornk.</li> <li>\u270f Fix typo/bug in inline code example in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9273 by @tim-habitat.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #9282 by @aadarsh977.</li> <li>\u270f Fix typo: 'wll' to 'will' in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9380 by @dasstyxx.</li> </ul>"},{"location":"release-notes/#translations_37","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/index.md</code>. PR #5673 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-nested-models.md</code>. PR #4053 by @luccasmmg.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/alternatives.md</code>. PR #5994 by @Xewus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/extra-models.md</code>. PR #5912 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-operation-configuration.md</code>. PR #5936 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #6002 by @stigsanek.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #9176 by @sehwan505.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/project-generation.md</code>. PR #9243 by @Xewus.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/index.md</code>. PR #9265 by @frabc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params-str-validations.md</code>. PR #9267 by @dedkot01.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/benchmarks.md</code>. PR #9271 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_44","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: remove Jina. PR #9388 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add databento, remove Ines's course and StriveWorks. PR #9351 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0950","title":"0.95.0","text":""},{"location":"release-notes/#highlights_1","title":"Highlights","text":"<p>This release adds support for dependencies and parameters using <code>Annotated</code> and recommends its usage. \u2728</p> <p>This has several benefits, one of the main ones is that now the parameters of your functions with <code>Annotated</code> would not be affected at all.</p> <p>If you call those functions in other places in your code, the actual default values will be kept, your editor will help you notice missing required arguments, Python will require you to pass required arguments at runtime, you will be able to use the same functions for different things and with different libraries (e.g. Cligenius will soon support <code>Annotated</code> too, then you could use the same function for an API and a CLI), etc.</p> <p>Because <code>Annotated</code> is standard Python, you still get all the benefits from editors and tools, like autocompletion, inline errors, etc.</p> <p>One of the biggest benefits is that now you can create <code>Annotated</code> dependencies that are then shared by multiple path operation functions, this will allow you to reduce a lot of code duplication in your codebase, while keeping all the support from editors and tools.</p> <p>For example, you could have code like this:</p> <pre><code>def get_current_user(token: str):\n    # authenticate user\n    return User()\n\n\n@app.get(\"/items/\")\ndef read_items(user: User = Depends(get_current_user)):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(*, user: User = Depends(get_current_user), item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n</code></pre> <p>There's a bit of code duplication for the dependency:</p> <pre><code>user: User = Depends(get_current_user)\n</code></pre> <p>...the bigger the codebase, the more noticeable it is.</p> <p>Now you can create an annotated dependency once, like this:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n</code></pre> <p>And then you can reuse this <code>Annotated</code> dependency:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n@app.get(\"/items/\")\ndef read_items(user: CurrentUser):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(user: CurrentUser, item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(user: CurrentUser, item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(user: CurrentUser, item_id: int):\n    ...\n</code></pre> <p>...and <code>CurrentUser</code> has all the typing information as <code>User</code>, so your editor will work as expected (autocompletion and everything), and ReadyAPI will be able to understand the dependency defined in <code>Annotated</code>. \ud83d\ude0e</p> <p>Roughly all the docs have been rewritten to use <code>Annotated</code> as the main way to declare parameters and dependencies. All the examples in the docs now include a version with <code>Annotated</code> and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80</p> <p>The key updated docs are:</p> <ul> <li>Python Types Intro:<ul> <li>Type Hints with Metadata Annotations.</li> </ul> </li> <li>Tutorial:<ul> <li>Query Parameters and String Validations - Additional validation<ul> <li>Advantages of <code>Annotated</code></li> </ul> </li> <li>Path Parameters and Numeric Validations - Order the parameters as you need, tricks<ul> <li>Better with <code>Annotated</code></li> </ul> </li> <li>Dependencies - First Steps - Share <code>Annotated</code> dependencies</li> </ul> </li> </ul> <p>Special thanks to @nzig for the core implementation and to @adriangb for the inspiration and idea with Xpresso! \ud83d\ude80</p>"},{"location":"release-notes/#features_16","title":"Features","text":"<ul> <li>\u2728Add support for PEP-593 <code>Annotated</code> for specifying dependencies and parameters. PR #4871 by @nzig.</li> </ul>"},{"location":"release-notes/#docs_37","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak tip recommending <code>Annotated</code> in docs. PR #9270 by @khulnasoft.</li> <li>\ud83d\udcdd Update order of examples, latest Python version first, and simplify version tab names. PR #9269 by @khulnasoft.</li> <li>\ud83d\udcdd Update all docs to use <code>Annotated</code> as the main recommendation, with new examples and tests. PR #9268 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0941","title":"0.94.1","text":""},{"location":"release-notes/#fixes_18","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix types for lifespan, upgrade Starlette to 0.26.1. PR #9245 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0940","title":"0.94.0","text":""},{"location":"release-notes/#upgrades_16","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade python-multipart to support 0.0.6. PR #9212 by @musicinmybrain.</li> <li>\u2b06\ufe0f Upgrade Starlette version, support new <code>lifespan</code> with state. PR #9239 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_38","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Sentry link in docs. PR #9218 by @smeubank.</li> </ul>"},{"location":"release-notes/#translations_38","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/history-design-future.md</code>. PR #5986 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_45","title":"Internal","text":"<ul> <li>\u2795 Add <code>pydantic</code> to PyPI classifiers. PR #5914 by @yezz123.</li> <li>\u2b06 Bump black from 22.10.0 to 23.1.0. PR #5953 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR #6027 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR #6034 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5709 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0930","title":"0.93.0","text":""},{"location":"release-notes/#features_17","title":"Features","text":"<ul> <li>\u2728 Add support for <code>lifespan</code> async context managers (superseding <code>startup</code> and <code>shutdown</code> events). Initial PR #2944 by @uSpike.</li> </ul> <p>Now, instead of using independent <code>startup</code> and <code>shutdown</code> events, you can define that logic in a single function with <code>yield</code> decorated with <code>@asynccontextmanager</code> (an async context manager).</p> <p>For example:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Note: This is the recommended way going forward, instead of using <code>startup</code> and <code>shutdown</code> events.</p> <p>Read more about it in the new docs: Advanced User Guide: Lifespan Events.</p>"},{"location":"release-notes/#docs_39","title":"Docs","text":"<ul> <li>\u270f Fix formatting in <code>docs/en/docs/tutorial/metadata.md</code> for <code>ReDoc</code>. PR #6005 by @eykamp.</li> </ul>"},{"location":"release-notes/#translations_39","title":"Translations","text":"<ul> <li>\ud83c\udf10 Tamil translations - initial setup. PR #5564 by @gusty1g.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #9221 by @axel584.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/debugging.md</code>. PR #9175 by @frabc.</li> <li>\ud83c\udf10 Initiate Armenian translation setup. PR #5844 by @har8.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/manually.md</code>. PR #3693 by @rjNemo.</li> </ul>"},{"location":"release-notes/#internal_46","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update translation bot messages. PR #9206 by @khulnasoft.</li> <li>\ud83d\udc77 Update translations bot to use Discussions, and notify when a PR is done. PR #9183 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors-badges. PR #9182 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9181 by @github-actions[bot].</li> <li>\ud83d\udd0a Log GraphQL errors in ReadyAPI People, because it returns 200, with a payload with an error. PR #9171 by @khulnasoft.</li> <li>\ud83d\udc9a Fix/workaround GitHub Actions in Docker with git for ReadyAPI People. PR #9169 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor ReadyAPI Experts to use only discussions now that questions are migrated. PR #9165 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #6025 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade and re-enable installing Cligenius-CLI. PR #6008 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0920","title":"0.92.0","text":"<p>\ud83d\udea8 This is a security fix. Please upgrade as soon as possible.</p>"},{"location":"release-notes/#upgrades_17","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.25.0. PR #5996 by @khulnasoft.<ul> <li>This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.</li> <li>Only applications using forms (e.g. file uploads) could be affected.</li> <li>For most cases, upgrading won't have any breaking changes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0910","title":"0.91.0","text":""},{"location":"release-notes/#upgrades_18","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>0.24.0</code> and refactor internals for compatibility. PR #5985 by @khulnasoft.<ul> <li>This can solve nuanced errors when using middlewares. Before Starlette <code>0.24.0</code>, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks @adriangb! Starlette PR #2017). Now the middleware class instances are created once, right before the first request (the first time the app is called).</li> <li>If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.</li> </ul> </li> </ul>"},{"location":"release-notes/#0901","title":"0.90.1","text":""},{"location":"release-notes/#upgrades_19","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette range to allow 0.23.1. PR #5980 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_40","title":"Docs","text":"<ul> <li>\u270f Tweak wording to clarify <code>docs/en/docs/project-generation.md</code>. PR #5930 by @chandra-deb.</li> <li>\u270f Update Pydantic GitHub URLs. PR #5952 by @yezz123.</li> <li>\ud83d\udcdd Add opinion from Cisco. PR #5981 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_40","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/cookie-params.md</code>. PR #5890 by @bnzone.</li> </ul>"},{"location":"release-notes/#internal_47","title":"Internal","text":"<ul> <li>\u270f Update <code>zip-docs.sh</code> internal script, remove extra space. PR #5931 by @JuanPerdomo00.</li> </ul>"},{"location":"release-notes/#0900","title":"0.90.0","text":""},{"location":"release-notes/#upgrades_20","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette from 0.22.0 to 0.23.0. Initial PR #5739 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_41","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add article \"Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b\" to External Links. PR #5496 by @Leon0824.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5954 by @github-actions[bot].</li> <li>\ud83d\udcdd Micro-tweak help docs. PR #5960 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to direct to GitHub Discussions. PR #5948 by @khulnasoft.</li> <li>\ud83d\udcdd Recommend GitHub Discussions for questions. PR #5944 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_41","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #5898 by @simatheone.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/help-readyapi.md</code>. PR #5970 by @khulnasoft.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/static-files.md</code>. PR #5858 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/encoder.md</code>. PR #5525 by @felipebpl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #5870 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_48","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ubuntu version for docs workflow. PR #5971 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges. PR #5943 by @khulnasoft.</li> <li>\u2728 Compute ReadyAPI Experts including GitHub Discussions. PR #5941 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade isort and update pre-commit. PR #5940 by @khulnasoft.</li> <li>\ud83d\udd27 Add template for questions in Discussions. PR #5920 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor Budget Insight to Powens. PR #5916 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Sponsors badge data. PR #5915 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0891","title":"0.89.1","text":""},{"location":"release-notes/#fixes_19","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ignore Response classes on return annotation. PR #5855 by @Kludex. See the new docs in the PR below.</li> </ul>"},{"location":"release-notes/#docs_42","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR #5873 by @khulnasoft. New docs at Response Model - Return Type: Other Return Type Annotations.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI lambda container: serverless simplified. PR #5784 by @rafrasenberg.</li> </ul>"},{"location":"release-notes/#translations_42","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/first_steps.md</code>. PR #5691 by @Kadermiyanyedi.</li> </ul>"},{"location":"release-notes/#0890","title":"0.89.0","text":""},{"location":"release-notes/#features_18","title":"Features","text":"<ul> <li>\u2728 Add support for function return type annotations to declare the <code>response_model</code>. Initial PR #1436 by @uriyyo.</li> </ul> <p>Now you can declare the return type / <code>response_model</code> in the function return type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use the return type annotation to perform:</p> <ul> <li>Data validation</li> <li>Automatic documentation<ul> <li>It could power automatic client generators</li> </ul> </li> <li>Data filtering</li> </ul> <p>Before this version it was only supported via the <code>response_model</code> parameter.</p> <p>Read more about it in the new docs: Response Model - Return Type.</p>"},{"location":"release-notes/#docs_43","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Authorization on ReadyAPI with Casbin. PR #5712 by @Xhy-5000.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #5785 by @Kingdageek.</li> <li>\u270f Fix typo in <code>docs/en/docs/deployment/concepts.md</code>. PR #5824 by @kelbyfaessler.</li> </ul>"},{"location":"release-notes/#translations_43","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-people.md</code>. PR #5577 by @Xewus.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/benchmarks.md</code>. PR #4269 by @15027668g.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/cors.md</code>. PR #3764 by @NinaHwang.</li> </ul>"},{"location":"release-notes/#internal_49","title":"Internal","text":"<ul> <li>\u2b06 Update coverage[toml] requirement from &lt;7.0,&gt;=6.5.0 to &gt;=6.5.0,&lt;8.0. PR #5801 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.19.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.21.0 for development. PR #5795 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.24.3. PR #5842 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5825 by @github-actions[bot].</li> <li>\u2b06 Bump types-ujson from 5.5.0 to 5.6.0.0. PR #5735 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.2 to 1.6.4. PR #5750 by @dependabot[bot].</li> <li>\ud83d\udc77 Add GitHub Action gate/check. PR #5492 by @webknjaz.</li> <li>\ud83d\udd27 Update sponsors, add Svix. PR #5848 by @khulnasoft.</li> <li>\ud83d\udd27 Remove Doist sponsor. PR #5847 by @khulnasoft.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;=1.4.41,&gt;=1.3.18 to &gt;=1.3.18,&lt;1.4.43. PR #5540 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #5757 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #5793 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2. PR #5714 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5722 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, disable course bundle. PR #5713 by @khulnasoft.</li> <li>\u2b06 Update cligenius[all] requirement from &lt;0.7.0,&gt;=0.6.1 to &gt;=0.6.1,&lt;0.8.0. PR #5639 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0880","title":"0.88.0","text":""},{"location":"release-notes/#upgrades_21","title":"Upgrades","text":"<ul> <li>\u2b06 Bump Starlette to version <code>0.22.0</code> to fix bad encoding for query parameters in new <code>TestClient</code>. PR #5659 by @azogue.</li> </ul>"},{"location":"release-notes/#docs_44","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in docs for <code>docs/en/docs/advanced/middleware.md</code>. PR #5376 by @rifatrakib.</li> </ul>"},{"location":"release-notes/#translations_44","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/docker.md</code>. PR #5663 by @ayr-ton.</li> </ul>"},{"location":"release-notes/#internal_50","title":"Internal","text":"<ul> <li>\ud83d\udc77 Tweak build-docs to improve CI performance. PR #5699 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5566 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Ruff. PR #5698 by @khulnasoft.</li> <li>\ud83d\udc77 Remove pip cache for Smokeshow as it depends on a requirements.txt. PR #5700 by @khulnasoft.</li> <li>\ud83d\udc9a Fix pip cache for Smokeshow. PR #5697 by @khulnasoft.</li> <li>\ud83d\udc77 Fix and tweak CI cache handling. PR #5696 by @khulnasoft.</li> <li>\ud83d\udc77 Update <code>setup-python</code> action in tests to use new caching feature. PR #5680 by @madkinsz.</li> <li>\u2b06 Bump black from 22.8.0 to 22.10.0. PR #5569 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0870","title":"0.87.0","text":"<p>Highlights of this release:</p> <ul> <li>Upgraded Starlette<ul> <li>Now the <code>TestClient</code> is based on HTTPX instead of Requests. \ud83d\ude80</li> <li>There are some possible breaking changes in the <code>TestClient</code> usage, but @Kludex built bump-testclient to help you automatize migrating your tests. Make sure you are using Git and that you can undo any unnecessary changes (false positive changes, etc) before using <code>bump-testclient</code>.</li> </ul> </li> <li>New WebSocketException (and docs), re-exported from Starlette.</li> <li>Upgraded and relaxed dependencies for package extras <code>all</code> (including new Uvicorn version), when you install <code>\"readyapi[all]\"</code>.</li> <li>New docs about how to Help Maintain ReadyAPI.</li> </ul>"},{"location":"release-notes/#features_19","title":"Features","text":"<ul> <li>\u2b06\ufe0f Upgrade and relax dependencies for extras \"all\". PR #5634 by @khulnasoft.</li> <li>\u2728 Re-export Starlette's <code>WebSocketException</code> and add it to docs. PR #5629 by @khulnasoft.</li> <li>\ud83d\udcdd Update references to Requests for tests to HTTPX, and add HTTPX to extras. PR #5628 by @khulnasoft.</li> <li>\u2b06 Upgrade Starlette to <code>0.21.0</code>, including the new <code>TestClient</code> based on HTTPX. PR #5471 by @pawelrubin.</li> </ul>"},{"location":"release-notes/#docs_45","title":"Docs","text":"<ul> <li>\u270f\ufe0f Tweak Help ReadyAPI from PR review after merging. PR #5633 by @khulnasoft.</li> <li>\u270f\ufe0f  Clarify docs on CORS. PR #5627 by @paxcodes.</li> <li>\ud83d\udcdd Update Help ReadyAPI: Help Maintain ReadyAPI. PR #5632 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_45","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix highlight lines for Japanese translation for <code>docs/tutorial/query-params.md</code>. PR #2969 by @ftnext.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/additional-status-code.md</code>. PR #5477 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms-and-files.md</code>. PR #5579 by @batlopes.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/websockets.md</code>. PR #4983 by @xryuseix.</li> </ul>"},{"location":"release-notes/#internal_51","title":"Internal","text":"<ul> <li>\u2728 Use Ruff for linting. PR #5630 by @khulnasoft.</li> <li>\ud83d\udee0 Add Arabic issue number to Notify Translations GitHub Action. PR #5610 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #5609 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.1. PR #5603 by @dependabot[bot].</li> <li>\ud83d\udcdd Update coverage badge to use Samuel Colvin's Smokeshow. PR #5585 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0860","title":"0.86.0","text":""},{"location":"release-notes/#features_20","title":"Features","text":"<ul> <li>\u2b06 Add Python 3.11 to the officially supported versions. PR #5587 by @khulnasoft.</li> <li>\u2705 Enable tests for Python 3.11. PR #4881 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_20","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Close FormData (uploaded files) after the request is done. PR #5465 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_46","title":"Docs","text":"<ul> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #5584 by @vivekashok1221.</li> </ul>"},{"location":"release-notes/#translations_46","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update wording in Chinese translation for <code>docs/zh/docs/python-types.md</code>. PR #5416 by @supercaizehua.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/index.md</code>. PR #5336 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3846 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_52","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update ReadyAPI People to exclude bots: pre-commit-ci, dependabot. PR #5586 by @khulnasoft.</li> <li>\ud83c\udfa8 Format OpenAPI JSON in <code>test_starlette_exception.py</code>. PR #5379 by @iudeen.</li> <li>\ud83d\udc77 Switch from Codecov to Smokeshow plus pytest-cov to pure coverage for internal tests. PR #5583 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5571 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0852","title":"0.85.2","text":""},{"location":"release-notes/#docs_47","title":"Docs","text":"<ul> <li>\u270f Fix grammar and add helpful links to dependencies in <code>docs/en/docs/async.md</code>. PR #5432 by @pamelafox.</li> <li>\u270f Fix broken link in <code>alternatives.md</code>. PR #5455 by @su-shubham.</li> <li>\u270f Fix typo in docs about contributing, for compatibility with <code>pip</code> in Zsh. PR #5523 by @zhangbo2012.</li> <li>\ud83d\udcdd Fix typo in docs with examples for Python 3.10 instead of 3.9. PR #5545 by @feliciss.</li> </ul>"},{"location":"release-notes/#translations_47","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #4934 by @batlopes.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #4971 by @Zssaer.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/deta.md</code>. PR #3692 by @rjNemo.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #5255 by @hjlarry.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #4999 by @Zssaer.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/wsgi.md</code>. PR #4505 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-multiple-params.md</code>. PR #4111 by @lbmendes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-params-numeric-validations.md</code>. PR #4099 by @lbmendes.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/versions.md</code>. PR #3690 by @rjNemo.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/help-readyapi.md</code>. PR #2233 by @JulianMaurin.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/tutorial/security/first-steps.md</code>. PR #5530 by @yuki1sntSnow.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-status-code.md</code>. PR #4922 by @batlopes.</li> <li>\ud83d\udd27 Add config for Tamil translations. PR #5563 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_53","title":"Internal","text":"<ul> <li>\u2b06 Bump internal dependency mypy from 0.971 to 0.982. PR #5541 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.3 to 1.2.4. PR #5507 by @dependabot[bot].</li> <li>\u2b06 Bump internal dependency types-ujson from 5.4.0 to 5.5.0. PR #5537 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.23.0 to 2.24.0. PR #5508 by @dependabot[bot].</li> <li>\u2b06 Update internal dependency pytest-cov requirement from &lt;4.0.0,&gt;=2.12.0 to &gt;=2.12.0,&lt;5.0.0. PR #5539 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5536 by @pre-commit-ci[bot].</li> <li>\ud83d\udc1b Fix internal Trio test warnings. PR #5547 by @samuelcolvin.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5408 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Cligenius to include Rich in scripts for docs. PR #5502 by @khulnasoft.</li> <li>\ud83d\udc1b Fix calling <code>mkdocs</code> for languages as a subprocess to fix/enable MkDocs Material search plugin. PR #5501 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0851","title":"0.85.1","text":""},{"location":"release-notes/#fixes_21","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for strings in OpenAPI status codes: <code>default</code>, <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, <code>5XX</code>. PR #5187 by @JarroVGIT.</li> </ul>"},{"location":"release-notes/#docs_48","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add WayScript x ReadyAPI Tutorial to External Links section. PR #5407 by @moneeka.</li> </ul>"},{"location":"release-notes/#internal_54","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5447 by @github-actions[bot].</li> <li>\ud83d\udd27 Disable Material for MkDocs search plugin. PR #5495 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore Trio warning in tests for CI. PR #5483 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0850","title":"0.85.0","text":""},{"location":"release-notes/#features_21","title":"Features","text":"<ul> <li>\u2b06 Upgrade version required of Starlette from <code>0.19.1</code> to <code>0.20.4</code>. Initial PR #4820 by @Kludex.<ul> <li>This includes several bug fixes in Starlette.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Uvicorn max version in public extras: all. From <code>&gt;=0.12.0,&lt;0.18.0</code> to <code>&gt;=0.12.0,&lt;0.19.0</code>. PR #5401 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_55","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade dependencies for doc and dev internal extras: Cligenius, Uvicorn. PR #5400 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade test dependencies: Black, HTTPX, databases, types-ujson. PR #5399 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade mypy and tweak internal type annotations. PR #5398 by @khulnasoft.</li> <li>\ud83d\udd27 Update test dependencies, upgrade Pytest, move dependencies from dev to test. PR #5396 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0840","title":"0.84.0","text":""},{"location":"release-notes/#breaking-changes_3","title":"Breaking Changes","text":"<p>This version of ReadyAPI drops support for Python 3.6. \ud83d\udd25 Please upgrade to a supported version of Python (3.7 or above), Python 3.6 reached the end-of-life a long time ago. \ud83d\ude05\u2620</p> <ul> <li>\ud83d\udd27 Update package metadata, drop support for Python 3.6, move build internals from Flit to Hatch. PR #5240 by @ofek.</li> </ul>"},{"location":"release-notes/#0830","title":"0.83.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_22","title":"Features","text":"<ul> <li>\u2728 Add support in <code>jsonable_encoder</code> for include and exclude with dataclasses. PR #4923 by @DCsunset.</li> </ul>"},{"location":"release-notes/#fixes_22","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>RuntimeError</code> raised when <code>HTTPException</code> has a status code with no content. PR #5365 by @iudeen.</li> <li>\ud83d\udc1b Fix empty reponse body when default <code>status_code</code> is empty but the a <code>Response</code> parameter with <code>response.status_code</code> is set. PR #5360 by @tmeckel.</li> </ul>"},{"location":"release-notes/#docs_49","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>SECURITY.md</code>. PR #5377 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_56","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5352 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0820","title":"0.82.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_23","title":"Features","text":"<ul> <li>\u2728 Export <code>WebSocketState</code> in <code>readyapi.websockets</code>. PR #4376 by @matiuszka.</li> <li>\u2728 Support Python internal description on Pydantic model's docstring. PR #3032 by @Kludex.</li> <li>\u2728 Update <code>ORJSONResponse</code> to support non <code>str</code> keys and serializing Numpy arrays. PR #3892 by @baby5.</li> </ul>"},{"location":"release-notes/#fixes_23","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Allow exit code for dependencies with <code>yield</code> to always execute, by removing capacity limiter for them, to e.g. allow closing DB connections without deadlocks. PR #5122 by @adriangb.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action: set HTTPX timeout for GraphQL query request. PR #5222 by @iudeen.</li> <li>\ud83d\udc1b Make sure a parameter defined as required is kept required in OpenAPI even if defined as optional in another dependency. PR #4319 by @cd17822.</li> <li>\ud83d\udc1b Fix support for path parameters in WebSockets. PR #3879 by @davidbrochart.</li> </ul>"},{"location":"release-notes/#docs_50","title":"Docs","text":"<ul> <li>\u270f Update Hypercorn link, now pointing to GitHub. PR #5346 by @baconfield.</li> <li>\u270f Tweak wording in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #3698 by @pfackeldey.</li> <li>\ud83d\udcdd Add note about Python 3.10 <code>X | Y</code> operator in explanation about Response Models. PR #5307 by @MendyLanda.</li> <li>\ud83d\udcdd Add link to New Relic article: \"How to monitor ReadyAPI application performance using Python agent\". PR #5260 by @sjyothi54.</li> <li>\ud83d\udcdd Update docs for <code>ORJSONResponse</code> with details about improving performance. PR #2615 by @falkben.</li> <li>\ud83d\udcdd Add docs for creating a custom Response class. PR #5331 by @khulnasoft.</li> <li>\ud83d\udcdd Add tip about using alias for form data fields. PR #5329 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_48","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/features.md</code>. PR #5315 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/request-files.md</code>. PR #4529 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/encoder.md</code>. PR #4969 by @Zssaer.</li> <li>\ud83c\udf10 Fix MkDocs file line for Portuguese translation of <code>background-task.md</code>. PR #5242 by @ComicShrimp.</li> </ul>"},{"location":"release-notes/#internal_57","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5347 by @github-actions[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.22.0 to 2.23.0. PR #5321 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5318 by @pre-commit-ci[bot].</li> <li>\u270f Fix a small code highlight line error. PR #5256 by @hjlarry.</li> <li>\u267b Internal small refactor, move <code>operation_id</code> parameter position in delete method for consistency with the code. PR #4474 by @hiel.</li> <li>\ud83d\udd27 Update sponsors, disable ImgWhale. PR #5338 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0810","title":"0.81.0","text":""},{"location":"release-notes/#features_24","title":"Features","text":"<ul> <li>\u2728 Add ReDoc <code>&lt;noscript&gt;</code> warning when JS is disabled. PR #5074 by @evroon.</li> <li>\u2728 Add support for <code>FrozenSet</code> in parameters (e.g. query). PR #2938 by @juntatalor.</li> <li>\u2728 Allow custom middlewares to raise <code>HTTPException</code>s and propagate them. PR #2036 by @ghandic.</li> <li>\u2728 Preserve <code>json.JSONDecodeError</code> information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR #4057 by @UKnowWhoIm.</li> </ul>"},{"location":"release-notes/#fixes_24","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> for dataclasses with pydantic-compatible fields. PR #3607 by @himbeles.</li> <li>\ud83d\udc1b Fix support for extending <code>openapi_extras</code> with parameter lists. PR #4267 by @orilevari.</li> </ul>"},{"location":"release-notes/#docs_51","title":"Docs","text":"<ul> <li>\u270f Fix a simple typo in <code>docs/en/docs/python-types.md</code>. PR #5193 by @GlitchingCore.</li> <li>\u270f Fix typos in <code>tests/test_schema_extra_examples.py</code>. PR #5126 by @supraaxdd.</li> <li>\u270f Fix typos in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #5142 by @invisibleroads.</li> <li>\ud83d\udcdd Add step about upgrading pip in the venv to avoid errors when installing dependencies <code>docs/en/docs/contributing.md</code>. PR #5181 by @edisnake.</li> <li>\u270f Reword and clarify text in tutorial <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #5169 by @papb.</li> <li>\u270f Fix minor typo in <code>docs/en/docs/features.md</code>. PR #5206 by @OtherBarry.</li> <li>\u270f Fix minor typos in <code>docs/en/docs/async.md</code>. PR #5125 by @Ksenofanex.</li> <li>\ud83d\udcdd Add external link to docs: \"Readyapi, Docker(Docker compose) and Postgres\". PR #5033 by @krishnardt.</li> <li>\ud83d\udcdd Simplify example for docs for Additional Responses, remove unnecessary <code>else</code>. PR #4693 by @adriangb.</li> <li>\ud83d\udcdd Update docs, compare enums with identity instead of equality. PR #4905 by @MicaelJarniac.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #4886 by @MicaelJarniac.</li> <li>\ud83c\udfa8 Fix syntax highlighting in docs for OpenAPI Callbacks. PR #4368 by @xncbf.</li> <li>\u270f Reword confusing sentence in docs file <code>typo-fix-path-params-numeric-validations.md</code>. PR #3219 by @ccrenfroe.</li> <li>\ud83d\udcdd Update docs for handling HTTP Basic Auth with <code>secrets.compare_digest()</code> to account for non-ASCII characters. PR #3536 by @lewoudar.</li> <li>\ud83d\udcdd Update docs for testing, fix examples with relative imports. PR #5302 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_49","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/index.md</code>. PR #5289 by @impocode.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/versions.md</code>. PR #4985 by @emp7yhead.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-params.md</code>. PR #4921 by @batlopes.</li> <li>\ud83c\udf10 Update <code>ko/mkdocs.yml</code> for a missing link. PR #5020 by @dalinaum.</li> </ul>"},{"location":"release-notes/#internal_58","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR #5258 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5196 by @pre-commit-ci[bot].</li> <li>\ud83d\udd25 Delete duplicated tests in <code>tests/test_tutorial/test_sql_databases/test_sql_databases.py</code>. PR #5040 by @raccoonyy.</li> <li>\u267b Simplify internal RegEx in <code>readyapi/utils.py</code>. PR #5057 by @pylounge.</li> <li>\ud83d\udd27 Fix Type hint of <code>auto_error</code> which does not need to be <code>Optional[bool]</code>. PR #4933 by @DavidKimDY.</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #4605 by @michaeloliverx.</li> <li>\u267b Change a <code>dict()</code> for <code>{}</code> in <code>readyapi/utils.py</code>. PR #3138 by @ShahriyarR.</li> <li>\u267b Move internal variable for errors in <code>jsonable_encoder</code> to put related code closer. PR #4560 by @GuilleQP.</li> <li>\u267b Simplify conditional assignment in <code>readyapi/dependencies/utils.py</code>. PR #4597 by @cikay.</li> <li>\u2b06 Upgrade version pin accepted for Flake8, for internal code, to <code>flake8 &gt;=3.8.3,&lt;6.0.0</code>. PR #4097 by @jamescurtin.</li> <li>\ud83c\udf71 Update Jina banner, fix typo. PR #5301 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0800","title":"0.80.0","text":""},{"location":"release-notes/#breaking-changes-fixes","title":"Breaking Changes - Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>response_model</code> not invalidating <code>None</code>. PR #2725 by @hukkin.</li> </ul> <p>If you are using <code>response_model</code> with some type that doesn't include <code>None</code> but the function is returning <code>None</code>, it will now raise an internal server error, because you are returning invalid data that violates the contract in <code>response_model</code>. Before this release it would allow breaking that contract returning <code>None</code>.</p> <p>For example, if you have an app like this:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n</code></pre> <p>...calling the path <code>/items/invalidnone</code> will raise an error, because <code>None</code> is not a valid type for the <code>response_model</code> declared with <code>Item</code>.</p> <p>You could also be implicitly returning <code>None</code> without realizing, for example:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    if flag:\n        return {\"name\": \"foo\"}\n    # if flag is False, at this point the function will implicitly return None\n</code></pre> <p>If you have path operations using <code>response_model</code> that need to be allowed to return <code>None</code>, make it explicit in <code>response_model</code> using <code>Union[Something, None]</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Union[Item, None])\ndef get_invalid_none():\n    return None\n</code></pre> <p>This way the data will be correctly validated, you won't have an internal server error, and the documentation will also reflect that this path operation could return <code>None</code> (or <code>null</code> in JSON).</p>"},{"location":"release-notes/#fixes_25","title":"Fixes","text":"<ul> <li>\u2b06 Upgrade Swagger UI copy of <code>oauth2-redirect.html</code> to include fixes for flavors of authorization code flows in Swagger UI. PR #3439 initial PR by @koonpeng.</li> <li>\u267b Strip empty whitespace from description extracted from docstrings. PR #2821 by @and-semakin.</li> <li>\ud83d\udc1b Fix cached dependencies when using a dependency in <code>Security()</code> and other places (e.g. <code>Depends()</code>) with different OAuth2 scopes. PR #2945 by @laggardkernel.</li> <li>\ud83c\udfa8 Update type annotations for <code>response_model</code>, allow things like <code>Union[str, None]</code>. PR #5294 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_50","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix typos in German translation for <code>docs/de/docs/features.md</code>. PR #4533 by @0xflotus.</li> <li>\ud83c\udf10 Add missing navigator for <code>encoder.md</code> in Korean translation. PR #5238 by @joonas-yoon.</li> <li>(Empty PR merge by accident) #4913.</li> </ul>"},{"location":"release-notes/#0791","title":"0.79.1","text":""},{"location":"release-notes/#fixes_26","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> using <code>include</code> and <code>exclude</code> parameters for non-Pydantic objects. PR #2606 by @xaviml.</li> <li>\ud83d\udc1b Fix edge case with repeated aliases names not shown in OpenAPI. PR #2351 by @klaa97.</li> <li>\ud83d\udcdd Add misc dependency installs to tutorial docs. PR #2126 by @TeoZosa.</li> </ul>"},{"location":"release-notes/#docs_52","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note giving credit for illustrations to Ketrina Thompson. PR #5284 by @khulnasoft.</li> <li>\u270f Fix typo in <code>python-types.md</code>. PR #5116 by @Kludex.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #5007 by @atiabbz.</li> <li>\ud83d\udcdd Remove unneeded Django/Flask references from async topic intro. PR #5280 by @carltongibson.</li> <li>\u2728 Add illustrations for Concurrent burgers and Parallel burgers. PR #5277 by @khulnasoft. Updated docs at: Concurrency and Burgers.</li> </ul>"},{"location":"release-notes/#translations_51","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-params.md</code>. PR #4775 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/first-steps.md</code>. PR #4954 by @FLAIR7.</li> <li>\ud83c\udf10 Add translation for <code>docs/zh/docs/advanced/response-cookies.md</code>. PR #4638 by @zhangbo2012.</li> <li>\ud83c\udf10  Add French translation for <code>docs/fr/docs/deployment/index.md</code>. PR #3689 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>tutorial/handling-errors.md</code>. PR #4769 by @frnsimoes.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/history-design-future.md</code>. PR #3451 by @rjNemo.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/background-tasks.md</code>. PR #4854 by @AdmiralDesu.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/security/first-steps.md</code>. PR #3841 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/nosql-databases.md</code>. PR #4205 by @sUeharaE4.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/index.md</code>. PR #4705 by @bas-baskara.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/index.md</code> and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi.</li> </ul>"},{"location":"release-notes/#internal_59","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update Jina sponsorship. PR #5283 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsorship. PR #5272 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0790","title":"0.79.0","text":""},{"location":"release-notes/#fixes-breaking-changes","title":"Fixes - Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @khulnasoft.<ul> <li>Setting <code>status_code</code> to <code>204</code>, <code>304</code>, or any code below <code>200</code> (1xx) will remove the body from the response.</li> <li>This fixes an error in Uvicorn that otherwise would be thrown: <code>RuntimeError: Response content longer than Content-Length</code>.</li> <li>This removes <code>readyapi.openapi.constants.STATUS_CODES_WITH_NO_BODY</code>, it is replaced by a function in utils.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_52","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh.</li> <li>\ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @khulnasoft.</li> <li>\ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/index.md</code>. PR #5043 by @wakabame.</li> <li>\ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #5024 by @Valaraucoo.</li> </ul>"},{"location":"release-notes/#internal_60","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot commit message. PR #5156 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors badge configs. PR #5155 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5154 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsor badges. PR #5151 by @khulnasoft.</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot].</li> <li>\ud83d\udc77 Add Dependabot. PR #5128 by @khulnasoft.</li> <li>\u267b\ufe0f Move from <code>Optional[X]</code> to <code>Union[X, None]</code> for internal utils. PR #5124 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0780","title":"0.78.0","text":""},{"location":"release-notes/#features_25","title":"Features","text":"<ul> <li> <p>\u2728 Add support for omitting <code>...</code> as default value when declaring required parameters with:</p> </li> <li> <p><code>Path()</code></p> </li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>New docs at Tutorial - Query Parameters and String Validations - Make it required. PR #4906 by @khulnasoft.</p> <p>Up to now, declaring a required parameter while adding additional validation or metadata needed using <code>...</code> (Ellipsis).</p> <p>For example:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(default=..., gt=0),\n    query: str = Query(default=..., max_length=10),\n    session: str = Cookie(default=..., min_length=3),\n    x_trace: str = Header(default=..., title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>...all these parameters are required because the default value is <code>...</code> (Ellipsis).</p> <p>But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required.</p> <p>\u2728 For example, this is now supported:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: str = Query(max_length=10),\n    session: str = Cookie(min_length=3),\n    x_trace: str = Header(title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>To declare parameters as optional (not required), you can set a default value as always, for example using <code>None</code>:</p> <pre><code>from typing import Union\nfrom readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: Union[str, None] = Query(default=None, max_length=10),\n    session: Union[str, None] = Cookie(default=None, min_length=3),\n    x_trace: Union[str, None] = Header(default=None, title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"release-notes/#docs_53","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs recommending <code>Union</code> over <code>Optional</code> and migrate source examples. New docs at Python Types Intro - Using <code>Union</code> or <code>Optional</code>. PR #4908 by @khulnasoft.</li> <li>\ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz.</li> <li>\ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord.</li> <li>\u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust.</li> <li>\u270f Fix links to Pydantic docs. PR #4670 by @kinuax.</li> <li>\ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin.</li> <li>\ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With ReadyAPI And React. PR #4778 by @jbrocher.</li> <li>\ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs.</li> </ul>"},{"location":"release-notes/#translations_53","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix code examples in Japanese translation for <code>docs/ja/docs/tutorial/testing.md</code>. PR #4623 by @hirotoKirimaru.</li> </ul>"},{"location":"release-notes/#internal_61","title":"Internal","text":"<ul> <li>\u267b Refactor dict value extraction to minimize key lookups <code>readyapi/utils.py</code>. PR #3139 by @ShahriyarR.</li> <li>\u2705 Add tests for required nonable parameters and body fields. PR #4907 by @khulnasoft.</li> <li>\ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @khulnasoft.</li> <li>\ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp.</li> <li>\ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @khulnasoft.</li> <li>\ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @khulnasoft.</li> <li>\ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus.</li> </ul>"},{"location":"release-notes/#0771","title":"0.77.1","text":""},{"location":"release-notes/#upgrades_22","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_54","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem ReadyAPI Modul. PR #4624 by @fschuermeyer.</li> <li>\ud83d\udcdd Add external link: PyCharm Guide to ReadyAPI. PR #4512 by @mukulmantosh.</li> <li>\ud83d\udcdd Add external link to article: Building an API with ReadyAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev.</li> <li>\u270f Fix small typo in <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #4515 by @KikoIlievski.</li> </ul>"},{"location":"release-notes/#translations_54","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/tutorial/index.md</code>. PR #4516 by @MKaczkow.</li> <li>\u270f Fix typo in deployment. PR #4629 by @raisulislam541.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/help-readyapi.md</code>. PR #4583 by @mateusjs.</li> </ul>"},{"location":"release-notes/#internal_62","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0770","title":"0.77.0","text":""},{"location":"release-notes/#upgrades_23","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex.<ul> <li>When creating an explicit <code>JSONResponse</code> the <code>content</code> argument is now required.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_55","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link to article: Seamless ReadyAPI Configuration with ConfZ. PR #4414 by @silvanmelchior.</li> <li>\ud83d\udcdd Add external link to article: 5 Advanced Features of ReadyAPI You Should Try. PR #4436 by @kaustubhgupta.</li> <li>\u270f Reword to improve legibility of docs about <code>TestClient</code>. PR #4389 by @rgilton.</li> <li>\ud83d\udcdd Add external link to blog post about Kafka, ReadyAPI, and Ably. PR #4044 by @Ugbot.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #4875 by @wpyoga.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #4726 by @Prezu.</li> </ul>"},{"location":"release-notes/#translations_55","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update source example highlights for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #4237 by @caimaoy.</li> <li>\ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme.</li> <li>\u270f \ud83c\udf10 Fix typo in Portuguese translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #4722 by @CleoMenezesJr.</li> <li>\ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #4112 by @lbmendes.</li> <li>\ud83c\udf10 Fix French translation for <code>docs/tutorial/body.md</code>. PR #4332 by @Smlep.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/conditional-openapi.md</code>. PR #2631 by @sh0nk.</li> <li>\ud83c\udf10 Fix Japanese translation of <code>docs/ja/docs/tutorial/body.md</code>. PR #3062 by @a-takahashi223.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #2170 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/deta.md</code>. PR #4442 by @lsglucas.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/async.md</code>. PR #4036 by @Winand.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/body.md</code>. PR #3960 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Portuguese translation of <code>tutorial/extra-data-types.md</code>. PR #4077 by @luccasmmg.</li> <li>\ud83c\udf10 Update German translation for <code>docs/features.md</code>. PR #3905 by @jomue.</li> </ul>"},{"location":"release-notes/#0760","title":"0.76.0","text":""},{"location":"release-notes/#upgrades_24","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_63","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4847 by @github-actions[bot].</li> <li>\ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0752","title":"0.75.2","text":"<p>This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.</p>"},{"location":"release-notes/#fixes_27","title":"Fixes","text":"<ul> <li>\u2705 Fix new/recent tests with new fixed <code>ValidationError</code> JSON Schema. PR #4806 by @khulnasoft.</li> <li>\ud83d\udc1b Fix JSON Schema for <code>ValidationError</code> at field <code>loc</code>. PR #3810 by @dconathan.</li> <li>\ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex.</li> </ul>"},{"location":"release-notes/#upgrades_25","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @khulnasoft.</li> <li>\u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI (<code>/docs</code>) publicly to non-expert users. PR #4347 by @RAlanWright.</li> </ul>"},{"location":"release-notes/#internal_64","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0751","title":"0.75.1","text":""},{"location":"release-notes/#translations_56","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start Dutch translations. PR #4703 by @khulnasoft.</li> <li>\ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee.</li> <li>\u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza.</li> </ul>"},{"location":"release-notes/#internal_65","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4752 by @github-actions[bot].</li> <li>\u2796 Temporarily remove cligenius-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @khulnasoft.</li> <li>\ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4699 by @github-actions[bot].</li> <li>\ud83d\udc1b Fix ReadyAPI People generation to include missing file in commit. PR #4695 by @khulnasoft.</li> <li>\ud83d\udd27 Update Classiq sponsor links. PR #4688 by @khulnasoft.</li> <li>\ud83d\udd27 Add Classiq sponsor. PR #4671 by @khulnasoft.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @khulnasoft based on original PR #4626 by @hanxiao.</li> </ul>"},{"location":"release-notes/#0750","title":"0.75.0","text":""},{"location":"release-notes/#features_26","title":"Features","text":"<ul> <li>\u2728 Add support for custom <code>generate_unique_id_function</code> and docs for generating clients. New docs: Advanced - Generate Clients. PR #4650 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0741","title":"0.74.1","text":""},{"location":"release-notes/#features_27","title":"Features","text":"<ul> <li>\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0740","title":"0.74.0","text":""},{"location":"release-notes/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>\u2728 Update internal <code>AsyncExitStack</code> to fix context for dependencies with <code>yield</code>. PR #4575 by @khulnasoft.</li> </ul> <p>Dependencies with <code>yield</code> can now catch <code>HTTPException</code> and custom exceptions. For example:</p> <pre><code>async def get_database():\n    with Session() as session:\n        try:\n            yield session\n        except HTTPException:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n</code></pre> <p>After the dependency with <code>yield</code> handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal <code>ServerErrorMiddleware</code>.</p> <p>If you depended on exceptions not being received by dependencies with <code>yield</code>, and receiving an exception breaks the code after <code>yield</code>, you can use a block with <code>try</code> and <code>finally</code>:</p> <pre><code>async def do_something():\n    try:\n        yield something\n    finally:\n        some_cleanup()\n</code></pre> <p>...that way the <code>finally</code> block is run regardless of any exception that might happen.</p>"},{"location":"release-notes/#features_28","title":"Features","text":"<ul> <li>The same PR #4575 from above also fixes the <code>contextvars</code> context for the code before and after <code>yield</code>. This was the main objective of that PR.</li> </ul> <p>This means that now, if you set a value in a context variable before <code>yield</code>, the value would still be available after <code>yield</code> (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards.</p> <p>For example, this works correctly now:</p> <pre><code>from contextvars import ContextVar\nfrom typing import Any, Dict, Optional\n\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n</code></pre> <p>...before this change it would raise an error when resetting the context variable, because the <code>contextvars</code> context was different, because of the way it was implemented.</p> <p>Note: You probably don't need <code>contextvars</code>, and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's <code>g</code> semi-global variable.</p> <p>Technical Details: If you want to know more of the technical details you can check out the PR description #4575.</p>"},{"location":"release-notes/#internal_66","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @khulnasoft.</li> <li>\ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4502 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0730","title":"0.73.0","text":""},{"location":"release-notes/#features_29","title":"Features","text":"<ul> <li>\u2728 Add support for declaring <code>UploadFile</code> parameters without explicit <code>File()</code>. PR #4469 by @khulnasoft. New docs: Request Files - File Parameters with UploadFile.</li> <li>\u2728 Add support for tags with Enums. PR #4468 by @khulnasoft. New docs: Path Operation Configuration - Tags with Enums.</li> <li>\u2728 Allow hiding from OpenAPI (and Swagger UI) <code>Query</code>, <code>Cookie</code>, <code>Header</code>, and <code>Path</code> parameters. PR #3144 by @astraldawn. New docs: Query Parameters and String Validations - Exclude from OpenAPI.</li> </ul>"},{"location":"release-notes/#docs_56","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_28","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux.</li> <li>\ud83d\udc1b Prefer custom encoder over defaults if specified in <code>jsonable_encoder</code>. PR #2061 by @viveksunder.<ul> <li>\ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @khulnasoft.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_67","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Dropbase. PR #4465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0720","title":"0.72.0","text":""},{"location":"release-notes/#features_30","title":"Features","text":"<ul> <li>\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold. Here are the new docs: Configuring Swagger UI.</li> </ul>"},{"location":"release-notes/#docs_57","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_57","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/help-readyapi.md</code>. PR #3847 by @jaystone776.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #4195 by @kty4119.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/index.md</code>. PR #4245 by @MicroPanda123.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs\\tutorial\\path-operation-configuration.md</code>. PR #3312 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_68","title":"Internal","text":"<ul> <li>\ud83d\udd27 Enable MkDocs Material Insiders' <code>content.tabs.link</code>. PR #4399 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0710","title":"0.71.0","text":""},{"location":"release-notes/#features_31","title":"Features","text":"<ul> <li>\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @khulnasoft.<ul> <li>You can start with Python Types Intro, it explains what changes between different Python versions, in Python 3.9 and in Python 3.10.</li> <li>All the ReadyAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00.</li> </ul>"},{"location":"release-notes/#internal_69","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4354 by @github-actions[bot].</li> <li>\ud83d\udd27 Add ReadyAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @khulnasoft.</li> <li>\u2b06 Upgrade MkDocs Material and configs. PR #4385 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0701","title":"0.70.1","text":"<p>There's nothing interesting in this particular ReadyAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29</p>"},{"location":"release-notes/#fixes_29","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood.</li> </ul>"},{"location":"release-notes/#translations_58","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-forms-and-files.md</code>. PR #3744 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-files.md</code>. PR #3743 by @NinaHwang.</li> <li>\ud83c\udf10 Add portuguese translation for <code>docs/tutorial/query-params-str-validations.md</code>. PR #3965 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/response-status-code.md</code>. PR #3742 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/versions.md</code>. PR #4121 by @DevDae.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #4193 by @kimjaeyoonn.</li> <li>\ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @khulnasoft.</li> <li>\ud83d\udcdd Update <code>docs/tutorial/dependencies/classes-as-dependencies</code>: Add type of query parameters in a description of <code>Classes as dependencies</code>. PR #4015 by @0417taehyun.</li> <li>\ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/path-params.md</code>. PR #3548 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/query-params.md</code>. PR #3556 by @Smlep.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/python-types.md</code>. PR #3926 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_70","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4274 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0700","title":"0.70.0","text":"<p>This release just upgrades Starlette to the latest version, <code>0.16.0</code>, which includes several bug fixes and some small breaking changes.</p> <p>These last three consecutive releases are independent so that you can migrate gradually:</p> <ul> <li>First to ReadyAPI <code>0.68.2</code>, with no breaking changes, but upgrading all the sub-dependencies.</li> <li>Next to ReadyAPI <code>0.69.0</code>, which upgrades Starlette to <code>0.15.0</code>, with AnyIO support, and a higher chance of having breaking changes in your code.</li> <li>Finally to ReadyAPI <code>0.70.0</code>, just upgrading Starlette to the latest version <code>0.16.0</code> with additional bug fixes.</li> </ul> <p>This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728</p>"},{"location":"release-notes/#breaking-changes-upgrade","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @khulnasoft.</li> </ul> <p>Also upgrades the ranges of optional dependencies:</p> <ul> <li><code>\"jinja2 &gt;=2.11.2,&lt;4.0.0\"</code></li> <li><code>\"itsdangerous &gt;=1.1.0,&lt;3.0.0\"</code></li> </ul>"},{"location":"release-notes/#0690","title":"0.69.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_1","title":"Breaking Changes - Upgrade","text":"<p>This release adds support for Trio. \u2728</p> <p>It upgrades the version of Starlette to <code>0.15.0</code>, now based on AnyIO, and the internal async components in ReadyAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio.</p> <p>You can read the docs about running ReadyAPI with Trio using Hypercorn.</p> <p>This release also removes <code>graphene</code> as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry. You can read the new ReadyAPI with GraphQL docs.</p>"},{"location":"release-notes/#features_32","title":"Features","text":"<ul> <li>\u2728 Add support for Trio via AnyIO, upgrading Starlette to <code>0.15.0</code>. PR #3372 by @graingert.</li> <li>\u2796 Remove <code>graphene</code> as an optional dependency. PR #4007 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_58","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @khulnasoft.</li> <li>\u270f Fix typos in Deployment Guide. PR #3975 by @ghandic.</li> <li>\ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7.</li> <li>\ud83d\udcdd Add external link to article: Deploying ML Models as API Using ReadyAPI and Heroku. PR #3904 by @kaustubhgupta.</li> <li>\u270f Fix typo in file paths in <code>docs/en/docs/contributing.md</code>. PR #3752 by @NinaHwang.</li> <li>\u270f Fix a typo in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code> and <code>docs/en/docs/release-notes.md</code>. PR #3750 by @saintmalik.</li> <li>\u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/en/docs/help-readyapi.md</code>. PR #3760 by @jaystone776.</li> <li>\u270f Fix typo about file path in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #3285 by @HolyDorus.</li> <li>\u270f Re-word to clarify test client in <code>docs/en/docs/tutorial/testing.md</code>. PR #3382 by @Bharat123rox.</li> <li>\ud83d\udcdd  Fix incorrect highlighted code. PR #3325 by @paxcodes.</li> <li>\ud83d\udcdd Add external link to article: How-to deploy ReadyAPI app to Heroku. PR #3241 by @Jarmos-san.</li> <li>\u270f Fix typo (mistranslation) in <code>docs/en/docs/advanced/templates.md</code>. PR #3211 by @oerpli.</li> <li>\ud83d\udcdd Remove note about (now supported) feature from Swagger UI in <code>docs/en/docs/tutorial/request-files.md</code>. PR #2803 by @gsganden.</li> <li>\u270f Fix typo re-word in <code>docs/tutorial/handling-errors.md</code>. PR #2700 by @graue70.</li> </ul>"},{"location":"release-notes/#translations_59","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/readyapi-people.md</code>. PR #3848 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_71","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani.</li> <li>\u270f Fix link in Japanese docs for <code>docs/ja/docs/deployment/docker.md</code>. PR #3245 by @utamori.</li> <li>\ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert.</li> <li>\ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield.</li> <li>\ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0682","title":"0.68.2","text":"<p>This release has no breaking changes. \ud83c\udf89</p> <p>It upgrades the version ranges of sub-dependencies to allow applications using ReadyAPI to easily upgrade them.</p> <p>Soon there will be a new ReadyAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.</p>"},{"location":"release-notes/#features_33","title":"Features","text":"<ul> <li>\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis.</li> <li>\u2796 Do not require backports in Python &gt;= 3.7. PR #1880 by @FFY00.</li> <li>\u2b06 Upgrade required Python version to &gt;= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin.</li> <li>\u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_59","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @khulnasoft.</li> <li>\ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @khulnasoft.</li> <li>\ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_60","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/features.md</code>. PR #1950 by @ycd.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/benchmarks.md</code>. PR #2729 by @Telomeraz.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/index.md</code>. PR #1908 by @ycd.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/body.md</code>. PR #3671 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/docker.md</code>. PR #3694 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/path-params.md</code>. PR #3664 by @FelipeSilva93.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/https.md</code>. PR #3754 by @lsglucas.</li> <li>\ud83c\udf10 Add German translation for <code>docs/features.md</code>. PR #3699 by @mawassk.</li> </ul>"},{"location":"release-notes/#internal_72","title":"Internal","text":"<ul> <li>\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade development <code>autoflake</code>, supporting multi-line imports. PR #3988 by @khulnasoft.</li> <li>\u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3986 by @github-actions[bot].</li> <li>\ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic.</li> <li>\u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik.</li> <li>\u2728 Add Deepset Sponsorship. PR #3976 by @khulnasoft.</li> <li>\ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0681","title":"0.68.1","text":"<ul> <li>\u2728 Add support for <code>read_with_orm_mode</code>, to support SQLDev relationship attributes. PR #3757 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_61","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation of <code>docs/readyapi-people.md</code>. PR #3461 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #3492 by @jaystone776.</li> <li>\ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/sub-dependencies.md</code>. PR #3491 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/advanced/index.md</code>. PR #3460 by @ComicShrimp.</li> <li>\ud83c\udf10 Portuguese translation of <code>docs/async.md</code>. PR #1330 by @Serrones.</li> <li>\ud83c\udf10 Add French translation for <code>docs/async.md</code>. PR #3416 by @Smlep.</li> </ul>"},{"location":"release-notes/#internal_73","title":"Internal","text":"<ul> <li>\u2728 Add GitHub Action: Notify Translations. PR #3715 by @khulnasoft.</li> <li>\u2728 Update computation of ReadyAPI People and sponsors. PR #3714 by @khulnasoft.</li> <li>\u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @khulnasoft.</li> <li>\ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @khulnasoft.</li> <li>\u2795 Update docs library to include sources in Markdown. PR #3648 by @khulnasoft.</li> <li>\u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3642 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0680","title":"0.68.0","text":""},{"location":"release-notes/#features_34","title":"Features","text":"<ul> <li>\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation. New docs: ReadyAPI Path Operation Advanced Configuration - OpenAPI Extra. Initial PR #1922 by @edouardlp.</li> <li>\u2728 Add additional OpenAPI metadata parameters to <code>ReadyAPI</code> class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs. Initial PR #1812 by @dkreeft.</li> <li>\u2728 Add <code>description</code> parameter to all the security scheme classes, e.g. <code>APIKeyQuery(name=\"key\", description=\"A very cool API key\")</code>. PR #1757 by @hylkepostma.</li> <li>\u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @khulnasoft.</li> <li>\u2728 Import and re-export data structures from Starlette, used by Request properties, on <code>readyapi.datastructures</code>. Initial PR #1872 by @jamescurtin.</li> </ul>"},{"location":"release-notes/#docs_60","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight.</li> </ul>"},{"location":"release-notes/#translations_62","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/python-types.md</code>. PR #3039 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/index.md</code>. PR #3489 by @jaystone776.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/external-links.md</code>. PR #3036 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/global-dependencies.md</code>. PR #3493 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/versions.md</code>. PR #3618 by @lsglucas.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3526 by @sattosan.</li> </ul>"},{"location":"release-notes/#internal_74","title":"Internal","text":"<ul> <li>\u2705 Add  the <code>examples</code> directory to test coverage and update tests. Initial PR #1904 by @Kludex.</li> <li>\ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @khulnasoft.</li> <li>\ud83d\udcdd Add official ReadyAPI Twitter to docs: @readyapi. PR #3578 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0670","title":"0.67.0","text":""},{"location":"release-notes/#features_35","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dataclasses</code> in request bodies and <code>response_model</code>. New documentation: Advanced User Guide - Using Dataclasses. PR #3577 by @khulnasoft.</li> <li>\u2728 Support <code>dataclasses</code> in responses. PR #3576 by @khulnasoft, continuation from initial PR #2722 by @amitlissack.</li> </ul>"},{"location":"release-notes/#docs_61","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI. PR #2839 by @aitoehigie.</li> <li>\u270f Fix code highlighted line in: <code>body-nested-models.md</code>. PR #3463 by @jaystone776.</li> <li>\u270f Fix typo in <code>body-nested-models.md</code>. PR #3462 by @jaystone776.</li> <li>\u270f Fix typo \"might me\" -&gt; \"might be\" in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #3362 by @dbrakman.</li> <li>\ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and ReadyAPI. PR #3271 by @ShahriyarR.</li> <li>\ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, ReadyAPI and Docker. PR #2974 by @rodrigo-arenas.</li> <li>\u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex.</li> <li>\ud83d\udcdd Add External Link: Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_75","title":"Internal","text":"<ul> <li>\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @khulnasoft.</li> <li>\ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @khulnasoft.</li> <li>\ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0661","title":"0.66.1","text":""},{"location":"release-notes/#translations_63","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/security/index.md</code>. PR #3507 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/index.md</code>. PR #3337 by @lsglucas.</li> </ul>"},{"location":"release-notes/#internal_76","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to <code>&gt;=6.2.4,&lt;7.0.0</code> and pytest-cov to <code>&gt;=2.12.0,&lt;3.0.0</code>. Initial PR #2790 by @graingert.</li> <li>\u2b06\ufe0f Upgrade python-jose dependency to <code>&gt;=3.3.0,&lt;4.0.0</code> for tests. PR #3468 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0660","title":"0.66.0","text":""},{"location":"release-notes/#features_36","title":"Features","text":"<ul> <li>\u2728 Allow setting the <code>response_class</code> to <code>RedirectResponse</code> or <code>FileResponse</code> and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others, in RedirectResponse and in FileResponse. PR #3457 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_30","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix include/exclude for dicts in <code>jsonable_encoder</code>. PR #2016 by @Rubikoid.</li> <li>\ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson.</li> </ul>"},{"location":"release-notes/#translations_64","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>tutorial/query-params.md</code>. PR #2243 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/response-directly.md</code>. PR #1253 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/additional-status-codes.md</code>. PR #1252 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/path-operation-advanced-configuration.md</code>. PR #1251 by @jfunez.</li> </ul>"},{"location":"release-notes/#0653","title":"0.65.3","text":""},{"location":"release-notes/#fixes_31","title":"Fixes","text":"<ul> <li>\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118. It should allow upgrading ReadyAPI applications with clients that send JSON data without a <code>Content-Type</code> header. And there's still protection against CSRFs. PR #3456 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_65","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl.</li> <li>\ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for ReadyAPI People. PR #3112 by @hareru.</li> <li>\ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo.</li> <li>\ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh.</li> <li>\ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_77","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #3450 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3319 by @github-actions[bot].</li> <li>\u2b06 Upgrade docs development dependency on <code>cligenius-cli</code> to &gt;=0.0.12 to fix conflicts. PR #3429 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0652","title":"0.65.2","text":""},{"location":"release-notes/#security-fixes_1","title":"Security fixes","text":"<ul> <li>\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang.</li> </ul> <p>This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.</p> <p>In versions lower than <code>0.65.2</code>, ReadyAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p> <p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p> <p>But requests with content type <code>text/plain</code> are exempt from CORS preflights, for being considered Simple requests. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the ReadyAPI application.</p> <p>See CVE-2021-32677 for more details.</p> <p>Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12</p>"},{"location":"release-notes/#internal_78","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @khulnasoft.</li> <li>\ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @khulnasoft.</li> <li>\ud83d\udd27 Add new banner sponsor badge for ReadyAPI courses bundle. PR #3288 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0651","title":"0.65.1","text":""},{"location":"release-notes/#security-fixes_2","title":"Security fixes","text":"<ul> <li>\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510. PR #3213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0650","title":"0.65.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_2","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f  Upgrade Starlette to <code>0.14.2</code>, including internal <code>UJSONResponse</code> migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner.</li> </ul>"},{"location":"release-notes/#translations_66","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer.</li> </ul>"},{"location":"release-notes/#internal_79","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs script to generate a new translation language with <code>overrides</code> boilerplate. PR #3202 by @khulnasoft.</li> <li>\u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3189 by @github-actions[bot].</li> <li>\ud83d\udd0a Update ReadyAPI People to allow better debugging. PR #3188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0640","title":"0.64.0","text":""},{"location":"release-notes/#features_37","title":"Features","text":"<ul> <li>\u2728 Add support for adding multiple <code>examples</code> in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data. Initial PR #1267 by @austinorr.</li> </ul>"},{"location":"release-notes/#fixes_32","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @khulnasoft.</li> <li>\ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @khulnasoft.</li> <li>\ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu.</li> </ul>"},{"location":"release-notes/#docs_62","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to article in Russian \"ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler.</li> <li>\ud83d\udcdd Add external link to blog post \"Authenticate Your ReadyAPI App with Auth0\". PR #2172 by @dompatmore.</li> <li>\ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using ReadyAPI and Streamlit. PR #2557 by @davidefiocco.</li> <li>\ud83d\udcdd Add ReadyAPI Medium Article: Deploy a dockerized ReadyAPI application to AWS. PR #2515 by @vjanz.</li> <li>\u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen.</li> <li>\u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00.</li> <li>\u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni.</li> <li>\ud83d\udcdd Add external link to \"ReadyAPI for Flask Users\". PR #2280 by @amitness.</li> </ul>"},{"location":"release-notes/#translations_67","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109.</li> <li>\ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep.</li> <li>\ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for ReadyAPI People. PR #2232 by @JulianMaurin.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3031 by @github-actions[bot].</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for ReadyAPI People. PR #2254 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc.</li> </ul>"},{"location":"release-notes/#internal_80","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @khulnasoft.</li> <li>\ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2880 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2739 by @github-actions[bot].</li> <li>\ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @khulnasoft.</li> <li>\ud83d\udd27 Add ReadyAPI user survey banner. PR #2623 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @khulnasoft.</li> <li>\ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Sponsors order. PR #2620 by @khulnasoft.</li> <li>\ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2590 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0630","title":"0.63.0","text":""},{"location":"release-notes/#features_38","title":"Features","text":"<ul> <li>\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#breaking-changes_5","title":"Breaking changes","text":"<ul> <li>\u2b06\ufe0f Upgrade Uvicorn when installing <code>readyapi[all]</code> to the latest version including <code>uvloop</code>, the new range is <code>uvicorn[standard] &gt;=0.12.0,&lt;0.14.0</code>. PR #2548 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_33","title":"Fixes","text":"<ul> <li>\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with <code>callbacks</code> parameters and when using the <code>OAuth2</code> class.</li> </ul>"},{"location":"release-notes/#docs_63","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @khulnasoft.</li> <li>\ud83d\udcdd Update title for Deta tutorial. PR #2466 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2454 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#translations_68","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add docs lang selector widget. PR #2542 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv.</li> <li>\ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo.</li> <li>\ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031.</li> </ul>"},{"location":"release-notes/#internal_81","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @khulnasoft.</li> <li>\u2796 Remove Cligenius as a docs building dependency (covered by cligenius-cli) to fix pip resolver conflicts. PR #2539 by @khulnasoft.</li> <li>\u2728 Add newsletter: ReadyAPI and friends. PR #2509 by @khulnasoft.</li> <li>\u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @khulnasoft.</li> <li>\ud83d\udd27 Add issue template configs. PR #2476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0620","title":"0.62.0","text":""},{"location":"release-notes/#features_39","title":"Features","text":"<ul> <li>\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @khulnasoft.</li> </ul> <p>Up to now, for several options, the only way to apply them to a group of path operations was in <code>include_router</code>. That works well, but the call to <code>app.include_router()</code> or <code>router.include_router()</code> is normally done in another file.</p> <p>That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together.</p> <p>Setting options in <code>include_router</code> still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the <code>APIRouter</code>.</p> <p>In <code>ReadyAPI</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>.</li> <li><code>dependencies</code>: to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations.</li> <li><code>deprecated</code>: to mark all the path operations as deprecated. \ud83e\udd37</li> <li><code>include_in_schema</code>: to allow excluding all the path operations from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations.</li> </ul> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Depends\n\n\nasync def some_dependency():\n    return\n\n\napp = ReadyAPI(dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>APIRouter</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>. For example, it's not needed to set it explicitly when creating callbacks.</li> <li><code>dependencies</code>: to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with <code>include_router</code>.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated.</li> <li><code>include_in_schema</code>: to allow excluding all the path operations in a router from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations in a router.</li> <li><code>prefix</code>: to set the path prefix for a router. Up to now, this was only possible when calling <code>include_router</code>.</li> <li><code>tags</code>: OpenAPI tags to apply to all the path operations in this router.</li> </ul> <p>For example:</p> <pre><code>from readyapi import APIRouter, Depends\n\n\nasync def some_dependency():\n    return\n\n\nrouter = APIRouter(prefix=\"/users\", dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>include_router</code></p> <p>Most of these settings are now supported in <code>APIRouter</code>, which normally lives closer to the related code, so it is recommended to use <code>APIRouter</code> when possible.</p> <p>But <code>include_router</code> is still useful to, for example, adding options (like <code>dependencies</code>, <code>prefix</code>, and <code>tags</code>) when including a third party router, or a generic router that is shared between several projects.</p> <p>This PR allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>ReadyAPI</code>.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated in OpenAPI.</li> <li><code>include_in_schema</code>: to allow disabling all the path operations from showing in the OpenAPI schema.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> </ul> <p>Note: all the previous parameters are still there, so it's still possible to declare <code>dependencies</code> in <code>include_router</code>.</p>"},{"location":"release-notes/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios:<ul> <li>If you are testing the generated OpenAPI (you shouldn't, ReadyAPI already tests it extensively for you): the order for <code>tags</code> in <code>include_router</code> and path operations was updated for consistency, but it's a simple order change.</li> <li>If you have advanced custom logic to access each route's <code>route.response_class</code>, or the <code>router.default_response_class</code>, or the <code>app.default_response_class</code>: the default value for <code>response_class</code> in <code>APIRoute</code> and for <code>default_response_class</code> in <code>APIRouter</code> and <code>ReadyAPI</code> is now a <code>DefaultPlaceholder</code> used internally to handle and solve default values and overrides. The actual response class inside the <code>DefaultPlaceholder</code> is available at <code>route.response_class.value</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_64","title":"Docs","text":"<ul> <li> <p>PR #2434 (above) includes new or updated docs:</p> <ul> <li>Advanced User Guide - OpenAPI Callbacks.</li> <li>Tutorial - Bigger Applications.</li> <li>Tutorial - Dependencies - Dependencies in path operation decorators.</li> <li>Tutorial - Dependencies - Global Dependencies.</li> </ul> </li> <li> <p>\ud83d\udcdd Add ReadyAPI monitoring blog post to External Links. PR #2324 by @louisguitton.</p> </li> <li>\u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @khulnasoft.</li> <li>\u2728 Add Discord chat. PR #2322 by @khulnasoft.</li> <li>\ud83d\udcdd Fix image links for sponsors. PR #2304 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_69","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031.</li> <li>\ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu.</li> </ul>"},{"location":"release-notes/#internal_82","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor logos. PR #2418 by @khulnasoft.</li> <li>\ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @khulnasoft.</li> <li>\ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @khulnasoft.</li> <li>\u2728 Add silver sponsor WeTransfer. PR #2338 by @khulnasoft.</li> <li>\u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0612","title":"0.61.2","text":""},{"location":"release-notes/#fixes_34","title":"Fixes","text":"<ul> <li>\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold.</li> <li>\ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo.</li> <li>\u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_65","title":"Docs","text":"<ul> <li>\u270f\ufe0f  Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl.</li> <li>\u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy.</li> <li>\u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd.</li> <li>\u270f Fix typo in docs. PR #2179 by @ammarasmro.</li> <li>\ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd.</li> <li>\u270f Fix typos and add rewording in docs. PR #2159 by @nukopy.</li> <li>\ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy.</li> <li>\ud83d\udcdd Fix renamed parameter <code>content_type</code> typo. PR #2135 by @TeoZosa.</li> <li>\u270f Fix minor typos in docs. PR #2122 by @TeoZosa.</li> <li>\u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda.</li> <li>\u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles.</li> <li>\ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust.</li> <li>\u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd.</li> <li>\ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell.</li> <li>\ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2282 by @github-actions[bot].</li> <li>\u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl.</li> <li>\ud83d\udcdd Add articles to External Links. PR #2247 by @khulnasoft.</li> <li>\u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho.</li> </ul>"},{"location":"release-notes/#translations_70","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031.</li> <li>\ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz.</li> <li>\ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Japanese translation for Help ReadyAPI. PR #1692 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi.</li> <li>\ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi.</li> <li>\ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders.</li> <li>\ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones.</li> </ul>"},{"location":"release-notes/#internal_83","title":"Internal","text":"<ul> <li>\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @khulnasoft.</li> <li>\ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @khulnasoft.</li> <li>\u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @khulnasoft.</li> <li>\u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2202 by @github-actions[bot].</li> <li>\u267b\ufe0f Update ReadyAPI People GitHub Action to send the PR as github-actions. PR #2201 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Action config, run monthly. PR #2199 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependencies. PR #2197 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action when there's nothing to change. PR #2196 by @khulnasoft.</li> <li>\ud83d\udc65 Add new section ReadyAPI People. PR #2195 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @khulnasoft.</li> <li>\ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @khulnasoft.</li> <li>\ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #2160.</li> <li>\ud83d\udc77 Add GitHub Action Label Approved. PR #2161.</li> </ul>"},{"location":"release-notes/#0611","title":"0.61.1","text":""},{"location":"release-notes/#fixes_35","title":"Fixes","text":"<ul> <li>Fix issues using <code>jsonable_encoder</code> with SQLAlchemy models directly. PR #1987.</li> </ul>"},{"location":"release-notes/#docs_66","title":"Docs","text":"<ul> <li>Fix typo in NoSQL docs. PR #1980 by @facundojmaero.</li> </ul>"},{"location":"release-notes/#translations_71","title":"Translations","text":"<ul> <li>Add translation for main page to Japanese PR #1571 by @ryuckel.</li> <li>Initialize French translations. PR #1975 by @JulianMaurin-BM.</li> <li>Initialize Turkish translations. PR #1905 by @ycd.</li> </ul>"},{"location":"release-notes/#internal_84","title":"Internal","text":"<ul> <li>Improve docs maintainability by updating <code>hl_lines</code> syntax to use ranges. PR #1863 by @la-mar.</li> </ul>"},{"location":"release-notes/#0610","title":"0.61.0","text":""},{"location":"release-notes/#features_40","title":"Features","text":"<ul> <li>Add support for injecting <code>HTTPConnection</code> (as <code>Request</code> and <code>WebSocket</code>). Useful for sharing app state in dependencies. PR #1827 by @nsidnev.</li> <li>Export <code>WebSocketDisconnect</code> and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss.</li> </ul>"},{"location":"release-notes/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li>Require Pydantic &gt; <code>1.0.0</code>.<ul> <li>Remove support for deprecated Pydantic <code>0.32.2</code>. This improves maintainability and allows new features.</li> <li>In <code>ReadyAPI</code> and <code>APIRouter</code>:<ul> <li>Remove path operation decorators related/deprecated parameter <code>response_model_skip_defaults</code> (use <code>response_model_exclude_unset</code> instead).</li> <li>Change path operation decorators parameter default for <code>response_model_exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code>:<ul> <li>Remove deprecated <code>skip_defaults</code>, use instead <code>exclude_unset</code>.</li> <li>Set default of <code>exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>PR #1862.</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code> remove parameter <code>sqlalchemy_safe</code>.<ul> <li>It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's <code>orm_mode</code> as described in the tutorial: SQL (Relational) Databases.</li> <li>PR #1864.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_67","title":"Docs","text":"<ul> <li>Add link to the course by TestDriven.io: Test-Driven Development with ReadyAPI and Docker. PR #1860.</li> <li>Fix empty log message in docs example about handling errors. PR #1815 by @manlix.</li> <li>Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause.</li> </ul>"},{"location":"release-notes/#internal_85","title":"Internal","text":"<ul> <li>Add Flake8 linting. Original PR #1774 by @MashhadiNima.</li> <li>Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853.</li> </ul>"},{"location":"release-notes/#0602","title":"0.60.2","text":"<ul> <li>Fix typo in docs for query parameters. PR #1832 by @ycd.</li> <li>Add docs about Async Tests. PR #1619 by @empicano.</li> <li>Raise an exception when using form data (<code>Form</code>, <code>File</code>) without having <code>python-multipart</code> installed.<ul> <li>Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.</li> <li>It also detects if the correct package <code>python-multipart</code> is installed instead of the incorrect <code>multipart</code> (both importable as <code>multipart</code>).</li> <li>PR #1851 based on original PR #1627 by @chrisngyn, @YKo20010, @kx-chen.</li> </ul> </li> <li>Re-enable Gitter releases bot. PR #1831.</li> <li>Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings.</li> <li>Fix typo in tutorial about behind a proxy. PR #1807 by @toidi.</li> <li>Fix typo in Portuguese docs. PR #1795 by @izaguerreiro.</li> <li>Add translations setup for Ukrainian. PR #1830.</li> <li>Add external link Build And Host Fast Data Science Applications Using ReadyAPI. PR #1786 by @Kludex.</li> <li>Fix encoding of Pydantic models that inherit from others models with custom <code>json_encoders</code>. PR #1769 by @henrybetts.</li> <li>Simplify and improve <code>jsonable_encoder</code>. PR #1754 by @MashhadiNima.</li> <li>Simplify internal code syntax in several points. PR #1753 by @uriyyo.</li> <li>Improve internal typing, declare <code>Optional</code> parameters. PR #1731 by @MashhadiNima.</li> <li>Add external link Deploy ReadyAPI on Azure App Service to docs. PR #1726 by @windson.</li> <li>Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld.</li> <li>Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie.</li> <li>Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra.</li> <li>Fix typos in docs for security. PR #1678 by @nilslindemann.</li> <li>Fix typos in docs for dependencies. PR #1675 by @nilslindemann.</li> <li>Fix type annotation for <code>**extra</code> parameters in <code>ReadyAPI</code>. PR #1659 by @bharel.</li> <li>Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia.</li> <li>Remove docs preview comment from each commit. PR #1826.</li> <li>Update GitHub context extraction for Gitter notification bot. PR #1766.</li> </ul>"},{"location":"release-notes/#0601","title":"0.60.1","text":"<ul> <li>Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764.</li> <li>Use OS preference theme for online docs. PR #1760 by @adriencaccia.</li> <li>Upgrade Starlette to version <code>0.13.6</code> to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26.</li> <li>Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249. PR #1763.</li> <li>Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761.</li> <li>Update GitHub Actions, refactor Gitter bot. PR #1746.</li> </ul>"},{"location":"release-notes/#0600","title":"0.60.0","text":"<ul> <li>Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740.</li> <li>Add custom GitHub Action to get artifact with docs preview. PR #1739.</li> <li>Add new GitHub Actions to preview docs from PRs. PR #1738.</li> <li>Add XML test coverage to support GitHub Actions. PR #1737.</li> <li>Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736.</li> <li>Add GitHub Actions for CI, move from Travis. PR #1735.</li> <li>Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0590","title":"0.59.0","text":"<ul> <li>Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2.</li> <li>Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux.</li> <li>Fix/re-enable search bar in docs. PR #1703.</li> <li>Auto-generate a \"server\" in OpenAPI <code>servers</code> when there's a <code>root_path</code> instead of prefixing all the <code>paths</code>:<ul> <li>Add a new parameter for <code>ReadyAPI</code> classes: <code>root_path_in_servers</code> to disable the auto-generation of <code>servers</code>.</li> <li>New docs about <code>root_path</code> and <code>servers</code> in Additional Servers.</li> <li>Update OAuth2 examples to use a relative URL for <code>tokenUrl=\"token\"</code> to make sure those examples keep working as-is even when behind a reverse proxy.</li> <li>Initial PR #1596 by @rkbeatss.</li> </ul> </li> <li>Fix typo/link in External Links. PR #1702.</li> <li>Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/khulnasoft/readyapi/pull/1701.</li> <li>Add external link Machine learning model serving in Python using ReadyAPI and Streamlit to docs. PR #1669 by @davidefiocco.</li> <li>Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc.</li> <li>Improve support for tests in editor. PR #1699.</li> <li>Pin dependencies. PR #1697.</li> <li>Update isort to version 5.x.x. PR #1670 by @asheux.</li> </ul>"},{"location":"release-notes/#0581","title":"0.58.1","text":"<ul> <li>Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi.</li> <li>Fix link in warning logs for <code>openapi_prefix</code>. PR #1611 by @bavaria95.</li> <li>Fix bad link in docs. PR #1603 by @molto0504.</li> <li>Add Vim temporary files to <code>.gitignore</code> for contributors using Vim. PR #1590 by @asheux.</li> <li>Fix typo in docs for sub-applications. PR #1578 by @schlpbch.</li> <li>Use <code>Optional</code> in all the examples in the docs. Original PR #1574 by @chrisngyn, @kx-chen, @YKo20010. Updated and merged PR #1644.</li> <li>Update tests and handling of <code>response_model_by_alias</code>. PR #1642.</li> <li>Add translation to Chinese for Body - Fields - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u5b57\u200b\u6bb5\u200b. PR #1569 by @waynerv.</li> <li>Update Chinese translation of main page. PR #1564 by @waynerv.</li> <li>Add translation to Chinese for Body - Multiple Parameters - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b. PR #1532 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters and Numeric Validations - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u503c\u200b\u6821\u9a8c\u200b. PR #1506 by @waynerv.</li> <li>Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638.</li> </ul>"},{"location":"release-notes/#0580","title":"0.58.0","text":"<ul> <li>Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577.</li> <li>Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie.</li> <li>Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie.</li> <li>Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie.</li> <li>Fix Model for JSON Schema keyword <code>not</code> as a JSON Schema instead of a list. PR #1548 by @v-do.</li> <li>Add support for OpenAPI <code>servers</code>. PR #1547 by @mikaello.</li> </ul>"},{"location":"release-notes/#0570","title":"0.57.0","text":"<ul> <li>Remove broken link from \"External Links\". PR #1565 by @victorphoenix3.</li> <li>Update/fix docs for WebSockets with dependencies. Original PR #1540 by @ChihSeanHsu.</li> <li>Add support for Python's <code>http.HTTPStatus</code> in <code>status_code</code> parameters. PR #1534 by @retnikt.</li> <li>When using Pydantic models with <code>__root__</code>, use the internal value in <code>jsonable_encoder</code>. PR #1524 by @patrickkwang.</li> <li>Update docs for path parameters. PR #1521 by @yankeexe.</li> <li>Update docs for first steps, links and rewording. PR #1518 by @yankeexe.</li> <li>Enable <code>showCommonExtensions</code> in Swagger UI to show additional validations like <code>maxLength</code>, etc. PR #1466 by @TiewKH.</li> <li>Make <code>OAuth2PasswordRequestFormStrict</code> importable directly from <code>readyapi.security</code>. PR #1462 by @RichardHoekstra.</li> <li>Add docs about Default response class. PR #1455 by @TezRomacH.</li> <li>Add note in docs about additional parameters <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code> in Response Model. PR #1427 by @wshayes.</li> <li>Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi.</li> <li>Update and clarify testing function name. PR #1395 by @chenl.</li> <li>Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail.</li> <li>Upgrade Starlette version to <code>0.13.4</code>. PR #1361 by @rushton.</li> <li>Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha.</li> <li>Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags. PR #1348 by @thomas-maschler.</li> <li>Add basic setup for Russian translations. PR #1566.</li> <li>Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv.</li> <li>Add <code>__repr__</code> for path operation function parameter helpers (like <code>Query</code>, <code>Depends</code>, etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0561","title":"0.56.1","text":"<ul> <li>Add link to advanced docs from tutorial. PR #1512 by @kx-chen.</li> <li>Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka.</li> <li>Add translation to Chinese for Query Parameters and String Validations - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6821\u9a8c\u200b. PR #1500 by @waynerv.</li> <li>Add translation to Chinese for Request Body - \u200b\u8bf7\u6c42\u200b\u4f53\u200b. PR #1492 by @waynerv.</li> <li>Add translation to Chinese for Help ReadyAPI - Get Help - \u200b\u5e2e\u52a9\u200b ReadyAPI - \u200b\u83b7\u53d6\u200b\u5e2e\u52a9\u200b. PR #1465 by @waynerv.</li> <li>Add translation to Chinese for Query Parameters - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b. PR #1454 by @waynerv.</li> <li>Add translation to Chinese for Contributing - \u200b\u5f00\u53d1\u200b - \u200b\u8d21\u732e\u200b. PR #1460 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b. PR #1453 by @waynerv.</li> <li>Add official Microsoft project generator for serving spaCy with ReadyAPI and Azure Cognitive Skills to Project Generators. PR #1390 by @kabirkhan.</li> <li>Update docs in Python Types Intro to include info about <code>Optional</code>. Original PR #1377 by @yaegassy.</li> <li>Fix support for callable class dependencies with <code>yield</code>. PR #1365 by @mrosales.</li> <li>Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty.</li> <li>Add translation to Chinese for First Steps - \u200b\u7b2c\u4e00\u6b65\u200b. PR #1323 by @waynerv.</li> <li>Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev.</li> <li>Optimize internal regex performance in <code>get_path_param_names()</code>. PR #1243 by @heckad.</li> <li>Remove <code>*,</code> from functions in docs where it's not needed. PR #1239 by @pankaj-giri.</li> <li>Start translations for Italian. PR #1557 by @csr.</li> </ul>"},{"location":"release-notes/#0560","title":"0.56.0","text":"<ul> <li>Add support for ASGI <code>root_path</code>:<ul> <li>Use <code>root_path</code> internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.</li> <li>Add new <code>root_path</code> parameter for <code>ReadyAPI</code> applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter <code>--root-path</code>).</li> <li>Deprecate <code>openapi_prefix</code> parameter in favor of the new <code>root_path</code> parameter.</li> <li>Add new/updated docs for Sub Applications - Mounts, without <code>openapi_prefix</code> (as it is now handled automatically).</li> <li>Add new/updated docs for Behind a Proxy, including how to setup a local testing proxy with Traefik and using <code>root_path</code>.</li> <li>Update docs for Extending OpenAPI with the new <code>openapi_prefix</code> parameter passed (internally generated from <code>root_path</code>).</li> <li>Original PR #1199 by @iksteen.</li> </ul> </li> <li>Update new issue templates and docs: Help ReadyAPI - Get Help. PR #1531.</li> <li>Update GitHub action issue-manager. PR #1520.</li> <li>Add new links:<ul> <li>English articles:<ul> <li>Real-time Notifications with Python and Postgres by Guillermo Cruz.</li> <li>Microservice in Python using ReadyAPI  by Paurakh Sharma Humagain.</li> <li>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</li> <li>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</li> <li>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</li> <li>Build a Secure Twilio Webhook with Python and ReadyAPI  by Twilio.</li> <li>Using ReadyAPI with Django  by Stavros Korokithakis.</li> <li>Introducing Dispatch by Netflix.</li> </ul> </li> <li>Podcasts:<ul> <li>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</li> </ul> </li> <li>Talks:<ul> <li>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> <li>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> </ul> </li> <li>PR #1467.</li> </ul> </li> <li>Add translation to Chinese for Python Types Intro - Python \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u7b80\u4ecb\u200b. PR #1197 by @waynerv.</li> </ul>"},{"location":"release-notes/#0551","title":"0.55.1","text":"<ul> <li>Fix handling of enums with their own schema in path parameters. To support pydantic/pydantic#1432 in ReadyAPI. PR #1463.</li> </ul>"},{"location":"release-notes/#0550","title":"0.55.0","text":"<ul> <li>Allow enums to allow them to have their own schemas in OpenAPI. To support pydantic/pydantic#1432 in ReadyAPI. PR #1461.</li> <li>Add links for funding through GitHub sponsors. PR #1425.</li> <li>Update issue template for for questions. PR #1344 by @retnikt.</li> <li>Update warning about storing passwords in docs. PR #1336 by @skorokithakis.</li> <li>Fix typo. PR #1326 by @chenl.</li> <li>Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es. PR #1325 by @Serrones.</li> <li>Fix 2 typos in docs. PR #1324 by @waynerv.</li> <li>Update CORS docs, fix correct default of <code>max_age=600</code>. PR #1301 by @derekbekoe.</li> <li>Add translation of main page to Portuguese. PR #1300 by @Serrones.</li> <li>Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt.</li> <li>Make sure the <code>*</code> in short features in the docs is consistent (after <code>.</code>) in all languages. PR #1424.</li> <li>Update order of execution for <code>get_db</code> in SQLAlchemy tutorial. PR #1293 by @bcb.</li> <li>Fix typos in Async docs. PR #1423.</li> </ul>"},{"location":"release-notes/#0542","title":"0.54.2","text":"<ul> <li>Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await. PR #1290 by @alvaropernas.</li> <li>Remove obsolete vote link. PR #1289 by @donhui.</li> <li>Allow disabling docs UIs by just disabling OpenAPI with <code>openapi_url=None</code>. New example in docs: Advanced: Conditional OpenAPI. PR #1421.</li> <li>Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es. PR #1274 by @Serrones.</li> <li>Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o. PR #1259 by @marcosmmb.</li> <li>Allow using Unicode in MkDocs for translations. PR #1419.</li> <li>Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n. PR #1250 by @jfunez.</li> <li>Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro. PR #1249 by @marcosmmb.</li> <li>Add translation to Portuguese for Features - Recursos. PR #1248 by @marcosmmb.</li> <li>Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n. PR #1244 by @MartinEliasQ.</li> <li>Add translation to Chinese for Deployment - \u200b\u90e8\u7f72\u200b. PR #1203 by @RunningIkkyu.</li> <li>Add translation to Chinese for Tutorial - User Guide - Intro - \u200b\u6559\u7a0b\u200b - \u200b\u7528\u6237\u200b\u6307\u5357\u200b - \u200b\u7b80\u4ecb\u200b. PR #1202 by @waynerv.</li> <li>Add translation to Chinese for Features - \u200b\u7279\u6027\u200b. PR #1192 by @Dustyposa.</li> <li>Add translation for main page to Chinese PR #1191 by @waynerv.</li> <li>Update docs for project generation. PR #1287.</li> <li>Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro). PR #1237 by @mariacamilagl.</li> <li>Add Spanish translation for Caracter\u00edsticas (Features). PR #1220 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0541","title":"0.54.1","text":"<ul> <li>Update database test setup. PR #1226.</li> <li>Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0540","title":"0.54.0","text":"<ul> <li>Fix grammatical mistakes in async docs. PR #1188 by @mickeypash.</li> <li>Add support for <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code>:<ul> <li>Deprecate the parameter <code>include_none</code> in <code>jsonable_encoder</code> and add the inverted <code>exclude_none</code>, to keep in sync with Pydantic.</li> <li>PR #1166 by @voegtlel.</li> </ul> </li> <li>Add example about Testing a Database. Initial PR #1144 by @duganchen.</li> <li>Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215.</li> <li>Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao.</li> <li>Add Python venv <code>env</code> to <code>.gitignore</code>. PR #1212 by @cassiobotaro.</li> <li>Start Portuguese translations. PR #1210 by @cassiobotaro.</li> <li>Update docs for Pydantic's <code>Settings</code> using a dependency with <code>@lru_cache()</code>. PR #1214.</li> <li>Add first translation to Spanish ReadyAPI. PR #1201 by @mariacamilagl.</li> <li>Add docs about Settings and Environment Variables. Initial PR 1118 by @alexmitelman.</li> </ul>"},{"location":"release-notes/#0532","title":"0.53.2","text":"<ul> <li>Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186.</li> <li>Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack.</li> <li>Fix docs script to ensure languages are always sorted. PR #1189.</li> <li>Start translations for Chinese. PR #1187 by @RunningIkkyu.</li> <li>Add docs for Schema Extra - Example. PR #1185.</li> </ul>"},{"location":"release-notes/#0531","title":"0.53.1","text":"<ul> <li>Fix included example after translations refactor. PR #1182.</li> <li>Add docs example for <code>example</code> in <code>Field</code>. Docs at Body - Fields: JSON Schema extras. PR #1106 by @JohnPaton.</li> <li>Fix using recursive models in <code>response_model</code>. PR #1164 by @voegtlel.</li> <li>Add docs for Pycharm Debugging. PR #1096 by @youngquan.</li> <li>Fix typo in docs. PR #1148 by @PLNech.</li> <li>Update Windows development environment instructions. PR #1179.</li> </ul>"},{"location":"release-notes/#0530","title":"0.53.0","text":"<ul> <li>Update test coverage badge. PR #1175.</li> <li>Add <code>orjson</code> to <code>pip install readyapi[all]</code>. PR #1161 by @michael0liver.</li> <li>Fix included example for <code>GZipMiddleware</code>. PR #1138 by @arimbr.</li> <li>Fix class name in docstring for <code>OAuth2PasswordRequestFormStrict</code>. PR #1126 by @adg-mh.</li> <li>Clarify function name in example in docs. PR #1121 by @tmsick.</li> <li>Add external link Apache Kafka producer and consumer with ReadyAPI and aiokafka to docs. PR #1112 by @iwpnd.</li> <li>Fix serialization when using <code>by_alias</code> or <code>exclude_unset</code> and returning data with Pydantic models. PR #1074 by @juhovh-aiven.</li> <li>Add Gitter chat to docs. PR #1061 by @aakashnand.</li> <li>Update and simplify translations docs. PR #1171.</li> <li>Update development of ReadyAPI docs, set address to <code>127.0.0.1</code> to improve Windows support. PR #1169 by @mariacamilagl.</li> <li>Add support for docs translations. New docs: Development - Contributing: Docs: Translations. PR #1168.</li> <li>Update terminal styles in docs and add note about Cligenius, the ReadyAPI of CLIs. PR #1139.</li> </ul>"},{"location":"release-notes/#0520","title":"0.52.0","text":"<ul> <li>Add new high-performance JSON response class using <code>orjson</code>. New docs: Custom Response - HTML, Stream, File, others: <code>ORJSONResponse</code>. PR #1065.</li> </ul>"},{"location":"release-notes/#0510","title":"0.51.0","text":"<ul> <li>Re-export utils from Starlette:<ul> <li>This allows using things like <code>from readyapi.responses import JSONResponse</code> instead of <code>from starlette.responses import JSONResponse</code>.</li> <li>It's mainly syntax sugar, a convenience for developer experience.</li> <li>Now <code>Request</code>, <code>Response</code>, <code>WebSocket</code>, <code>status</code> can be imported directly from <code>readyapi</code> as in <code>from readyapi import Response</code>. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.</li> <li>Documentation changes in many places, but new docs and noticeable improvements:<ul> <li>Custom Response - HTML, Stream, File, others.</li> <li>Advanced Middleware.</li> <li>Including WSGI - Flask, Django, others.</li> </ul> </li> <li>PR #1064.</li> </ul> </li> </ul>"},{"location":"release-notes/#0500","title":"0.50.0","text":"<ul> <li>Add link to Release Notes from docs about pinning versions for deployment. PR #1058.</li> <li>Upgrade code to use the latest version of Starlette, including:<ul> <li>Several bug fixes.</li> <li>Optional redirects of slashes, with or without ending in <code>/</code>.</li> <li>Events for routers, <code>\"startup\"</code>, and <code>\"shutdown\"</code>.</li> <li>PR #1057.</li> </ul> </li> <li>Add docs about pinning ReadyAPI versions for deployment: Deployment: ReadyAPI versions. PR #1056.</li> </ul>"},{"location":"release-notes/#0492","title":"0.49.2","text":"<ul> <li>Fix links in release notes. PR #1052 by @sattosan.</li> <li>Fix typo in release notes. PR #1051 by @sattosan.</li> <li>Refactor/clarify <code>serialize_response</code> parameter name to avoid confusion. PR #1031 by @patrickmckenna.</li> <li>Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen.</li> <li>Add missing dependencies for testing. PR #1026 by @sm-Fifteen.</li> <li>Fix accepting valid types for response models, including Python types like <code>List[int]</code>. PR #1017 by @patrickmckenna.</li> <li>Fix format in SQL tutorial. PR #1015 by @vegarsti.</li> </ul>"},{"location":"release-notes/#0491","title":"0.49.1","text":"<ul> <li>Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92.</li> <li>Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047.</li> <li>Move mypy configurations to config file. PR #987 by @hukkinj1.</li> <li>Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0490","title":"0.49.0","text":"<ul> <li>Fix encoding of <code>pathlib</code> paths in <code>jsonable_encoder</code>. PR #978 by @patrickmckenna.</li> <li>Add articles to External Links: Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) and [ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b. PR #974 by @tokusumi.</li> <li>Fix broken links in docs. PR #949 by @tsotnikov.</li> <li>Fix small typos. PR #941 by @NikitaKolesov.</li> <li>Update and clarify docs for dependencies with <code>yield</code>. PR #986.</li> <li>Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with <code>yield</code> and <code>HTTPException</code>. PR #985.</li> <li>Update CI to run docs deployment in GitHub actions. PR #983.</li> <li>Allow <code>callable</code>s in path operation functions, like functions modified with <code>functools.partial</code>. PR #977.</li> </ul>"},{"location":"release-notes/#0480","title":"0.48.0","text":"<ul> <li>Run linters first in tests to error out faster. PR #948.</li> <li>Log warning about <code>email-validator</code> only when used. PR #946.</li> <li>Simplify Peewee docs with double dependency with <code>yield</code>. PR #947.</li> <li>Add article External Links: Create and Deploy ReadyAPI app to Heroku. PR #942 by @windson.</li> <li>Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv.</li> <li>Fix typo in main page. PR #920 by @mMarzeta.</li> <li>Fix parsing of possibly invalid bodies. PR #918 by @dmontagu.</li> <li>Fix typo #916 by @adursun.</li> <li>Allow <code>Any</code> type for enums in OpenAPI. PR #906 by @songzhi.</li> <li>Add article to External Links: How to continuously deploy a ReadyAPI to AWS Lambda with AWS SAM. PR #901 by @iwpnd.</li> <li>Add note about using Body parameters without Pydantic. PR #900 by @pawamoy.</li> <li>Fix Pydantic field clone logic. PR #899 by @deuce2367.</li> <li>Fix link in middleware docs. PR #893 by @linchiwei123.</li> <li>Rename default API title from \"Fast API\" to \"ReadyAPI\" for consistency. PR #890.</li> </ul>"},{"location":"release-notes/#0471","title":"0.47.1","text":"<ul> <li>Fix model filtering in <code>response_model</code>, cloning sub-models. PR #889.</li> <li>Fix ReadyAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888.</li> </ul>"},{"location":"release-notes/#0470","title":"0.47.0","text":"<ul> <li>Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887.</li> <li>Tweak external links, Markdown format, typos. PR #881.</li> <li>Fix bug in tutorial handling HTTP Basic Auth <code>username</code> and <code>password</code>. PR #865 by @isaevpd.</li> <li>Fix handling form path operation parameters declared with pure classes like <code>list</code>, <code>tuple</code>, etc. PR #856 by @nsidnev.</li> <li>Add request <code>body</code> to <code>RequestValidationError</code>, new docs: Use the <code>RequestValidationError</code> body. Initial PR #853 by @aviramha.</li> <li>Update External Links with new links and dynamic GitHub projects with <code>readyapi</code> topic. PR #850.</li> <li>Fix Peewee <code>contextvars</code> handling in docs: SQL (Relational) Databases with Peewee. PR #879.</li> <li>Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing. PR #877.</li> <li>Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass.</li> </ul>"},{"location":"release-notes/#0460","title":"0.46.0","text":"<ul> <li>Fix typos and tweak configs. PR #837.</li> <li>Add link to Chinese article in External Links. PR 810 by @wxq0309.</li> <li>Implement <code>OAuth2AuthorizationCodeBearer</code> class. PR #797 by @kuwv.</li> <li>Update example upgrade in docs main page. PR #795 by @cdeil.</li> <li>Fix callback handling for sub-routers. PR #792 by @jekirl.</li> <li>Fix typos. PR #784 by @kkinder.</li> <li>Add 4 Japanese articles to External Links. PR #783 by @HymanZHAN.</li> <li>Add support for subtypes of main types in <code>jsonable_encoder</code>, e.g. asyncpg's UUIDs. PR #756 by @RmStorm.</li> <li>Fix usage of Pydantic's <code>HttpUrl</code> in docs. PR #832 by @Dustyposa.</li> <li>Fix Twitter links in docs. PR #813 by @justindujardin.</li> <li>Add docs for correctly using ReadyAPI with Peewee ORM. Including how to overwrite parts of Peewee to correctly handle async threads. PR #789.</li> </ul>"},{"location":"release-notes/#0450","title":"0.45.0","text":"<ul> <li>Add support for OpenAPI Callbacks:<ul> <li>New docs: OpenAPI Callbacks.</li> <li>Refactor generation of <code>operationId</code>s to be valid Python names (also valid variables in most languages).</li> <li>Add <code>default_response_class</code> parameter to <code>APIRouter</code>.</li> <li>Original PR #722 by @booooh.</li> </ul> </li> <li>Refactor logging to use the same logger everywhere, update log strings and levels. PR #781.</li> <li>Add article to External Links: \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI?. PR #766 by @prostomarkeloff.</li> <li>Remove gender bias in docs for handling errors. PR #780. Original idea in PR #761 by @classywhetten.</li> <li>Rename docs and references to <code>body-schema</code> to <code>body-fields</code> to keep in line with Pydantic. PR #746 by @prostomarkeloff.</li> </ul>"},{"location":"release-notes/#0441","title":"0.44.1","text":"<ul> <li>Add GitHub social preview images to git. PR #752.</li> <li>Update PyPI \"trove classifiers\". PR #751.</li> <li>Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749.</li> <li>Update \"new issue\" templates. PR #749.</li> <li>Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0440","title":"0.44.0","text":"<ul> <li>Add GitHub action Issue Manager. PR #742.</li> <li>Fix typos in docs. PR 734 by @bundabrg.</li> <li>Fix usage of <code>custom_encoder</code> in <code>jsonable_encoder</code>. PR #715 by @matrixise.</li> <li>Fix invalid XML example. PR 710 by @OcasoProtal.</li> <li>Fix typos and update wording in deployment docs. PR #700 by @marier-nico.</li> <li>Add note about dependencies in <code>APIRouter</code> docs. PR #698 by @marier-nico.</li> <li>Add support for async class methods as dependencies #681 by @frankie567.</li> <li>Add ReadyAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10.</li> <li>Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster.</li> <li>Add support for Pydantic versions <code>1.0.0</code> and above, with temporary (deprecated) backwards compatibility for Pydantic <code>0.32.2</code>. PR #646 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0430","title":"0.43.0","text":"<ul> <li>Update docs to reduce gender bias. PR #645 by @ticosax.</li> <li>Add docs about overriding the <code>operationId</code> for all the path operations based on their function name. PR #642 by @SKalt.</li> <li>Fix validators in models generating an incorrect key order. PR #637 by @jaddison.</li> <li>Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom.</li> <li>Remove <code>$</code> from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek.</li> <li>Add docs for self-serving docs' (Swagger UI) static assets, e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch.</li> <li>Fix <code>black</code> linting after upgrade. PR #682 by @frankie567.</li> </ul>"},{"location":"release-notes/#0420","title":"0.42.0","text":"<ul> <li>Add dependencies with <code>yield</code>, a.k.a. exit steps, context managers, cleanup, teardown, ...<ul> <li>This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.</li> <li>Dependencies with <code>yield</code> can be normal or <code>async</code>, ReadyAPI will run normal dependencies in a threadpool.</li> <li>They can be combined with normal dependencies.</li> <li>It's possible to have arbitrary trees/levels of dependencies with <code>yield</code> and exit steps are handled in the correct order automatically.</li> <li>It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:<ul> <li><code>async-exit-stack</code></li> <li><code>async-generator</code></li> </ul> </li> <li>New docs at Dependencies with <code>yield</code>.</li> <li>Updated database docs SQL (Relational) Databases: Main ReadyAPI app.</li> <li>PR #595.</li> </ul> </li> <li>Fix <code>sitemap.xml</code> in website. PR #598 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0410","title":"0.41.0","text":"<ul> <li>Upgrade required Starlette to <code>0.12.9</code>, the new range is <code>&gt;=0.12.9,&lt;=0.12.9</code>.<ul> <li>Add <code>State</code> to ReadyAPI apps at <code>app.state</code>.</li> <li>PR #593.</li> </ul> </li> <li>Improve handling of custom classes for <code>Request</code>s and <code>APIRoute</code>s.<ul> <li>This helps to more easily solve use cases like:<ul> <li>Reading a body before and/or after a request (equivalent to a middleware).</li> <li>Run middleware-like code only for a subset of path operations.</li> <li>Process a request before passing it to a path operation function. E.g. decompressing, deserializing, etc.</li> <li>Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata.</li> </ul> </li> <li>New docs section: Custom Request and APIRoute class.</li> <li>PR #589 by @dmontagu.</li> </ul> </li> <li>Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0400","title":"0.40.0","text":"<ul> <li>Add notes to docs about installing <code>python-multipart</code> when using forms. PR #574 by @sliptonic.</li> <li>Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu.</li> <li>Add support for truncating docstrings from path operation functions.<ul> <li>New docs at Advanced description from docstring.</li> <li>PR #556 by @svalouch.</li> </ul> </li> <li>Fix <code>DOCTYPE</code> in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21.</li> <li>Fix handling <code>4XX</code> responses overriding default <code>422</code> validation error responses. PR #517 by @tsouvarev.</li> <li>Fix typo in documentation for Simple HTTP Basic Auth. PR #514 by @prostomarkeloff.</li> <li>Fix incorrect documentation example in first steps. PR #511 by @IgnatovFedor.</li> <li>Add support for Swagger UI initOauth settings with the parameter <code>swagger_ui_init_oauth</code>. PR #499 by @zamiramir.</li> </ul>"},{"location":"release-notes/#0390","title":"0.39.0","text":"<ul> <li>Allow path parameters to have default values (e.g. <code>None</code>) and discard them instead of raising an error.<ul> <li>This allows declaring a parameter like <code>user_id: str = None</code> that can be taken from a query parameter, but the same path operation can be included in a router with a path <code>/users/{user_id}</code>, in which case will be taken from the path and will be required.</li> <li>PR #464 by @jonathanunderwood.</li> </ul> </li> <li>Add support for setting a <code>default_response_class</code> in the <code>ReadyAPI</code> instance or in <code>include_router</code>. Initial PR #467 by @toppk.</li> <li>Add support for type annotations using strings and <code>from __future__ import annotations</code>. PR #451 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0381","title":"0.38.1","text":"<ul> <li>Fix incorrect <code>Request</code> class import. PR #493 by @kamalgill.</li> </ul>"},{"location":"release-notes/#0380","title":"0.38.0","text":"<ul> <li>Add recent articles to External Links and recent opinions. PR #490.</li> <li>Upgrade support range for Starlette to include <code>0.12.8</code>. The new range is <code>&gt;=0.11.1,&lt;=0.12.8\"</code>. PR #477 by @dmontagu.</li> <li>Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0370","title":"0.37.0","text":"<ul> <li>Add support for custom route classes for advanced use cases. PR #468 by @dmontagu.</li> <li>Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje.</li> <li>Fix security issue: when returning a sub-class of a response model and using <code>skip_defaults</code> it could leak information. PR #485 by @dmontagu.</li> <li>Enable tests for Python 3.8-dev. PR #465 by @Jamim.</li> <li>Add support and tests for Pydantic dataclasses in <code>response_model</code>. PR #454 by @dconathan.</li> <li>Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa.</li> <li>Use the <code>media_type</code> parameter in <code>Body()</code> params to set the media type in OpenAPI for <code>requestBody</code>. PR #439 by @divums.</li> <li>Add article Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann. PR #438 by @naxty.</li> <li>Allow setting custom <code>422</code> (validation error) response/schema in OpenAPI.<ul> <li>And use media type from response class instead of fixed <code>application/json</code> (the default).</li> <li>PR #437 by @divums.</li> </ul> </li> <li>Fix using <code>\"default\"</code> extra response with status codes at the same time. PR #489.</li> <li>Allow additional responses to use status code ranges (like <code>5XX</code> and <code>4XX</code>) and <code>\"default\"</code>. PR #435 by @divums.</li> </ul>"},{"location":"release-notes/#0360","title":"0.36.0","text":"<ul> <li>Fix implementation for <code>skip_defaults</code> when returning a Pydantic model. PR #422 by @dmontagu.</li> <li>Fix OpenAPI generation when using the same dependency in multiple places for the same path operation. PR #417 by @dmontagu.</li> <li>Allow having empty paths in path operations used with <code>include_router</code> and a <code>prefix</code>.<ul> <li>This allows having a router for <code>/cats</code> and all its path operations, while having one of them for <code>/cats</code>.</li> <li>Now it doesn't have to be only <code>/cats/</code> (with a trailing slash).</li> <li>To use it, declare the path in the path operation as the empty string (<code>\"\"</code>).</li> <li>PR #415 by @vitalik.</li> </ul> </li> <li>Fix mypy error after merging PR #415. PR #462.</li> </ul>"},{"location":"release-notes/#0350","title":"0.35.0","text":"<ul> <li>Fix typo in routing <code>assert</code>. PR #419 by @pablogamboa.</li> <li>Fix typo in docs. PR #411 by @bronsen.</li> <li>Fix parsing a body type declared with <code>Union</code>. PR #400 by @koxudaxi.</li> </ul>"},{"location":"release-notes/#0340","title":"0.34.0","text":"<ul> <li> <p>Upgrade Starlette supported range to include the latest <code>0.12.7</code>. The new range is <code>0.11.1,&lt;=0.12.7</code>. PR #367 by @dedsm.</p> </li> <li> <p>Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu. PR #385.</p> </li> </ul>"},{"location":"release-notes/#0330","title":"0.33.0","text":"<ul> <li>Upgrade Pydantic version to <code>0.30.0</code>. PR #384 by @jekirl.</li> </ul>"},{"location":"release-notes/#0320","title":"0.32.0","text":"<ul> <li> <p>Fix typo in docs for features. PR #380 by @MartinoMensio.</p> </li> <li> <p>Fix source code <code>limit</code> for example in Query Parameters. PR #366 by @Smashman.</p> </li> <li> <p>Update wording in docs about OAuth2 scopes. PR #371 by @cjw296.</p> </li> <li> <p>Update docs for <code>Enum</code>s to inherit from <code>str</code> and improve Swagger UI rendering. PR #351.</p> </li> <li> <p>Fix regression, add Swagger UI deep linking again. PR #350.</p> </li> <li> <p>Add test for having path templates in <code>prefix</code> of <code>.include_router</code>. PR #349.</p> </li> <li> <p>Add note to docs: Include the same router multiple times with different <code>prefix</code>. PR #348.</p> </li> <li> <p>Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies.</p> <ul> <li>Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules.</li> <li>The same new ID generation applies to response models.</li> <li>This also changes the generated title for those models.</li> <li>Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file).</li> <li>This also adds the possibility of using <code>.include_router()</code> with the same <code>APIRouter</code> multiple  times, with different prefixes, e.g. <code>/api/v2</code> and <code>/api/latest</code>, and it will now work correctly.</li> <li>PR #347.</li> </ul> </li> </ul>"},{"location":"release-notes/#0310","title":"0.31.0","text":"<ul> <li>Upgrade Pydantic supported version to <code>0.29.0</code>.<ul> <li>New supported version range is <code>\"pydantic &gt;=0.28,&lt;=0.29.0\"</code>.</li> <li>This adds support for Pydantic Generic Models, kudos to @dmontagu.</li> <li>PR #344.</li> </ul> </li> </ul>"},{"location":"release-notes/#0301","title":"0.30.1","text":"<ul> <li> <p>Add section in docs about External Links and Articles. PR #341.</p> </li> <li> <p>Remove <code>Pipfile.lock</code> from the repository as it is only used by ReadyAPI contributors (developers of ReadyAPI itself). See the PR for more details. PR #340.</p> </li> <li> <p>Update section about Help ReadyAPI - Get Help. PR #339.</p> </li> <li> <p>Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338.</p> </li> <li> <p>Update and clarify SQL tutorial with SQLAlchemy. PR #331 by @mariacamilagl.</p> </li> <li> <p>Add SQLite online viewers to the docs. PR #330 by @cyrilbois.</p> </li> </ul>"},{"location":"release-notes/#0300","title":"0.30.0","text":"<ul> <li> <p>Add support for Pydantic's ORM mode:</p> <ul> <li>Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases.</li> <li>The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using <code>@property</code> decorators) and several other use cases.</li> <li>This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other.</li> <li>If your path operations return an arbitrary object with attributes (e.g. <code>my_item.name</code> instead of <code>my_item[\"name\"]</code>) AND you use a <code>response_model</code>, make sure to update the Pydantic models with <code>orm_mode = True</code> as described in the docs (link above).</li> <li>New documentation about receiving plain <code>dict</code>s as request bodies: Bodies of arbitrary <code>dict</code>s.</li> <li>New documentation about returning arbitrary <code>dict</code>s in responses: Response with arbitrary <code>dict</code>.</li> <li>Technical Details:<ul> <li>When declaring a <code>response_model</code> it is used directly to generate the response content, from whatever was returned from the path operation function.</li> <li>Before this, the return content was first passed through <code>jsonable_encoder</code> to ensure it was a \"jsonable\" object, like a <code>dict</code>, instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use <code>orm_mode = True</code>.</li> <li>If you don't have a <code>response_model</code>, the return object will still be passed through <code>jsonable_encoder</code> first.</li> <li>When a <code>response_model</code> is declared, the same <code>response_model</code> type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic <code>Field</code> with all the submodels cloned as well).</li> <li>This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the <code>response_model</code> (e.g. you return a <code>UserInDB</code> that inherits from <code>User</code> but contains extra fields, like <code>hashed_password</code>, and <code>User</code> is used in the <code>response_model</code>), it would still pass the validation (because <code>UserInDB</code> is a subclass of <code>User</code>) and the object would be returned as-is, including the <code>hashed_password</code>. To fix this, the declared <code>response_model</code> is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a <code>List[Item]</code>), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned <code>response_model</code>. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned <code>response_model</code>, containing only the declared fields as normally.</li> </ul> </li> <li>PR #322.</li> </ul> </li> <li> <p>Remove/clean unused RegEx code in routing. PR #314 by @dmontagu.</p> </li> <li> <p>Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao.</p> </li> <li> <p>Upgrade Pydantic support to <code>0.28</code>. PR #320 by @jekirl.</p> </li> </ul>"},{"location":"release-notes/#0291","title":"0.29.1","text":"<ul> <li> <p>Fix handling an empty-body request with a required body param. PR #311.</p> </li> <li> <p>Fix broken link in docs: Return a Response directly. PR #306 by @dmontagu.</p> </li> <li> <p>Fix docs discrepancy in docs for Response Model. PR #288 by @awiddersheim.</p> </li> </ul>"},{"location":"release-notes/#0290","title":"0.29.0","text":"<ul> <li>Add support for declaring a <code>Response</code> parameter:<ul> <li>This allows declaring:<ul> <li>Response Cookies.</li> <li>Response Headers.</li> <li>An HTTP Status Code different than the default: Response - Change Status Code.</li> </ul> </li> <li>All of this while still being able to return arbitrary objects (<code>dict</code>, DB model, etc).</li> <li>Update attribution to Hug, for inspiring the <code>response</code> parameter pattern.</li> <li>PR #294.</li> </ul> </li> </ul>"},{"location":"release-notes/#0280","title":"0.28.0","text":"<ul> <li> <p>Implement dependency cache per request.</p> <ul> <li>This avoids calling each dependency multiple times for the same request.</li> <li>This is useful while calling external services, performing costly computation, etc.</li> <li>This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with <code>.include_router()</code>) and then it is declared again in a specific path operation, the dependency will be called only once.</li> <li>The cache can be disabled per dependency declaration, using <code>use_cache=False</code> as in <code>Depends(your_dependency, use_cache=False)</code>.</li> <li>Updated docs at: Using the same dependency multiple times.</li> <li>PR #292.</li> </ul> </li> <li> <p>Implement dependency overrides for testing.</p> <ul> <li>This allows using overrides/mocks of dependencies during tests.</li> <li>New docs: Testing Dependencies with Overrides.</li> <li>PR #291.</li> </ul> </li> </ul>"},{"location":"release-notes/#0272","title":"0.27.2","text":"<ul> <li>Fix path and query parameters receiving <code>dict</code> as a valid type. It should be mapped to a body payload. PR #287. Updated docs at: Query parameter list / multiple values with defaults: Using <code>list</code>.</li> </ul>"},{"location":"release-notes/#0271","title":"0.27.1","text":"<ul> <li> <p>Fix <code>auto_error=False</code> handling in <code>HTTPBearer</code> security scheme. Do not <code>raise</code> when there's an incorrect <code>Authorization</code> header if <code>auto_error=False</code>. PR #282.</p> </li> <li> <p>Fix type declaration of <code>HTTPException</code>. PR #279.</p> </li> </ul>"},{"location":"release-notes/#0270","title":"0.27.0","text":"<ul> <li> <p>Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu.</p> </li> <li> <p>Refactor param extraction using Pydantic <code>Field</code>:</p> <ul> <li>Large refactor, improvement, and simplification of param extraction from path operations.</li> <li>Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults.</li> <li>Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values.</li> <li>Add support for type annotations using <code>Optional</code> as in <code>param: Optional[str] = None</code>. New documentation: Optional type declarations.</li> <li>PR #278.</li> </ul> </li> </ul>"},{"location":"release-notes/#0260","title":"0.26.0","text":"<ul> <li> <p>Separate error handling for validation errors.</p> <ul> <li>This will allow developers to customize the exception handlers.</li> <li>Document better how to handle exceptions and use error handlers.</li> <li>Include <code>RequestValidationError</code> and <code>WebSocketRequestValidationError</code> (this last one will be useful once encode/starlette#527 or equivalent is merged).</li> <li>New documentation about exceptions handlers:<ul> <li>Install custom exception handlers.</li> <li>Override the default exception handlers.</li> <li>Reuse ReadyAPI's exception handlers.</li> </ul> </li> <li>PR #273.</li> </ul> </li> <li> <p>Fix support for paths in path parameters without needing explicit <code>Path(...)</code>.</p> <ul> <li>PR #256.</li> <li>Documented in PR #272 by @wshayes.</li> <li>New documentation at: Path Parameters containing paths.</li> </ul> </li> <li> <p>Update docs for testing ReadyAPI. Include using <code>POST</code>, sending JSON, testing headers, etc. New documentation: Testing. PR #271.</p> </li> <li> <p>Fix type declaration of <code>response_model</code> to allow generic Python types as <code>List[Model]</code>. Mainly to fix <code>mypy</code> for users. PR #266.</p> </li> </ul>"},{"location":"release-notes/#0250","title":"0.25.0","text":"<ul> <li> <p>Add support for Pydantic's <code>include</code>, <code>exclude</code>, <code>by_alias</code>.</p> <ul> <li>Update documentation: Response Model.</li> <li>Add docs for: Body - updates, using Pydantic's <code>skip_defaults</code>.</li> <li>Add method consistency tests.</li> <li>PR #264.</li> </ul> </li> <li> <p>Add <code>CONTRIBUTING.md</code> file to GitHub, to help new contributors. PR #255 by @wshayes.</p> </li> <li> <p>Add support for Pydantic's <code>skip_defaults</code>:</p> <ul> <li>There's a new path operation decorator parameter <code>response_model_skip_defaults</code>.<ul> <li>The name of the parameter will most probably change in a future version to <code>response_skip_defaults</code>, <code>model_skip_defaults</code> or something similar.</li> </ul> </li> <li>New documentation section about using <code>response_model_skip_defaults</code>.</li> <li>PR #248 by @wshayes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0240","title":"0.24.0","text":"<ul> <li> <p>Add support for WebSockets with dependencies and parameters.</p> <ul> <li>Support included for:<ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> <li>...as these are compatible with the WebSockets protocol (e.g. <code>Body</code> is not).</li> </ul> </li> <li>Updated documentation for WebSockets.</li> <li>PR #178 by @jekirl.</li> </ul> </li> <li> <p>Upgrade the compatible version of Pydantic to <code>0.26.0</code>.</p> <ul> <li>This includes JSON Schema support for IP address and network objects, bug fixes, and other features.</li> <li>PR #247 by @euri10.</li> </ul> </li> </ul>"},{"location":"release-notes/#0230","title":"0.23.0","text":"<ul> <li> <p>Upgrade the compatible version of Starlette to <code>0.12.0</code>.</p> <ul> <li>This includes support for ASGI 3 (the latest version of the standard).</li> <li>It's now possible to use Starlette's <code>StreamingResponse</code> with iterators, like file-like objects (as those returned by <code>open()</code>).</li> <li>It's now possible to use the low level utility <code>iterate_in_threadpool</code> from <code>starlette.concurrency</code> (for advanced scenarios).</li> <li>PR #243.</li> </ul> </li> <li> <p>Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add <code>{your_origin}/docs/oauth2-redirect</code> to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc).</p> <ul> <li>For example, during development, it could be <code>http://localhost:8000/docs/oauth2-redirect</code>.</li> <li>Keep in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at <code>https://yourdomain.com/login/callback</code>.</li> <li>This is only to allow delegated authentication in the API docs with Swagger UI.</li> <li>PR #198 by @steinitzu.</li> </ul> </li> <li> <p>Make Swagger UI and ReDoc route handlers (path operations) be <code>async</code> functions instead of lambdas to improve performance. PR #241 by @Trim21.</p> </li> <li> <p>Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0220","title":"0.22.0","text":"<ul> <li> <p>Add support for <code>dependencies</code> parameter:</p> <ul> <li>A parameter in path operation decorators, for dependencies that should be executed but the return value is not important or not used in the path operation function.</li> <li>A parameter in the <code>.include_router()</code> method of ReadyAPI applications and routers, to include dependencies that should be executed in each path operation in a router.<ul> <li>This is useful, for example, to require authentication or permissions in specific group of path operations.</li> <li>Different <code>dependencies</code> can be applied to different routers.</li> </ul> </li> <li>These <code>dependencies</code> are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined.</li> <li>Dependencies declared in a router are executed first, then the ones defined in path operation decorators, and then the ones declared in normal parameters. They are all combined and executed.</li> <li>All this also supports using <code>Security</code> with <code>scopes</code> in those <code>dependencies</code> parameters, for more advanced OAuth 2.0 security scenarios with scopes.</li> <li>New documentation about dependencies in path operation decorators.</li> <li>New documentation about dependencies in the <code>include_router()</code> method.</li> <li>PR #235.</li> </ul> </li> <li> <p>Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using <code>path</code> convertors, to take a whole path as a parameter, like <code>/some/url/{p:path}</code>. PR #234 by @euri10.</p> </li> <li> <p>Make default parameter utilities exported from <code>readyapi</code> be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix <code>mypy</code> errors in ReadyAPI's users' code. Applies to <code>Path</code>, <code>Query</code>, <code>Header</code>, <code>Cookie</code>, <code>Body</code>, <code>Form</code>, <code>File</code>, <code>Depends</code>, and <code>Security</code>. PR #226 and PR #231.</p> </li> <li> <p>Separate development scripts <code>test.sh</code>, <code>lint.sh</code>, and <code>format.sh</code>. PR #232.</p> </li> <li> <p>Re-enable <code>black</code> formatting checks for Python 3.7. PR #229 by @zamiramir.</p> </li> </ul>"},{"location":"release-notes/#0210","title":"0.21.0","text":"<ul> <li> <p>On body parsing errors, raise <code>from</code> previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm.</p> </li> <li> <p>Use Python logger named \"<code>readyapi</code>\" instead of root logger. PR #222 by @euri10.</p> </li> <li> <p>Upgrade Pydantic to version 0.25. PR #225 by @euri10.</p> </li> <li> <p>Fix typo in routing. PR #221 by @djlambert.</p> </li> </ul>"},{"location":"release-notes/#0201","title":"0.20.1","text":"<ul> <li> <p>Add typing information to package including file <code>py.typed</code>. PR #209 by @meadsteve.</p> </li> <li> <p>Add ReadyAPI bot for Gitter. To automatically announce new releases. PR #189.</p> </li> </ul>"},{"location":"release-notes/#0200","title":"0.20.0","text":"<ul> <li> <p>Upgrade OAuth2:</p> <ul> <li>Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 <code>UNAUTHORIZED</code>, with <code>WWW-Authenticate</code> headers.</li> <li>Update, simplify, and improve all the security docs.</li> <li>Add new <code>scope_str</code> to <code>SecurityScopes</code> and update docs: OAuth2 scopes.</li> <li>Update docs, images, tests.</li> <li>PR #188.</li> </ul> </li> <li> <p>Include Hypercorn as an alternative ASGI server in the docs. PR #187.</p> </li> <li> <p>Add docs for Static Files and Templates. PR #186.</p> </li> <li> <p>Add docs for handling Response Cookies and Response Headers. PR #185.</p> </li> <li> <p>Fix typos in docs. PR #176 by @chdsbd.</p> </li> </ul>"},{"location":"release-notes/#0190","title":"0.19.0","text":"<ul> <li> <p>Rename path operation decorator parameter <code>content_type</code> to <code>response_class</code>. PR #183.</p> </li> <li> <p>Add docs:</p> <ul> <li>How to use the <code>jsonable_encoder</code> in JSON compatible encoder.</li> <li>How to Return a Response directly.</li> <li>Update how to use a Custom Response Class.</li> <li>PR #184.</li> </ul> </li> </ul>"},{"location":"release-notes/#0180","title":"0.18.0","text":"<ul> <li> <p>Add docs for HTTP Basic Auth. PR #177.</p> </li> <li> <p>Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175.</p> </li> <li> <p>Update dependencies for security. PR #174.</p> </li> <li> <p>Add docs for Middleware. PR #173.</p> </li> </ul>"},{"location":"release-notes/#0170","title":"0.17.0","text":"<ul> <li> <p>Make Flit publish from CI. PR #170.</p> </li> <li> <p>Add documentation about handling CORS (Cross-Origin Resource Sharing). PR #169.</p> </li> <li> <p>By default, encode by alias. This allows using Pydantic <code>alias</code> parameters working by default. PR #168.</p> </li> </ul>"},{"location":"release-notes/#0160","title":"0.16.0","text":"<ul> <li> <p>Upgrade path operation <code>docstring</code> parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration. PR #163.</p> </li> <li> <p>Refactor internal usage of Pydantic to use correct data types. PR #164.</p> </li> <li> <p>Upgrade Pydantic to version <code>0.23</code>. PR #160 by @euri10.</p> </li> <li> <p>Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels.</p> </li> <li> <p>Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto.</p> </li> </ul>"},{"location":"release-notes/#0150","title":"0.15.0","text":"<ul> <li> <p>Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads. PR #158.</p> </li> <li> <p>Add docs for: Additional Status Codes. PR #156.</p> </li> </ul>"},{"location":"release-notes/#0140","title":"0.14.0","text":"<ul> <li> <p>Improve automatically generated names of path operations in OpenAPI (in API docs). A function <code>read_items</code> instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155.</p> </li> <li> <p>Add docs for: Testing ReadyAPI. PR #151.</p> </li> <li> <p>Update <code>/docs</code> Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes.</p> </li> <li> <p>Update development dependencies, <code>Pipfile.lock</code>. PR #150.</p> </li> <li> <p>Include Falcon and Hug in: Alternatives, Inspiration and Comparisons.</p> </li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Improve/upgrade OAuth2 scopes support with <code>SecurityScopes</code>:<ul> <li><code>SecurityScopes</code> can be declared as a parameter like <code>Request</code>, to get the scopes of all super-dependencies/dependants.</li> <li>Improve <code>Security</code> handling, merging scopes when declaring <code>SecurityScopes</code>.</li> <li>Allow using <code>SecurityBase</code> (like <code>OAuth2</code>) classes with <code>Depends</code> and still document them. <code>Security</code> now is needed only to declare <code>scopes</code>.</li> <li>Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens.</li> <li>New docs about: OAuth2 scopes.</li> <li>PR #141.</li> </ul> </li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li> <p>Fix bug: handling additional <code>responses</code> in <code>APIRouter.include_router()</code>. PR #140.</p> </li> <li> <p>Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari.</p> </li> <li> <p>Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud.</p> </li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Add additional <code>responses</code> parameter to path operation decorators to extend responses in OpenAPI (and API docs).<ul> <li>It also allows extending existing responses generated from <code>response_model</code>, declare other media types (like images), etc.</li> <li>The new documentation is here: Additional Responses.</li> <li><code>responses</code> can also be added to <code>.include_router()</code>, the updated docs are here: Bigger Applications.</li> <li>PR #97 originally initiated by @barsi.</li> </ul> </li> <li>Update <code>scripts/test-cov-html.sh</code> to allow passing extra parameters like <code>-vv</code>, for development.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li> <p>Add <code>auto_error</code> parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134.</p> </li> <li> <p>Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri.</p> </li> <li> <p>Fix duplicate dependency in <code>pyproject.toml</code>. PR #128 by @zxalif.</p> </li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li> <p>Add Gitter chat, badge, links, etc. https://gitter.im/khulnasoft/readyapi . PR #117.</p> </li> <li> <p>Add docs about Extending OpenAPI. PR #126.</p> </li> <li> <p>Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed.</p> </li> <li> <p>Fix duplicated param variable creation. PR #123 by @yihuang.</p> </li> <li> <p>Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders.</p> </li> <li> <p>Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear.</p> </li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li> <p>Fix OpenAPI (JSON Schema) for declarations of Python <code>Union</code> (JSON Schema <code>additionalProperties</code>). PR #121.</p> </li> <li> <p>Update Background Tasks with a note on Celery.</p> </li> <li> <p>Document response models using unions and lists, updated at: Extra Models. PR #108.</p> </li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add docs and tests for encode/databases. New docs at: Async SQL (Relational) Databases. PR #107.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li> <p>Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here. PR #103.</p> </li> <li> <p>Add support for <code>.websocket_route()</code> in <code>APIRouter</code>. PR #100 by @euri10.</p> </li> <li> <p>New docs section about Events: startup - shutdown. PR #99.</p> </li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Document receiving Multiple values with the same query parameter and Duplicate headers. PR #95.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li> <p>Upgrade compatible Pydantic version to <code>0.21.0</code>. PR #90.</p> </li> <li> <p>Add documentation for: Application Configuration.</p> </li> <li> <p>Fix typo in docs. PR #76 by @matthewhegarty.</p> </li> <li> <p>Fix link in \"Deployment\" to \"Bigger Applications\".</p> </li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li> <p>Make development scripts executable. PR #76 by @euri10.</p> </li> <li> <p>Add support for adding <code>tags</code> in <code>app.include_router()</code>. PR #55 by @euri10. Documentation updated in the section: Bigger Applications.</p> </li> <li> <p>Update docs related to Uvicorn to use new <code>--reload</code> option from version <code>0.5.x</code>. PR #74.</p> </li> <li> <p>Update <code>isort</code> imports and scripts to be compatible with newer versions. PR #75.</p> </li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":"<ul> <li> <p>Update technical details about <code>async def</code> handling with respect to previous frameworks. PR #64 by @haizaar.</p> </li> <li> <p>Add deployment documentation for Docker in Raspberry Pi and other architectures.</p> </li> <li> <p>Trigger Docker images build on Travis CI automatically. PR #65.</p> </li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":"<ul> <li>Add support for <code>UploadFile</code> in <code>File</code> parameter annotations.<ul> <li>This includes a file-like interface.</li> <li>Here's the updated documentation for declaring <code>File</code> parameters with <code>UploadFile</code>.</li> <li>And here's the updated documentation for using <code>Form</code> parameters mixed with <code>File</code> parameters, supporting <code>bytes</code> and <code>UploadFile</code> at the same time.</li> <li>PR #63.</li> </ul> </li> </ul>"},{"location":"release-notes/#064","title":"0.6.4","text":"<ul> <li> <p>Add technical details about <code>async def</code> handling to docs. PR #61.</p> </li> <li> <p>Add docs for Debugging ReadyAPI applications in editors.</p> </li> <li> <p>Clarify Bigger Applications deployed with Docker.</p> </li> <li> <p>Fix typos in docs.</p> </li> <li> <p>Add section about History, Design and Future.</p> </li> <li> <p>Add docs for using WebSockets with ReadyAPI. PR #62.</p> </li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":"<ul> <li>Add Favicons to docs. PR #53.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":"<ul> <li> <p>Introduce new project generator based on ReadyAPI and PostgreSQL: https://github.com/khulnasoft/full-stack-readyapi-postgresql. PR #52.</p> </li> <li> <p>Update SQL tutorial with SQLAlchemy, using <code>Depends</code> to improve editor support and reduce code repetition. PR #52.</p> </li> <li> <p>Improve middleware naming in tutorial for SQL with SQLAlchemy https://readyapi.github.io/tutorial/sql-databases/.</p> </li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":"<ul> <li>Add docs for GraphQL: https://readyapi.github.io/advanced/graphql/. PR #48.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<ul> <li> <p>Update SQL with SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using the new official <code>request.state</code>. PR #45.</p> </li> <li> <p>Upgrade Starlette to version <code>0.11.1</code> and add required compatibility changes. PR #44.</p> </li> </ul>"},{"location":"release-notes/#051","title":"0.5.1","text":"<ul> <li> <p>Add section about helping and getting help with ReadyAPI.</p> </li> <li> <p>Add note about path operations order in docs.</p> </li> <li> <p>Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41.</p> </li> <li> <p>Add Development - Contributing section to the docs. PR #42.</p> </li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":"<ul> <li> <p>Add new <code>HTTPException</code> with support for custom headers. With new documentation for handling errors at: https://readyapi.github.io/tutorial/handling-errors/. PR #35.</p> </li> <li> <p>Add documentation to use Starlette <code>Request</code> object directly. Check #25 by @euri10.</p> </li> <li> <p>Add issue templates to simplify reporting bugs, getting help, etc: #34.</p> </li> <li> <p>Update example for the SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using middleware and database session attached to request.</p> </li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Add <code>openapi_prefix</code>, support for reverse proxy and mounting sub-applications. See the docs at https://readyapi.github.io/advanced/sub-applications-proxy/: #26 by @kabirkhan.</p> </li> <li> <p>Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite.</p> </li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy: #30.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Fix <code>jsonable_encoder</code> for Pydantic models with <code>Config</code> but without <code>json_encoders</code>: #29.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li> <p>Fix typos in Security section: #24 by @kkinder.</p> </li> <li> <p>Add support for Pydantic custom JSON encoders: #21 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0119","title":"0.1.19","text":"<ul> <li>Upgrade Starlette version to the current latest <code>0.10.1</code>: #17 by @euri10.</li> </ul>"}]}